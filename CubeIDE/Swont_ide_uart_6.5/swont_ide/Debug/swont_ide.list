
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c60  08007c60  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c68  08007c68  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c6c  08007c6c  00017c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013634  20000088  08007cf8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200136bc  08007cf8  000236bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001497b  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037be  00000000  00000000  00034a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  000381f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  000394d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000069f9  00000000  00000000  0003a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3eb  00000000  00000000  00040fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf158  00000000  00000000  0005b3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a52c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005528  00000000  00000000  0012a57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007890 	.word	0x08007890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007890 	.word	0x08007890

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SDCardInit>:
 */

#include "sdcard.h"

Error SDCardInit()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800058a:	2201      	movs	r2, #1
 800058c:	491c      	ldr	r1, [pc, #112]	; (8000600 <SDCardInit+0x7c>)
 800058e:	481d      	ldr	r0, [pc, #116]	; (8000604 <SDCardInit+0x80>)
 8000590:	f005 ff6c 	bl	800646c <f_mount>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <SDCardInit+0x84>)
 800059a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <SDCardInit+0x84>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SDCardInit+0x24>
		return ERR_SDCARD_MOUNT;
 80005a4:	2308      	movs	r3, #8
 80005a6:	e026      	b.n	80005f6 <SDCardInit+0x72>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 80005a8:	463a      	mov	r2, r7
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4619      	mov	r1, r3
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <SDCardInit+0x7c>)
 80005b0:	f005 ffa2 	bl	80064f8 <f_getfree>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <SDCardInit+0x84>)
 80005ba:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <SDCardInit+0x84>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SDCardInit+0x44>
		return ERR_SDCARD_GETFREE;
 80005c4:	2309      	movs	r3, #9
 80005c6:	e016      	b.n	80005f6 <SDCardInit+0x72>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	3b02      	subs	r3, #2
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	8952      	ldrh	r2, [r2, #10]
 80005d2:	fb02 f303 	mul.w	r3, r2, r3
 80005d6:	60fb      	str	r3, [r7, #12]
	free_sectors = free_clusters * getFreeFs->csize;
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	895b      	ldrh	r3, [r3, #10]
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	60bb      	str	r3, [r7, #8]

	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	0859      	lsrs	r1, r3, #1
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	085b      	lsrs	r3, r3, #1
 80005ee:	461a      	mov	r2, r3
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <SDCardInit+0x88>)
 80005f2:	f000 f8b9 	bl	8000768 <myprintf>
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	08007a00 	.word	0x08007a00
 8000604:	200000a4 	.word	0x200000a4
 8000608:	200002d4 	.word	0x200002d4
 800060c:	08007a04 	.word	0x08007a04

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_DMA_Init+0x3c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a0b      	ldr	r2, [pc, #44]	; (800064c <MX_DMA_Init+0x3c>)
 8000620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_DMA_Init+0x3c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	2044      	movs	r0, #68	; 0x44
 8000638:	f000 fffd 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800063c:	2044      	movs	r0, #68	; 0x44
 800063e:	f001 f816 	bl	800166e <HAL_NVIC_EnableIRQ>

}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800

08000650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <MX_GPIO_Init+0x108>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a3a      	ldr	r2, [pc, #232]	; (8000758 <MX_GPIO_Init+0x108>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b38      	ldr	r3, [pc, #224]	; (8000758 <MX_GPIO_Init+0x108>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b34      	ldr	r3, [pc, #208]	; (8000758 <MX_GPIO_Init+0x108>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a33      	ldr	r2, [pc, #204]	; (8000758 <MX_GPIO_Init+0x108>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <MX_GPIO_Init+0x108>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <MX_GPIO_Init+0x108>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <MX_GPIO_Init+0x108>)
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <MX_GPIO_Init+0x108>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0310 	and.w	r3, r3, #16
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b26      	ldr	r3, [pc, #152]	; (8000758 <MX_GPIO_Init+0x108>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a25      	ldr	r2, [pc, #148]	; (8000758 <MX_GPIO_Init+0x108>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_GPIO_Init+0x108>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2102      	movs	r1, #2
 80006da:	4820      	ldr	r0, [pc, #128]	; (800075c <MX_GPIO_Init+0x10c>)
 80006dc:	f001 fd10 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80006e6:	481e      	ldr	r0, [pc, #120]	; (8000760 <MX_GPIO_Init+0x110>)
 80006e8:	f001 fd0a 	bl	8002100 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f2:	481c      	ldr	r0, [pc, #112]	; (8000764 <MX_GPIO_Init+0x114>)
 80006f4:	f001 fd04 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_GPIO_Init+0x10c>)
 8000710:	f001 fb5a 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000714:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000718:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_GPIO_Init+0x110>)
 800072e:	f001 fb4b 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_GPIO_Init+0x114>)
 800074c:	f001 fb3c 	bl	8001dc8 <HAL_GPIO_Init>

}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000
 8000760:	40021000 	.word	0x40021000
 8000764:	40020400 	.word	0x40020400

08000768 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000768:	b40f      	push	{r0, r1, r2, r3}
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <myprintf+0x44>)
 8000780:	f006 f8a0 	bl	80068c4 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <myprintf+0x44>)
 8000786:	f7ff fd23 	bl	80001d0 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	b29a      	uxth	r2, r3
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	4905      	ldr	r1, [pc, #20]	; (80007ac <myprintf+0x44>)
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <myprintf+0x48>)
 800079a:	f003 fbf8 	bl	8003f8e <HAL_UART_Transmit>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007a8:	b004      	add	sp, #16
 80007aa:	4770      	bx	lr
 80007ac:	200006e8 	.word	0x200006e8
 80007b0:	20000924 	.word	0x20000924

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fdef 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f851 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f7ff ff45 	bl	8000650 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c6:	f7ff ff23 	bl	8000610 <MX_DMA_Init>
  MX_TIM1_Init();
 80007ca:	f000 fb3d 	bl	8000e48 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007ce:	f000 fb8b 	bl	8000ee8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 fca1 	bl	8001118 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007d6:	f000 f8c9 	bl	800096c <MX_SPI1_Init>
  MX_FATFS_Init();
 80007da:	f004 fc1f 	bl	800501c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  SDCardInit(); //Init SD Card
 80007de:	f7ff fed1 	bl	8000584 <SDCardInit>

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80007e2:	f000 fd3d 	bl	8001260 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 fd8c 	bl	8001304 <UB_VGA_FillScreen>
//  UB_VGA_SetPixel(10,16,VGA_COL_BLUE);
//  UB_VGA_SetPixel(0,0,0x00);
//  UB_VGA_SetPixel(319,,0x00);
  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	e008      	b.n	8000804 <main+0x50>
	  input.line_rx_buffer[i] = 0;
 80007f2:	4a19      	ldr	r2, [pc, #100]	; (8000858 <main+0xa4>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4413      	add	r3, r2
 80007f8:	3301      	adds	r3, #1
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3301      	adds	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800080a:	dbf2      	blt.n	80007f2 <main+0x3e>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <main+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <main+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <main+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000822:	2201      	movs	r2, #1
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <main+0xa4>)
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <main+0xa8>)
 8000828:	f003 fc4a 	bl	80040c0 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 800082c:	23ff      	movs	r3, #255	; 0xff
 800082e:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <main+0xa4>)
 8000832:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000836:	2bff      	cmp	r3, #255	; 0xff
 8000838:	d1fa      	bne.n	8000830 <main+0x7c>
	  {
		  // Do some stuff
		  printf("yes\n");
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <main+0xac>)
 800083c:	f006 f80e 	bl	800685c <puts>
		  colorTest = ~colorTest; // Toggle screen color
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	43db      	mvns	r3, r3
 8000844:	70fb      	strb	r3, [r7, #3]
		  UB_VGA_FillScreen(colorTest);
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fd5b 	bl	8001304 <UB_VGA_FillScreen>

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 800084e:	4b02      	ldr	r3, [pc, #8]	; (8000858 <main+0xa4>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8000856:	e7eb      	b.n	8000830 <main+0x7c>
 8000858:	200002d8 	.word	0x200002d8
 800085c:	20000924 	.word	0x20000924
 8000860:	08007ba4 	.word	0x08007ba4

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	; 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f005 ff7c 	bl	8006770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a27      	ldr	r2, [pc, #156]	; (8000930 <SystemClock_Config+0xcc>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <SystemClock_Config+0xd0>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <SystemClock_Config+0xd0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008d8:	23a8      	movs	r3, #168	; 0xa8
 80008da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fc23 	bl	8002134 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f4:	f000 f832 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000904:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2105      	movs	r1, #5
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fe7a 	bl	8002610 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000922:	f000 f81b 	bl	800095c <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	; 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000940:	1d39      	adds	r1, r7, #4
 8000942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000946:	2201      	movs	r2, #1
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <__io_putchar+0x20>)
 800094a:	f003 fb20 	bl	8003f8e <HAL_UART_Transmit>
	return ch;												//Return the character
 800094e:	687b      	ldr	r3, [r7, #4]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000924 	.word	0x20000924

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_SPI1_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009a0:	2238      	movs	r2, #56	; 0x38
 80009a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009be:	f002 f847 	bl	8002a50 <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009c8:	f7ff ffc8 	bl	800095c <Error_Handler>
  }

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200007e8 	.word	0x200007e8
 80009d4:	40013000 	.word	0x40013000

080009d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <HAL_SPI_MspInit+0xc0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d149      	bne.n	8000a8e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a26      	ldr	r2, [pc, #152]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a4e:	23c0      	movs	r3, #192	; 0xc0
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <HAL_SPI_MspInit+0xc8>)
 8000a6a:	f001 f9ad 	bl	8001dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a6e:	2308      	movs	r3, #8
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a7e:	2305      	movs	r3, #5
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <HAL_SPI_MspInit+0xcc>)
 8000a8a:	f001 f99d 	bl	8001dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40013000 	.word	0x40013000
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 fc78 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b58:	4828      	ldr	r0, [pc, #160]	; (8000bfc <TIM2_IRQHandler+0xa8>)
 8000b5a:	f002 fb67 	bl	800322c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <TIM2_IRQHandler+0xa8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f06f 0208 	mvn.w	r2, #8
 8000b66:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000b72:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000b7c:	d905      	bls.n	8000b8a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000b84:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <TIM2_IRQHandler+0xb0>)
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000b88:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d802      	bhi.n	8000b98 <TIM2_IRQHandler+0x44>
 8000b92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b96:	e001      	b.n	8000b9c <TIM2_IRQHandler+0x48>
 8000b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9c:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <TIM2_IRQHandler+0xb4>)
 8000b9e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	2b23      	cmp	r3, #35	; 0x23
 8000ba6:	d927      	bls.n	8000bf8 <TIM2_IRQHandler+0xa4>
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	f240 2202 	movw	r2, #514	; 0x202
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d821      	bhi.n	8000bf8 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000bb4:	4a15      	ldr	r2, [pc, #84]	; (8000c0c <TIM2_IRQHandler+0xb8>)
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000bbc:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <TIM2_IRQHandler+0xb8>)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <TIM2_IRQHandler+0xbc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <TIM2_IRQHandler+0xbc>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <TIM2_IRQHandler+0xc0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <TIM2_IRQHandler+0xc0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f042 0201 	orr.w	r2, r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d005      	beq.n	8000bf8 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000bf4:	4a02      	ldr	r2, [pc, #8]	; (8000c00 <TIM2_IRQHandler+0xac>)
 8000bf6:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000884 	.word	0x20000884
 8000c00:	20013654 	.word	0x20013654
 8000c04:	20000964 	.word	0x20000964
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40026488 	.word	0x40026488
 8000c10:	40010000 	.word	0x40010000
 8000c14:	200008c4 	.word	0x200008c4

08000c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <USART2_IRQHandler+0x70>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b0a      	cmp	r3, #10
 8000c28:	d026      	beq.n	8000c78 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b0d      	cmp	r3, #13
 8000c2e:	d002      	beq.n	8000c36 <USART2_IRQHandler+0x1e>
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b2e      	cmp	r3, #46	; 0x2e
 8000c34:	d10e      	bne.n	8000c54 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <USART2_IRQHandler+0x74>)
 8000c38:	22ff      	movs	r2, #255	; 0xff
 8000c3a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <USART2_IRQHandler+0x74>)
 8000c40:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000c44:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <USART2_IRQHandler+0x74>)
 8000c46:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <USART2_IRQHandler+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000c52:	e011      	b.n	8000c78 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <USART2_IRQHandler+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <USART2_IRQHandler+0x74>)
 8000c5e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <USART2_IRQHandler+0x74>)
 8000c64:	4413      	add	r3, r2
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <USART2_IRQHandler+0x74>)
 8000c6c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <USART2_IRQHandler+0x74>)
 8000c74:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <USART2_IRQHandler+0x78>)
 8000c7a:	f003 fa77 	bl	800416c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	200002d8 	.word	0x200002d8
 8000c90:	20000924 	.word	0x20000924

08000c94 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <DMA2_Stream5_IRQHandler+0x48>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6a1a      	ldr	r2, [r3, #32]
 8000c9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10f      	bne.n	8000cc8 <DMA2_Stream5_IRQHandler+0x34>
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <DMA2_Stream5_IRQHandler+0x48>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6a1a      	ldr	r2, [r3, #32]
 8000cae:	f240 4344 	movw	r3, #1092	; 0x444
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d107      	bne.n	8000cc8 <DMA2_Stream5_IRQHandler+0x34>
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <DMA2_Stream5_IRQHandler+0x48>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <DMA2_Stream5_IRQHandler+0x48>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0201 	bic.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <DMA2_Stream5_IRQHandler+0x4c>)
 8000cca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000cce:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <DMA2_Stream5_IRQHandler+0x50>)
 8000cd2:	f000 fe0f 	bl	80018f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000844 	.word	0x20000844
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	200008c4 	.word	0x200008c4

08000ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
	}

return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fdfb 	bl	8000938 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
	}
	return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x50>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x16>
		heap_end = &end;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <_sbrk+0x50>)
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <_sbrk+0x54>)
 8000dd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <_sbrk+0x50>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <_sbrk+0x50>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4413      	add	r3, r2
 8000de8:	466a      	mov	r2, sp
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d907      	bls.n	8000dfe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000dee:	f005 fc95 	bl	800671c <__errno>
 8000df2:	4603      	mov	r3, r0
 8000df4:	220c      	movs	r2, #12
 8000df6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	e006      	b.n	8000e0c <_sbrk+0x48>
	}

	heap_end += incr;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <_sbrk+0x50>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <_sbrk+0x50>)
 8000e08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000840 	.word	0x20000840
 8000e18:	200136c0 	.word	0x200136c0

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <SystemInit+0x28>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <SystemInit+0x28>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SystemInit+0x28>)
 8000e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e36:	609a      	str	r2, [r3, #8]
#endif
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e66:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <MX_TIM1_Init+0x9c>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e78:	220b      	movs	r2, #11
 8000e7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8e:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e90:	f002 f890 	bl	8002fb4 <HAL_TIM_Base_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000e9a:	f7ff fd5f 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000eac:	f002 fb8c 	bl	80035c8 <HAL_TIM_ConfigClockSource>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000eb6:	f7ff fd51 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000ec8:	f002 ff84 	bl	8003dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ed2:	f7ff fd43 	bl	800095c <Error_Handler>
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000844 	.word	0x20000844
 8000ee4:	40010000 	.word	0x40010000

08000ee8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f20:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f32:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f34:	f002 f88d 	bl	8003052 <HAL_TIM_PWM_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f3e:	f7ff fd0d 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f52:	f002 ff3f 	bl	8003dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f5c:	f7ff fcfe 	bl	800095c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f60:	2360      	movs	r3, #96	; 0x60
 8000f62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000f64:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2208      	movs	r2, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f7a:	f002 fa5f 	bl	800343c <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f84:	f7ff fcea 	bl	800095c <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000f88:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	220c      	movs	r2, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000f96:	f002 fa51 	bl	800343c <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000fa0:	f7ff fcdc 	bl	800095c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <MX_TIM2_Init+0xcc>)
 8000fa6:	f000 f87f 	bl	80010a8 <HAL_TIM_MspPostInit>

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000884 	.word	0x20000884

08000fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <HAL_TIM_Base_MspInit+0x94>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d13c      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_TIM_Base_MspInit+0x98>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <HAL_TIM_Base_MspInit+0x98>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_TIM_Base_MspInit+0x98>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <HAL_TIM_Base_MspInit+0xa0>)
 8000fea:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 8000fee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000ff2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 8000ff6:	2240      	movs	r2, #64	; 0x40
 8000ff8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001006:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 800101c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001020:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 800102a:	f000 fb3b 	bl	80016a4 <HAL_DMA_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001034:	f7ff fc92 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <HAL_TIM_Base_MspInit+0x9c>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010000 	.word	0x40010000
 8001050:	40023800 	.word	0x40023800
 8001054:	200008c4 	.word	0x200008c4
 8001058:	40026488 	.word	0x40026488

0800105c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d115      	bne.n	800109a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_TIM_PWM_MspInit+0x48>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_TIM_PWM_MspInit+0x48>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_TIM_PWM_MspInit+0x48>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	201c      	movs	r0, #28
 8001090:	f000 fad1 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001094:	201c      	movs	r0, #28
 8001096:	f000 faea 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c8:	d11e      	bne.n	8001108 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_TIM_MspPostInit+0x68>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <HAL_TIM_MspPostInit+0x68>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_TIM_MspPostInit+0x68>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 80010e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	4804      	ldr	r0, [pc, #16]	; (8001114 <HAL_TIM_MspPostInit+0x6c>)
 8001104:	f000 fe60 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40020400 	.word	0x40020400

08001118 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_USART2_UART_Init+0x50>)
 8001120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_USART2_UART_Init+0x4c>)
 8001150:	f002 fed0 	bl	8003ef4 <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800115a:	f7ff fbff 	bl	800095c <Error_Handler>
  }

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000924 	.word	0x20000924
 8001168:	40004400 	.word	0x40004400

0800116c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <HAL_UART_MspInit+0x94>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d133      	bne.n	80011f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_UART_MspInit+0x98>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_UART_MspInit+0x98>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_UART_MspInit+0x98>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011c6:	230c      	movs	r3, #12
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d6:	2307      	movs	r3, #7
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_UART_MspInit+0x9c>)
 80011e2:	f000 fdf1 	bl	8001dc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2026      	movs	r0, #38	; 0x26
 80011ec:	f000 fa23 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f0:	2026      	movs	r0, #38	; 0x26
 80011f2:	f000 fa3c 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40004400 	.word	0x40004400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001212:	e003      	b.n	800121c <LoopCopyDataInit>

08001214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800121a:	3104      	adds	r1, #4

0800121c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001224:	d3f6      	bcc.n	8001214 <CopyDataInit>
  ldr  r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001228:	e002      	b.n	8001230 <LoopFillZerobss>

0800122a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800122a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800122c:	f842 3b04 	str.w	r3, [r2], #4

08001230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001234:	d3f9      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001236:	f7ff fdf1 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f005 fa75 	bl	8006728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fab9 	bl	80007b4 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001248:	08007c70 	.word	0x08007c70
  ldr  r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001250:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001254:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001258:	200136bc 	.word	0x200136bc

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <UB_VGA_Screen_Init+0x84>)
 8001266:	2200      	movs	r2, #0
 8001268:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <UB_VGA_Screen_Init+0x84>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <UB_VGA_Screen_Init+0x84>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <UB_VGA_Screen_Init+0x88>)
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800127e:	481b      	ldr	r0, [pc, #108]	; (80012ec <UB_VGA_Screen_Init+0x8c>)
 8001280:	f001 fec3 	bl	800300a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001284:	210c      	movs	r1, #12
 8001286:	4819      	ldr	r0, [pc, #100]	; (80012ec <UB_VGA_Screen_Init+0x8c>)
 8001288:	f001 ff0e 	bl	80030a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800128c:	2108      	movs	r1, #8
 800128e:	4817      	ldr	r0, [pc, #92]	; (80012ec <UB_VGA_Screen_Init+0x8c>)
 8001290:	f001 ff48 	bl	8003124 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <UB_VGA_Screen_Init+0x90>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <UB_VGA_Screen_Init+0x90>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <UB_VGA_Screen_Init+0x90>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <UB_VGA_Screen_Init+0x90>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80012b4:	490f      	ldr	r1, [pc, #60]	; (80012f4 <UB_VGA_Screen_Init+0x94>)
 80012b6:	f240 1341 	movw	r3, #321	; 0x141
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <UB_VGA_Screen_Init+0x98>)
 80012bc:	480f      	ldr	r0, [pc, #60]	; (80012fc <UB_VGA_Screen_Init+0x9c>)
 80012be:	f000 fa9f 	bl	8001800 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <UB_VGA_Screen_Init+0x9c>)
 80012c4:	f000 f9ee 	bl	80016a4 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <UB_VGA_Screen_Init+0x9c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <UB_VGA_Screen_Init+0x9c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0210 	orr.w	r2, r2, #16
 80012d6:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <UB_VGA_Screen_Init+0xa0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a01      	ldr	r2, [pc, #4]	; (80012e4 <UB_VGA_Screen_Init+0x84>)
 80012de:	6093      	str	r3, [r2, #8]
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20013654 	.word	0x20013654
 80012e8:	40020400 	.word	0x40020400
 80012ec:	20000884 	.word	0x20000884
 80012f0:	20000844 	.word	0x20000844
 80012f4:	20000964 	.word	0x20000964
 80012f8:	40021015 	.word	0x40021015
 80012fc:	200008c4 	.word	0x200008c4
 8001300:	40026488 	.word	0x40026488

08001304 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800130e:	2300      	movs	r3, #0
 8001310:	81bb      	strh	r3, [r7, #12]
 8001312:	e012      	b.n	800133a <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001314:	2300      	movs	r3, #0
 8001316:	81fb      	strh	r3, [r7, #14]
 8001318:	e008      	b.n	800132c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	89b9      	ldrh	r1, [r7, #12]
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f813 	bl	800134c <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	3301      	adds	r3, #1
 800132a:	81fb      	strh	r3, [r7, #14]
 800132c:	89fb      	ldrh	r3, [r7, #14]
 800132e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001332:	d3f2      	bcc.n	800131a <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001334:	89bb      	ldrh	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	81bb      	strh	r3, [r7, #12]
 800133a:	89bb      	ldrh	r3, [r7, #12]
 800133c:	2bef      	cmp	r3, #239	; 0xef
 800133e:	d9e9      	bls.n	8001314 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
 8001356:	460b      	mov	r3, r1
 8001358:	80bb      	strh	r3, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001364:	d301      	bcc.n	800136a <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	2bef      	cmp	r3, #239	; 0xef
 800136e:	d901      	bls.n	8001374 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001374:	88ba      	ldrh	r2, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	441a      	add	r2, r3
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	4413      	add	r3, r2
 8001384:	4904      	ldr	r1, [pc, #16]	; (8001398 <UB_VGA_SetPixel+0x4c>)
 8001386:	78fa      	ldrb	r2, [r7, #3]
 8001388:	54ca      	strb	r2, [r1, r3]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000964 	.word	0x20000964

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <HAL_Init+0x40>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_Init+0x40>)
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x40>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f92b 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 f808 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fb6a 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023c00 	.word	0x40023c00

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x54>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f943 	bl	800168a <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 f90b 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x5c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000000 	.word	0x20000000
 8001438:	20000008 	.word	0x20000008
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	20013660 	.word	0x20013660

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20013660 	.word	0x20013660

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff3e 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff31 	bl	80014e4 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff feda 	bl	8001468 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e099      	b.n	80017f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e0:	e00f      	b.n	8001702 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e2:	f7ff fec1 	bl	8001468 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d908      	bls.n	8001702 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2203      	movs	r2, #3
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e078      	b.n	80017f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e8      	bne.n	80016e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_DMA_Init+0x158>)
 800171c:	4013      	ands	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	2b04      	cmp	r3, #4
 800175a:	d107      	bne.n	800176c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4313      	orrs	r3, r2
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f023 0307 	bic.w	r3, r3, #7
 8001782:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4313      	orrs	r3, r2
 800178c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2b04      	cmp	r3, #4
 8001794:	d117      	bne.n	80017c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4313      	orrs	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fa91 	bl	8001cd0 <DMA_CheckFifoParam>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017c2:	2301      	movs	r3, #1
 80017c4:	e016      	b.n	80017f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa48 	bl	8001c64 <DMA_CalcBaseAndBitshift>
 80017d4:	4603      	mov	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	f010803f 	.word	0xf010803f

08001800 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_DMA_Start_IT+0x26>
 8001822:	2302      	movs	r3, #2
 8001824:	e040      	b.n	80018a8 <HAL_DMA_Start_IT+0xa8>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d12f      	bne.n	800189a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2202      	movs	r2, #2
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f9da 	bl	8001c08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	223f      	movs	r2, #63	; 0x3f
 800185a:	409a      	lsls	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0216 	orr.w	r2, r2, #22
 800186e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0208 	orr.w	r2, r2, #8
 8001886:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e005      	b.n	80018a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
 80018a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d004      	beq.n	80018ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00c      	b.n	80018e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2205      	movs	r2, #5
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001900:	4b8e      	ldr	r3, [pc, #568]	; (8001b3c <HAL_DMA_IRQHandler+0x248>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a8e      	ldr	r2, [pc, #568]	; (8001b40 <HAL_DMA_IRQHandler+0x24c>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0a9b      	lsrs	r3, r3, #10
 800190c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2208      	movs	r2, #8
 8001920:	409a      	lsls	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d01a      	beq.n	8001960 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0204 	bic.w	r2, r2, #4
 8001946:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	2208      	movs	r2, #8
 800194e:	409a      	lsls	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	2201      	movs	r2, #1
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d012      	beq.n	8001996 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001982:	2201      	movs	r2, #1
 8001984:	409a      	lsls	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	f043 0202 	orr.w	r2, r3, #2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2204      	movs	r2, #4
 800199c:	409a      	lsls	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d012      	beq.n	80019cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00b      	beq.n	80019cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b8:	2204      	movs	r2, #4
 80019ba:	409a      	lsls	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	f043 0204 	orr.w	r2, r3, #4
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2210      	movs	r2, #16
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d043      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03c      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	2210      	movs	r2, #16
 80019f0:	409a      	lsls	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d108      	bne.n	8001a24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d024      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
 8001a22:	e01f      	b.n	8001a64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01b      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	4798      	blx	r3
 8001a34:	e016      	b.n	8001a64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0208 	bic.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	2220      	movs	r2, #32
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 808f 	beq.w	8001b94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8087 	beq.w	8001b94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d136      	bne.n	8001b0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0216 	bic.w	r2, r2, #22
 8001aac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001abc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d103      	bne.n	8001ace <HAL_DMA_IRQHandler+0x1da>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0208 	bic.w	r2, r2, #8
 8001adc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	223f      	movs	r2, #63	; 0x3f
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d07e      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
        }
        return;
 8001b0a:	e079      	b.n	8001c00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01d      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d031      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
 8001b38:	e02c      	b.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
 8001b3a:	bf00      	nop
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
 8001b54:	e01e      	b.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10f      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0210 	bic.w	r2, r2, #16
 8001b72:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d032      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d022      	beq.n	8001bee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2205      	movs	r2, #5
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d307      	bcc.n	8001bdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f2      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x2cc>
 8001bda:	e000      	b.n	8001bde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bdc:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
 8001bfe:	e000      	b.n	8001c02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c00:	bf00      	nop
    }
  }
}
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	d108      	bne.n	8001c48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c46:	e007      	b.n	8001c58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	60da      	str	r2, [r3, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	3b10      	subs	r3, #16
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <DMA_CalcBaseAndBitshift+0x64>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c7e:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <DMA_CalcBaseAndBitshift+0x68>)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d909      	bls.n	8001ca6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	1d1a      	adds	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca4:	e007      	b.n	8001cb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	aaaaaaab 	.word	0xaaaaaaab
 8001ccc:	08007bc0 	.word	0x08007bc0

08001cd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d11f      	bne.n	8001d2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d856      	bhi.n	8001d9e <DMA_CheckFifoParam+0xce>
 8001cf0:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <DMA_CheckFifoParam+0x28>)
 8001cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf6:	bf00      	nop
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d1b 	.word	0x08001d1b
 8001d00:	08001d09 	.word	0x08001d09
 8001d04:	08001d9f 	.word	0x08001d9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d046      	beq.n	8001da2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d18:	e043      	b.n	8001da2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d22:	d140      	bne.n	8001da6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d28:	e03d      	b.n	8001da6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d32:	d121      	bne.n	8001d78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d837      	bhi.n	8001daa <DMA_CheckFifoParam+0xda>
 8001d3a:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <DMA_CheckFifoParam+0x70>)
 8001d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d40:	08001d51 	.word	0x08001d51
 8001d44:	08001d57 	.word	0x08001d57
 8001d48:	08001d51 	.word	0x08001d51
 8001d4c:	08001d69 	.word	0x08001d69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
      break;
 8001d54:	e030      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d025      	beq.n	8001dae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d66:	e022      	b.n	8001dae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d70:	d11f      	bne.n	8001db2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d76:	e01c      	b.n	8001db2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d903      	bls.n	8001d86 <DMA_CheckFifoParam+0xb6>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d003      	beq.n	8001d8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d84:	e018      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
      break;
 8001d8a:	e015      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9c:	e00b      	b.n	8001db6 <DMA_CheckFifoParam+0xe6>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e00a      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001da2:	bf00      	nop
 8001da4:	e008      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001da6:	bf00      	nop
 8001da8:	e006      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001daa:	bf00      	nop
 8001dac:	e004      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dae:	bf00      	nop
 8001db0:	e002      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
    }
  } 
  
  return status; 
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e16b      	b.n	80020bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 815a 	bne.w	80020b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d00b      	beq.n	8001e22 <HAL_GPIO_Init+0x5a>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e16:	2b11      	cmp	r3, #17
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d130      	bne.n	8001e84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 0201 	and.w	r2, r3, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0xfc>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	d123      	bne.n	8001f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80b4 	beq.w	80020b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b60      	ldr	r3, [pc, #384]	; (80020d4 <HAL_GPIO_Init+0x30c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a5f      	ldr	r2, [pc, #380]	; (80020d4 <HAL_GPIO_Init+0x30c>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b5d      	ldr	r3, [pc, #372]	; (80020d4 <HAL_GPIO_Init+0x30c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	; (80020d8 <HAL_GPIO_Init+0x310>)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_GPIO_Init+0x314>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02b      	beq.n	8001fee <HAL_GPIO_Init+0x226>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a51      	ldr	r2, [pc, #324]	; (80020e0 <HAL_GPIO_Init+0x318>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d025      	beq.n	8001fea <HAL_GPIO_Init+0x222>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a50      	ldr	r2, [pc, #320]	; (80020e4 <HAL_GPIO_Init+0x31c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01f      	beq.n	8001fe6 <HAL_GPIO_Init+0x21e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <HAL_GPIO_Init+0x320>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_Init+0x21a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4e      	ldr	r2, [pc, #312]	; (80020ec <HAL_GPIO_Init+0x324>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x216>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4d      	ldr	r2, [pc, #308]	; (80020f0 <HAL_GPIO_Init+0x328>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x212>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4c      	ldr	r2, [pc, #304]	; (80020f4 <HAL_GPIO_Init+0x32c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x20e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4b      	ldr	r2, [pc, #300]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x20a>
 8001fce:	2307      	movs	r3, #7
 8001fd0:	e00e      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	e00c      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	e00a      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fda:	2305      	movs	r3, #5
 8001fdc:	e008      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	f002 0203 	and.w	r2, r2, #3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002000:	4935      	ldr	r1, [pc, #212]	; (80020d8 <HAL_GPIO_Init+0x310>)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_GPIO_Init+0x334>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002032:	4a32      	ldr	r2, [pc, #200]	; (80020fc <HAL_GPIO_Init+0x334>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_GPIO_Init+0x334>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800205c:	4a27      	ldr	r2, [pc, #156]	; (80020fc <HAL_GPIO_Init+0x334>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_GPIO_Init+0x334>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002086:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_GPIO_Init+0x334>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_GPIO_Init+0x334>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <HAL_GPIO_Init+0x334>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b0f      	cmp	r3, #15
 80020c0:	f67f ae90 	bls.w	8001de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40013800 	.word	0x40013800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40021400 	.word	0x40021400
 80020f4:	40021800 	.word	0x40021800
 80020f8:	40021c00 	.word	0x40021c00
 80020fc:	40013c00 	.word	0x40013c00

08002100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
 800210c:	4613      	mov	r3, r2
 800210e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002110:	787b      	ldrb	r3, [r7, #1]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800211c:	e003      	b.n	8002126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	619a      	str	r2, [r3, #24]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e25e      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d075      	beq.n	800223e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002152:	4b88      	ldr	r3, [pc, #544]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b04      	cmp	r3, #4
 800215c:	d00c      	beq.n	8002178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215e:	4b85      	ldr	r3, [pc, #532]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002166:	2b08      	cmp	r3, #8
 8002168:	d112      	bne.n	8002190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216a:	4b82      	ldr	r3, [pc, #520]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002176:	d10b      	bne.n	8002190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	4b7e      	ldr	r3, [pc, #504]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d05b      	beq.n	800223c <HAL_RCC_OscConfig+0x108>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d157      	bne.n	800223c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e239      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d106      	bne.n	80021a8 <HAL_RCC_OscConfig+0x74>
 800219a:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a75      	ldr	r2, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e01d      	b.n	80021e4 <HAL_RCC_OscConfig+0xb0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x98>
 80021b2:	4b70      	ldr	r3, [pc, #448]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6f      	ldr	r2, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6c      	ldr	r2, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0xb0>
 80021cc:	4b69      	ldr	r3, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a68      	ldr	r2, [pc, #416]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b66      	ldr	r3, [pc, #408]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a65      	ldr	r2, [pc, #404]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff f93c 	bl	8001468 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f4:	f7ff f938 	bl	8001468 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1fe      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	4b5b      	ldr	r3, [pc, #364]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0xc0>
 8002212:	e014      	b.n	800223e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff f928 	bl	8001468 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221c:	f7ff f924 	bl	8001468 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1ea      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222e:	4b51      	ldr	r3, [pc, #324]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0xe8>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d063      	beq.n	8002312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800225e:	2b08      	cmp	r3, #8
 8002260:	d11c      	bne.n	800229c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	4b44      	ldr	r3, [pc, #272]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d116      	bne.n	800229c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_RCC_OscConfig+0x152>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e1be      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4937      	ldr	r1, [pc, #220]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	e03a      	b.n	8002312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a4:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_RCC_OscConfig+0x244>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7ff f8dd 	bl	8001468 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b2:	f7ff f8d9 	bl	8001468 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e19f      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4925      	ldr	r1, [pc, #148]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]
 80022e4:	e015      	b.n	8002312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_OscConfig+0x244>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7ff f8bc 	bl	8001468 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f4:	f7ff f8b8 	bl	8001468 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e17e      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d036      	beq.n	800238c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_RCC_OscConfig+0x248>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7ff f89c 	bl	8001468 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002334:	f7ff f898 	bl	8001468 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e15e      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x200>
 8002352:	e01b      	b.n	800238c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_OscConfig+0x248>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7ff f885 	bl	8001468 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002360:	e00e      	b.n	8002380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002362:	f7ff f881 	bl	8001468 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d907      	bls.n	8002380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e147      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
 8002374:	40023800 	.word	0x40023800
 8002378:	42470000 	.word	0x42470000
 800237c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ea      	bne.n	8002362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8097 	beq.w	80024c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b7d      	ldr	r3, [pc, #500]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a7c      	ldr	r2, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b7a      	ldr	r3, [pc, #488]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b77      	ldr	r3, [pc, #476]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d118      	bne.n	8002408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d6:	4b74      	ldr	r3, [pc, #464]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a73      	ldr	r2, [pc, #460]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e2:	f7ff f841 	bl	8001468 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ea:	f7ff f83d 	bl	8001468 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e103      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x2ea>
 8002410:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x324>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b05      	cmp	r3, #5
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x30c>
 8002426:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
 8002432:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a5b      	ldr	r2, [pc, #364]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0x324>
 8002440:	4b58      	ldr	r3, [pc, #352]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a57      	ldr	r2, [pc, #348]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
 800244c:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	4a54      	ldr	r2, [pc, #336]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d015      	beq.n	800248c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff f802 	bl	8001468 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fffe 	bl	8001468 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0c2      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247e:	4b49      	ldr	r3, [pc, #292]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0ee      	beq.n	8002468 <HAL_RCC_OscConfig+0x334>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7fe ffec 	bl	8001468 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe ffe8 	bl	8001468 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0ac      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1ee      	bne.n	8002494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024bc:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8098 	beq.w	8002602 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d2:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d05c      	beq.n	8002598 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d141      	bne.n	800256a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_RCC_OscConfig+0x478>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe ffbc 	bl	8001468 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe ffb8 	bl	8001468 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e07e      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	085b      	lsrs	r3, r3, #1
 800252a:	3b01      	subs	r3, #1
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	491b      	ldr	r1, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x478>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe ff91 	bl	8001468 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe ff8d 	bl	8001468 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e053      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x416>
 8002568:	e04b      	b.n	8002602 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_RCC_OscConfig+0x478>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe ff7a 	bl	8001468 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe ff76 	bl	8001468 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e03c      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x444>
 8002596:	e034      	b.n	8002602 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e02f      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_RCC_OscConfig+0x4d8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d11c      	bne.n	80025fe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d115      	bne.n	80025fe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d8:	4013      	ands	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10d      	bne.n	80025fe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d106      	bne.n	80025fe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0cc      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d90c      	bls.n	800264c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b8      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800266e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	494d      	ldr	r1, [pc, #308]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d044      	beq.n	8002730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d119      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e067      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4934      	ldr	r1, [pc, #208]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002700:	f7fe feb2 	bl	8001468 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	e00a      	b.n	800271e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002708:	f7fe feae 	bl	8001468 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e04f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 020c 	and.w	r2, r3, #12
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	429a      	cmp	r2, r3
 800272e:	d1eb      	bne.n	8002708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d20c      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e032      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002796:	f000 f821 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800279a:	4602      	mov	r2, r0
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	490a      	ldr	r1, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	5ccb      	ldrb	r3, [r1, r3]
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fe12 	bl	80013e0 <HAL_InitTick>

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023c00 	.word	0x40023c00
 80027cc:	40023800 	.word	0x40023800
 80027d0:	08007ba8 	.word	0x08007ba8
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e0:	b094      	sub	sp, #80	; 0x50
 80027e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	647b      	str	r3, [r7, #68]	; 0x44
 80027e8:	2300      	movs	r3, #0
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ec:	2300      	movs	r3, #0
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f4:	4b79      	ldr	r3, [pc, #484]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d00d      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x40>
 8002800:	2b08      	cmp	r3, #8
 8002802:	f200 80e1 	bhi.w	80029c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x34>
 800280a:	2b04      	cmp	r3, #4
 800280c:	d003      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x3a>
 800280e:	e0db      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002814:	e0db      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002816:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800281a:	e0d8      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800281c:	4b6f      	ldr	r3, [pc, #444]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002824:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002826:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d063      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002832:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	099b      	lsrs	r3, r3, #6
 8002838:	2200      	movs	r2, #0
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
 800283c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	0159      	lsls	r1, r3, #5
 800285c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002860:	0150      	lsls	r0, r2, #5
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4621      	mov	r1, r4
 8002868:	1a51      	subs	r1, r2, r1
 800286a:	6139      	str	r1, [r7, #16]
 800286c:	4629      	mov	r1, r5
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002880:	4659      	mov	r1, fp
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	4651      	mov	r1, sl
 8002886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288a:	4651      	mov	r1, sl
 800288c:	018a      	lsls	r2, r1, #6
 800288e:	4651      	mov	r1, sl
 8002890:	ebb2 0801 	subs.w	r8, r2, r1
 8002894:	4659      	mov	r1, fp
 8002896:	eb63 0901 	sbc.w	r9, r3, r1
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ae:	4690      	mov	r8, r2
 80028b0:	4699      	mov	r9, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	eb18 0303 	adds.w	r3, r8, r3
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	462b      	mov	r3, r5
 80028bc:	eb49 0303 	adc.w	r3, r9, r3
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ce:	4629      	mov	r1, r5
 80028d0:	024b      	lsls	r3, r1, #9
 80028d2:	4621      	mov	r1, r4
 80028d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028d8:	4621      	mov	r1, r4
 80028da:	024a      	lsls	r2, r1, #9
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e2:	2200      	movs	r2, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028ec:	f7fd fcc8 	bl	8000280 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4613      	mov	r3, r2
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f8:	e058      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	2200      	movs	r2, #0
 8002902:	4618      	mov	r0, r3
 8002904:	4611      	mov	r1, r2
 8002906:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002914:	4642      	mov	r2, r8
 8002916:	464b      	mov	r3, r9
 8002918:	f04f 0000 	mov.w	r0, #0
 800291c:	f04f 0100 	mov.w	r1, #0
 8002920:	0159      	lsls	r1, r3, #5
 8002922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002926:	0150      	lsls	r0, r2, #5
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4641      	mov	r1, r8
 800292e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002932:	4649      	mov	r1, r9
 8002934:	eb63 0b01 	sbc.w	fp, r3, r1
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002944:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002948:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800294c:	ebb2 040a 	subs.w	r4, r2, sl
 8002950:	eb63 050b 	sbc.w	r5, r3, fp
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	00eb      	lsls	r3, r5, #3
 800295e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002962:	00e2      	lsls	r2, r4, #3
 8002964:	4614      	mov	r4, r2
 8002966:	461d      	mov	r5, r3
 8002968:	4643      	mov	r3, r8
 800296a:	18e3      	adds	r3, r4, r3
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	464b      	mov	r3, r9
 8002970:	eb45 0303 	adc.w	r3, r5, r3
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002982:	4629      	mov	r1, r5
 8002984:	028b      	lsls	r3, r1, #10
 8002986:	4621      	mov	r1, r4
 8002988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800298c:	4621      	mov	r1, r4
 800298e:	028a      	lsls	r2, r1, #10
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002996:	2200      	movs	r2, #0
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	61fa      	str	r2, [r7, #28]
 800299c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a0:	f7fd fc6e 	bl	8000280 <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4613      	mov	r3, r2
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	3301      	adds	r3, #1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029c6:	e002      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3750      	adds	r7, #80	; 0x50
 80029d4:	46bd      	mov	sp, r7
 80029d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	007a1200 	.word	0x007a1200

080029e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000000 	.word	0x20000000

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff0 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0a9b      	lsrs	r3, r3, #10
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08007bb8 	.word	0x08007bb8

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a2c:	f7ff ffdc 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0b5b      	lsrs	r3, r3, #13
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4903      	ldr	r1, [pc, #12]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	08007bb8 	.word	0x08007bb8

08002a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e056      	b.n	8002b10 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7fd ffab 	bl	80009d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	ea42 0103 	orr.w	r1, r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	0c1b      	lsrs	r3, r3, #16
 8002ae0:	f003 0104 	and.w	r1, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	; 0x30
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b26:	2301      	movs	r3, #1
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_SPI_TransmitReceive+0x26>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e18a      	b.n	8002e54 <HAL_SPI_TransmitReceive+0x33c>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b46:	f7fe fc8f 	bl	8001468 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d00f      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0x70>
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b6e:	d107      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d103      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x68>
 8002b78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d003      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
 8002b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b86:	e15b      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_SPI_TransmitReceive+0x82>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_SPI_TransmitReceive+0x82>
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ba0:	e14e      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d003      	beq.n	8002bb6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	887a      	ldrh	r2, [r7, #2]
 8002bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	887a      	ldrh	r2, [r7, #2]
 8002bde:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d007      	beq.n	8002c0a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c12:	d178      	bne.n	8002d06 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_SPI_TransmitReceive+0x10a>
 8002c1c:	8b7b      	ldrh	r3, [r7, #26]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d166      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	1c9a      	adds	r2, r3, #2
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c46:	e053      	b.n	8002cf0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d11b      	bne.n	8002c8e <HAL_SPI_TransmitReceive+0x176>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d016      	beq.n	8002c8e <HAL_SPI_TransmitReceive+0x176>
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d113      	bne.n	8002c8e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	881a      	ldrh	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	1c9a      	adds	r2, r3, #2
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d119      	bne.n	8002cd0 <HAL_SPI_TransmitReceive+0x1b8>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d014      	beq.n	8002cd0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	b292      	uxth	r2, r2
 8002cb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cd0:	f7fe fbca 	bl	8001468 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d807      	bhi.n	8002cf0 <HAL_SPI_TransmitReceive+0x1d8>
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d003      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cee:	e0a7      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1a6      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x130>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1a1      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x130>
 8002d04:	e07c      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x1fc>
 8002d0e:	8b7b      	ldrh	r3, [r7, #26]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d16b      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	7812      	ldrb	r2, [r2, #0]
 8002d20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d3a:	e057      	b.n	8002dec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d11c      	bne.n	8002d84 <HAL_SPI_TransmitReceive+0x26c>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d017      	beq.n	8002d84 <HAL_SPI_TransmitReceive+0x26c>
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d114      	bne.n	8002d84 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	7812      	ldrb	r2, [r2, #0]
 8002d66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d119      	bne.n	8002dc6 <HAL_SPI_TransmitReceive+0x2ae>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d014      	beq.n	8002dc6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dc6:	f7fe fb4f 	bl	8001468 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d803      	bhi.n	8002dde <HAL_SPI_TransmitReceive+0x2c6>
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d102      	bne.n	8002de4 <HAL_SPI_TransmitReceive+0x2cc>
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dea:	e029      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1a2      	bne.n	8002d3c <HAL_SPI_TransmitReceive+0x224>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d19d      	bne.n	8002d3c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f893 	bl	8002f30 <SPI_EndRxTxTransaction>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e1c:	e010      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	e000      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3730      	adds	r7, #48	; 0x30
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e6c:	e04c      	b.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d048      	beq.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e76:	f7fe faf7 	bl	8001468 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d902      	bls.n	8002e8c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d13d      	bne.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea4:	d111      	bne.n	8002eca <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eae:	d004      	beq.n	8002eba <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb8:	d107      	bne.n	8002eca <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	d10f      	bne.n	8002ef4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e00f      	b.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d1a3      	bne.n	8002e6e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <SPI_EndRxTxTransaction+0x7c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <SPI_EndRxTxTransaction+0x80>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5a:	d112      	bne.n	8002f82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ff78 	bl	8002e5c <SPI_WaitFlagStateUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e00f      	b.n	8002fa2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d0f2      	beq.n	8002f82 <SPI_EndRxTxTransaction+0x52>
 8002f9c:	e000      	b.n	8002fa0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f9e:	bf00      	nop
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	165e9f81 	.word	0x165e9f81

08002fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e01d      	b.n	8003002 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd ffec 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f000 fbde 	bl	80037b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b06      	cmp	r3, #6
 800302a:	d007      	beq.n	800303c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e01d      	b.n	80030a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7fd ffef 	bl	800105c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	4619      	mov	r1, r3
 8003090:	4610      	mov	r0, r2
 8003092:	f000 fb8f 	bl	80037b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	6839      	ldr	r1, [r7, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fe64 	bl	8003d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a15      	ldr	r2, [pc, #84]	; (800311c <HAL_TIM_PWM_Start+0x74>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_TIM_PWM_Start+0x2c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a14      	ldr	r2, [pc, #80]	; (8003120 <HAL_TIM_PWM_Start+0x78>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_PWM_Start+0x30>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_TIM_PWM_Start+0x32>
 80030d8:	2300      	movs	r3, #0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b06      	cmp	r3, #6
 80030fe:	d007      	beq.n	8003110 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40010400 	.word	0x40010400

08003124 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d841      	bhi.n	80031b8 <HAL_TIM_PWM_Start_IT+0x94>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <HAL_TIM_PWM_Start_IT+0x18>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003171 	.word	0x08003171
 8003140:	080031b9 	.word	0x080031b9
 8003144:	080031b9 	.word	0x080031b9
 8003148:	080031b9 	.word	0x080031b9
 800314c:	08003183 	.word	0x08003183
 8003150:	080031b9 	.word	0x080031b9
 8003154:	080031b9 	.word	0x080031b9
 8003158:	080031b9 	.word	0x080031b9
 800315c:	08003195 	.word	0x08003195
 8003160:	080031b9 	.word	0x080031b9
 8003164:	080031b9 	.word	0x080031b9
 8003168:	080031b9 	.word	0x080031b9
 800316c:	080031a7 	.word	0x080031a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0202 	orr.w	r2, r2, #2
 800317e:	60da      	str	r2, [r3, #12]
      break;
 8003180:	e01b      	b.n	80031ba <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0204 	orr.w	r2, r2, #4
 8003190:	60da      	str	r2, [r3, #12]
      break;
 8003192:	e012      	b.n	80031ba <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0208 	orr.w	r2, r2, #8
 80031a2:	60da      	str	r2, [r3, #12]
      break;
 80031a4:	e009      	b.n	80031ba <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0210 	orr.w	r2, r2, #16
 80031b4:	60da      	str	r2, [r3, #12]
      break;
 80031b6:	e000      	b.n	80031ba <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80031b8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	6839      	ldr	r1, [r7, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fde0 	bl	8003d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a15      	ldr	r2, [pc, #84]	; (8003224 <HAL_TIM_PWM_Start_IT+0x100>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <HAL_TIM_PWM_Start_IT+0xb8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a14      	ldr	r2, [pc, #80]	; (8003228 <HAL_TIM_PWM_Start_IT+0x104>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_PWM_Start_IT+0xbc>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_TIM_PWM_Start_IT+0xbe>
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b06      	cmp	r3, #6
 8003206:	d007      	beq.n	8003218 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40010400 	.word	0x40010400

0800322c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d122      	bne.n	8003288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b02      	cmp	r3, #2
 800324e:	d11b      	bne.n	8003288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0202 	mvn.w	r2, #2
 8003258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa82 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa74 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fa85 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b04      	cmp	r3, #4
 8003294:	d122      	bne.n	80032dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d11b      	bne.n	80032dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0204 	mvn.w	r2, #4
 80032ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fa58 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 80032c8:	e005      	b.n	80032d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fa4a 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fa5b 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d122      	bne.n	8003330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d11b      	bne.n	8003330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0208 	mvn.w	r2, #8
 8003300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2204      	movs	r2, #4
 8003306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fa2e 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 800331c:	e005      	b.n	800332a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa20 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fa31 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b10      	cmp	r3, #16
 800333c:	d122      	bne.n	8003384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b10      	cmp	r3, #16
 800334a:	d11b      	bne.n	8003384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0210 	mvn.w	r2, #16
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2208      	movs	r2, #8
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa04 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9f6 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fa07 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10e      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d107      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0201 	mvn.w	r2, #1
 80033a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f9d0 	bl	8003750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d10e      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c8:	2b80      	cmp	r3, #128	; 0x80
 80033ca:	d107      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fd82 	bl	8003ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f9cc 	bl	80037a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b20      	cmp	r3, #32
 8003414:	d10e      	bne.n	8003434 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b20      	cmp	r3, #32
 8003422:	d107      	bne.n	8003434 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0220 	mvn.w	r2, #32
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fd4c 	bl	8003ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003452:	2302      	movs	r3, #2
 8003454:	e0b4      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	f200 809f 	bhi.w	80035ac <HAL_TIM_PWM_ConfigChannel+0x170>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	080034a9 	.word	0x080034a9
 8003478:	080035ad 	.word	0x080035ad
 800347c:	080035ad 	.word	0x080035ad
 8003480:	080035ad 	.word	0x080035ad
 8003484:	080034e9 	.word	0x080034e9
 8003488:	080035ad 	.word	0x080035ad
 800348c:	080035ad 	.word	0x080035ad
 8003490:	080035ad 	.word	0x080035ad
 8003494:	0800352b 	.word	0x0800352b
 8003498:	080035ad 	.word	0x080035ad
 800349c:	080035ad 	.word	0x080035ad
 80034a0:	080035ad 	.word	0x080035ad
 80034a4:	0800356b 	.word	0x0800356b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fa20 	bl	80038f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0204 	bic.w	r2, r2, #4
 80034d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6999      	ldr	r1, [r3, #24]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	619a      	str	r2, [r3, #24]
      break;
 80034e6:	e062      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fa70 	bl	80039d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6999      	ldr	r1, [r3, #24]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	021a      	lsls	r2, r3, #8
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	619a      	str	r2, [r3, #24]
      break;
 8003528:	e041      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fac5 	bl	8003ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0208 	orr.w	r2, r2, #8
 8003544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0204 	bic.w	r2, r2, #4
 8003554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69d9      	ldr	r1, [r3, #28]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	61da      	str	r2, [r3, #28]
      break;
 8003568:	e021      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fb19 	bl	8003ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69d9      	ldr	r1, [r3, #28]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	021a      	lsls	r2, r3, #8
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	61da      	str	r2, [r3, #28]
      break;
 80035aa:	e000      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80035ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_TIM_ConfigClockSource+0x18>
 80035dc:	2302      	movs	r3, #2
 80035de:	e0b3      	b.n	8003748 <HAL_TIM_ConfigClockSource+0x180>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003606:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003618:	d03e      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0xd0>
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361e:	f200 8087 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x168>
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003626:	f000 8085 	beq.w	8003734 <HAL_TIM_ConfigClockSource+0x16c>
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362e:	d87f      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x168>
 8003630:	2b70      	cmp	r3, #112	; 0x70
 8003632:	d01a      	beq.n	800366a <HAL_TIM_ConfigClockSource+0xa2>
 8003634:	2b70      	cmp	r3, #112	; 0x70
 8003636:	d87b      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x168>
 8003638:	2b60      	cmp	r3, #96	; 0x60
 800363a:	d050      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x116>
 800363c:	2b60      	cmp	r3, #96	; 0x60
 800363e:	d877      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x168>
 8003640:	2b50      	cmp	r3, #80	; 0x50
 8003642:	d03c      	beq.n	80036be <HAL_TIM_ConfigClockSource+0xf6>
 8003644:	2b50      	cmp	r3, #80	; 0x50
 8003646:	d873      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x168>
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d058      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x136>
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d86f      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x168>
 8003650:	2b30      	cmp	r3, #48	; 0x30
 8003652:	d064      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x156>
 8003654:	2b30      	cmp	r3, #48	; 0x30
 8003656:	d86b      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x168>
 8003658:	2b20      	cmp	r3, #32
 800365a:	d060      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x156>
 800365c:	2b20      	cmp	r3, #32
 800365e:	d867      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x168>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d05c      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x156>
 8003664:	2b10      	cmp	r3, #16
 8003666:	d05a      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003668:	e062      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f000 fb65 	bl	8003d48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800368c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	609a      	str	r2, [r3, #8]
      break;
 8003696:	e04e      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6899      	ldr	r1, [r3, #8]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f000 fb4e 	bl	8003d48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ba:	609a      	str	r2, [r3, #8]
      break;
 80036bc:	e03b      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 fac2 	bl	8003c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2150      	movs	r1, #80	; 0x50
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fb1b 	bl	8003d12 <TIM_ITRx_SetConfig>
      break;
 80036dc:	e02b      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f000 fae1 	bl	8003cb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2160      	movs	r1, #96	; 0x60
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fb0b 	bl	8003d12 <TIM_ITRx_SetConfig>
      break;
 80036fc:	e01b      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	461a      	mov	r2, r3
 800370c:	f000 faa2 	bl	8003c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fafb 	bl	8003d12 <TIM_ITRx_SetConfig>
      break;
 800371c:	e00b      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f000 faf2 	bl	8003d12 <TIM_ITRx_SetConfig>
      break;
 800372e:	e002      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003734:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a40      	ldr	r2, [pc, #256]	; (80038c8 <TIM_Base_SetConfig+0x114>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d00f      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a3d      	ldr	r2, [pc, #244]	; (80038cc <TIM_Base_SetConfig+0x118>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00b      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3c      	ldr	r2, [pc, #240]	; (80038d0 <TIM_Base_SetConfig+0x11c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3b      	ldr	r2, [pc, #236]	; (80038d4 <TIM_Base_SetConfig+0x120>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3a      	ldr	r2, [pc, #232]	; (80038d8 <TIM_Base_SetConfig+0x124>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d108      	bne.n	8003806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a2f      	ldr	r2, [pc, #188]	; (80038c8 <TIM_Base_SetConfig+0x114>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d027      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a2c      	ldr	r2, [pc, #176]	; (80038cc <TIM_Base_SetConfig+0x118>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d023      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <TIM_Base_SetConfig+0x11c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <TIM_Base_SetConfig+0x120>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <TIM_Base_SetConfig+0x124>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d017      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <TIM_Base_SetConfig+0x128>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <TIM_Base_SetConfig+0x12c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a26      	ldr	r2, [pc, #152]	; (80038e4 <TIM_Base_SetConfig+0x130>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <TIM_Base_SetConfig+0x134>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a24      	ldr	r2, [pc, #144]	; (80038ec <TIM_Base_SetConfig+0x138>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <TIM_Base_SetConfig+0x13c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <TIM_Base_SetConfig+0x114>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_Base_SetConfig+0xf8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a0c      	ldr	r2, [pc, #48]	; (80038d8 <TIM_Base_SetConfig+0x124>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d103      	bne.n	80038b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	615a      	str	r2, [r3, #20]
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40010400 	.word	0x40010400
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800
 80038e8:	40001800 	.word	0x40001800
 80038ec:	40001c00 	.word	0x40001c00
 80038f0:	40002000 	.word	0x40002000

080038f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0201 	bic.w	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0303 	bic.w	r3, r3, #3
 800392a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f023 0302 	bic.w	r3, r3, #2
 800393c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a20      	ldr	r2, [pc, #128]	; (80039cc <TIM_OC1_SetConfig+0xd8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_OC1_SetConfig+0x64>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <TIM_OC1_SetConfig+0xdc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d10c      	bne.n	8003972 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f023 0308 	bic.w	r3, r3, #8
 800395e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f023 0304 	bic.w	r3, r3, #4
 8003970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <TIM_OC1_SetConfig+0xd8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_OC1_SetConfig+0x8e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <TIM_OC1_SetConfig+0xdc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40010000 	.word	0x40010000
 80039d0:	40010400 	.word	0x40010400

080039d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f023 0210 	bic.w	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0320 	bic.w	r3, r3, #32
 8003a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <TIM_OC2_SetConfig+0xe4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <TIM_OC2_SetConfig+0x68>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a21      	ldr	r2, [pc, #132]	; (8003abc <TIM_OC2_SetConfig+0xe8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10d      	bne.n	8003a58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a17      	ldr	r2, [pc, #92]	; (8003ab8 <TIM_OC2_SetConfig+0xe4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_OC2_SetConfig+0x94>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a16      	ldr	r2, [pc, #88]	; (8003abc <TIM_OC2_SetConfig+0xe8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d113      	bne.n	8003a90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40010400 	.word	0x40010400

08003ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <TIM_OC3_SetConfig+0xe0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <TIM_OC3_SetConfig+0x66>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <TIM_OC3_SetConfig+0xe4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10d      	bne.n	8003b42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <TIM_OC3_SetConfig+0xe0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_OC3_SetConfig+0x92>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <TIM_OC3_SetConfig+0xe4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d113      	bne.n	8003b7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	621a      	str	r2, [r3, #32]
}
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	031b      	lsls	r3, r3, #12
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <TIM_OC4_SetConfig+0xa4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC4_SetConfig+0x68>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <TIM_OC4_SetConfig+0xa8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d109      	bne.n	8003c24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010400 	.word	0x40010400

08003c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f023 0201 	bic.w	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f023 030a 	bic.w	r3, r3, #10
 8003c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b087      	sub	sp, #28
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f023 0210 	bic.w	r2, r3, #16
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	031b      	lsls	r3, r3, #12
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b085      	sub	sp, #20
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f043 0307 	orr.w	r3, r3, #7
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	609a      	str	r2, [r3, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	609a      	str	r2, [r3, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	401a      	ands	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1a      	ldr	r2, [r3, #32]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e05a      	b.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d01d      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d018      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1b      	ldr	r2, [pc, #108]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1a      	ldr	r2, [pc, #104]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00e      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d009      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d004      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10c      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40000c00 	.word	0x40000c00
 8003ec0:	40010400 	.word	0x40010400
 8003ec4:	40014000 	.word	0x40014000
 8003ec8:	40001800 	.word	0x40001800

08003ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e03f      	b.n	8003f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd f926 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fba1 	bl	8004680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b088      	sub	sp, #32
 8003f92:	af02      	add	r7, sp, #8
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	f040 8083 	bne.w	80040b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Transmit+0x2e>
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e07b      	b.n	80040b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Transmit+0x40>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e074      	b.n	80040b8 <HAL_UART_Transmit+0x12a>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2221      	movs	r2, #33	; 0x21
 8003fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fa40 	bl	8001468 <HAL_GetTick>
 8003fe8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003ffe:	e042      	b.n	8004086 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	d122      	bne.n	800405e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f9c0 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e042      	b.n	80040b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004044:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d103      	bne.n	8004056 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3302      	adds	r3, #2
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	e017      	b.n	8004086 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3301      	adds	r3, #1
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	e013      	b.n	8004086 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	2180      	movs	r1, #128	; 0x80
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f99d 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e01f      	b.n	80040b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	60ba      	str	r2, [r7, #8]
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1b7      	bne.n	8004000 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	2140      	movs	r1, #64	; 0x40
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f984 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e006      	b.n	80040b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d140      	bne.n	800415c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_UART_Receive_IT+0x26>
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e039      	b.n	800415e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Receive_IT+0x38>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e032      	b.n	800415e <HAL_UART_Receive_IT+0x9e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2222      	movs	r2, #34	; 0x22
 800411c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004136:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0220 	orr.w	r2, r2, #32
 8004156:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10d      	bne.n	80041be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_UART_IRQHandler+0x52>
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9e0 	bl	800457c <UART_Receive_IT>
      return;
 80041bc:	e0d0      	b.n	8004360 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80b0 	beq.w	8004326 <HAL_UART_IRQHandler+0x1ba>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <HAL_UART_IRQHandler+0x70>
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80a5 	beq.w	8004326 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_UART_IRQHandler+0x90>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_UART_IRQHandler+0xb0>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	f043 0202 	orr.w	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_UART_IRQHandler+0xd0>
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	f043 0204 	orr.w	r2, r3, #4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00f      	beq.n	8004266 <HAL_UART_IRQHandler+0xfa>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <HAL_UART_IRQHandler+0xee>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	f043 0208 	orr.w	r2, r3, #8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d077      	beq.n	800435e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_UART_IRQHandler+0x11c>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f97a 	bl	800457c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <HAL_UART_IRQHandler+0x144>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d031      	beq.n	8004314 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8c3 	bl	800443c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d123      	bne.n	800430c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e0:	4a21      	ldr	r2, [pc, #132]	; (8004368 <HAL_UART_IRQHandler+0x1fc>)
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fd fae1 	bl	80018b0 <HAL_DMA_Abort_IT>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d016      	beq.n	8004322 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042fe:	4610      	mov	r0, r2
 8004300:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004302:	e00e      	b.n	8004322 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f845 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430a:	e00a      	b.n	8004322 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f841 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004312:	e006      	b.n	8004322 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f83d 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004320:	e01d      	b.n	800435e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004322:	bf00      	nop
    return;
 8004324:	e01b      	b.n	800435e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_UART_IRQHandler+0x1d6>
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8b0 	bl	80044a0 <UART_Transmit_IT>
    return;
 8004340:	e00e      	b.n	8004360 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <HAL_UART_IRQHandler+0x1f4>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d004      	beq.n	8004360 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f8f8 	bl	800454c <UART_EndTransmit_IT>
    return;
 800435c:	e000      	b.n	8004360 <HAL_UART_IRQHandler+0x1f4>
    return;
 800435e:	bf00      	nop
  }
}
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	08004479 	.word	0x08004479

0800436c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b8:	e02c      	b.n	8004414 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d028      	beq.n	8004414 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c8:	f7fd f84e 	bl	8001468 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d21d      	bcs.n	8004414 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e00f      	b.n	8004434 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	429a      	cmp	r2, r3
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	429a      	cmp	r2, r3
 8004430:	d0c3      	beq.n	80043ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004452:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff ff7e 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b21      	cmp	r3, #33	; 0x21
 80044b2:	d144      	bne.n	800453e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044bc:	d11a      	bne.n	80044f4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	1c9a      	adds	r2, r3, #2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	621a      	str	r2, [r3, #32]
 80044e6:	e00e      	b.n	8004506 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]
 80044f2:	e008      	b.n	8004506 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	1c59      	adds	r1, r3, #1
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6211      	str	r1, [r2, #32]
 80044fe:	781a      	ldrb	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4619      	mov	r1, r3
 8004514:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004528:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004538:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e000      	b.n	8004540 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004562:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff fefd 	bl	800436c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b22      	cmp	r3, #34	; 0x22
 800458e:	d171      	bne.n	8004674 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004598:	d123      	bne.n	80045e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10e      	bne.n	80045c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	1c9a      	adds	r2, r3, #2
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
 80045c4:	e029      	b.n	800461a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	; 0x28
 80045e0:	e01b      	b.n	800461a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6858      	ldr	r0, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	1c59      	adds	r1, r3, #1
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6291      	str	r1, [r2, #40]	; 0x28
 80045fa:	b2c2      	uxtb	r2, r0
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e00c      	b.n	800461a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	1c58      	adds	r0, r3, #1
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	6288      	str	r0, [r1, #40]	; 0x28
 8004612:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29b      	uxth	r3, r3
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4619      	mov	r1, r3
 8004628:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800462a:	2b00      	cmp	r3, #0
 800462c:	d120      	bne.n	8004670 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0220 	bic.w	r2, r2, #32
 800463c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800464c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fe8a 	bl	8004380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e002      	b.n	8004676 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e000      	b.n	8004676 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004674:	2302      	movs	r3, #2
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004684:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004688:	af00      	add	r7, sp, #0
 800468a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800469a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800469e:	68d9      	ldr	r1, [r3, #12]
 80046a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	ea40 0301 	orr.w	r3, r0, r1
 80046aa:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80046ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046da:	f021 010c 	bic.w	r1, r1, #12
 80046de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80046e8:	430b      	orrs	r3, r1
 80046ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046fc:	6999      	ldr	r1, [r3, #24]
 80046fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	ea40 0301 	orr.w	r3, r0, r1
 8004708:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800470a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004714:	f040 824a 	bne.w	8004bac <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004718:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b96      	ldr	r3, [pc, #600]	; (8004978 <UART_SetConfig+0x2f8>)
 8004720:	429a      	cmp	r2, r3
 8004722:	d006      	beq.n	8004732 <UART_SetConfig+0xb2>
 8004724:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b94      	ldr	r3, [pc, #592]	; (800497c <UART_SetConfig+0x2fc>)
 800472c:	429a      	cmp	r2, r3
 800472e:	f040 8129 	bne.w	8004984 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004732:	f7fe f979 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8004736:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800473a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004744:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004748:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800474c:	4622      	mov	r2, r4
 800474e:	462b      	mov	r3, r5
 8004750:	1891      	adds	r1, r2, r2
 8004752:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004756:	415b      	adcs	r3, r3
 8004758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800475c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004760:	4621      	mov	r1, r4
 8004762:	1851      	adds	r1, r2, r1
 8004764:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004768:	4629      	mov	r1, r5
 800476a:	414b      	adcs	r3, r1
 800476c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800477c:	4649      	mov	r1, r9
 800477e:	00cb      	lsls	r3, r1, #3
 8004780:	4641      	mov	r1, r8
 8004782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004786:	4641      	mov	r1, r8
 8004788:	00ca      	lsls	r2, r1, #3
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	4603      	mov	r3, r0
 8004790:	4622      	mov	r2, r4
 8004792:	189b      	adds	r3, r3, r2
 8004794:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004798:	462b      	mov	r3, r5
 800479a:	460a      	mov	r2, r1
 800479c:	eb42 0303 	adc.w	r3, r2, r3
 80047a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80047a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80047b0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80047b4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80047b8:	460b      	mov	r3, r1
 80047ba:	18db      	adds	r3, r3, r3
 80047bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047c0:	4613      	mov	r3, r2
 80047c2:	eb42 0303 	adc.w	r3, r2, r3
 80047c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047ca:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80047ce:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80047d2:	f7fb fd55 	bl	8000280 <__aeabi_uldivmod>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4b69      	ldr	r3, [pc, #420]	; (8004980 <UART_SetConfig+0x300>)
 80047dc:	fba3 2302 	umull	r2, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	011c      	lsls	r4, r3, #4
 80047e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80047ee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80047f2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80047f6:	4642      	mov	r2, r8
 80047f8:	464b      	mov	r3, r9
 80047fa:	1891      	adds	r1, r2, r2
 80047fc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004800:	415b      	adcs	r3, r3
 8004802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004806:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800480a:	4641      	mov	r1, r8
 800480c:	1851      	adds	r1, r2, r1
 800480e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004812:	4649      	mov	r1, r9
 8004814:	414b      	adcs	r3, r1
 8004816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004826:	4659      	mov	r1, fp
 8004828:	00cb      	lsls	r3, r1, #3
 800482a:	4651      	mov	r1, sl
 800482c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004830:	4651      	mov	r1, sl
 8004832:	00ca      	lsls	r2, r1, #3
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	4603      	mov	r3, r0
 800483a:	4642      	mov	r2, r8
 800483c:	189b      	adds	r3, r3, r2
 800483e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004842:	464b      	mov	r3, r9
 8004844:	460a      	mov	r2, r1
 8004846:	eb42 0303 	adc.w	r3, r2, r3
 800484a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800484e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800485a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800485e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004862:	460b      	mov	r3, r1
 8004864:	18db      	adds	r3, r3, r3
 8004866:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800486a:	4613      	mov	r3, r2
 800486c:	eb42 0303 	adc.w	r3, r2, r3
 8004870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004874:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004878:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800487c:	f7fb fd00 	bl	8000280 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4611      	mov	r1, r2
 8004886:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <UART_SetConfig+0x300>)
 8004888:	fba3 2301 	umull	r2, r3, r3, r1
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	2264      	movs	r2, #100	; 0x64
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	1acb      	subs	r3, r1, r3
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800489c:	4b38      	ldr	r3, [pc, #224]	; (8004980 <UART_SetConfig+0x300>)
 800489e:	fba3 2302 	umull	r2, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048aa:	441c      	add	r4, r3
 80048ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048b0:	2200      	movs	r2, #0
 80048b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80048b6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80048ba:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80048be:	4642      	mov	r2, r8
 80048c0:	464b      	mov	r3, r9
 80048c2:	1891      	adds	r1, r2, r2
 80048c4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80048c8:	415b      	adcs	r3, r3
 80048ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80048ce:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80048d2:	4641      	mov	r1, r8
 80048d4:	1851      	adds	r1, r2, r1
 80048d6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80048da:	4649      	mov	r1, r9
 80048dc:	414b      	adcs	r3, r1
 80048de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80048ee:	4659      	mov	r1, fp
 80048f0:	00cb      	lsls	r3, r1, #3
 80048f2:	4651      	mov	r1, sl
 80048f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f8:	4651      	mov	r1, sl
 80048fa:	00ca      	lsls	r2, r1, #3
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	4603      	mov	r3, r0
 8004902:	4642      	mov	r2, r8
 8004904:	189b      	adds	r3, r3, r2
 8004906:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800490a:	464b      	mov	r3, r9
 800490c:	460a      	mov	r2, r1
 800490e:	eb42 0303 	adc.w	r3, r2, r3
 8004912:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004916:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004922:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004926:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800492a:	460b      	mov	r3, r1
 800492c:	18db      	adds	r3, r3, r3
 800492e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004932:	4613      	mov	r3, r2
 8004934:	eb42 0303 	adc.w	r3, r2, r3
 8004938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800493c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004940:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004944:	f7fb fc9c 	bl	8000280 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <UART_SetConfig+0x300>)
 800494e:	fba3 1302 	umull	r1, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2164      	movs	r1, #100	; 0x64
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	3332      	adds	r3, #50	; 0x32
 8004960:	4a07      	ldr	r2, [pc, #28]	; (8004980 <UART_SetConfig+0x300>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 0207 	and.w	r2, r3, #7
 800496c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4422      	add	r2, r4
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	e349      	b.n	800500c <UART_SetConfig+0x98c>
 8004978:	40011000 	.word	0x40011000
 800497c:	40011400 	.word	0x40011400
 8004980:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7fe f83c 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8004988:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800498c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004990:	2200      	movs	r2, #0
 8004992:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004996:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800499a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800499e:	4622      	mov	r2, r4
 80049a0:	462b      	mov	r3, r5
 80049a2:	1891      	adds	r1, r2, r2
 80049a4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80049a8:	415b      	adcs	r3, r3
 80049aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80049b2:	4621      	mov	r1, r4
 80049b4:	eb12 0a01 	adds.w	sl, r2, r1
 80049b8:	4629      	mov	r1, r5
 80049ba:	eb43 0b01 	adc.w	fp, r3, r1
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049d2:	4692      	mov	sl, r2
 80049d4:	469b      	mov	fp, r3
 80049d6:	4623      	mov	r3, r4
 80049d8:	eb1a 0303 	adds.w	r3, sl, r3
 80049dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80049e0:	462b      	mov	r3, r5
 80049e2:	eb4b 0303 	adc.w	r3, fp, r3
 80049e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80049ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80049f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80049fa:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80049fe:	460b      	mov	r3, r1
 8004a00:	18db      	adds	r3, r3, r3
 8004a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a06:	4613      	mov	r3, r2
 8004a08:	eb42 0303 	adc.w	r3, r2, r3
 8004a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a10:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004a14:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004a18:	f7fb fc32 	bl	8000280 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4b61      	ldr	r3, [pc, #388]	; (8004ba8 <UART_SetConfig+0x528>)
 8004a22:	fba3 2302 	umull	r2, r3, r3, r2
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	011c      	lsls	r4, r3, #4
 8004a2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004a34:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004a38:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	1891      	adds	r1, r2, r2
 8004a42:	67b9      	str	r1, [r7, #120]	; 0x78
 8004a44:	415b      	adcs	r3, r3
 8004a46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a48:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	1851      	adds	r1, r2, r1
 8004a50:	6739      	str	r1, [r7, #112]	; 0x70
 8004a52:	4649      	mov	r1, r9
 8004a54:	414b      	adcs	r3, r1
 8004a56:	677b      	str	r3, [r7, #116]	; 0x74
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004a64:	4659      	mov	r1, fp
 8004a66:	00cb      	lsls	r3, r1, #3
 8004a68:	4651      	mov	r1, sl
 8004a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6e:	4651      	mov	r1, sl
 8004a70:	00ca      	lsls	r2, r1, #3
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	4642      	mov	r2, r8
 8004a7a:	189b      	adds	r3, r3, r2
 8004a7c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004a80:	464b      	mov	r3, r9
 8004a82:	460a      	mov	r2, r1
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004a8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004a98:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004a9c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	18db      	adds	r3, r3, r3
 8004aa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	eb42 0303 	adc.w	r3, r2, r3
 8004aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ab2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004ab6:	f7fb fbe3 	bl	8000280 <__aeabi_uldivmod>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4b39      	ldr	r3, [pc, #228]	; (8004ba8 <UART_SetConfig+0x528>)
 8004ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	2264      	movs	r2, #100	; 0x64
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	1acb      	subs	r3, r1, r3
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ad6:	4b34      	ldr	r3, [pc, #208]	; (8004ba8 <UART_SetConfig+0x528>)
 8004ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae4:	441c      	add	r4, r3
 8004ae6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004af0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004af4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004af8:	4642      	mov	r2, r8
 8004afa:	464b      	mov	r3, r9
 8004afc:	1891      	adds	r1, r2, r2
 8004afe:	6639      	str	r1, [r7, #96]	; 0x60
 8004b00:	415b      	adcs	r3, r3
 8004b02:	667b      	str	r3, [r7, #100]	; 0x64
 8004b04:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004b08:	4641      	mov	r1, r8
 8004b0a:	1851      	adds	r1, r2, r1
 8004b0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b0e:	4649      	mov	r1, r9
 8004b10:	414b      	adcs	r3, r1
 8004b12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004b20:	4659      	mov	r1, fp
 8004b22:	00cb      	lsls	r3, r1, #3
 8004b24:	4651      	mov	r1, sl
 8004b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2a:	4651      	mov	r1, sl
 8004b2c:	00ca      	lsls	r2, r1, #3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	4642      	mov	r2, r8
 8004b36:	189b      	adds	r3, r3, r2
 8004b38:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	460a      	mov	r2, r1
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004b48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004b54:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004b58:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	18db      	adds	r3, r3, r3
 8004b60:	653b      	str	r3, [r7, #80]	; 0x50
 8004b62:	4613      	mov	r3, r2
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	657b      	str	r3, [r7, #84]	; 0x54
 8004b6a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b6e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004b72:	f7fb fb85 	bl	8000280 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <UART_SetConfig+0x528>)
 8004b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	2164      	movs	r1, #100	; 0x64
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	3332      	adds	r3, #50	; 0x32
 8004b8e:	4a06      	ldr	r2, [pc, #24]	; (8004ba8 <UART_SetConfig+0x528>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	f003 0207 	and.w	r2, r3, #7
 8004b9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4422      	add	r2, r4
 8004ba2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ba4:	e232      	b.n	800500c <UART_SetConfig+0x98c>
 8004ba6:	bf00      	nop
 8004ba8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b8d      	ldr	r3, [pc, #564]	; (8004de8 <UART_SetConfig+0x768>)
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d006      	beq.n	8004bc6 <UART_SetConfig+0x546>
 8004bb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b8b      	ldr	r3, [pc, #556]	; (8004dec <UART_SetConfig+0x76c>)
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	f040 8117 	bne.w	8004df4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc6:	f7fd ff2f 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8004bca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004bd8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004bdc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004be0:	4622      	mov	r2, r4
 8004be2:	462b      	mov	r3, r5
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004be8:	415b      	adcs	r3, r3
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	eb12 0801 	adds.w	r8, r2, r1
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	eb43 0901 	adc.w	r9, r3, r1
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c10:	4690      	mov	r8, r2
 8004c12:	4699      	mov	r9, r3
 8004c14:	4623      	mov	r3, r4
 8004c16:	eb18 0303 	adds.w	r3, r8, r3
 8004c1a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004c1e:	462b      	mov	r3, r5
 8004c20:	eb49 0303 	adc.w	r3, r9, r3
 8004c24:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004c28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c34:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004c44:	4629      	mov	r1, r5
 8004c46:	008b      	lsls	r3, r1, #2
 8004c48:	4621      	mov	r1, r4
 8004c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c4e:	4621      	mov	r1, r4
 8004c50:	008a      	lsls	r2, r1, #2
 8004c52:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004c56:	f7fb fb13 	bl	8000280 <__aeabi_uldivmod>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4b64      	ldr	r3, [pc, #400]	; (8004df0 <UART_SetConfig+0x770>)
 8004c60:	fba3 2302 	umull	r2, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	011c      	lsls	r4, r3, #4
 8004c68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004c72:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004c76:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004c7a:	4642      	mov	r2, r8
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	1891      	adds	r1, r2, r2
 8004c80:	6439      	str	r1, [r7, #64]	; 0x40
 8004c82:	415b      	adcs	r3, r3
 8004c84:	647b      	str	r3, [r7, #68]	; 0x44
 8004c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	1851      	adds	r1, r2, r1
 8004c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c90:	4649      	mov	r1, r9
 8004c92:	414b      	adcs	r3, r1
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004ca2:	4659      	mov	r1, fp
 8004ca4:	00cb      	lsls	r3, r1, #3
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cac:	4651      	mov	r1, sl
 8004cae:	00ca      	lsls	r2, r1, #3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4642      	mov	r2, r8
 8004cb8:	189b      	adds	r3, r3, r2
 8004cba:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	460a      	mov	r2, r1
 8004cc2:	eb42 0303 	adc.w	r3, r2, r3
 8004cc6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004cca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004cd6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	008b      	lsls	r3, r1, #2
 8004cea:	4641      	mov	r1, r8
 8004cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	008a      	lsls	r2, r1, #2
 8004cf4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004cf8:	f7fb fac2 	bl	8000280 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4b3b      	ldr	r3, [pc, #236]	; (8004df0 <UART_SetConfig+0x770>)
 8004d02:	fba3 1302 	umull	r1, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2164      	movs	r1, #100	; 0x64
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	3332      	adds	r3, #50	; 0x32
 8004d14:	4a36      	ldr	r2, [pc, #216]	; (8004df0 <UART_SetConfig+0x770>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d20:	441c      	add	r4, r3
 8004d22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004d2c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004d30:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004d34:	4642      	mov	r2, r8
 8004d36:	464b      	mov	r3, r9
 8004d38:	1891      	adds	r1, r2, r2
 8004d3a:	6339      	str	r1, [r7, #48]	; 0x30
 8004d3c:	415b      	adcs	r3, r3
 8004d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d44:	4641      	mov	r1, r8
 8004d46:	1851      	adds	r1, r2, r1
 8004d48:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	414b      	adcs	r3, r1
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004d5c:	4659      	mov	r1, fp
 8004d5e:	00cb      	lsls	r3, r1, #3
 8004d60:	4651      	mov	r1, sl
 8004d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d66:	4651      	mov	r1, sl
 8004d68:	00ca      	lsls	r2, r1, #3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4642      	mov	r2, r8
 8004d72:	189b      	adds	r3, r3, r2
 8004d74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d78:	464b      	mov	r3, r9
 8004d7a:	460a      	mov	r2, r1
 8004d7c:	eb42 0303 	adc.w	r3, r2, r3
 8004d80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d90:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004da0:	4649      	mov	r1, r9
 8004da2:	008b      	lsls	r3, r1, #2
 8004da4:	4641      	mov	r1, r8
 8004da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004daa:	4641      	mov	r1, r8
 8004dac:	008a      	lsls	r2, r1, #2
 8004dae:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004db2:	f7fb fa65 	bl	8000280 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <UART_SetConfig+0x770>)
 8004dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	2164      	movs	r1, #100	; 0x64
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	3332      	adds	r3, #50	; 0x32
 8004dce:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <UART_SetConfig+0x770>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	f003 020f 	and.w	r2, r3, #15
 8004dda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4422      	add	r2, r4
 8004de2:	609a      	str	r2, [r3, #8]
 8004de4:	e112      	b.n	800500c <UART_SetConfig+0x98c>
 8004de6:	bf00      	nop
 8004de8:	40011000 	.word	0x40011000
 8004dec:	40011400 	.word	0x40011400
 8004df0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004df4:	f7fd fe04 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8004df8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004e0a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004e0e:	4642      	mov	r2, r8
 8004e10:	464b      	mov	r3, r9
 8004e12:	1891      	adds	r1, r2, r2
 8004e14:	6239      	str	r1, [r7, #32]
 8004e16:	415b      	adcs	r3, r3
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e1e:	4641      	mov	r1, r8
 8004e20:	1854      	adds	r4, r2, r1
 8004e22:	4649      	mov	r1, r9
 8004e24:	eb43 0501 	adc.w	r5, r3, r1
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	00eb      	lsls	r3, r5, #3
 8004e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e36:	00e2      	lsls	r2, r4, #3
 8004e38:	4614      	mov	r4, r2
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	4643      	mov	r3, r8
 8004e3e:	18e3      	adds	r3, r4, r3
 8004e40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004e44:	464b      	mov	r3, r9
 8004e46:	eb45 0303 	adc.w	r3, r5, r3
 8004e4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004e4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004e5a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	008b      	lsls	r3, r1, #2
 8004e6e:	4621      	mov	r1, r4
 8004e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e74:	4621      	mov	r1, r4
 8004e76:	008a      	lsls	r2, r1, #2
 8004e78:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004e7c:	f7fb fa00 	bl	8000280 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4b64      	ldr	r3, [pc, #400]	; (8005018 <UART_SetConfig+0x998>)
 8004e86:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	011c      	lsls	r4, r3, #4
 8004e8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e98:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004e9c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	1891      	adds	r1, r2, r2
 8004ea6:	61b9      	str	r1, [r7, #24]
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	1851      	adds	r1, r2, r1
 8004eb4:	6139      	str	r1, [r7, #16]
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	414b      	adcs	r3, r1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec8:	4659      	mov	r1, fp
 8004eca:	00cb      	lsls	r3, r1, #3
 8004ecc:	4651      	mov	r1, sl
 8004ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	00ca      	lsls	r2, r1, #3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	4642      	mov	r2, r8
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	460a      	mov	r2, r1
 8004ee8:	eb42 0303 	adc.w	r3, r2, r3
 8004eec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ef0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004efc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	008b      	lsls	r3, r1, #2
 8004f10:	4641      	mov	r1, r8
 8004f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f16:	4641      	mov	r1, r8
 8004f18:	008a      	lsls	r2, r1, #2
 8004f1a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004f1e:	f7fb f9af 	bl	8000280 <__aeabi_uldivmod>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <UART_SetConfig+0x998>)
 8004f28:	fba3 1302 	umull	r1, r3, r3, r2
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	2164      	movs	r1, #100	; 0x64
 8004f30:	fb01 f303 	mul.w	r3, r1, r3
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	3332      	adds	r3, #50	; 0x32
 8004f3a:	4a37      	ldr	r2, [pc, #220]	; (8005018 <UART_SetConfig+0x998>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f46:	441c      	add	r4, r3
 8004f48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f56:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004f5a:	4642      	mov	r2, r8
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	1891      	adds	r1, r2, r2
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	415b      	adcs	r3, r3
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f6a:	4641      	mov	r1, r8
 8004f6c:	1851      	adds	r1, r2, r1
 8004f6e:	6039      	str	r1, [r7, #0]
 8004f70:	4649      	mov	r1, r9
 8004f72:	414b      	adcs	r3, r1
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f82:	4659      	mov	r1, fp
 8004f84:	00cb      	lsls	r3, r1, #3
 8004f86:	4651      	mov	r1, sl
 8004f88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f8c:	4651      	mov	r1, sl
 8004f8e:	00ca      	lsls	r2, r1, #3
 8004f90:	4610      	mov	r0, r2
 8004f92:	4619      	mov	r1, r3
 8004f94:	4603      	mov	r3, r0
 8004f96:	4642      	mov	r2, r8
 8004f98:	189b      	adds	r3, r3, r2
 8004f9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	460a      	mov	r2, r1
 8004fa2:	eb42 0303 	adc.w	r3, r2, r3
 8004fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004faa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	008b      	lsls	r3, r1, #2
 8004fca:	4641      	mov	r1, r8
 8004fcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	008a      	lsls	r2, r1, #2
 8004fd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fd8:	f7fb f952 	bl	8000280 <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <UART_SetConfig+0x998>)
 8004fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	2164      	movs	r1, #100	; 0x64
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	3332      	adds	r3, #50	; 0x32
 8004ff4:	4a08      	ldr	r2, [pc, #32]	; (8005018 <UART_SetConfig+0x998>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	f003 020f 	and.w	r2, r3, #15
 8005000:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4422      	add	r2, r4
 8005008:	609a      	str	r2, [r3, #8]
}
 800500a:	e7ff      	b.n	800500c <UART_SetConfig+0x98c>
 800500c:	bf00      	nop
 800500e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005012:	46bd      	mov	sp, r7
 8005014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005018:	51eb851f 	.word	0x51eb851f

0800501c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005020:	4904      	ldr	r1, [pc, #16]	; (8005034 <MX_FATFS_Init+0x18>)
 8005022:	4805      	ldr	r0, [pc, #20]	; (8005038 <MX_FATFS_Init+0x1c>)
 8005024:	f001 fb6a 	bl	80066fc <FATFS_LinkDriver>
 8005028:	4603      	mov	r3, r0
 800502a:	461a      	mov	r2, r3
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <MX_FATFS_Init+0x20>)
 800502e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005030:	bf00      	nop
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20013668 	.word	0x20013668
 8005038:	2000000c 	.word	0x2000000c
 800503c:	20013664 	.word	0x20013664

08005040 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 f9d9 	bl	8005404 <USER_SPI_initialize>
 8005052:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fab7 	bl	80055dc <USER_SPI_status>
 800506e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4603      	mov	r3, r0
 8005086:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8005088:	7bf8      	ldrb	r0, [r7, #15]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	f000 faba 	bl	8005608 <USER_SPI_read>
 8005094:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
 80050aa:	4603      	mov	r3, r0
 80050ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80050ae:	7bf8      	ldrb	r0, [r7, #15]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	f000 fb0d 	bl	80056d4 <USER_SPI_write>
 80050ba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	603a      	str	r2, [r7, #0]
 80050ce:	71fb      	strb	r3, [r7, #7]
 80050d0:	460b      	mov	r3, r1
 80050d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80050d4:	79b9      	ldrb	r1, [r7, #6]
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fb76 	bl	80057cc <USER_SPI_ioctl>
 80050e0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80050f4:	f7fc f9b8 	bl	8001468 <HAL_GetTick>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a04      	ldr	r2, [pc, #16]	; (800510c <SPI_Timer_On+0x20>)
 80050fc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80050fe:	4a04      	ldr	r2, [pc, #16]	; (8005110 <SPI_Timer_On+0x24>)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6013      	str	r3, [r2, #0]
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20013670 	.word	0x20013670
 8005110:	20013674 	.word	0x20013674

08005114 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005118:	f7fc f9a6 	bl	8001468 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <SPI_Timer_Status+0x24>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	1ad2      	subs	r2, r2, r3
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <SPI_Timer_Status+0x28>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	bf34      	ite	cc
 800512c:	2301      	movcc	r3, #1
 800512e:	2300      	movcs	r3, #0
 8005130:	b2db      	uxtb	r3, r3
}
 8005132:	4618      	mov	r0, r3
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20013670 	.word	0x20013670
 800513c:	20013674 	.word	0x20013674

08005140 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af02      	add	r7, sp, #8
 8005146:	4603      	mov	r3, r0
 8005148:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800514a:	f107 020f 	add.w	r2, r7, #15
 800514e:	1df9      	adds	r1, r7, #7
 8005150:	2332      	movs	r3, #50	; 0x32
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2301      	movs	r3, #1
 8005156:	4804      	ldr	r0, [pc, #16]	; (8005168 <xchg_spi+0x28>)
 8005158:	f7fd fcde 	bl	8002b18 <HAL_SPI_TransmitReceive>
    return rxDat;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	200007e8 	.word	0x200007e8

0800516c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	e00a      	b.n	8005192 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	18d4      	adds	r4, r2, r3
 8005182:	20ff      	movs	r0, #255	; 0xff
 8005184:	f7ff ffdc 	bl	8005140 <xchg_spi>
 8005188:	4603      	mov	r3, r0
 800518a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3301      	adds	r3, #1
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d3f0      	bcc.n	800517c <rcvr_spi_multi+0x10>
	}
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd90      	pop	{r4, r7, pc}

080051a4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	e009      	b.n	80051c8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ffbf 	bl	8005140 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d3f1      	bcc.n	80051b4 <xmit_spi_multi+0x10>
	}
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b086      	sub	sp, #24
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80051e2:	f7fc f941 	bl	8001468 <HAL_GetTick>
 80051e6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80051ec:	20ff      	movs	r0, #255	; 0xff
 80051ee:	f7ff ffa7 	bl	8005140 <xchg_spi>
 80051f2:	4603      	mov	r3, r0
 80051f4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2bff      	cmp	r3, #255	; 0xff
 80051fa:	d007      	beq.n	800520c <wait_ready+0x32>
 80051fc:	f7fc f934 	bl	8001468 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	429a      	cmp	r2, r3
 800520a:	d8ef      	bhi.n	80051ec <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2bff      	cmp	r3, #255	; 0xff
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005224:	2201      	movs	r2, #1
 8005226:	2108      	movs	r1, #8
 8005228:	4803      	ldr	r0, [pc, #12]	; (8005238 <despiselect+0x18>)
 800522a:	f7fc ff69 	bl	8002100 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800522e:	20ff      	movs	r0, #255	; 0xff
 8005230:	f7ff ff86 	bl	8005140 <xchg_spi>

}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40020400 	.word	0x40020400

0800523c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005240:	2200      	movs	r2, #0
 8005242:	2108      	movs	r1, #8
 8005244:	4809      	ldr	r0, [pc, #36]	; (800526c <spiselect+0x30>)
 8005246:	f7fc ff5b 	bl	8002100 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800524a:	20ff      	movs	r0, #255	; 0xff
 800524c:	f7ff ff78 	bl	8005140 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005254:	f7ff ffc1 	bl	80051da <wait_ready>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <spiselect+0x26>
 800525e:	2301      	movs	r3, #1
 8005260:	e002      	b.n	8005268 <spiselect+0x2c>

	despiselect();
 8005262:	f7ff ffdd 	bl	8005220 <despiselect>
	return 0;	/* Timeout */
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40020400 	.word	0x40020400

08005270 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800527a:	20c8      	movs	r0, #200	; 0xc8
 800527c:	f7ff ff36 	bl	80050ec <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005280:	20ff      	movs	r0, #255	; 0xff
 8005282:	f7ff ff5d 	bl	8005140 <xchg_spi>
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2bff      	cmp	r3, #255	; 0xff
 800528e:	d104      	bne.n	800529a <rcvr_datablock+0x2a>
 8005290:	f7ff ff40 	bl	8005114 <SPI_Timer_Status>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f2      	bne.n	8005280 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	2bfe      	cmp	r3, #254	; 0xfe
 800529e:	d001      	beq.n	80052a4 <rcvr_datablock+0x34>
 80052a0:	2300      	movs	r3, #0
 80052a2:	e00a      	b.n	80052ba <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff ff60 	bl	800516c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80052ac:	20ff      	movs	r0, #255	; 0xff
 80052ae:	f7ff ff47 	bl	8005140 <xchg_spi>
 80052b2:	20ff      	movs	r0, #255	; 0xff
 80052b4:	f7ff ff44 	bl	8005140 <xchg_spi>

	return 1;						/* Function succeeded */
 80052b8:	2301      	movs	r3, #1
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80052ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052d2:	f7ff ff82 	bl	80051da <wait_ready>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <xmit_datablock+0x1e>
 80052dc:	2300      	movs	r3, #0
 80052de:	e01e      	b.n	800531e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff ff2c 	bl	8005140 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	2bfd      	cmp	r3, #253	; 0xfd
 80052ec:	d016      	beq.n	800531c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80052ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff ff56 	bl	80051a4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80052f8:	20ff      	movs	r0, #255	; 0xff
 80052fa:	f7ff ff21 	bl	8005140 <xchg_spi>
 80052fe:	20ff      	movs	r0, #255	; 0xff
 8005300:	f7ff ff1e 	bl	8005140 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005304:	20ff      	movs	r0, #255	; 0xff
 8005306:	f7ff ff1b 	bl	8005140 <xchg_spi>
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2b05      	cmp	r3, #5
 8005316:	d001      	beq.n	800531c <xmit_datablock+0x5a>
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <xmit_datablock+0x5c>
	}
	return 1;
 800531c:	2301      	movs	r3, #1
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	4603      	mov	r3, r0
 800532e:	6039      	str	r1, [r7, #0]
 8005330:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005336:	2b00      	cmp	r3, #0
 8005338:	da0e      	bge.n	8005358 <send_cmd+0x32>
		cmd &= 0x7F;
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005340:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005342:	2100      	movs	r1, #0
 8005344:	2037      	movs	r0, #55	; 0x37
 8005346:	f7ff ffee 	bl	8005326 <send_cmd>
 800534a:	4603      	mov	r3, r0
 800534c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800534e:	7bbb      	ldrb	r3, [r7, #14]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d901      	bls.n	8005358 <send_cmd+0x32>
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	e051      	b.n	80053fc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d008      	beq.n	8005370 <send_cmd+0x4a>
		despiselect();
 800535e:	f7ff ff5f 	bl	8005220 <despiselect>
		if (!spiselect()) return 0xFF;
 8005362:	f7ff ff6b 	bl	800523c <spiselect>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <send_cmd+0x4a>
 800536c:	23ff      	movs	r3, #255	; 0xff
 800536e:	e045      	b.n	80053fc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005376:	b2db      	uxtb	r3, r3
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fee1 	bl	8005140 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	0e1b      	lsrs	r3, r3, #24
 8005382:	b2db      	uxtb	r3, r3
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fedb 	bl	8005140 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	b2db      	uxtb	r3, r3
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fed5 	bl	8005140 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	0a1b      	lsrs	r3, r3, #8
 800539a:	b2db      	uxtb	r3, r3
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fecf 	bl	8005140 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff feca 	bl	8005140 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <send_cmd+0x94>
 80053b6:	2395      	movs	r3, #149	; 0x95
 80053b8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d101      	bne.n	80053c4 <send_cmd+0x9e>
 80053c0:	2387      	movs	r3, #135	; 0x87
 80053c2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff feba 	bl	8005140 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	2b0c      	cmp	r3, #12
 80053d0:	d102      	bne.n	80053d8 <send_cmd+0xb2>
 80053d2:	20ff      	movs	r0, #255	; 0xff
 80053d4:	f7ff feb4 	bl	8005140 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80053d8:	230a      	movs	r3, #10
 80053da:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80053dc:	20ff      	movs	r0, #255	; 0xff
 80053de:	f7ff feaf 	bl	8005140 <xchg_spi>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80053e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da05      	bge.n	80053fa <send_cmd+0xd4>
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <send_cmd+0xb6>

	return res;							/* Return received response */
 80053fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005404:	b590      	push	{r4, r7, lr}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <USER_SPI_initialize+0x14>
 8005414:	2301      	movs	r3, #1
 8005416:	e0d6      	b.n	80055c6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005418:	4b6d      	ldr	r3, [pc, #436]	; (80055d0 <USER_SPI_initialize+0x1cc>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <USER_SPI_initialize+0x2a>
 8005426:	4b6a      	ldr	r3, [pc, #424]	; (80055d0 <USER_SPI_initialize+0x1cc>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	e0cb      	b.n	80055c6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800542e:	4b69      	ldr	r3, [pc, #420]	; (80055d4 <USER_SPI_initialize+0x1d0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005438:	4b66      	ldr	r3, [pc, #408]	; (80055d4 <USER_SPI_initialize+0x1d0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8005440:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005442:	230a      	movs	r3, #10
 8005444:	73fb      	strb	r3, [r7, #15]
 8005446:	e005      	b.n	8005454 <USER_SPI_initialize+0x50>
 8005448:	20ff      	movs	r0, #255	; 0xff
 800544a:	f7ff fe79 	bl	8005140 <xchg_spi>
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	3b01      	subs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f6      	bne.n	8005448 <USER_SPI_initialize+0x44>

	ty = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800545e:	2100      	movs	r1, #0
 8005460:	2000      	movs	r0, #0
 8005462:	f7ff ff60 	bl	8005326 <send_cmd>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	f040 808b 	bne.w	8005584 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800546e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005472:	f7ff fe3b 	bl	80050ec <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005476:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800547a:	2008      	movs	r0, #8
 800547c:	f7ff ff53 	bl	8005326 <send_cmd>
 8005480:	4603      	mov	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d151      	bne.n	800552a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
 800548a:	e00d      	b.n	80054a8 <USER_SPI_initialize+0xa4>
 800548c:	7bfc      	ldrb	r4, [r7, #15]
 800548e:	20ff      	movs	r0, #255	; 0xff
 8005490:	f7ff fe56 	bl	8005140 <xchg_spi>
 8005494:	4603      	mov	r3, r0
 8005496:	461a      	mov	r2, r3
 8005498:	f104 0310 	add.w	r3, r4, #16
 800549c:	443b      	add	r3, r7
 800549e:	f803 2c08 	strb.w	r2, [r3, #-8]
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	3301      	adds	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d9ee      	bls.n	800548c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80054ae:	7abb      	ldrb	r3, [r7, #10]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d167      	bne.n	8005584 <USER_SPI_initialize+0x180>
 80054b4:	7afb      	ldrb	r3, [r7, #11]
 80054b6:	2baa      	cmp	r3, #170	; 0xaa
 80054b8:	d164      	bne.n	8005584 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80054ba:	bf00      	nop
 80054bc:	f7ff fe2a 	bl	8005114 <SPI_Timer_Status>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <USER_SPI_initialize+0xd2>
 80054c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054ca:	20a9      	movs	r0, #169	; 0xa9
 80054cc:	f7ff ff2b 	bl	8005326 <send_cmd>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f2      	bne.n	80054bc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80054d6:	f7ff fe1d 	bl	8005114 <SPI_Timer_Status>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d051      	beq.n	8005584 <USER_SPI_initialize+0x180>
 80054e0:	2100      	movs	r1, #0
 80054e2:	203a      	movs	r0, #58	; 0x3a
 80054e4:	f7ff ff1f 	bl	8005326 <send_cmd>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d14a      	bne.n	8005584 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
 80054f2:	e00d      	b.n	8005510 <USER_SPI_initialize+0x10c>
 80054f4:	7bfc      	ldrb	r4, [r7, #15]
 80054f6:	20ff      	movs	r0, #255	; 0xff
 80054f8:	f7ff fe22 	bl	8005140 <xchg_spi>
 80054fc:	4603      	mov	r3, r0
 80054fe:	461a      	mov	r2, r3
 8005500:	f104 0310 	add.w	r3, r4, #16
 8005504:	443b      	add	r3, r7
 8005506:	f803 2c08 	strb.w	r2, [r3, #-8]
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	3301      	adds	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	2b03      	cmp	r3, #3
 8005514:	d9ee      	bls.n	80054f4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005516:	7a3b      	ldrb	r3, [r7, #8]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <USER_SPI_initialize+0x120>
 8005520:	230c      	movs	r3, #12
 8005522:	e000      	b.n	8005526 <USER_SPI_initialize+0x122>
 8005524:	2304      	movs	r3, #4
 8005526:	737b      	strb	r3, [r7, #13]
 8005528:	e02c      	b.n	8005584 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800552a:	2100      	movs	r1, #0
 800552c:	20a9      	movs	r0, #169	; 0xa9
 800552e:	f7ff fefa 	bl	8005326 <send_cmd>
 8005532:	4603      	mov	r3, r0
 8005534:	2b01      	cmp	r3, #1
 8005536:	d804      	bhi.n	8005542 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005538:	2302      	movs	r3, #2
 800553a:	737b      	strb	r3, [r7, #13]
 800553c:	23a9      	movs	r3, #169	; 0xa9
 800553e:	73bb      	strb	r3, [r7, #14]
 8005540:	e003      	b.n	800554a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005542:	2301      	movs	r3, #1
 8005544:	737b      	strb	r3, [r7, #13]
 8005546:	2301      	movs	r3, #1
 8005548:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800554a:	bf00      	nop
 800554c:	f7ff fde2 	bl	8005114 <SPI_Timer_Status>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <USER_SPI_initialize+0x162>
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fee3 	bl	8005326 <send_cmd>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f2      	bne.n	800554c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005566:	f7ff fdd5 	bl	8005114 <SPI_Timer_Status>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <USER_SPI_initialize+0x17c>
 8005570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005574:	2010      	movs	r0, #16
 8005576:	f7ff fed6 	bl	8005326 <send_cmd>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <USER_SPI_initialize+0x180>
				ty = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005584:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <USER_SPI_initialize+0x1d4>)
 8005586:	7b7b      	ldrb	r3, [r7, #13]
 8005588:	7013      	strb	r3, [r2, #0]
	despiselect();
 800558a:	f7ff fe49 	bl	8005220 <despiselect>

	if (ty) {			/* OK */
 800558e:	7b7b      	ldrb	r3, [r7, #13]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d012      	beq.n	80055ba <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <USER_SPI_initialize+0x1d0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <USER_SPI_initialize+0x1d0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0210 	orr.w	r2, r2, #16
 80055a6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <USER_SPI_initialize+0x1cc>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <USER_SPI_initialize+0x1cc>)
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	e002      	b.n	80055c0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <USER_SPI_initialize+0x1cc>)
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <USER_SPI_initialize+0x1cc>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	b2db      	uxtb	r3, r3
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd90      	pop	{r4, r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000020 	.word	0x20000020
 80055d4:	200007e8 	.word	0x200007e8
 80055d8:	2001366c 	.word	0x2001366c

080055dc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <USER_SPI_status+0x14>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e002      	b.n	80055f6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <USER_SPI_status+0x28>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	b2db      	uxtb	r3, r3
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000020 	.word	0x20000020

08005608 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <USER_SPI_read+0x1c>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <USER_SPI_read+0x20>
 8005624:	2304      	movs	r3, #4
 8005626:	e04d      	b.n	80056c4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <USER_SPI_read+0xc4>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <USER_SPI_read+0x32>
 8005636:	2303      	movs	r3, #3
 8005638:	e044      	b.n	80056c4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800563a:	4b25      	ldr	r3, [pc, #148]	; (80056d0 <USER_SPI_read+0xc8>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <USER_SPI_read+0x44>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	025b      	lsls	r3, r3, #9
 800564a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d111      	bne.n	8005676 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	2011      	movs	r0, #17
 8005656:	f7ff fe66 	bl	8005326 <send_cmd>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d129      	bne.n	80056b4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005664:	68b8      	ldr	r0, [r7, #8]
 8005666:	f7ff fe03 	bl	8005270 <rcvr_datablock>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d021      	beq.n	80056b4 <USER_SPI_read+0xac>
			count = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	e01e      	b.n	80056b4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	2012      	movs	r0, #18
 800567a:	f7ff fe54 	bl	8005326 <send_cmd>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d117      	bne.n	80056b4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005684:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005688:	68b8      	ldr	r0, [r7, #8]
 800568a:	f7ff fdf1 	bl	8005270 <rcvr_datablock>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <USER_SPI_read+0xa2>
				buff += 512;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800569a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	3b01      	subs	r3, #1
 80056a0:	603b      	str	r3, [r7, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1ed      	bne.n	8005684 <USER_SPI_read+0x7c>
 80056a8:	e000      	b.n	80056ac <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80056aa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80056ac:	2100      	movs	r1, #0
 80056ae:	200c      	movs	r0, #12
 80056b0:	f7ff fe39 	bl	8005326 <send_cmd>
		}
	}
	despiselect();
 80056b4:	f7ff fdb4 	bl	8005220 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bf14      	ite	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	2300      	moveq	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000020 	.word	0x20000020
 80056d0:	2001366c 	.word	0x2001366c

080056d4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4603      	mov	r3, r0
 80056e2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <USER_SPI_write+0x1c>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <USER_SPI_write+0x20>
 80056f0:	2304      	movs	r3, #4
 80056f2:	e063      	b.n	80057bc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80056f4:	4b33      	ldr	r3, [pc, #204]	; (80057c4 <USER_SPI_write+0xf0>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <USER_SPI_write+0x32>
 8005702:	2303      	movs	r3, #3
 8005704:	e05a      	b.n	80057bc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005706:	4b2f      	ldr	r3, [pc, #188]	; (80057c4 <USER_SPI_write+0xf0>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <USER_SPI_write+0x44>
 8005714:	2302      	movs	r3, #2
 8005716:	e051      	b.n	80057bc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005718:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <USER_SPI_write+0xf4>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <USER_SPI_write+0x56>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	025b      	lsls	r3, r3, #9
 8005728:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d110      	bne.n	8005752 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	2018      	movs	r0, #24
 8005734:	f7ff fdf7 	bl	8005326 <send_cmd>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d136      	bne.n	80057ac <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800573e:	21fe      	movs	r1, #254	; 0xfe
 8005740:	68b8      	ldr	r0, [r7, #8]
 8005742:	f7ff fdbe 	bl	80052c2 <xmit_datablock>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02f      	beq.n	80057ac <USER_SPI_write+0xd8>
			count = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	e02c      	b.n	80057ac <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005752:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <USER_SPI_write+0xf4>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f003 0306 	and.w	r3, r3, #6
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <USER_SPI_write+0x92>
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	2097      	movs	r0, #151	; 0x97
 8005762:	f7ff fde0 	bl	8005326 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	2019      	movs	r0, #25
 800576a:	f7ff fddc 	bl	8005326 <send_cmd>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11b      	bne.n	80057ac <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005774:	21fc      	movs	r1, #252	; 0xfc
 8005776:	68b8      	ldr	r0, [r7, #8]
 8005778:	f7ff fda3 	bl	80052c2 <xmit_datablock>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <USER_SPI_write+0xc4>
				buff += 512;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005788:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	3b01      	subs	r3, #1
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1ee      	bne.n	8005774 <USER_SPI_write+0xa0>
 8005796:	e000      	b.n	800579a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005798:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800579a:	21fd      	movs	r1, #253	; 0xfd
 800579c:	2000      	movs	r0, #0
 800579e:	f7ff fd90 	bl	80052c2 <xmit_datablock>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <USER_SPI_write+0xd8>
 80057a8:	2301      	movs	r3, #1
 80057aa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80057ac:	f7ff fd38 	bl	8005220 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bf14      	ite	ne
 80057b6:	2301      	movne	r3, #1
 80057b8:	2300      	moveq	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000020 	.word	0x20000020
 80057c8:	2001366c 	.word	0x2001366c

080057cc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08c      	sub	sp, #48	; 0x30
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	603a      	str	r2, [r7, #0]
 80057d6:	71fb      	strb	r3, [r7, #7]
 80057d8:	460b      	mov	r3, r1
 80057da:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <USER_SPI_ioctl+0x1a>
 80057e2:	2304      	movs	r3, #4
 80057e4:	e15a      	b.n	8005a9c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80057e6:	4baf      	ldr	r3, [pc, #700]	; (8005aa4 <USER_SPI_ioctl+0x2d8>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <USER_SPI_ioctl+0x2c>
 80057f4:	2303      	movs	r3, #3
 80057f6:	e151      	b.n	8005a9c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80057fe:	79bb      	ldrb	r3, [r7, #6]
 8005800:	2b04      	cmp	r3, #4
 8005802:	f200 8136 	bhi.w	8005a72 <USER_SPI_ioctl+0x2a6>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <USER_SPI_ioctl+0x40>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	08005821 	.word	0x08005821
 8005810:	08005835 	.word	0x08005835
 8005814:	08005a73 	.word	0x08005a73
 8005818:	080058e1 	.word	0x080058e1
 800581c:	080059d7 	.word	0x080059d7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005820:	f7ff fd0c 	bl	800523c <spiselect>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8127 	beq.w	8005a7a <USER_SPI_ioctl+0x2ae>
 800582c:	2300      	movs	r3, #0
 800582e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005832:	e122      	b.n	8005a7a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005834:	2100      	movs	r1, #0
 8005836:	2009      	movs	r0, #9
 8005838:	f7ff fd75 	bl	8005326 <send_cmd>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	f040 811d 	bne.w	8005a7e <USER_SPI_ioctl+0x2b2>
 8005844:	f107 030c 	add.w	r3, r7, #12
 8005848:	2110      	movs	r1, #16
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fd10 	bl	8005270 <rcvr_datablock>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8113 	beq.w	8005a7e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005858:	7b3b      	ldrb	r3, [r7, #12]
 800585a:	099b      	lsrs	r3, r3, #6
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	d111      	bne.n	8005886 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005862:	7d7b      	ldrb	r3, [r7, #21]
 8005864:	461a      	mov	r2, r3
 8005866:	7d3b      	ldrb	r3, [r7, #20]
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	4413      	add	r3, r2
 800586c:	461a      	mov	r2, r3
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005876:	4413      	add	r3, r2
 8005878:	3301      	adds	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	029a      	lsls	r2, r3, #10
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e028      	b.n	80058d8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005886:	7c7b      	ldrb	r3, [r7, #17]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	b2da      	uxtb	r2, r3
 800588e:	7dbb      	ldrb	r3, [r7, #22]
 8005890:	09db      	lsrs	r3, r3, #7
 8005892:	b2db      	uxtb	r3, r3
 8005894:	4413      	add	r3, r2
 8005896:	b2da      	uxtb	r2, r3
 8005898:	7d7b      	ldrb	r3, [r7, #21]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f003 0306 	and.w	r3, r3, #6
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3302      	adds	r3, #2
 80058aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80058ae:	7d3b      	ldrb	r3, [r7, #20]
 80058b0:	099b      	lsrs	r3, r3, #6
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	7cfb      	ldrb	r3, [r7, #19]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	441a      	add	r2, r3
 80058bc:	7cbb      	ldrb	r3, [r7, #18]
 80058be:	029b      	lsls	r3, r3, #10
 80058c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058c4:	4413      	add	r3, r2
 80058c6:	3301      	adds	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80058ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80058ce:	3b09      	subs	r3, #9
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	409a      	lsls	r2, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80058de:	e0ce      	b.n	8005a7e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80058e0:	4b71      	ldr	r3, [pc, #452]	; (8005aa8 <USER_SPI_ioctl+0x2dc>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d031      	beq.n	8005950 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80058ec:	2100      	movs	r1, #0
 80058ee:	208d      	movs	r0, #141	; 0x8d
 80058f0:	f7ff fd19 	bl	8005326 <send_cmd>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f040 80c3 	bne.w	8005a82 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80058fc:	20ff      	movs	r0, #255	; 0xff
 80058fe:	f7ff fc1f 	bl	8005140 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	2110      	movs	r1, #16
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff fcb1 	bl	8005270 <rcvr_datablock>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80b6 	beq.w	8005a82 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005916:	2330      	movs	r3, #48	; 0x30
 8005918:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800591c:	e007      	b.n	800592e <USER_SPI_ioctl+0x162>
 800591e:	20ff      	movs	r0, #255	; 0xff
 8005920:	f7ff fc0e 	bl	8005140 <xchg_spi>
 8005924:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005928:	3b01      	subs	r3, #1
 800592a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800592e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f3      	bne.n	800591e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005936:	7dbb      	ldrb	r3, [r7, #22]
 8005938:	091b      	lsrs	r3, r3, #4
 800593a:	b2db      	uxtb	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	2310      	movs	r3, #16
 8005940:	fa03 f202 	lsl.w	r2, r3, r2
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800594e:	e098      	b.n	8005a82 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005950:	2100      	movs	r1, #0
 8005952:	2009      	movs	r0, #9
 8005954:	f7ff fce7 	bl	8005326 <send_cmd>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 8091 	bne.w	8005a82 <USER_SPI_ioctl+0x2b6>
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	2110      	movs	r1, #16
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fc82 	bl	8005270 <rcvr_datablock>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8087 	beq.w	8005a82 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005974:	4b4c      	ldr	r3, [pc, #304]	; (8005aa8 <USER_SPI_ioctl+0x2dc>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005980:	7dbb      	ldrb	r3, [r7, #22]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005988:	7dfa      	ldrb	r2, [r7, #23]
 800598a:	09d2      	lsrs	r2, r2, #7
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	4413      	add	r3, r2
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	7e7b      	ldrb	r3, [r7, #25]
 8005994:	099b      	lsrs	r3, r3, #6
 8005996:	b2db      	uxtb	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e013      	b.n	80059ce <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80059a6:	7dbb      	ldrb	r3, [r7, #22]
 80059a8:	109b      	asrs	r3, r3, #2
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	3301      	adds	r3, #1
 80059b2:	7dfa      	ldrb	r2, [r7, #23]
 80059b4:	00d2      	lsls	r2, r2, #3
 80059b6:	f002 0218 	and.w	r2, r2, #24
 80059ba:	7df9      	ldrb	r1, [r7, #23]
 80059bc:	0949      	lsrs	r1, r1, #5
 80059be:	b2c9      	uxtb	r1, r1
 80059c0:	440a      	add	r2, r1
 80059c2:	3201      	adds	r2, #1
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80059d4:	e055      	b.n	8005a82 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80059d6:	4b34      	ldr	r3, [pc, #208]	; (8005aa8 <USER_SPI_ioctl+0x2dc>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	f003 0306 	and.w	r3, r3, #6
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d051      	beq.n	8005a86 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80059e2:	f107 020c 	add.w	r2, r7, #12
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	210b      	movs	r1, #11
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff feee 	bl	80057cc <USER_SPI_ioctl>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d149      	bne.n	8005a8a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80059f6:	7b3b      	ldrb	r3, [r7, #12]
 80059f8:	099b      	lsrs	r3, r3, #6
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <USER_SPI_ioctl+0x23e>
 8005a00:	7dbb      	ldrb	r3, [r7, #22]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d041      	beq.n	8005a8e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <USER_SPI_ioctl+0x2dc>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d105      	bne.n	8005a32 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	025b      	lsls	r3, r3, #9
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	025b      	lsls	r3, r3, #9
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a34:	2020      	movs	r0, #32
 8005a36:	f7ff fc76 	bl	8005326 <send_cmd>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d128      	bne.n	8005a92 <USER_SPI_ioctl+0x2c6>
 8005a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a42:	2021      	movs	r0, #33	; 0x21
 8005a44:	f7ff fc6f 	bl	8005326 <send_cmd>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d121      	bne.n	8005a92 <USER_SPI_ioctl+0x2c6>
 8005a4e:	2100      	movs	r1, #0
 8005a50:	2026      	movs	r0, #38	; 0x26
 8005a52:	f7ff fc68 	bl	8005326 <send_cmd>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11a      	bne.n	8005a92 <USER_SPI_ioctl+0x2c6>
 8005a5c:	f247 5030 	movw	r0, #30000	; 0x7530
 8005a60:	f7ff fbbb 	bl	80051da <wait_ready>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d013      	beq.n	8005a92 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005a70:	e00f      	b.n	8005a92 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005a72:	2304      	movs	r3, #4
 8005a74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a78:	e00c      	b.n	8005a94 <USER_SPI_ioctl+0x2c8>
		break;
 8005a7a:	bf00      	nop
 8005a7c:	e00a      	b.n	8005a94 <USER_SPI_ioctl+0x2c8>
		break;
 8005a7e:	bf00      	nop
 8005a80:	e008      	b.n	8005a94 <USER_SPI_ioctl+0x2c8>
		break;
 8005a82:	bf00      	nop
 8005a84:	e006      	b.n	8005a94 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005a86:	bf00      	nop
 8005a88:	e004      	b.n	8005a94 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005a8a:	bf00      	nop
 8005a8c:	e002      	b.n	8005a94 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005a8e:	bf00      	nop
 8005a90:	e000      	b.n	8005a94 <USER_SPI_ioctl+0x2c8>
		break;
 8005a92:	bf00      	nop
	}

	despiselect();
 8005a94:	f7ff fbc4 	bl	8005220 <despiselect>

	return res;
 8005a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3730      	adds	r7, #48	; 0x30
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000020 	.word	0x20000020
 8005aa8:	2001366c 	.word	0x2001366c

08005aac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	4a08      	ldr	r2, [pc, #32]	; (8005adc <disk_status+0x30>)
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	79fa      	ldrb	r2, [r7, #7]
 8005ac4:	4905      	ldr	r1, [pc, #20]	; (8005adc <disk_status+0x30>)
 8005ac6:	440a      	add	r2, r1
 8005ac8:	7a12      	ldrb	r2, [r2, #8]
 8005aca:	4610      	mov	r0, r2
 8005acc:	4798      	blx	r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	200136a0 	.word	0x200136a0

08005ae0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	4a0d      	ldr	r2, [pc, #52]	; (8005b28 <disk_initialize+0x48>)
 8005af2:	5cd3      	ldrb	r3, [r2, r3]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d111      	bne.n	8005b1c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	4a0b      	ldr	r2, [pc, #44]	; (8005b28 <disk_initialize+0x48>)
 8005afc:	2101      	movs	r1, #1
 8005afe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	4a09      	ldr	r2, [pc, #36]	; (8005b28 <disk_initialize+0x48>)
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	79fa      	ldrb	r2, [r7, #7]
 8005b0e:	4906      	ldr	r1, [pc, #24]	; (8005b28 <disk_initialize+0x48>)
 8005b10:	440a      	add	r2, r1
 8005b12:	7a12      	ldrb	r2, [r2, #8]
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200136a0 	.word	0x200136a0

08005b2c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b2c:	b590      	push	{r4, r7, lr}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <disk_read+0x3c>)
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	689c      	ldr	r4, [r3, #8]
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	4a07      	ldr	r2, [pc, #28]	; (8005b68 <disk_read+0x3c>)
 8005b4c:	4413      	add	r3, r2
 8005b4e:	7a18      	ldrb	r0, [r3, #8]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	47a0      	blx	r4
 8005b58:	4603      	mov	r3, r0
 8005b5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd90      	pop	{r4, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200136a0 	.word	0x200136a0

08005b6c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005b6c:	b590      	push	{r4, r7, lr}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ba8 <disk_write+0x3c>)
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	68dc      	ldr	r4, [r3, #12]
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	4a07      	ldr	r2, [pc, #28]	; (8005ba8 <disk_write+0x3c>)
 8005b8c:	4413      	add	r3, r2
 8005b8e:	7a18      	ldrb	r0, [r3, #8]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	47a0      	blx	r4
 8005b98:	4603      	mov	r3, r0
 8005b9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd90      	pop	{r4, r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200136a0 	.word	0x200136a0

08005bac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005bbc:	89fb      	ldrh	r3, [r7, #14]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	b21a      	sxth	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	b21b      	sxth	r3, r3
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	b21b      	sxth	r3, r3
 8005bcc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005bce:	89fb      	ldrh	r3, [r7, #14]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3303      	adds	r3, #3
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	3202      	adds	r2, #2
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	3201      	adds	r2, #1
 8005c02:	7812      	ldrb	r2, [r2, #0]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	7812      	ldrb	r2, [r2, #0]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
	return rv;
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e010      	b.n	8005c54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c32:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <clear_lock+0x44>)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	4413      	add	r3, r2
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d105      	bne.n	8005c4e <clear_lock+0x2a>
 8005c42:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <clear_lock+0x44>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	4413      	add	r3, r2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d9eb      	bls.n	8005c32 <clear_lock+0xe>
	}
}
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	20013680 	.word	0x20013680

08005c6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	78db      	ldrb	r3, [r3, #3]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d034      	beq.n	8005cea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	7858      	ldrb	r0, [r3, #1]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c90:	2301      	movs	r3, #1
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	f7ff ff6a 	bl	8005b6c <disk_write>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
 8005ca2:	e022      	b.n	8005cea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	1ad2      	subs	r2, r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d217      	bcs.n	8005cea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	789b      	ldrb	r3, [r3, #2]
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	e010      	b.n	8005ce4 <sync_window+0x78>
					wsect += fs->fsize;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7858      	ldrb	r0, [r3, #1]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	f7ff ff47 	bl	8005b6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d8eb      	bhi.n	8005cc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d01b      	beq.n	8005d44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ffad 	bl	8005c6c <sync_window>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d113      	bne.n	8005d44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	7858      	ldrb	r0, [r3, #1]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d26:	2301      	movs	r3, #1
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	f7ff feff 	bl	8005b2c <disk_read>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295
 8005d38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d904      	bls.n	8005d6e <get_fat+0x20>
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005d6e:	2301      	movs	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	e08f      	b.n	8005e94 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005d74:	f04f 33ff 	mov.w	r3, #4294967295
 8005d78:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d062      	beq.n	8005e48 <get_fat+0xfa>
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	dc7c      	bgt.n	8005e80 <get_fat+0x132>
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d002      	beq.n	8005d90 <get_fat+0x42>
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d042      	beq.n	8005e14 <get_fat+0xc6>
 8005d8e:	e077      	b.n	8005e80 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	0a5b      	lsrs	r3, r3, #9
 8005da6:	4413      	add	r3, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	6938      	ldr	r0, [r7, #16]
 8005dac:	f7ff ffa2 	bl	8005cf4 <move_window>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d167      	bne.n	8005e86 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	60fa      	str	r2, [r7, #12]
 8005dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dc8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6a1a      	ldr	r2, [r3, #32]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	0a5b      	lsrs	r3, r3, #9
 8005dd2:	4413      	add	r3, r2
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6938      	ldr	r0, [r7, #16]
 8005dd8:	f7ff ff8c 	bl	8005cf4 <move_window>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d153      	bne.n	8005e8a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	461a      	mov	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <get_fat+0xbc>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	e002      	b.n	8005e10 <get_fat+0xc2>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e10:	617b      	str	r3, [r7, #20]
			break;
 8005e12:	e03f      	b.n	8005e94 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	6a1a      	ldr	r2, [r3, #32]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	0a1b      	lsrs	r3, r3, #8
 8005e1c:	4413      	add	r3, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6938      	ldr	r0, [r7, #16]
 8005e22:	f7ff ff67 	bl	8005cf4 <move_window>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d130      	bne.n	8005e8e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005e3a:	4413      	add	r3, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff feb5 	bl	8005bac <ld_word>
 8005e42:	4603      	mov	r3, r0
 8005e44:	617b      	str	r3, [r7, #20]
			break;
 8005e46:	e025      	b.n	8005e94 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6a1a      	ldr	r2, [r3, #32]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	4413      	add	r3, r2
 8005e52:	4619      	mov	r1, r3
 8005e54:	6938      	ldr	r0, [r7, #16]
 8005e56:	f7ff ff4d 	bl	8005cf4 <move_window>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d118      	bne.n	8005e92 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005e6e:	4413      	add	r3, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff feb3 	bl	8005bdc <ld_dword>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e7c:	617b      	str	r3, [r7, #20]
			break;
 8005e7e:	e009      	b.n	8005e94 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005e80:	2301      	movs	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e006      	b.n	8005e94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e86:	bf00      	nop
 8005e88:	e004      	b.n	8005e94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e8a:	bf00      	nop
 8005e8c:	e002      	b.n	8005e94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e8e:	bf00      	nop
 8005e90:	e000      	b.n	8005e94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e92:	bf00      	nop
		}
	}

	return val;
 8005e94:	697b      	ldr	r3, [r7, #20]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b087      	sub	sp, #28
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eaa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d031      	beq.n	8005f18 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	e002      	b.n	8005ec2 <get_ldnumber+0x24>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d903      	bls.n	8005ed2 <get_ldnumber+0x34>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b3a      	cmp	r3, #58	; 0x3a
 8005ed0:	d1f4      	bne.n	8005ebc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b3a      	cmp	r3, #58	; 0x3a
 8005ed8:	d11c      	bne.n	8005f14 <get_ldnumber+0x76>
			tp = *path;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	60fa      	str	r2, [r7, #12]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	3b30      	subs	r3, #48	; 0x30
 8005eea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b09      	cmp	r3, #9
 8005ef0:	d80e      	bhi.n	8005f10 <get_ldnumber+0x72>
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d10a      	bne.n	8005f10 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d107      	bne.n	8005f10 <get_ldnumber+0x72>
					vol = (int)i;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	3301      	adds	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	e002      	b.n	8005f1a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005f18:	693b      	ldr	r3, [r7, #16]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	70da      	strb	r2, [r3, #3]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fed6 	bl	8005cf4 <move_window>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <check_fs+0x2a>
 8005f4e:	2304      	movs	r3, #4
 8005f50:	e038      	b.n	8005fc4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3330      	adds	r3, #48	; 0x30
 8005f56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fe26 	bl	8005bac <ld_word>
 8005f60:	4603      	mov	r3, r0
 8005f62:	461a      	mov	r2, r3
 8005f64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d001      	beq.n	8005f70 <check_fs+0x48>
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e029      	b.n	8005fc4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f76:	2be9      	cmp	r3, #233	; 0xe9
 8005f78:	d009      	beq.n	8005f8e <check_fs+0x66>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f80:	2beb      	cmp	r3, #235	; 0xeb
 8005f82:	d11e      	bne.n	8005fc2 <check_fs+0x9a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f8a:	2b90      	cmp	r3, #144	; 0x90
 8005f8c:	d119      	bne.n	8005fc2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3330      	adds	r3, #48	; 0x30
 8005f92:	3336      	adds	r3, #54	; 0x36
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fe21 	bl	8005bdc <ld_dword>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <check_fs+0xa4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d101      	bne.n	8005faa <check_fs+0x82>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e00c      	b.n	8005fc4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3330      	adds	r3, #48	; 0x30
 8005fae:	3352      	adds	r3, #82	; 0x52
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fe13 	bl	8005bdc <ld_dword>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4a05      	ldr	r2, [pc, #20]	; (8005fd0 <check_fs+0xa8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d101      	bne.n	8005fc2 <check_fs+0x9a>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e000      	b.n	8005fc4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005fc2:	2302      	movs	r3, #2
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	00544146 	.word	0x00544146
 8005fd0:	33544146 	.word	0x33544146

08005fd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b096      	sub	sp, #88	; 0x58
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7ff ff58 	bl	8005e9e <get_ldnumber>
 8005fee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da01      	bge.n	8005ffa <find_volume+0x26>
 8005ff6:	230b      	movs	r3, #11
 8005ff8:	e22d      	b.n	8006456 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005ffa:	4aa1      	ldr	r2, [pc, #644]	; (8006280 <find_volume+0x2ac>)
 8005ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <find_volume+0x3a>
 800600a:	230c      	movs	r3, #12
 800600c:	e223      	b.n	8006456 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006012:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01a      	beq.n	800605a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	785b      	ldrb	r3, [r3, #1]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff fd3f 	bl	8005aac <disk_status>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10c      	bne.n	800605a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <find_volume+0x82>
 8006046:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006052:	230a      	movs	r3, #10
 8006054:	e1ff      	b.n	8006456 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006056:	2300      	movs	r3, #0
 8006058:	e1fd      	b.n	8006456 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006062:	b2da      	uxtb	r2, r3
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fd37 	bl	8005ae0 <disk_initialize>
 8006072:	4603      	mov	r3, r0
 8006074:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006084:	2303      	movs	r3, #3
 8006086:	e1e6      	b.n	8006456 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <find_volume+0xca>
 800608e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800609a:	230a      	movs	r3, #10
 800609c:	e1db      	b.n	8006456 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80060a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060a6:	f7ff ff3f 	bl	8005f28 <check_fs>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80060b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d149      	bne.n	800614c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80060b8:	2300      	movs	r3, #0
 80060ba:	643b      	str	r3, [r7, #64]	; 0x40
 80060bc:	e01e      	b.n	80060fc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80060cc:	4413      	add	r3, r2
 80060ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	3304      	adds	r3, #4
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d006      	beq.n	80060e8 <find_volume+0x114>
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	3308      	adds	r3, #8
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fd7c 	bl	8005bdc <ld_dword>
 80060e4:	4602      	mov	r2, r0
 80060e6:	e000      	b.n	80060ea <find_volume+0x116>
 80060e8:	2200      	movs	r2, #0
 80060ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	3358      	adds	r3, #88	; 0x58
 80060f0:	443b      	add	r3, r7
 80060f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80060f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f8:	3301      	adds	r3, #1
 80060fa:	643b      	str	r3, [r7, #64]	; 0x40
 80060fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d9dd      	bls.n	80060be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006102:	2300      	movs	r3, #0
 8006104:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <find_volume+0x13e>
 800610c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610e:	3b01      	subs	r3, #1
 8006110:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	3358      	adds	r3, #88	; 0x58
 8006118:	443b      	add	r3, r7
 800611a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800611e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006122:	2b00      	cmp	r3, #0
 8006124:	d005      	beq.n	8006132 <find_volume+0x15e>
 8006126:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800612a:	f7ff fefd 	bl	8005f28 <check_fs>
 800612e:	4603      	mov	r3, r0
 8006130:	e000      	b.n	8006134 <find_volume+0x160>
 8006132:	2303      	movs	r3, #3
 8006134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800613c:	2b01      	cmp	r3, #1
 800613e:	d905      	bls.n	800614c <find_volume+0x178>
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	3301      	adds	r3, #1
 8006144:	643b      	str	r3, [r7, #64]	; 0x40
 8006146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006148:	2b03      	cmp	r3, #3
 800614a:	d9e2      	bls.n	8006112 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800614c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006150:	2b04      	cmp	r3, #4
 8006152:	d101      	bne.n	8006158 <find_volume+0x184>
 8006154:	2301      	movs	r3, #1
 8006156:	e17e      	b.n	8006456 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800615c:	2b01      	cmp	r3, #1
 800615e:	d901      	bls.n	8006164 <find_volume+0x190>
 8006160:	230d      	movs	r3, #13
 8006162:	e178      	b.n	8006456 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	3330      	adds	r3, #48	; 0x30
 8006168:	330b      	adds	r3, #11
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fd1e 	bl	8005bac <ld_word>
 8006170:	4603      	mov	r3, r0
 8006172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006176:	d001      	beq.n	800617c <find_volume+0x1a8>
 8006178:	230d      	movs	r3, #13
 800617a:	e16c      	b.n	8006456 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	3330      	adds	r3, #48	; 0x30
 8006180:	3316      	adds	r3, #22
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fd12 	bl	8005bac <ld_word>
 8006188:	4603      	mov	r3, r0
 800618a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800618c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <find_volume+0x1cc>
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	3330      	adds	r3, #48	; 0x30
 8006196:	3324      	adds	r3, #36	; 0x24
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fd1f 	bl	8005bdc <ld_dword>
 800619e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061a4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	789b      	ldrb	r3, [r3, #2]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d005      	beq.n	80061c4 <find_volume+0x1f0>
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	789b      	ldrb	r3, [r3, #2]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d001      	beq.n	80061c4 <find_volume+0x1f0>
 80061c0:	230d      	movs	r3, #13
 80061c2:	e148      	b.n	8006456 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	789b      	ldrb	r3, [r3, #2]
 80061c8:	461a      	mov	r2, r3
 80061ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d8:	b29a      	uxth	r2, r3
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	895b      	ldrh	r3, [r3, #10]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d008      	beq.n	80061f8 <find_volume+0x224>
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	895b      	ldrh	r3, [r3, #10]
 80061ea:	461a      	mov	r2, r3
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	895b      	ldrh	r3, [r3, #10]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <find_volume+0x228>
 80061f8:	230d      	movs	r3, #13
 80061fa:	e12c      	b.n	8006456 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	3330      	adds	r3, #48	; 0x30
 8006200:	3311      	adds	r3, #17
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fcd2 	bl	8005bac <ld_word>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	891b      	ldrh	r3, [r3, #8]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <find_volume+0x24e>
 800621e:	230d      	movs	r3, #13
 8006220:	e119      	b.n	8006456 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	3330      	adds	r3, #48	; 0x30
 8006226:	3313      	adds	r3, #19
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fcbf 	bl	8005bac <ld_word>
 800622e:	4603      	mov	r3, r0
 8006230:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <find_volume+0x272>
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	3330      	adds	r3, #48	; 0x30
 800623c:	3320      	adds	r3, #32
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fccc 	bl	8005bdc <ld_dword>
 8006244:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	3330      	adds	r3, #48	; 0x30
 800624a:	330e      	adds	r3, #14
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fcad 	bl	8005bac <ld_word>
 8006252:	4603      	mov	r3, r0
 8006254:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006256:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <find_volume+0x28c>
 800625c:	230d      	movs	r3, #13
 800625e:	e0fa      	b.n	8006456 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006260:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	4413      	add	r3, r2
 8006266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006268:	8912      	ldrh	r2, [r2, #8]
 800626a:	0912      	lsrs	r2, r2, #4
 800626c:	b292      	uxth	r2, r2
 800626e:	4413      	add	r3, r2
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	429a      	cmp	r2, r3
 8006278:	d204      	bcs.n	8006284 <find_volume+0x2b0>
 800627a:	230d      	movs	r3, #13
 800627c:	e0eb      	b.n	8006456 <find_volume+0x482>
 800627e:	bf00      	nop
 8006280:	20013678 	.word	0x20013678
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800628c:	8952      	ldrh	r2, [r2, #10]
 800628e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <find_volume+0x2ca>
 800629a:	230d      	movs	r3, #13
 800629c:	e0db      	b.n	8006456 <find_volume+0x482>
		fmt = FS_FAT32;
 800629e:	2303      	movs	r3, #3
 80062a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d802      	bhi.n	80062b4 <find_volume+0x2e0>
 80062ae:	2302      	movs	r3, #2
 80062b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d802      	bhi.n	80062c4 <find_volume+0x2f0>
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	1c9a      	adds	r2, r3, #2
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062d0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80062d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80062d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d6:	441a      	add	r2, r3
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80062dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	441a      	add	r2, r3
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80062e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d11e      	bne.n	800632c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	3330      	adds	r3, #48	; 0x30
 80062f2:	332a      	adds	r3, #42	; 0x2a
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fc59 	bl	8005bac <ld_word>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <find_volume+0x330>
 8006300:	230d      	movs	r3, #13
 8006302:	e0a8      	b.n	8006456 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	891b      	ldrh	r3, [r3, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <find_volume+0x33c>
 800630c:	230d      	movs	r3, #13
 800630e:	e0a2      	b.n	8006456 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	3330      	adds	r3, #48	; 0x30
 8006314:	332c      	adds	r3, #44	; 0x2c
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fc60 	bl	8005bdc <ld_dword>
 800631c:	4602      	mov	r2, r0
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	647b      	str	r3, [r7, #68]	; 0x44
 800632a:	e01f      	b.n	800636c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632e:	891b      	ldrh	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <find_volume+0x364>
 8006334:	230d      	movs	r3, #13
 8006336:	e08e      	b.n	8006456 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	6a1a      	ldr	r2, [r3, #32]
 800633c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633e:	441a      	add	r2, r3
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006348:	2b02      	cmp	r3, #2
 800634a:	d103      	bne.n	8006354 <find_volume+0x380>
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	e00a      	b.n	800636a <find_volume+0x396>
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	695a      	ldr	r2, [r3, #20]
 8006358:	4613      	mov	r3, r2
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4413      	add	r3, r2
 800635e:	085a      	lsrs	r2, r3, #1
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800636a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	699a      	ldr	r2, [r3, #24]
 8006370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006372:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006376:	0a5b      	lsrs	r3, r3, #9
 8006378:	429a      	cmp	r2, r3
 800637a:	d201      	bcs.n	8006380 <find_volume+0x3ac>
 800637c:	230d      	movs	r3, #13
 800637e:	e06a      	b.n	8006456 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	f04f 32ff 	mov.w	r2, #4294967295
 8006386:	611a      	str	r2, [r3, #16]
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	2280      	movs	r2, #128	; 0x80
 8006394:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800639a:	2b03      	cmp	r3, #3
 800639c:	d149      	bne.n	8006432 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	3330      	adds	r3, #48	; 0x30
 80063a2:	3330      	adds	r3, #48	; 0x30
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff fc01 	bl	8005bac <ld_word>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d140      	bne.n	8006432 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80063b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b2:	3301      	adds	r3, #1
 80063b4:	4619      	mov	r1, r3
 80063b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063b8:	f7ff fc9c 	bl	8005cf4 <move_window>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d137      	bne.n	8006432 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	2200      	movs	r2, #0
 80063c6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	3330      	adds	r3, #48	; 0x30
 80063cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fbeb 	bl	8005bac <ld_word>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461a      	mov	r2, r3
 80063da:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80063de:	429a      	cmp	r2, r3
 80063e0:	d127      	bne.n	8006432 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	3330      	adds	r3, #48	; 0x30
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fbf8 	bl	8005bdc <ld_dword>
 80063ec:	4603      	mov	r3, r0
 80063ee:	4a1c      	ldr	r2, [pc, #112]	; (8006460 <find_volume+0x48c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d11e      	bne.n	8006432 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	3330      	adds	r3, #48	; 0x30
 80063f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fbed 	bl	8005bdc <ld_dword>
 8006402:	4603      	mov	r3, r0
 8006404:	4a17      	ldr	r2, [pc, #92]	; (8006464 <find_volume+0x490>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d113      	bne.n	8006432 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	3330      	adds	r3, #48	; 0x30
 800640e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fbe2 	bl	8005bdc <ld_dword>
 8006418:	4602      	mov	r2, r0
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	3330      	adds	r3, #48	; 0x30
 8006422:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fbd8 	bl	8005bdc <ld_dword>
 800642c:	4602      	mov	r2, r0
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006438:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800643a:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <find_volume+0x494>)
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	3301      	adds	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	4b09      	ldr	r3, [pc, #36]	; (8006468 <find_volume+0x494>)
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	4b08      	ldr	r3, [pc, #32]	; (8006468 <find_volume+0x494>)
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800644e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006450:	f7ff fbe8 	bl	8005c24 <clear_lock>
#endif
	return FR_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3758      	adds	r7, #88	; 0x58
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	41615252 	.word	0x41615252
 8006464:	61417272 	.word	0x61417272
 8006468:	2001367c 	.word	0x2001367c

0800646c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800647e:	f107 0310 	add.w	r3, r7, #16
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff fd0b 	bl	8005e9e <get_ldnumber>
 8006488:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	da01      	bge.n	8006494 <f_mount+0x28>
 8006490:	230b      	movs	r3, #11
 8006492:	e02b      	b.n	80064ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006494:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <f_mount+0x88>)
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800649c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80064a4:	69b8      	ldr	r0, [r7, #24]
 80064a6:	f7ff fbbd 	bl	8005c24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	490d      	ldr	r1, [pc, #52]	; (80064f4 <f_mount+0x88>)
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <f_mount+0x66>
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d001      	beq.n	80064d6 <f_mount+0x6a>
 80064d2:	2300      	movs	r3, #0
 80064d4:	e00a      	b.n	80064ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80064d6:	f107 010c 	add.w	r1, r7, #12
 80064da:	f107 0308 	add.w	r3, r7, #8
 80064de:	2200      	movs	r2, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fd77 	bl	8005fd4 <find_volume>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20013678 	.word	0x20013678

080064f8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b092      	sub	sp, #72	; 0x48
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006504:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006508:	f107 030c 	add.w	r3, r7, #12
 800650c:	2200      	movs	r2, #0
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fd60 	bl	8005fd4 <find_volume>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800651a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800651e:	2b00      	cmp	r3, #0
 8006520:	f040 8099 	bne.w	8006656 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	3b02      	subs	r3, #2
 8006534:	429a      	cmp	r2, r3
 8006536:	d804      	bhi.n	8006542 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e089      	b.n	8006656 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d128      	bne.n	80065a0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800654e:	2302      	movs	r3, #2
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff fbf6 	bl	8005d4e <get_fat>
 8006562:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656a:	d103      	bne.n	8006574 <f_getfree+0x7c>
 800656c:	2301      	movs	r3, #1
 800656e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006572:	e063      	b.n	800663c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d103      	bne.n	8006582 <f_getfree+0x8a>
 800657a:	2302      	movs	r3, #2
 800657c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006580:	e05c      	b.n	800663c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <f_getfree+0x96>
 8006588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658a:	3301      	adds	r3, #1
 800658c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800658e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006590:	3301      	adds	r3, #1
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800659a:	429a      	cmp	r2, r3
 800659c:	d3db      	bcc.n	8006556 <f_getfree+0x5e>
 800659e:	e04d      	b.n	800663c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
 80065b0:	2300      	movs	r3, #0
 80065b2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80065b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d113      	bne.n	80065e2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80065ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80065c2:	4619      	mov	r1, r3
 80065c4:	f7ff fb96 	bl	8005cf4 <move_window>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80065ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d131      	bne.n	800663a <f_getfree+0x142>
							p = fs->win;
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	3330      	adds	r3, #48	; 0x30
 80065da:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80065dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d10f      	bne.n	800660a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80065ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ec:	f7ff fade 	bl	8005bac <ld_word>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <f_getfree+0x104>
 80065f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f8:	3301      	adds	r3, #1
 80065fa:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	3302      	adds	r3, #2
 8006600:	633b      	str	r3, [r7, #48]	; 0x30
 8006602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006604:	3b02      	subs	r3, #2
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
 8006608:	e010      	b.n	800662c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800660a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800660c:	f7ff fae6 	bl	8005bdc <ld_dword>
 8006610:	4603      	mov	r3, r0
 8006612:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <f_getfree+0x128>
 800661a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661c:	3301      	adds	r3, #1
 800661e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	3304      	adds	r3, #4
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 8006626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006628:	3b04      	subs	r3, #4
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662e:	3b01      	subs	r3, #1
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1bd      	bne.n	80065b4 <f_getfree+0xbc>
 8006638:	e000      	b.n	800663c <f_getfree+0x144>
							if (res != FR_OK) break;
 800663a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006640:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006646:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	791a      	ldrb	r2, [r3, #4]
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006656:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800665a:	4618      	mov	r0, r3
 800665c:	3748      	adds	r7, #72	; 0x48
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006672:	2301      	movs	r3, #1
 8006674:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800667a:	4b1f      	ldr	r3, [pc, #124]	; (80066f8 <FATFS_LinkDriverEx+0x94>)
 800667c:	7a5b      	ldrb	r3, [r3, #9]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d131      	bne.n	80066e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006684:	4b1c      	ldr	r3, [pc, #112]	; (80066f8 <FATFS_LinkDriverEx+0x94>)
 8006686:	7a5b      	ldrb	r3, [r3, #9]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	4b1a      	ldr	r3, [pc, #104]	; (80066f8 <FATFS_LinkDriverEx+0x94>)
 800668e:	2100      	movs	r1, #0
 8006690:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006692:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <FATFS_LinkDriverEx+0x94>)
 8006694:	7a5b      	ldrb	r3, [r3, #9]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <FATFS_LinkDriverEx+0x94>)
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <FATFS_LinkDriverEx+0x94>)
 80066a4:	7a5b      	ldrb	r3, [r3, #9]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <FATFS_LinkDriverEx+0x94>)
 80066ac:	4413      	add	r3, r2
 80066ae:	79fa      	ldrb	r2, [r7, #7]
 80066b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80066b2:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <FATFS_LinkDriverEx+0x94>)
 80066b4:	7a5b      	ldrb	r3, [r3, #9]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	b2d1      	uxtb	r1, r2
 80066bc:	4a0e      	ldr	r2, [pc, #56]	; (80066f8 <FATFS_LinkDriverEx+0x94>)
 80066be:	7251      	strb	r1, [r2, #9]
 80066c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80066c2:	7dbb      	ldrb	r3, [r7, #22]
 80066c4:	3330      	adds	r3, #48	; 0x30
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	3301      	adds	r3, #1
 80066d0:	223a      	movs	r2, #58	; 0x3a
 80066d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	3302      	adds	r3, #2
 80066d8:	222f      	movs	r2, #47	; 0x2f
 80066da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	3303      	adds	r3, #3
 80066e0:	2200      	movs	r2, #0
 80066e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	200136a0 	.word	0x200136a0

080066fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006706:	2200      	movs	r2, #0
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff ffaa 	bl	8006664 <FATFS_LinkDriverEx>
 8006710:	4603      	mov	r3, r0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <__errno>:
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <__errno+0x8>)
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000024 	.word	0x20000024

08006728 <__libc_init_array>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4d0d      	ldr	r5, [pc, #52]	; (8006760 <__libc_init_array+0x38>)
 800672c:	4c0d      	ldr	r4, [pc, #52]	; (8006764 <__libc_init_array+0x3c>)
 800672e:	1b64      	subs	r4, r4, r5
 8006730:	10a4      	asrs	r4, r4, #2
 8006732:	2600      	movs	r6, #0
 8006734:	42a6      	cmp	r6, r4
 8006736:	d109      	bne.n	800674c <__libc_init_array+0x24>
 8006738:	4d0b      	ldr	r5, [pc, #44]	; (8006768 <__libc_init_array+0x40>)
 800673a:	4c0c      	ldr	r4, [pc, #48]	; (800676c <__libc_init_array+0x44>)
 800673c:	f001 f8a8 	bl	8007890 <_init>
 8006740:	1b64      	subs	r4, r4, r5
 8006742:	10a4      	asrs	r4, r4, #2
 8006744:	2600      	movs	r6, #0
 8006746:	42a6      	cmp	r6, r4
 8006748:	d105      	bne.n	8006756 <__libc_init_array+0x2e>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006750:	4798      	blx	r3
 8006752:	3601      	adds	r6, #1
 8006754:	e7ee      	b.n	8006734 <__libc_init_array+0xc>
 8006756:	f855 3b04 	ldr.w	r3, [r5], #4
 800675a:	4798      	blx	r3
 800675c:	3601      	adds	r6, #1
 800675e:	e7f2      	b.n	8006746 <__libc_init_array+0x1e>
 8006760:	08007c68 	.word	0x08007c68
 8006764:	08007c68 	.word	0x08007c68
 8006768:	08007c68 	.word	0x08007c68
 800676c:	08007c6c 	.word	0x08007c6c

08006770 <memset>:
 8006770:	4402      	add	r2, r0
 8006772:	4603      	mov	r3, r0
 8006774:	4293      	cmp	r3, r2
 8006776:	d100      	bne.n	800677a <memset+0xa>
 8006778:	4770      	bx	lr
 800677a:	f803 1b01 	strb.w	r1, [r3], #1
 800677e:	e7f9      	b.n	8006774 <memset+0x4>

08006780 <_puts_r>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	460e      	mov	r6, r1
 8006784:	4605      	mov	r5, r0
 8006786:	b118      	cbz	r0, 8006790 <_puts_r+0x10>
 8006788:	6983      	ldr	r3, [r0, #24]
 800678a:	b90b      	cbnz	r3, 8006790 <_puts_r+0x10>
 800678c:	f000 fa82 	bl	8006c94 <__sinit>
 8006790:	69ab      	ldr	r3, [r5, #24]
 8006792:	68ac      	ldr	r4, [r5, #8]
 8006794:	b913      	cbnz	r3, 800679c <_puts_r+0x1c>
 8006796:	4628      	mov	r0, r5
 8006798:	f000 fa7c 	bl	8006c94 <__sinit>
 800679c:	4b2c      	ldr	r3, [pc, #176]	; (8006850 <_puts_r+0xd0>)
 800679e:	429c      	cmp	r4, r3
 80067a0:	d120      	bne.n	80067e4 <_puts_r+0x64>
 80067a2:	686c      	ldr	r4, [r5, #4]
 80067a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067a6:	07db      	lsls	r3, r3, #31
 80067a8:	d405      	bmi.n	80067b6 <_puts_r+0x36>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	0598      	lsls	r0, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_puts_r+0x36>
 80067b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b2:	f000 fb0d 	bl	8006dd0 <__retarget_lock_acquire_recursive>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	0719      	lsls	r1, r3, #28
 80067ba:	d51d      	bpl.n	80067f8 <_puts_r+0x78>
 80067bc:	6923      	ldr	r3, [r4, #16]
 80067be:	b1db      	cbz	r3, 80067f8 <_puts_r+0x78>
 80067c0:	3e01      	subs	r6, #1
 80067c2:	68a3      	ldr	r3, [r4, #8]
 80067c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60a3      	str	r3, [r4, #8]
 80067cc:	bb39      	cbnz	r1, 800681e <_puts_r+0x9e>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da38      	bge.n	8006844 <_puts_r+0xc4>
 80067d2:	4622      	mov	r2, r4
 80067d4:	210a      	movs	r1, #10
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 f882 	bl	80068e0 <__swbuf_r>
 80067dc:	3001      	adds	r0, #1
 80067de:	d011      	beq.n	8006804 <_puts_r+0x84>
 80067e0:	250a      	movs	r5, #10
 80067e2:	e011      	b.n	8006808 <_puts_r+0x88>
 80067e4:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <_puts_r+0xd4>)
 80067e6:	429c      	cmp	r4, r3
 80067e8:	d101      	bne.n	80067ee <_puts_r+0x6e>
 80067ea:	68ac      	ldr	r4, [r5, #8]
 80067ec:	e7da      	b.n	80067a4 <_puts_r+0x24>
 80067ee:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <_puts_r+0xd8>)
 80067f0:	429c      	cmp	r4, r3
 80067f2:	bf08      	it	eq
 80067f4:	68ec      	ldreq	r4, [r5, #12]
 80067f6:	e7d5      	b.n	80067a4 <_puts_r+0x24>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 f8c2 	bl	8006984 <__swsetup_r>
 8006800:	2800      	cmp	r0, #0
 8006802:	d0dd      	beq.n	80067c0 <_puts_r+0x40>
 8006804:	f04f 35ff 	mov.w	r5, #4294967295
 8006808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800680a:	07da      	lsls	r2, r3, #31
 800680c:	d405      	bmi.n	800681a <_puts_r+0x9a>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	059b      	lsls	r3, r3, #22
 8006812:	d402      	bmi.n	800681a <_puts_r+0x9a>
 8006814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006816:	f000 fadc 	bl	8006dd2 <__retarget_lock_release_recursive>
 800681a:	4628      	mov	r0, r5
 800681c:	bd70      	pop	{r4, r5, r6, pc}
 800681e:	2b00      	cmp	r3, #0
 8006820:	da04      	bge.n	800682c <_puts_r+0xac>
 8006822:	69a2      	ldr	r2, [r4, #24]
 8006824:	429a      	cmp	r2, r3
 8006826:	dc06      	bgt.n	8006836 <_puts_r+0xb6>
 8006828:	290a      	cmp	r1, #10
 800682a:	d004      	beq.n	8006836 <_puts_r+0xb6>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	6022      	str	r2, [r4, #0]
 8006832:	7019      	strb	r1, [r3, #0]
 8006834:	e7c5      	b.n	80067c2 <_puts_r+0x42>
 8006836:	4622      	mov	r2, r4
 8006838:	4628      	mov	r0, r5
 800683a:	f000 f851 	bl	80068e0 <__swbuf_r>
 800683e:	3001      	adds	r0, #1
 8006840:	d1bf      	bne.n	80067c2 <_puts_r+0x42>
 8006842:	e7df      	b.n	8006804 <_puts_r+0x84>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	250a      	movs	r5, #10
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	6022      	str	r2, [r4, #0]
 800684c:	701d      	strb	r5, [r3, #0]
 800684e:	e7db      	b.n	8006808 <_puts_r+0x88>
 8006850:	08007bec 	.word	0x08007bec
 8006854:	08007c0c 	.word	0x08007c0c
 8006858:	08007bcc 	.word	0x08007bcc

0800685c <puts>:
 800685c:	4b02      	ldr	r3, [pc, #8]	; (8006868 <puts+0xc>)
 800685e:	4601      	mov	r1, r0
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	f7ff bf8d 	b.w	8006780 <_puts_r>
 8006866:	bf00      	nop
 8006868:	20000024 	.word	0x20000024

0800686c <_vsniprintf_r>:
 800686c:	b530      	push	{r4, r5, lr}
 800686e:	4614      	mov	r4, r2
 8006870:	2c00      	cmp	r4, #0
 8006872:	b09b      	sub	sp, #108	; 0x6c
 8006874:	4605      	mov	r5, r0
 8006876:	461a      	mov	r2, r3
 8006878:	da05      	bge.n	8006886 <_vsniprintf_r+0x1a>
 800687a:	238b      	movs	r3, #139	; 0x8b
 800687c:	6003      	str	r3, [r0, #0]
 800687e:	f04f 30ff 	mov.w	r0, #4294967295
 8006882:	b01b      	add	sp, #108	; 0x6c
 8006884:	bd30      	pop	{r4, r5, pc}
 8006886:	f44f 7302 	mov.w	r3, #520	; 0x208
 800688a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800688e:	bf14      	ite	ne
 8006890:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006894:	4623      	moveq	r3, r4
 8006896:	9302      	str	r3, [sp, #8]
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800689e:	9100      	str	r1, [sp, #0]
 80068a0:	9104      	str	r1, [sp, #16]
 80068a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80068a6:	4669      	mov	r1, sp
 80068a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068aa:	f000 fc35 	bl	8007118 <_svfiprintf_r>
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	bfbc      	itt	lt
 80068b2:	238b      	movlt	r3, #139	; 0x8b
 80068b4:	602b      	strlt	r3, [r5, #0]
 80068b6:	2c00      	cmp	r4, #0
 80068b8:	d0e3      	beq.n	8006882 <_vsniprintf_r+0x16>
 80068ba:	9b00      	ldr	r3, [sp, #0]
 80068bc:	2200      	movs	r2, #0
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	e7df      	b.n	8006882 <_vsniprintf_r+0x16>
	...

080068c4 <vsniprintf>:
 80068c4:	b507      	push	{r0, r1, r2, lr}
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	4613      	mov	r3, r2
 80068ca:	460a      	mov	r2, r1
 80068cc:	4601      	mov	r1, r0
 80068ce:	4803      	ldr	r0, [pc, #12]	; (80068dc <vsniprintf+0x18>)
 80068d0:	6800      	ldr	r0, [r0, #0]
 80068d2:	f7ff ffcb 	bl	800686c <_vsniprintf_r>
 80068d6:	b003      	add	sp, #12
 80068d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80068dc:	20000024 	.word	0x20000024

080068e0 <__swbuf_r>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	460e      	mov	r6, r1
 80068e4:	4614      	mov	r4, r2
 80068e6:	4605      	mov	r5, r0
 80068e8:	b118      	cbz	r0, 80068f2 <__swbuf_r+0x12>
 80068ea:	6983      	ldr	r3, [r0, #24]
 80068ec:	b90b      	cbnz	r3, 80068f2 <__swbuf_r+0x12>
 80068ee:	f000 f9d1 	bl	8006c94 <__sinit>
 80068f2:	4b21      	ldr	r3, [pc, #132]	; (8006978 <__swbuf_r+0x98>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	d12b      	bne.n	8006950 <__swbuf_r+0x70>
 80068f8:	686c      	ldr	r4, [r5, #4]
 80068fa:	69a3      	ldr	r3, [r4, #24]
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	071a      	lsls	r2, r3, #28
 8006902:	d52f      	bpl.n	8006964 <__swbuf_r+0x84>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	b36b      	cbz	r3, 8006964 <__swbuf_r+0x84>
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	6820      	ldr	r0, [r4, #0]
 800690c:	1ac0      	subs	r0, r0, r3
 800690e:	6963      	ldr	r3, [r4, #20]
 8006910:	b2f6      	uxtb	r6, r6
 8006912:	4283      	cmp	r3, r0
 8006914:	4637      	mov	r7, r6
 8006916:	dc04      	bgt.n	8006922 <__swbuf_r+0x42>
 8006918:	4621      	mov	r1, r4
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f926 	bl	8006b6c <_fflush_r>
 8006920:	bb30      	cbnz	r0, 8006970 <__swbuf_r+0x90>
 8006922:	68a3      	ldr	r3, [r4, #8]
 8006924:	3b01      	subs	r3, #1
 8006926:	60a3      	str	r3, [r4, #8]
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	6022      	str	r2, [r4, #0]
 800692e:	701e      	strb	r6, [r3, #0]
 8006930:	6963      	ldr	r3, [r4, #20]
 8006932:	3001      	adds	r0, #1
 8006934:	4283      	cmp	r3, r0
 8006936:	d004      	beq.n	8006942 <__swbuf_r+0x62>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	07db      	lsls	r3, r3, #31
 800693c:	d506      	bpl.n	800694c <__swbuf_r+0x6c>
 800693e:	2e0a      	cmp	r6, #10
 8006940:	d104      	bne.n	800694c <__swbuf_r+0x6c>
 8006942:	4621      	mov	r1, r4
 8006944:	4628      	mov	r0, r5
 8006946:	f000 f911 	bl	8006b6c <_fflush_r>
 800694a:	b988      	cbnz	r0, 8006970 <__swbuf_r+0x90>
 800694c:	4638      	mov	r0, r7
 800694e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <__swbuf_r+0x9c>)
 8006952:	429c      	cmp	r4, r3
 8006954:	d101      	bne.n	800695a <__swbuf_r+0x7a>
 8006956:	68ac      	ldr	r4, [r5, #8]
 8006958:	e7cf      	b.n	80068fa <__swbuf_r+0x1a>
 800695a:	4b09      	ldr	r3, [pc, #36]	; (8006980 <__swbuf_r+0xa0>)
 800695c:	429c      	cmp	r4, r3
 800695e:	bf08      	it	eq
 8006960:	68ec      	ldreq	r4, [r5, #12]
 8006962:	e7ca      	b.n	80068fa <__swbuf_r+0x1a>
 8006964:	4621      	mov	r1, r4
 8006966:	4628      	mov	r0, r5
 8006968:	f000 f80c 	bl	8006984 <__swsetup_r>
 800696c:	2800      	cmp	r0, #0
 800696e:	d0cb      	beq.n	8006908 <__swbuf_r+0x28>
 8006970:	f04f 37ff 	mov.w	r7, #4294967295
 8006974:	e7ea      	b.n	800694c <__swbuf_r+0x6c>
 8006976:	bf00      	nop
 8006978:	08007bec 	.word	0x08007bec
 800697c:	08007c0c 	.word	0x08007c0c
 8006980:	08007bcc 	.word	0x08007bcc

08006984 <__swsetup_r>:
 8006984:	4b32      	ldr	r3, [pc, #200]	; (8006a50 <__swsetup_r+0xcc>)
 8006986:	b570      	push	{r4, r5, r6, lr}
 8006988:	681d      	ldr	r5, [r3, #0]
 800698a:	4606      	mov	r6, r0
 800698c:	460c      	mov	r4, r1
 800698e:	b125      	cbz	r5, 800699a <__swsetup_r+0x16>
 8006990:	69ab      	ldr	r3, [r5, #24]
 8006992:	b913      	cbnz	r3, 800699a <__swsetup_r+0x16>
 8006994:	4628      	mov	r0, r5
 8006996:	f000 f97d 	bl	8006c94 <__sinit>
 800699a:	4b2e      	ldr	r3, [pc, #184]	; (8006a54 <__swsetup_r+0xd0>)
 800699c:	429c      	cmp	r4, r3
 800699e:	d10f      	bne.n	80069c0 <__swsetup_r+0x3c>
 80069a0:	686c      	ldr	r4, [r5, #4]
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069a8:	0719      	lsls	r1, r3, #28
 80069aa:	d42c      	bmi.n	8006a06 <__swsetup_r+0x82>
 80069ac:	06dd      	lsls	r5, r3, #27
 80069ae:	d411      	bmi.n	80069d4 <__swsetup_r+0x50>
 80069b0:	2309      	movs	r3, #9
 80069b2:	6033      	str	r3, [r6, #0]
 80069b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069b8:	81a3      	strh	r3, [r4, #12]
 80069ba:	f04f 30ff 	mov.w	r0, #4294967295
 80069be:	e03e      	b.n	8006a3e <__swsetup_r+0xba>
 80069c0:	4b25      	ldr	r3, [pc, #148]	; (8006a58 <__swsetup_r+0xd4>)
 80069c2:	429c      	cmp	r4, r3
 80069c4:	d101      	bne.n	80069ca <__swsetup_r+0x46>
 80069c6:	68ac      	ldr	r4, [r5, #8]
 80069c8:	e7eb      	b.n	80069a2 <__swsetup_r+0x1e>
 80069ca:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <__swsetup_r+0xd8>)
 80069cc:	429c      	cmp	r4, r3
 80069ce:	bf08      	it	eq
 80069d0:	68ec      	ldreq	r4, [r5, #12]
 80069d2:	e7e6      	b.n	80069a2 <__swsetup_r+0x1e>
 80069d4:	0758      	lsls	r0, r3, #29
 80069d6:	d512      	bpl.n	80069fe <__swsetup_r+0x7a>
 80069d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069da:	b141      	cbz	r1, 80069ee <__swsetup_r+0x6a>
 80069dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069e0:	4299      	cmp	r1, r3
 80069e2:	d002      	beq.n	80069ea <__swsetup_r+0x66>
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 fa5b 	bl	8006ea0 <_free_r>
 80069ea:	2300      	movs	r3, #0
 80069ec:	6363      	str	r3, [r4, #52]	; 0x34
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069f4:	81a3      	strh	r3, [r4, #12]
 80069f6:	2300      	movs	r3, #0
 80069f8:	6063      	str	r3, [r4, #4]
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	f043 0308 	orr.w	r3, r3, #8
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	b94b      	cbnz	r3, 8006a1e <__swsetup_r+0x9a>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a14:	d003      	beq.n	8006a1e <__swsetup_r+0x9a>
 8006a16:	4621      	mov	r1, r4
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f000 fa01 	bl	8006e20 <__smakebuf_r>
 8006a1e:	89a0      	ldrh	r0, [r4, #12]
 8006a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a24:	f010 0301 	ands.w	r3, r0, #1
 8006a28:	d00a      	beq.n	8006a40 <__swsetup_r+0xbc>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60a3      	str	r3, [r4, #8]
 8006a2e:	6963      	ldr	r3, [r4, #20]
 8006a30:	425b      	negs	r3, r3
 8006a32:	61a3      	str	r3, [r4, #24]
 8006a34:	6923      	ldr	r3, [r4, #16]
 8006a36:	b943      	cbnz	r3, 8006a4a <__swsetup_r+0xc6>
 8006a38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a3c:	d1ba      	bne.n	80069b4 <__swsetup_r+0x30>
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
 8006a40:	0781      	lsls	r1, r0, #30
 8006a42:	bf58      	it	pl
 8006a44:	6963      	ldrpl	r3, [r4, #20]
 8006a46:	60a3      	str	r3, [r4, #8]
 8006a48:	e7f4      	b.n	8006a34 <__swsetup_r+0xb0>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e7f7      	b.n	8006a3e <__swsetup_r+0xba>
 8006a4e:	bf00      	nop
 8006a50:	20000024 	.word	0x20000024
 8006a54:	08007bec 	.word	0x08007bec
 8006a58:	08007c0c 	.word	0x08007c0c
 8006a5c:	08007bcc 	.word	0x08007bcc

08006a60 <__sflush_r>:
 8006a60:	898a      	ldrh	r2, [r1, #12]
 8006a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a66:	4605      	mov	r5, r0
 8006a68:	0710      	lsls	r0, r2, #28
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	d458      	bmi.n	8006b20 <__sflush_r+0xc0>
 8006a6e:	684b      	ldr	r3, [r1, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	dc05      	bgt.n	8006a80 <__sflush_r+0x20>
 8006a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dc02      	bgt.n	8006a80 <__sflush_r+0x20>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d0f9      	beq.n	8006a7a <__sflush_r+0x1a>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a8c:	682f      	ldr	r7, [r5, #0]
 8006a8e:	602b      	str	r3, [r5, #0]
 8006a90:	d032      	beq.n	8006af8 <__sflush_r+0x98>
 8006a92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	075a      	lsls	r2, r3, #29
 8006a98:	d505      	bpl.n	8006aa6 <__sflush_r+0x46>
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	1ac0      	subs	r0, r0, r3
 8006a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aa0:	b10b      	cbz	r3, 8006aa6 <__sflush_r+0x46>
 8006aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aa4:	1ac0      	subs	r0, r0, r3
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aac:	6a21      	ldr	r1, [r4, #32]
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b0      	blx	r6
 8006ab2:	1c43      	adds	r3, r0, #1
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	d106      	bne.n	8006ac6 <__sflush_r+0x66>
 8006ab8:	6829      	ldr	r1, [r5, #0]
 8006aba:	291d      	cmp	r1, #29
 8006abc:	d82c      	bhi.n	8006b18 <__sflush_r+0xb8>
 8006abe:	4a2a      	ldr	r2, [pc, #168]	; (8006b68 <__sflush_r+0x108>)
 8006ac0:	40ca      	lsrs	r2, r1
 8006ac2:	07d6      	lsls	r6, r2, #31
 8006ac4:	d528      	bpl.n	8006b18 <__sflush_r+0xb8>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	6062      	str	r2, [r4, #4]
 8006aca:	04d9      	lsls	r1, r3, #19
 8006acc:	6922      	ldr	r2, [r4, #16]
 8006ace:	6022      	str	r2, [r4, #0]
 8006ad0:	d504      	bpl.n	8006adc <__sflush_r+0x7c>
 8006ad2:	1c42      	adds	r2, r0, #1
 8006ad4:	d101      	bne.n	8006ada <__sflush_r+0x7a>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	b903      	cbnz	r3, 8006adc <__sflush_r+0x7c>
 8006ada:	6560      	str	r0, [r4, #84]	; 0x54
 8006adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ade:	602f      	str	r7, [r5, #0]
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d0ca      	beq.n	8006a7a <__sflush_r+0x1a>
 8006ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ae8:	4299      	cmp	r1, r3
 8006aea:	d002      	beq.n	8006af2 <__sflush_r+0x92>
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 f9d7 	bl	8006ea0 <_free_r>
 8006af2:	2000      	movs	r0, #0
 8006af4:	6360      	str	r0, [r4, #52]	; 0x34
 8006af6:	e7c1      	b.n	8006a7c <__sflush_r+0x1c>
 8006af8:	6a21      	ldr	r1, [r4, #32]
 8006afa:	2301      	movs	r3, #1
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b0      	blx	r6
 8006b00:	1c41      	adds	r1, r0, #1
 8006b02:	d1c7      	bne.n	8006a94 <__sflush_r+0x34>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0c4      	beq.n	8006a94 <__sflush_r+0x34>
 8006b0a:	2b1d      	cmp	r3, #29
 8006b0c:	d001      	beq.n	8006b12 <__sflush_r+0xb2>
 8006b0e:	2b16      	cmp	r3, #22
 8006b10:	d101      	bne.n	8006b16 <__sflush_r+0xb6>
 8006b12:	602f      	str	r7, [r5, #0]
 8006b14:	e7b1      	b.n	8006a7a <__sflush_r+0x1a>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1c:	81a3      	strh	r3, [r4, #12]
 8006b1e:	e7ad      	b.n	8006a7c <__sflush_r+0x1c>
 8006b20:	690f      	ldr	r7, [r1, #16]
 8006b22:	2f00      	cmp	r7, #0
 8006b24:	d0a9      	beq.n	8006a7a <__sflush_r+0x1a>
 8006b26:	0793      	lsls	r3, r2, #30
 8006b28:	680e      	ldr	r6, [r1, #0]
 8006b2a:	bf08      	it	eq
 8006b2c:	694b      	ldreq	r3, [r1, #20]
 8006b2e:	600f      	str	r7, [r1, #0]
 8006b30:	bf18      	it	ne
 8006b32:	2300      	movne	r3, #0
 8006b34:	eba6 0807 	sub.w	r8, r6, r7
 8006b38:	608b      	str	r3, [r1, #8]
 8006b3a:	f1b8 0f00 	cmp.w	r8, #0
 8006b3e:	dd9c      	ble.n	8006a7a <__sflush_r+0x1a>
 8006b40:	6a21      	ldr	r1, [r4, #32]
 8006b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b44:	4643      	mov	r3, r8
 8006b46:	463a      	mov	r2, r7
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b0      	blx	r6
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	dc06      	bgt.n	8006b5e <__sflush_r+0xfe>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b56:	81a3      	strh	r3, [r4, #12]
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	e78e      	b.n	8006a7c <__sflush_r+0x1c>
 8006b5e:	4407      	add	r7, r0
 8006b60:	eba8 0800 	sub.w	r8, r8, r0
 8006b64:	e7e9      	b.n	8006b3a <__sflush_r+0xda>
 8006b66:	bf00      	nop
 8006b68:	20400001 	.word	0x20400001

08006b6c <_fflush_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	690b      	ldr	r3, [r1, #16]
 8006b70:	4605      	mov	r5, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	b913      	cbnz	r3, 8006b7c <_fflush_r+0x10>
 8006b76:	2500      	movs	r5, #0
 8006b78:	4628      	mov	r0, r5
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	b118      	cbz	r0, 8006b86 <_fflush_r+0x1a>
 8006b7e:	6983      	ldr	r3, [r0, #24]
 8006b80:	b90b      	cbnz	r3, 8006b86 <_fflush_r+0x1a>
 8006b82:	f000 f887 	bl	8006c94 <__sinit>
 8006b86:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <_fflush_r+0x6c>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	d11b      	bne.n	8006bc4 <_fflush_r+0x58>
 8006b8c:	686c      	ldr	r4, [r5, #4]
 8006b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0ef      	beq.n	8006b76 <_fflush_r+0xa>
 8006b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b98:	07d0      	lsls	r0, r2, #31
 8006b9a:	d404      	bmi.n	8006ba6 <_fflush_r+0x3a>
 8006b9c:	0599      	lsls	r1, r3, #22
 8006b9e:	d402      	bmi.n	8006ba6 <_fflush_r+0x3a>
 8006ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba2:	f000 f915 	bl	8006dd0 <__retarget_lock_acquire_recursive>
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	4621      	mov	r1, r4
 8006baa:	f7ff ff59 	bl	8006a60 <__sflush_r>
 8006bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb0:	07da      	lsls	r2, r3, #31
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	d4e0      	bmi.n	8006b78 <_fflush_r+0xc>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	059b      	lsls	r3, r3, #22
 8006bba:	d4dd      	bmi.n	8006b78 <_fflush_r+0xc>
 8006bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bbe:	f000 f908 	bl	8006dd2 <__retarget_lock_release_recursive>
 8006bc2:	e7d9      	b.n	8006b78 <_fflush_r+0xc>
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <_fflush_r+0x70>)
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	d101      	bne.n	8006bce <_fflush_r+0x62>
 8006bca:	68ac      	ldr	r4, [r5, #8]
 8006bcc:	e7df      	b.n	8006b8e <_fflush_r+0x22>
 8006bce:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <_fflush_r+0x74>)
 8006bd0:	429c      	cmp	r4, r3
 8006bd2:	bf08      	it	eq
 8006bd4:	68ec      	ldreq	r4, [r5, #12]
 8006bd6:	e7da      	b.n	8006b8e <_fflush_r+0x22>
 8006bd8:	08007bec 	.word	0x08007bec
 8006bdc:	08007c0c 	.word	0x08007c0c
 8006be0:	08007bcc 	.word	0x08007bcc

08006be4 <std>:
 8006be4:	2300      	movs	r3, #0
 8006be6:	b510      	push	{r4, lr}
 8006be8:	4604      	mov	r4, r0
 8006bea:	e9c0 3300 	strd	r3, r3, [r0]
 8006bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bf2:	6083      	str	r3, [r0, #8]
 8006bf4:	8181      	strh	r1, [r0, #12]
 8006bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8006bf8:	81c2      	strh	r2, [r0, #14]
 8006bfa:	6183      	str	r3, [r0, #24]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	2208      	movs	r2, #8
 8006c00:	305c      	adds	r0, #92	; 0x5c
 8006c02:	f7ff fdb5 	bl	8006770 <memset>
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <std+0x38>)
 8006c08:	6263      	str	r3, [r4, #36]	; 0x24
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <std+0x3c>)
 8006c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <std+0x40>)
 8006c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <std+0x44>)
 8006c14:	6224      	str	r4, [r4, #32]
 8006c16:	6323      	str	r3, [r4, #48]	; 0x30
 8006c18:	bd10      	pop	{r4, pc}
 8006c1a:	bf00      	nop
 8006c1c:	08007661 	.word	0x08007661
 8006c20:	08007683 	.word	0x08007683
 8006c24:	080076bb 	.word	0x080076bb
 8006c28:	080076df 	.word	0x080076df

08006c2c <_cleanup_r>:
 8006c2c:	4901      	ldr	r1, [pc, #4]	; (8006c34 <_cleanup_r+0x8>)
 8006c2e:	f000 b8af 	b.w	8006d90 <_fwalk_reent>
 8006c32:	bf00      	nop
 8006c34:	08006b6d 	.word	0x08006b6d

08006c38 <__sfmoreglue>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	2268      	movs	r2, #104	; 0x68
 8006c3c:	1e4d      	subs	r5, r1, #1
 8006c3e:	4355      	muls	r5, r2
 8006c40:	460e      	mov	r6, r1
 8006c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c46:	f000 f997 	bl	8006f78 <_malloc_r>
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	b140      	cbz	r0, 8006c60 <__sfmoreglue+0x28>
 8006c4e:	2100      	movs	r1, #0
 8006c50:	e9c0 1600 	strd	r1, r6, [r0]
 8006c54:	300c      	adds	r0, #12
 8006c56:	60a0      	str	r0, [r4, #8]
 8006c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c5c:	f7ff fd88 	bl	8006770 <memset>
 8006c60:	4620      	mov	r0, r4
 8006c62:	bd70      	pop	{r4, r5, r6, pc}

08006c64 <__sfp_lock_acquire>:
 8006c64:	4801      	ldr	r0, [pc, #4]	; (8006c6c <__sfp_lock_acquire+0x8>)
 8006c66:	f000 b8b3 	b.w	8006dd0 <__retarget_lock_acquire_recursive>
 8006c6a:	bf00      	nop
 8006c6c:	200136ad 	.word	0x200136ad

08006c70 <__sfp_lock_release>:
 8006c70:	4801      	ldr	r0, [pc, #4]	; (8006c78 <__sfp_lock_release+0x8>)
 8006c72:	f000 b8ae 	b.w	8006dd2 <__retarget_lock_release_recursive>
 8006c76:	bf00      	nop
 8006c78:	200136ad 	.word	0x200136ad

08006c7c <__sinit_lock_acquire>:
 8006c7c:	4801      	ldr	r0, [pc, #4]	; (8006c84 <__sinit_lock_acquire+0x8>)
 8006c7e:	f000 b8a7 	b.w	8006dd0 <__retarget_lock_acquire_recursive>
 8006c82:	bf00      	nop
 8006c84:	200136ae 	.word	0x200136ae

08006c88 <__sinit_lock_release>:
 8006c88:	4801      	ldr	r0, [pc, #4]	; (8006c90 <__sinit_lock_release+0x8>)
 8006c8a:	f000 b8a2 	b.w	8006dd2 <__retarget_lock_release_recursive>
 8006c8e:	bf00      	nop
 8006c90:	200136ae 	.word	0x200136ae

08006c94 <__sinit>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	4604      	mov	r4, r0
 8006c98:	f7ff fff0 	bl	8006c7c <__sinit_lock_acquire>
 8006c9c:	69a3      	ldr	r3, [r4, #24]
 8006c9e:	b11b      	cbz	r3, 8006ca8 <__sinit+0x14>
 8006ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca4:	f7ff bff0 	b.w	8006c88 <__sinit_lock_release>
 8006ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cac:	6523      	str	r3, [r4, #80]	; 0x50
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <__sinit+0x68>)
 8006cb0:	4a13      	ldr	r2, [pc, #76]	; (8006d00 <__sinit+0x6c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cb6:	42a3      	cmp	r3, r4
 8006cb8:	bf04      	itt	eq
 8006cba:	2301      	moveq	r3, #1
 8006cbc:	61a3      	streq	r3, [r4, #24]
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 f820 	bl	8006d04 <__sfp>
 8006cc4:	6060      	str	r0, [r4, #4]
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 f81c 	bl	8006d04 <__sfp>
 8006ccc:	60a0      	str	r0, [r4, #8]
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f000 f818 	bl	8006d04 <__sfp>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	60e0      	str	r0, [r4, #12]
 8006cd8:	2104      	movs	r1, #4
 8006cda:	6860      	ldr	r0, [r4, #4]
 8006cdc:	f7ff ff82 	bl	8006be4 <std>
 8006ce0:	68a0      	ldr	r0, [r4, #8]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	2109      	movs	r1, #9
 8006ce6:	f7ff ff7d 	bl	8006be4 <std>
 8006cea:	68e0      	ldr	r0, [r4, #12]
 8006cec:	2202      	movs	r2, #2
 8006cee:	2112      	movs	r1, #18
 8006cf0:	f7ff ff78 	bl	8006be4 <std>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	61a3      	str	r3, [r4, #24]
 8006cf8:	e7d2      	b.n	8006ca0 <__sinit+0xc>
 8006cfa:	bf00      	nop
 8006cfc:	08007bc8 	.word	0x08007bc8
 8006d00:	08006c2d 	.word	0x08006c2d

08006d04 <__sfp>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	4607      	mov	r7, r0
 8006d08:	f7ff ffac 	bl	8006c64 <__sfp_lock_acquire>
 8006d0c:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <__sfp+0x84>)
 8006d0e:	681e      	ldr	r6, [r3, #0]
 8006d10:	69b3      	ldr	r3, [r6, #24]
 8006d12:	b913      	cbnz	r3, 8006d1a <__sfp+0x16>
 8006d14:	4630      	mov	r0, r6
 8006d16:	f7ff ffbd 	bl	8006c94 <__sinit>
 8006d1a:	3648      	adds	r6, #72	; 0x48
 8006d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	d503      	bpl.n	8006d2c <__sfp+0x28>
 8006d24:	6833      	ldr	r3, [r6, #0]
 8006d26:	b30b      	cbz	r3, 8006d6c <__sfp+0x68>
 8006d28:	6836      	ldr	r6, [r6, #0]
 8006d2a:	e7f7      	b.n	8006d1c <__sfp+0x18>
 8006d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d30:	b9d5      	cbnz	r5, 8006d68 <__sfp+0x64>
 8006d32:	4b16      	ldr	r3, [pc, #88]	; (8006d8c <__sfp+0x88>)
 8006d34:	60e3      	str	r3, [r4, #12]
 8006d36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8006d3c:	f000 f847 	bl	8006dce <__retarget_lock_init_recursive>
 8006d40:	f7ff ff96 	bl	8006c70 <__sfp_lock_release>
 8006d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d4c:	6025      	str	r5, [r4, #0]
 8006d4e:	61a5      	str	r5, [r4, #24]
 8006d50:	2208      	movs	r2, #8
 8006d52:	4629      	mov	r1, r5
 8006d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d58:	f7ff fd0a 	bl	8006770 <memset>
 8006d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d64:	4620      	mov	r0, r4
 8006d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d68:	3468      	adds	r4, #104	; 0x68
 8006d6a:	e7d9      	b.n	8006d20 <__sfp+0x1c>
 8006d6c:	2104      	movs	r1, #4
 8006d6e:	4638      	mov	r0, r7
 8006d70:	f7ff ff62 	bl	8006c38 <__sfmoreglue>
 8006d74:	4604      	mov	r4, r0
 8006d76:	6030      	str	r0, [r6, #0]
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d1d5      	bne.n	8006d28 <__sfp+0x24>
 8006d7c:	f7ff ff78 	bl	8006c70 <__sfp_lock_release>
 8006d80:	230c      	movs	r3, #12
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	e7ee      	b.n	8006d64 <__sfp+0x60>
 8006d86:	bf00      	nop
 8006d88:	08007bc8 	.word	0x08007bc8
 8006d8c:	ffff0001 	.word	0xffff0001

08006d90 <_fwalk_reent>:
 8006d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d94:	4606      	mov	r6, r0
 8006d96:	4688      	mov	r8, r1
 8006d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d9c:	2700      	movs	r7, #0
 8006d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006da2:	f1b9 0901 	subs.w	r9, r9, #1
 8006da6:	d505      	bpl.n	8006db4 <_fwalk_reent+0x24>
 8006da8:	6824      	ldr	r4, [r4, #0]
 8006daa:	2c00      	cmp	r4, #0
 8006dac:	d1f7      	bne.n	8006d9e <_fwalk_reent+0xe>
 8006dae:	4638      	mov	r0, r7
 8006db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db4:	89ab      	ldrh	r3, [r5, #12]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d907      	bls.n	8006dca <_fwalk_reent+0x3a>
 8006dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	d003      	beq.n	8006dca <_fwalk_reent+0x3a>
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	47c0      	blx	r8
 8006dc8:	4307      	orrs	r7, r0
 8006dca:	3568      	adds	r5, #104	; 0x68
 8006dcc:	e7e9      	b.n	8006da2 <_fwalk_reent+0x12>

08006dce <__retarget_lock_init_recursive>:
 8006dce:	4770      	bx	lr

08006dd0 <__retarget_lock_acquire_recursive>:
 8006dd0:	4770      	bx	lr

08006dd2 <__retarget_lock_release_recursive>:
 8006dd2:	4770      	bx	lr

08006dd4 <__swhatbuf_r>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	460e      	mov	r6, r1
 8006dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ddc:	2900      	cmp	r1, #0
 8006dde:	b096      	sub	sp, #88	; 0x58
 8006de0:	4614      	mov	r4, r2
 8006de2:	461d      	mov	r5, r3
 8006de4:	da08      	bge.n	8006df8 <__swhatbuf_r+0x24>
 8006de6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	602a      	str	r2, [r5, #0]
 8006dee:	061a      	lsls	r2, r3, #24
 8006df0:	d410      	bmi.n	8006e14 <__swhatbuf_r+0x40>
 8006df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df6:	e00e      	b.n	8006e16 <__swhatbuf_r+0x42>
 8006df8:	466a      	mov	r2, sp
 8006dfa:	f000 fc97 	bl	800772c <_fstat_r>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	dbf1      	blt.n	8006de6 <__swhatbuf_r+0x12>
 8006e02:	9a01      	ldr	r2, [sp, #4]
 8006e04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e0c:	425a      	negs	r2, r3
 8006e0e:	415a      	adcs	r2, r3
 8006e10:	602a      	str	r2, [r5, #0]
 8006e12:	e7ee      	b.n	8006df2 <__swhatbuf_r+0x1e>
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	2000      	movs	r0, #0
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	b016      	add	sp, #88	; 0x58
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e20 <__smakebuf_r>:
 8006e20:	898b      	ldrh	r3, [r1, #12]
 8006e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e24:	079d      	lsls	r5, r3, #30
 8006e26:	4606      	mov	r6, r0
 8006e28:	460c      	mov	r4, r1
 8006e2a:	d507      	bpl.n	8006e3c <__smakebuf_r+0x1c>
 8006e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	6123      	str	r3, [r4, #16]
 8006e34:	2301      	movs	r3, #1
 8006e36:	6163      	str	r3, [r4, #20]
 8006e38:	b002      	add	sp, #8
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	ab01      	add	r3, sp, #4
 8006e3e:	466a      	mov	r2, sp
 8006e40:	f7ff ffc8 	bl	8006dd4 <__swhatbuf_r>
 8006e44:	9900      	ldr	r1, [sp, #0]
 8006e46:	4605      	mov	r5, r0
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 f895 	bl	8006f78 <_malloc_r>
 8006e4e:	b948      	cbnz	r0, 8006e64 <__smakebuf_r+0x44>
 8006e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e54:	059a      	lsls	r2, r3, #22
 8006e56:	d4ef      	bmi.n	8006e38 <__smakebuf_r+0x18>
 8006e58:	f023 0303 	bic.w	r3, r3, #3
 8006e5c:	f043 0302 	orr.w	r3, r3, #2
 8006e60:	81a3      	strh	r3, [r4, #12]
 8006e62:	e7e3      	b.n	8006e2c <__smakebuf_r+0xc>
 8006e64:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <__smakebuf_r+0x7c>)
 8006e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	6020      	str	r0, [r4, #0]
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	9b00      	ldr	r3, [sp, #0]
 8006e74:	6163      	str	r3, [r4, #20]
 8006e76:	9b01      	ldr	r3, [sp, #4]
 8006e78:	6120      	str	r0, [r4, #16]
 8006e7a:	b15b      	cbz	r3, 8006e94 <__smakebuf_r+0x74>
 8006e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e80:	4630      	mov	r0, r6
 8006e82:	f000 fc65 	bl	8007750 <_isatty_r>
 8006e86:	b128      	cbz	r0, 8006e94 <__smakebuf_r+0x74>
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	89a0      	ldrh	r0, [r4, #12]
 8006e96:	4305      	orrs	r5, r0
 8006e98:	81a5      	strh	r5, [r4, #12]
 8006e9a:	e7cd      	b.n	8006e38 <__smakebuf_r+0x18>
 8006e9c:	08006c2d 	.word	0x08006c2d

08006ea0 <_free_r>:
 8006ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ea2:	2900      	cmp	r1, #0
 8006ea4:	d044      	beq.n	8006f30 <_free_r+0x90>
 8006ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eaa:	9001      	str	r0, [sp, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f1a1 0404 	sub.w	r4, r1, #4
 8006eb2:	bfb8      	it	lt
 8006eb4:	18e4      	addlt	r4, r4, r3
 8006eb6:	f000 fc95 	bl	80077e4 <__malloc_lock>
 8006eba:	4a1e      	ldr	r2, [pc, #120]	; (8006f34 <_free_r+0x94>)
 8006ebc:	9801      	ldr	r0, [sp, #4]
 8006ebe:	6813      	ldr	r3, [r2, #0]
 8006ec0:	b933      	cbnz	r3, 8006ed0 <_free_r+0x30>
 8006ec2:	6063      	str	r3, [r4, #4]
 8006ec4:	6014      	str	r4, [r2, #0]
 8006ec6:	b003      	add	sp, #12
 8006ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ecc:	f000 bc90 	b.w	80077f0 <__malloc_unlock>
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	d908      	bls.n	8006ee6 <_free_r+0x46>
 8006ed4:	6825      	ldr	r5, [r4, #0]
 8006ed6:	1961      	adds	r1, r4, r5
 8006ed8:	428b      	cmp	r3, r1
 8006eda:	bf01      	itttt	eq
 8006edc:	6819      	ldreq	r1, [r3, #0]
 8006ede:	685b      	ldreq	r3, [r3, #4]
 8006ee0:	1949      	addeq	r1, r1, r5
 8006ee2:	6021      	streq	r1, [r4, #0]
 8006ee4:	e7ed      	b.n	8006ec2 <_free_r+0x22>
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b10b      	cbz	r3, 8006ef0 <_free_r+0x50>
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	d9fa      	bls.n	8006ee6 <_free_r+0x46>
 8006ef0:	6811      	ldr	r1, [r2, #0]
 8006ef2:	1855      	adds	r5, r2, r1
 8006ef4:	42a5      	cmp	r5, r4
 8006ef6:	d10b      	bne.n	8006f10 <_free_r+0x70>
 8006ef8:	6824      	ldr	r4, [r4, #0]
 8006efa:	4421      	add	r1, r4
 8006efc:	1854      	adds	r4, r2, r1
 8006efe:	42a3      	cmp	r3, r4
 8006f00:	6011      	str	r1, [r2, #0]
 8006f02:	d1e0      	bne.n	8006ec6 <_free_r+0x26>
 8006f04:	681c      	ldr	r4, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	6053      	str	r3, [r2, #4]
 8006f0a:	4421      	add	r1, r4
 8006f0c:	6011      	str	r1, [r2, #0]
 8006f0e:	e7da      	b.n	8006ec6 <_free_r+0x26>
 8006f10:	d902      	bls.n	8006f18 <_free_r+0x78>
 8006f12:	230c      	movs	r3, #12
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	e7d6      	b.n	8006ec6 <_free_r+0x26>
 8006f18:	6825      	ldr	r5, [r4, #0]
 8006f1a:	1961      	adds	r1, r4, r5
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	bf04      	itt	eq
 8006f20:	6819      	ldreq	r1, [r3, #0]
 8006f22:	685b      	ldreq	r3, [r3, #4]
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	bf04      	itt	eq
 8006f28:	1949      	addeq	r1, r1, r5
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	6054      	str	r4, [r2, #4]
 8006f2e:	e7ca      	b.n	8006ec6 <_free_r+0x26>
 8006f30:	b003      	add	sp, #12
 8006f32:	bd30      	pop	{r4, r5, pc}
 8006f34:	200136b0 	.word	0x200136b0

08006f38 <sbrk_aligned>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4e0e      	ldr	r6, [pc, #56]	; (8006f74 <sbrk_aligned+0x3c>)
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	6831      	ldr	r1, [r6, #0]
 8006f40:	4605      	mov	r5, r0
 8006f42:	b911      	cbnz	r1, 8006f4a <sbrk_aligned+0x12>
 8006f44:	f000 fb7c 	bl	8007640 <_sbrk_r>
 8006f48:	6030      	str	r0, [r6, #0]
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 fb77 	bl	8007640 <_sbrk_r>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d00a      	beq.n	8006f6c <sbrk_aligned+0x34>
 8006f56:	1cc4      	adds	r4, r0, #3
 8006f58:	f024 0403 	bic.w	r4, r4, #3
 8006f5c:	42a0      	cmp	r0, r4
 8006f5e:	d007      	beq.n	8006f70 <sbrk_aligned+0x38>
 8006f60:	1a21      	subs	r1, r4, r0
 8006f62:	4628      	mov	r0, r5
 8006f64:	f000 fb6c 	bl	8007640 <_sbrk_r>
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d101      	bne.n	8006f70 <sbrk_aligned+0x38>
 8006f6c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f70:	4620      	mov	r0, r4
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	200136b4 	.word	0x200136b4

08006f78 <_malloc_r>:
 8006f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7c:	1ccd      	adds	r5, r1, #3
 8006f7e:	f025 0503 	bic.w	r5, r5, #3
 8006f82:	3508      	adds	r5, #8
 8006f84:	2d0c      	cmp	r5, #12
 8006f86:	bf38      	it	cc
 8006f88:	250c      	movcc	r5, #12
 8006f8a:	2d00      	cmp	r5, #0
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	db01      	blt.n	8006f94 <_malloc_r+0x1c>
 8006f90:	42a9      	cmp	r1, r5
 8006f92:	d905      	bls.n	8006fa0 <_malloc_r+0x28>
 8006f94:	230c      	movs	r3, #12
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	2600      	movs	r6, #0
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa0:	4e2e      	ldr	r6, [pc, #184]	; (800705c <_malloc_r+0xe4>)
 8006fa2:	f000 fc1f 	bl	80077e4 <__malloc_lock>
 8006fa6:	6833      	ldr	r3, [r6, #0]
 8006fa8:	461c      	mov	r4, r3
 8006faa:	bb34      	cbnz	r4, 8006ffa <_malloc_r+0x82>
 8006fac:	4629      	mov	r1, r5
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f7ff ffc2 	bl	8006f38 <sbrk_aligned>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	d14d      	bne.n	8007056 <_malloc_r+0xde>
 8006fba:	6834      	ldr	r4, [r6, #0]
 8006fbc:	4626      	mov	r6, r4
 8006fbe:	2e00      	cmp	r6, #0
 8006fc0:	d140      	bne.n	8007044 <_malloc_r+0xcc>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	eb04 0803 	add.w	r8, r4, r3
 8006fcc:	f000 fb38 	bl	8007640 <_sbrk_r>
 8006fd0:	4580      	cmp	r8, r0
 8006fd2:	d13a      	bne.n	800704a <_malloc_r+0xd2>
 8006fd4:	6821      	ldr	r1, [r4, #0]
 8006fd6:	3503      	adds	r5, #3
 8006fd8:	1a6d      	subs	r5, r5, r1
 8006fda:	f025 0503 	bic.w	r5, r5, #3
 8006fde:	3508      	adds	r5, #8
 8006fe0:	2d0c      	cmp	r5, #12
 8006fe2:	bf38      	it	cc
 8006fe4:	250c      	movcc	r5, #12
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4638      	mov	r0, r7
 8006fea:	f7ff ffa5 	bl	8006f38 <sbrk_aligned>
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d02b      	beq.n	800704a <_malloc_r+0xd2>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	442b      	add	r3, r5
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	e00e      	b.n	8007018 <_malloc_r+0xa0>
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	1b52      	subs	r2, r2, r5
 8006ffe:	d41e      	bmi.n	800703e <_malloc_r+0xc6>
 8007000:	2a0b      	cmp	r2, #11
 8007002:	d916      	bls.n	8007032 <_malloc_r+0xba>
 8007004:	1961      	adds	r1, r4, r5
 8007006:	42a3      	cmp	r3, r4
 8007008:	6025      	str	r5, [r4, #0]
 800700a:	bf18      	it	ne
 800700c:	6059      	strne	r1, [r3, #4]
 800700e:	6863      	ldr	r3, [r4, #4]
 8007010:	bf08      	it	eq
 8007012:	6031      	streq	r1, [r6, #0]
 8007014:	5162      	str	r2, [r4, r5]
 8007016:	604b      	str	r3, [r1, #4]
 8007018:	4638      	mov	r0, r7
 800701a:	f104 060b 	add.w	r6, r4, #11
 800701e:	f000 fbe7 	bl	80077f0 <__malloc_unlock>
 8007022:	f026 0607 	bic.w	r6, r6, #7
 8007026:	1d23      	adds	r3, r4, #4
 8007028:	1af2      	subs	r2, r6, r3
 800702a:	d0b6      	beq.n	8006f9a <_malloc_r+0x22>
 800702c:	1b9b      	subs	r3, r3, r6
 800702e:	50a3      	str	r3, [r4, r2]
 8007030:	e7b3      	b.n	8006f9a <_malloc_r+0x22>
 8007032:	6862      	ldr	r2, [r4, #4]
 8007034:	42a3      	cmp	r3, r4
 8007036:	bf0c      	ite	eq
 8007038:	6032      	streq	r2, [r6, #0]
 800703a:	605a      	strne	r2, [r3, #4]
 800703c:	e7ec      	b.n	8007018 <_malloc_r+0xa0>
 800703e:	4623      	mov	r3, r4
 8007040:	6864      	ldr	r4, [r4, #4]
 8007042:	e7b2      	b.n	8006faa <_malloc_r+0x32>
 8007044:	4634      	mov	r4, r6
 8007046:	6876      	ldr	r6, [r6, #4]
 8007048:	e7b9      	b.n	8006fbe <_malloc_r+0x46>
 800704a:	230c      	movs	r3, #12
 800704c:	603b      	str	r3, [r7, #0]
 800704e:	4638      	mov	r0, r7
 8007050:	f000 fbce 	bl	80077f0 <__malloc_unlock>
 8007054:	e7a1      	b.n	8006f9a <_malloc_r+0x22>
 8007056:	6025      	str	r5, [r4, #0]
 8007058:	e7de      	b.n	8007018 <_malloc_r+0xa0>
 800705a:	bf00      	nop
 800705c:	200136b0 	.word	0x200136b0

08007060 <__ssputs_r>:
 8007060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	688e      	ldr	r6, [r1, #8]
 8007066:	429e      	cmp	r6, r3
 8007068:	4682      	mov	sl, r0
 800706a:	460c      	mov	r4, r1
 800706c:	4690      	mov	r8, r2
 800706e:	461f      	mov	r7, r3
 8007070:	d838      	bhi.n	80070e4 <__ssputs_r+0x84>
 8007072:	898a      	ldrh	r2, [r1, #12]
 8007074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007078:	d032      	beq.n	80070e0 <__ssputs_r+0x80>
 800707a:	6825      	ldr	r5, [r4, #0]
 800707c:	6909      	ldr	r1, [r1, #16]
 800707e:	eba5 0901 	sub.w	r9, r5, r1
 8007082:	6965      	ldr	r5, [r4, #20]
 8007084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007088:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800708c:	3301      	adds	r3, #1
 800708e:	444b      	add	r3, r9
 8007090:	106d      	asrs	r5, r5, #1
 8007092:	429d      	cmp	r5, r3
 8007094:	bf38      	it	cc
 8007096:	461d      	movcc	r5, r3
 8007098:	0553      	lsls	r3, r2, #21
 800709a:	d531      	bpl.n	8007100 <__ssputs_r+0xa0>
 800709c:	4629      	mov	r1, r5
 800709e:	f7ff ff6b 	bl	8006f78 <_malloc_r>
 80070a2:	4606      	mov	r6, r0
 80070a4:	b950      	cbnz	r0, 80070bc <__ssputs_r+0x5c>
 80070a6:	230c      	movs	r3, #12
 80070a8:	f8ca 3000 	str.w	r3, [sl]
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295
 80070b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070bc:	6921      	ldr	r1, [r4, #16]
 80070be:	464a      	mov	r2, r9
 80070c0:	f000 fb68 	bl	8007794 <memcpy>
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	6126      	str	r6, [r4, #16]
 80070d2:	6165      	str	r5, [r4, #20]
 80070d4:	444e      	add	r6, r9
 80070d6:	eba5 0509 	sub.w	r5, r5, r9
 80070da:	6026      	str	r6, [r4, #0]
 80070dc:	60a5      	str	r5, [r4, #8]
 80070de:	463e      	mov	r6, r7
 80070e0:	42be      	cmp	r6, r7
 80070e2:	d900      	bls.n	80070e6 <__ssputs_r+0x86>
 80070e4:	463e      	mov	r6, r7
 80070e6:	6820      	ldr	r0, [r4, #0]
 80070e8:	4632      	mov	r2, r6
 80070ea:	4641      	mov	r1, r8
 80070ec:	f000 fb60 	bl	80077b0 <memmove>
 80070f0:	68a3      	ldr	r3, [r4, #8]
 80070f2:	1b9b      	subs	r3, r3, r6
 80070f4:	60a3      	str	r3, [r4, #8]
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	4433      	add	r3, r6
 80070fa:	6023      	str	r3, [r4, #0]
 80070fc:	2000      	movs	r0, #0
 80070fe:	e7db      	b.n	80070b8 <__ssputs_r+0x58>
 8007100:	462a      	mov	r2, r5
 8007102:	f000 fb7b 	bl	80077fc <_realloc_r>
 8007106:	4606      	mov	r6, r0
 8007108:	2800      	cmp	r0, #0
 800710a:	d1e1      	bne.n	80070d0 <__ssputs_r+0x70>
 800710c:	6921      	ldr	r1, [r4, #16]
 800710e:	4650      	mov	r0, sl
 8007110:	f7ff fec6 	bl	8006ea0 <_free_r>
 8007114:	e7c7      	b.n	80070a6 <__ssputs_r+0x46>
	...

08007118 <_svfiprintf_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	4698      	mov	r8, r3
 800711e:	898b      	ldrh	r3, [r1, #12]
 8007120:	061b      	lsls	r3, r3, #24
 8007122:	b09d      	sub	sp, #116	; 0x74
 8007124:	4607      	mov	r7, r0
 8007126:	460d      	mov	r5, r1
 8007128:	4614      	mov	r4, r2
 800712a:	d50e      	bpl.n	800714a <_svfiprintf_r+0x32>
 800712c:	690b      	ldr	r3, [r1, #16]
 800712e:	b963      	cbnz	r3, 800714a <_svfiprintf_r+0x32>
 8007130:	2140      	movs	r1, #64	; 0x40
 8007132:	f7ff ff21 	bl	8006f78 <_malloc_r>
 8007136:	6028      	str	r0, [r5, #0]
 8007138:	6128      	str	r0, [r5, #16]
 800713a:	b920      	cbnz	r0, 8007146 <_svfiprintf_r+0x2e>
 800713c:	230c      	movs	r3, #12
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	e0d1      	b.n	80072ea <_svfiprintf_r+0x1d2>
 8007146:	2340      	movs	r3, #64	; 0x40
 8007148:	616b      	str	r3, [r5, #20]
 800714a:	2300      	movs	r3, #0
 800714c:	9309      	str	r3, [sp, #36]	; 0x24
 800714e:	2320      	movs	r3, #32
 8007150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007154:	f8cd 800c 	str.w	r8, [sp, #12]
 8007158:	2330      	movs	r3, #48	; 0x30
 800715a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007304 <_svfiprintf_r+0x1ec>
 800715e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007162:	f04f 0901 	mov.w	r9, #1
 8007166:	4623      	mov	r3, r4
 8007168:	469a      	mov	sl, r3
 800716a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800716e:	b10a      	cbz	r2, 8007174 <_svfiprintf_r+0x5c>
 8007170:	2a25      	cmp	r2, #37	; 0x25
 8007172:	d1f9      	bne.n	8007168 <_svfiprintf_r+0x50>
 8007174:	ebba 0b04 	subs.w	fp, sl, r4
 8007178:	d00b      	beq.n	8007192 <_svfiprintf_r+0x7a>
 800717a:	465b      	mov	r3, fp
 800717c:	4622      	mov	r2, r4
 800717e:	4629      	mov	r1, r5
 8007180:	4638      	mov	r0, r7
 8007182:	f7ff ff6d 	bl	8007060 <__ssputs_r>
 8007186:	3001      	adds	r0, #1
 8007188:	f000 80aa 	beq.w	80072e0 <_svfiprintf_r+0x1c8>
 800718c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800718e:	445a      	add	r2, fp
 8007190:	9209      	str	r2, [sp, #36]	; 0x24
 8007192:	f89a 3000 	ldrb.w	r3, [sl]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80a2 	beq.w	80072e0 <_svfiprintf_r+0x1c8>
 800719c:	2300      	movs	r3, #0
 800719e:	f04f 32ff 	mov.w	r2, #4294967295
 80071a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071a6:	f10a 0a01 	add.w	sl, sl, #1
 80071aa:	9304      	str	r3, [sp, #16]
 80071ac:	9307      	str	r3, [sp, #28]
 80071ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071b2:	931a      	str	r3, [sp, #104]	; 0x68
 80071b4:	4654      	mov	r4, sl
 80071b6:	2205      	movs	r2, #5
 80071b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071bc:	4851      	ldr	r0, [pc, #324]	; (8007304 <_svfiprintf_r+0x1ec>)
 80071be:	f7f9 f80f 	bl	80001e0 <memchr>
 80071c2:	9a04      	ldr	r2, [sp, #16]
 80071c4:	b9d8      	cbnz	r0, 80071fe <_svfiprintf_r+0xe6>
 80071c6:	06d0      	lsls	r0, r2, #27
 80071c8:	bf44      	itt	mi
 80071ca:	2320      	movmi	r3, #32
 80071cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d0:	0711      	lsls	r1, r2, #28
 80071d2:	bf44      	itt	mi
 80071d4:	232b      	movmi	r3, #43	; 0x2b
 80071d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071da:	f89a 3000 	ldrb.w	r3, [sl]
 80071de:	2b2a      	cmp	r3, #42	; 0x2a
 80071e0:	d015      	beq.n	800720e <_svfiprintf_r+0xf6>
 80071e2:	9a07      	ldr	r2, [sp, #28]
 80071e4:	4654      	mov	r4, sl
 80071e6:	2000      	movs	r0, #0
 80071e8:	f04f 0c0a 	mov.w	ip, #10
 80071ec:	4621      	mov	r1, r4
 80071ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071f2:	3b30      	subs	r3, #48	; 0x30
 80071f4:	2b09      	cmp	r3, #9
 80071f6:	d94e      	bls.n	8007296 <_svfiprintf_r+0x17e>
 80071f8:	b1b0      	cbz	r0, 8007228 <_svfiprintf_r+0x110>
 80071fa:	9207      	str	r2, [sp, #28]
 80071fc:	e014      	b.n	8007228 <_svfiprintf_r+0x110>
 80071fe:	eba0 0308 	sub.w	r3, r0, r8
 8007202:	fa09 f303 	lsl.w	r3, r9, r3
 8007206:	4313      	orrs	r3, r2
 8007208:	9304      	str	r3, [sp, #16]
 800720a:	46a2      	mov	sl, r4
 800720c:	e7d2      	b.n	80071b4 <_svfiprintf_r+0x9c>
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	1d19      	adds	r1, r3, #4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	9103      	str	r1, [sp, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	bfbb      	ittet	lt
 800721a:	425b      	neglt	r3, r3
 800721c:	f042 0202 	orrlt.w	r2, r2, #2
 8007220:	9307      	strge	r3, [sp, #28]
 8007222:	9307      	strlt	r3, [sp, #28]
 8007224:	bfb8      	it	lt
 8007226:	9204      	strlt	r2, [sp, #16]
 8007228:	7823      	ldrb	r3, [r4, #0]
 800722a:	2b2e      	cmp	r3, #46	; 0x2e
 800722c:	d10c      	bne.n	8007248 <_svfiprintf_r+0x130>
 800722e:	7863      	ldrb	r3, [r4, #1]
 8007230:	2b2a      	cmp	r3, #42	; 0x2a
 8007232:	d135      	bne.n	80072a0 <_svfiprintf_r+0x188>
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	9203      	str	r2, [sp, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	bfb8      	it	lt
 8007240:	f04f 33ff 	movlt.w	r3, #4294967295
 8007244:	3402      	adds	r4, #2
 8007246:	9305      	str	r3, [sp, #20]
 8007248:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007314 <_svfiprintf_r+0x1fc>
 800724c:	7821      	ldrb	r1, [r4, #0]
 800724e:	2203      	movs	r2, #3
 8007250:	4650      	mov	r0, sl
 8007252:	f7f8 ffc5 	bl	80001e0 <memchr>
 8007256:	b140      	cbz	r0, 800726a <_svfiprintf_r+0x152>
 8007258:	2340      	movs	r3, #64	; 0x40
 800725a:	eba0 000a 	sub.w	r0, r0, sl
 800725e:	fa03 f000 	lsl.w	r0, r3, r0
 8007262:	9b04      	ldr	r3, [sp, #16]
 8007264:	4303      	orrs	r3, r0
 8007266:	3401      	adds	r4, #1
 8007268:	9304      	str	r3, [sp, #16]
 800726a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726e:	4826      	ldr	r0, [pc, #152]	; (8007308 <_svfiprintf_r+0x1f0>)
 8007270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007274:	2206      	movs	r2, #6
 8007276:	f7f8 ffb3 	bl	80001e0 <memchr>
 800727a:	2800      	cmp	r0, #0
 800727c:	d038      	beq.n	80072f0 <_svfiprintf_r+0x1d8>
 800727e:	4b23      	ldr	r3, [pc, #140]	; (800730c <_svfiprintf_r+0x1f4>)
 8007280:	bb1b      	cbnz	r3, 80072ca <_svfiprintf_r+0x1b2>
 8007282:	9b03      	ldr	r3, [sp, #12]
 8007284:	3307      	adds	r3, #7
 8007286:	f023 0307 	bic.w	r3, r3, #7
 800728a:	3308      	adds	r3, #8
 800728c:	9303      	str	r3, [sp, #12]
 800728e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007290:	4433      	add	r3, r6
 8007292:	9309      	str	r3, [sp, #36]	; 0x24
 8007294:	e767      	b.n	8007166 <_svfiprintf_r+0x4e>
 8007296:	fb0c 3202 	mla	r2, ip, r2, r3
 800729a:	460c      	mov	r4, r1
 800729c:	2001      	movs	r0, #1
 800729e:	e7a5      	b.n	80071ec <_svfiprintf_r+0xd4>
 80072a0:	2300      	movs	r3, #0
 80072a2:	3401      	adds	r4, #1
 80072a4:	9305      	str	r3, [sp, #20]
 80072a6:	4619      	mov	r1, r3
 80072a8:	f04f 0c0a 	mov.w	ip, #10
 80072ac:	4620      	mov	r0, r4
 80072ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072b2:	3a30      	subs	r2, #48	; 0x30
 80072b4:	2a09      	cmp	r2, #9
 80072b6:	d903      	bls.n	80072c0 <_svfiprintf_r+0x1a8>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0c5      	beq.n	8007248 <_svfiprintf_r+0x130>
 80072bc:	9105      	str	r1, [sp, #20]
 80072be:	e7c3      	b.n	8007248 <_svfiprintf_r+0x130>
 80072c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80072c4:	4604      	mov	r4, r0
 80072c6:	2301      	movs	r3, #1
 80072c8:	e7f0      	b.n	80072ac <_svfiprintf_r+0x194>
 80072ca:	ab03      	add	r3, sp, #12
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	462a      	mov	r2, r5
 80072d0:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <_svfiprintf_r+0x1f8>)
 80072d2:	a904      	add	r1, sp, #16
 80072d4:	4638      	mov	r0, r7
 80072d6:	f3af 8000 	nop.w
 80072da:	1c42      	adds	r2, r0, #1
 80072dc:	4606      	mov	r6, r0
 80072de:	d1d6      	bne.n	800728e <_svfiprintf_r+0x176>
 80072e0:	89ab      	ldrh	r3, [r5, #12]
 80072e2:	065b      	lsls	r3, r3, #25
 80072e4:	f53f af2c 	bmi.w	8007140 <_svfiprintf_r+0x28>
 80072e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ea:	b01d      	add	sp, #116	; 0x74
 80072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f0:	ab03      	add	r3, sp, #12
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	462a      	mov	r2, r5
 80072f6:	4b06      	ldr	r3, [pc, #24]	; (8007310 <_svfiprintf_r+0x1f8>)
 80072f8:	a904      	add	r1, sp, #16
 80072fa:	4638      	mov	r0, r7
 80072fc:	f000 f87a 	bl	80073f4 <_printf_i>
 8007300:	e7eb      	b.n	80072da <_svfiprintf_r+0x1c2>
 8007302:	bf00      	nop
 8007304:	08007c2c 	.word	0x08007c2c
 8007308:	08007c36 	.word	0x08007c36
 800730c:	00000000 	.word	0x00000000
 8007310:	08007061 	.word	0x08007061
 8007314:	08007c32 	.word	0x08007c32

08007318 <_printf_common>:
 8007318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	4616      	mov	r6, r2
 800731e:	4699      	mov	r9, r3
 8007320:	688a      	ldr	r2, [r1, #8]
 8007322:	690b      	ldr	r3, [r1, #16]
 8007324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007328:	4293      	cmp	r3, r2
 800732a:	bfb8      	it	lt
 800732c:	4613      	movlt	r3, r2
 800732e:	6033      	str	r3, [r6, #0]
 8007330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007334:	4607      	mov	r7, r0
 8007336:	460c      	mov	r4, r1
 8007338:	b10a      	cbz	r2, 800733e <_printf_common+0x26>
 800733a:	3301      	adds	r3, #1
 800733c:	6033      	str	r3, [r6, #0]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	0699      	lsls	r1, r3, #26
 8007342:	bf42      	ittt	mi
 8007344:	6833      	ldrmi	r3, [r6, #0]
 8007346:	3302      	addmi	r3, #2
 8007348:	6033      	strmi	r3, [r6, #0]
 800734a:	6825      	ldr	r5, [r4, #0]
 800734c:	f015 0506 	ands.w	r5, r5, #6
 8007350:	d106      	bne.n	8007360 <_printf_common+0x48>
 8007352:	f104 0a19 	add.w	sl, r4, #25
 8007356:	68e3      	ldr	r3, [r4, #12]
 8007358:	6832      	ldr	r2, [r6, #0]
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	42ab      	cmp	r3, r5
 800735e:	dc26      	bgt.n	80073ae <_printf_common+0x96>
 8007360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007364:	1e13      	subs	r3, r2, #0
 8007366:	6822      	ldr	r2, [r4, #0]
 8007368:	bf18      	it	ne
 800736a:	2301      	movne	r3, #1
 800736c:	0692      	lsls	r2, r2, #26
 800736e:	d42b      	bmi.n	80073c8 <_printf_common+0xb0>
 8007370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007374:	4649      	mov	r1, r9
 8007376:	4638      	mov	r0, r7
 8007378:	47c0      	blx	r8
 800737a:	3001      	adds	r0, #1
 800737c:	d01e      	beq.n	80073bc <_printf_common+0xa4>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	68e5      	ldr	r5, [r4, #12]
 8007382:	6832      	ldr	r2, [r6, #0]
 8007384:	f003 0306 	and.w	r3, r3, #6
 8007388:	2b04      	cmp	r3, #4
 800738a:	bf08      	it	eq
 800738c:	1aad      	subeq	r5, r5, r2
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	6922      	ldr	r2, [r4, #16]
 8007392:	bf0c      	ite	eq
 8007394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007398:	2500      	movne	r5, #0
 800739a:	4293      	cmp	r3, r2
 800739c:	bfc4      	itt	gt
 800739e:	1a9b      	subgt	r3, r3, r2
 80073a0:	18ed      	addgt	r5, r5, r3
 80073a2:	2600      	movs	r6, #0
 80073a4:	341a      	adds	r4, #26
 80073a6:	42b5      	cmp	r5, r6
 80073a8:	d11a      	bne.n	80073e0 <_printf_common+0xc8>
 80073aa:	2000      	movs	r0, #0
 80073ac:	e008      	b.n	80073c0 <_printf_common+0xa8>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4652      	mov	r2, sl
 80073b2:	4649      	mov	r1, r9
 80073b4:	4638      	mov	r0, r7
 80073b6:	47c0      	blx	r8
 80073b8:	3001      	adds	r0, #1
 80073ba:	d103      	bne.n	80073c4 <_printf_common+0xac>
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c4:	3501      	adds	r5, #1
 80073c6:	e7c6      	b.n	8007356 <_printf_common+0x3e>
 80073c8:	18e1      	adds	r1, r4, r3
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	2030      	movs	r0, #48	; 0x30
 80073ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073d2:	4422      	add	r2, r4
 80073d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073dc:	3302      	adds	r3, #2
 80073de:	e7c7      	b.n	8007370 <_printf_common+0x58>
 80073e0:	2301      	movs	r3, #1
 80073e2:	4622      	mov	r2, r4
 80073e4:	4649      	mov	r1, r9
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c0      	blx	r8
 80073ea:	3001      	adds	r0, #1
 80073ec:	d0e6      	beq.n	80073bc <_printf_common+0xa4>
 80073ee:	3601      	adds	r6, #1
 80073f0:	e7d9      	b.n	80073a6 <_printf_common+0x8e>
	...

080073f4 <_printf_i>:
 80073f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	7e0f      	ldrb	r7, [r1, #24]
 80073fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073fc:	2f78      	cmp	r7, #120	; 0x78
 80073fe:	4691      	mov	r9, r2
 8007400:	4680      	mov	r8, r0
 8007402:	460c      	mov	r4, r1
 8007404:	469a      	mov	sl, r3
 8007406:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800740a:	d807      	bhi.n	800741c <_printf_i+0x28>
 800740c:	2f62      	cmp	r7, #98	; 0x62
 800740e:	d80a      	bhi.n	8007426 <_printf_i+0x32>
 8007410:	2f00      	cmp	r7, #0
 8007412:	f000 80d8 	beq.w	80075c6 <_printf_i+0x1d2>
 8007416:	2f58      	cmp	r7, #88	; 0x58
 8007418:	f000 80a3 	beq.w	8007562 <_printf_i+0x16e>
 800741c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007424:	e03a      	b.n	800749c <_printf_i+0xa8>
 8007426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800742a:	2b15      	cmp	r3, #21
 800742c:	d8f6      	bhi.n	800741c <_printf_i+0x28>
 800742e:	a101      	add	r1, pc, #4	; (adr r1, 8007434 <_printf_i+0x40>)
 8007430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007434:	0800748d 	.word	0x0800748d
 8007438:	080074a1 	.word	0x080074a1
 800743c:	0800741d 	.word	0x0800741d
 8007440:	0800741d 	.word	0x0800741d
 8007444:	0800741d 	.word	0x0800741d
 8007448:	0800741d 	.word	0x0800741d
 800744c:	080074a1 	.word	0x080074a1
 8007450:	0800741d 	.word	0x0800741d
 8007454:	0800741d 	.word	0x0800741d
 8007458:	0800741d 	.word	0x0800741d
 800745c:	0800741d 	.word	0x0800741d
 8007460:	080075ad 	.word	0x080075ad
 8007464:	080074d1 	.word	0x080074d1
 8007468:	0800758f 	.word	0x0800758f
 800746c:	0800741d 	.word	0x0800741d
 8007470:	0800741d 	.word	0x0800741d
 8007474:	080075cf 	.word	0x080075cf
 8007478:	0800741d 	.word	0x0800741d
 800747c:	080074d1 	.word	0x080074d1
 8007480:	0800741d 	.word	0x0800741d
 8007484:	0800741d 	.word	0x0800741d
 8007488:	08007597 	.word	0x08007597
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	1d1a      	adds	r2, r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	602a      	str	r2, [r5, #0]
 8007494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800749c:	2301      	movs	r3, #1
 800749e:	e0a3      	b.n	80075e8 <_printf_i+0x1f4>
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	6829      	ldr	r1, [r5, #0]
 80074a4:	0606      	lsls	r6, r0, #24
 80074a6:	f101 0304 	add.w	r3, r1, #4
 80074aa:	d50a      	bpl.n	80074c2 <_printf_i+0xce>
 80074ac:	680e      	ldr	r6, [r1, #0]
 80074ae:	602b      	str	r3, [r5, #0]
 80074b0:	2e00      	cmp	r6, #0
 80074b2:	da03      	bge.n	80074bc <_printf_i+0xc8>
 80074b4:	232d      	movs	r3, #45	; 0x2d
 80074b6:	4276      	negs	r6, r6
 80074b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074bc:	485e      	ldr	r0, [pc, #376]	; (8007638 <_printf_i+0x244>)
 80074be:	230a      	movs	r3, #10
 80074c0:	e019      	b.n	80074f6 <_printf_i+0x102>
 80074c2:	680e      	ldr	r6, [r1, #0]
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074ca:	bf18      	it	ne
 80074cc:	b236      	sxthne	r6, r6
 80074ce:	e7ef      	b.n	80074b0 <_printf_i+0xbc>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	6820      	ldr	r0, [r4, #0]
 80074d4:	1d19      	adds	r1, r3, #4
 80074d6:	6029      	str	r1, [r5, #0]
 80074d8:	0601      	lsls	r1, r0, #24
 80074da:	d501      	bpl.n	80074e0 <_printf_i+0xec>
 80074dc:	681e      	ldr	r6, [r3, #0]
 80074de:	e002      	b.n	80074e6 <_printf_i+0xf2>
 80074e0:	0646      	lsls	r6, r0, #25
 80074e2:	d5fb      	bpl.n	80074dc <_printf_i+0xe8>
 80074e4:	881e      	ldrh	r6, [r3, #0]
 80074e6:	4854      	ldr	r0, [pc, #336]	; (8007638 <_printf_i+0x244>)
 80074e8:	2f6f      	cmp	r7, #111	; 0x6f
 80074ea:	bf0c      	ite	eq
 80074ec:	2308      	moveq	r3, #8
 80074ee:	230a      	movne	r3, #10
 80074f0:	2100      	movs	r1, #0
 80074f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074f6:	6865      	ldr	r5, [r4, #4]
 80074f8:	60a5      	str	r5, [r4, #8]
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	bfa2      	ittt	ge
 80074fe:	6821      	ldrge	r1, [r4, #0]
 8007500:	f021 0104 	bicge.w	r1, r1, #4
 8007504:	6021      	strge	r1, [r4, #0]
 8007506:	b90e      	cbnz	r6, 800750c <_printf_i+0x118>
 8007508:	2d00      	cmp	r5, #0
 800750a:	d04d      	beq.n	80075a8 <_printf_i+0x1b4>
 800750c:	4615      	mov	r5, r2
 800750e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007512:	fb03 6711 	mls	r7, r3, r1, r6
 8007516:	5dc7      	ldrb	r7, [r0, r7]
 8007518:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800751c:	4637      	mov	r7, r6
 800751e:	42bb      	cmp	r3, r7
 8007520:	460e      	mov	r6, r1
 8007522:	d9f4      	bls.n	800750e <_printf_i+0x11a>
 8007524:	2b08      	cmp	r3, #8
 8007526:	d10b      	bne.n	8007540 <_printf_i+0x14c>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	07de      	lsls	r6, r3, #31
 800752c:	d508      	bpl.n	8007540 <_printf_i+0x14c>
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	6861      	ldr	r1, [r4, #4]
 8007532:	4299      	cmp	r1, r3
 8007534:	bfde      	ittt	le
 8007536:	2330      	movle	r3, #48	; 0x30
 8007538:	f805 3c01 	strble.w	r3, [r5, #-1]
 800753c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007540:	1b52      	subs	r2, r2, r5
 8007542:	6122      	str	r2, [r4, #16]
 8007544:	f8cd a000 	str.w	sl, [sp]
 8007548:	464b      	mov	r3, r9
 800754a:	aa03      	add	r2, sp, #12
 800754c:	4621      	mov	r1, r4
 800754e:	4640      	mov	r0, r8
 8007550:	f7ff fee2 	bl	8007318 <_printf_common>
 8007554:	3001      	adds	r0, #1
 8007556:	d14c      	bne.n	80075f2 <_printf_i+0x1fe>
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	b004      	add	sp, #16
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007562:	4835      	ldr	r0, [pc, #212]	; (8007638 <_printf_i+0x244>)
 8007564:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007568:	6829      	ldr	r1, [r5, #0]
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007570:	6029      	str	r1, [r5, #0]
 8007572:	061d      	lsls	r5, r3, #24
 8007574:	d514      	bpl.n	80075a0 <_printf_i+0x1ac>
 8007576:	07df      	lsls	r7, r3, #31
 8007578:	bf44      	itt	mi
 800757a:	f043 0320 	orrmi.w	r3, r3, #32
 800757e:	6023      	strmi	r3, [r4, #0]
 8007580:	b91e      	cbnz	r6, 800758a <_printf_i+0x196>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	f023 0320 	bic.w	r3, r3, #32
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	2310      	movs	r3, #16
 800758c:	e7b0      	b.n	80074f0 <_printf_i+0xfc>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	f043 0320 	orr.w	r3, r3, #32
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	2378      	movs	r3, #120	; 0x78
 8007598:	4828      	ldr	r0, [pc, #160]	; (800763c <_printf_i+0x248>)
 800759a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800759e:	e7e3      	b.n	8007568 <_printf_i+0x174>
 80075a0:	0659      	lsls	r1, r3, #25
 80075a2:	bf48      	it	mi
 80075a4:	b2b6      	uxthmi	r6, r6
 80075a6:	e7e6      	b.n	8007576 <_printf_i+0x182>
 80075a8:	4615      	mov	r5, r2
 80075aa:	e7bb      	b.n	8007524 <_printf_i+0x130>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	6826      	ldr	r6, [r4, #0]
 80075b0:	6961      	ldr	r1, [r4, #20]
 80075b2:	1d18      	adds	r0, r3, #4
 80075b4:	6028      	str	r0, [r5, #0]
 80075b6:	0635      	lsls	r5, r6, #24
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	d501      	bpl.n	80075c0 <_printf_i+0x1cc>
 80075bc:	6019      	str	r1, [r3, #0]
 80075be:	e002      	b.n	80075c6 <_printf_i+0x1d2>
 80075c0:	0670      	lsls	r0, r6, #25
 80075c2:	d5fb      	bpl.n	80075bc <_printf_i+0x1c8>
 80075c4:	8019      	strh	r1, [r3, #0]
 80075c6:	2300      	movs	r3, #0
 80075c8:	6123      	str	r3, [r4, #16]
 80075ca:	4615      	mov	r5, r2
 80075cc:	e7ba      	b.n	8007544 <_printf_i+0x150>
 80075ce:	682b      	ldr	r3, [r5, #0]
 80075d0:	1d1a      	adds	r2, r3, #4
 80075d2:	602a      	str	r2, [r5, #0]
 80075d4:	681d      	ldr	r5, [r3, #0]
 80075d6:	6862      	ldr	r2, [r4, #4]
 80075d8:	2100      	movs	r1, #0
 80075da:	4628      	mov	r0, r5
 80075dc:	f7f8 fe00 	bl	80001e0 <memchr>
 80075e0:	b108      	cbz	r0, 80075e6 <_printf_i+0x1f2>
 80075e2:	1b40      	subs	r0, r0, r5
 80075e4:	6060      	str	r0, [r4, #4]
 80075e6:	6863      	ldr	r3, [r4, #4]
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	2300      	movs	r3, #0
 80075ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f0:	e7a8      	b.n	8007544 <_printf_i+0x150>
 80075f2:	6923      	ldr	r3, [r4, #16]
 80075f4:	462a      	mov	r2, r5
 80075f6:	4649      	mov	r1, r9
 80075f8:	4640      	mov	r0, r8
 80075fa:	47d0      	blx	sl
 80075fc:	3001      	adds	r0, #1
 80075fe:	d0ab      	beq.n	8007558 <_printf_i+0x164>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	079b      	lsls	r3, r3, #30
 8007604:	d413      	bmi.n	800762e <_printf_i+0x23a>
 8007606:	68e0      	ldr	r0, [r4, #12]
 8007608:	9b03      	ldr	r3, [sp, #12]
 800760a:	4298      	cmp	r0, r3
 800760c:	bfb8      	it	lt
 800760e:	4618      	movlt	r0, r3
 8007610:	e7a4      	b.n	800755c <_printf_i+0x168>
 8007612:	2301      	movs	r3, #1
 8007614:	4632      	mov	r2, r6
 8007616:	4649      	mov	r1, r9
 8007618:	4640      	mov	r0, r8
 800761a:	47d0      	blx	sl
 800761c:	3001      	adds	r0, #1
 800761e:	d09b      	beq.n	8007558 <_printf_i+0x164>
 8007620:	3501      	adds	r5, #1
 8007622:	68e3      	ldr	r3, [r4, #12]
 8007624:	9903      	ldr	r1, [sp, #12]
 8007626:	1a5b      	subs	r3, r3, r1
 8007628:	42ab      	cmp	r3, r5
 800762a:	dcf2      	bgt.n	8007612 <_printf_i+0x21e>
 800762c:	e7eb      	b.n	8007606 <_printf_i+0x212>
 800762e:	2500      	movs	r5, #0
 8007630:	f104 0619 	add.w	r6, r4, #25
 8007634:	e7f5      	b.n	8007622 <_printf_i+0x22e>
 8007636:	bf00      	nop
 8007638:	08007c3d 	.word	0x08007c3d
 800763c:	08007c4e 	.word	0x08007c4e

08007640 <_sbrk_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	4d06      	ldr	r5, [pc, #24]	; (800765c <_sbrk_r+0x1c>)
 8007644:	2300      	movs	r3, #0
 8007646:	4604      	mov	r4, r0
 8007648:	4608      	mov	r0, r1
 800764a:	602b      	str	r3, [r5, #0]
 800764c:	f7f9 fbba 	bl	8000dc4 <_sbrk>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_sbrk_r+0x1a>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_sbrk_r+0x1a>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	200136b8 	.word	0x200136b8

08007660 <__sread>:
 8007660:	b510      	push	{r4, lr}
 8007662:	460c      	mov	r4, r1
 8007664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007668:	f000 f8f8 	bl	800785c <_read_r>
 800766c:	2800      	cmp	r0, #0
 800766e:	bfab      	itete	ge
 8007670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007672:	89a3      	ldrhlt	r3, [r4, #12]
 8007674:	181b      	addge	r3, r3, r0
 8007676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800767a:	bfac      	ite	ge
 800767c:	6563      	strge	r3, [r4, #84]	; 0x54
 800767e:	81a3      	strhlt	r3, [r4, #12]
 8007680:	bd10      	pop	{r4, pc}

08007682 <__swrite>:
 8007682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007686:	461f      	mov	r7, r3
 8007688:	898b      	ldrh	r3, [r1, #12]
 800768a:	05db      	lsls	r3, r3, #23
 800768c:	4605      	mov	r5, r0
 800768e:	460c      	mov	r4, r1
 8007690:	4616      	mov	r6, r2
 8007692:	d505      	bpl.n	80076a0 <__swrite+0x1e>
 8007694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007698:	2302      	movs	r3, #2
 800769a:	2200      	movs	r2, #0
 800769c:	f000 f868 	bl	8007770 <_lseek_r>
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076aa:	81a3      	strh	r3, [r4, #12]
 80076ac:	4632      	mov	r2, r6
 80076ae:	463b      	mov	r3, r7
 80076b0:	4628      	mov	r0, r5
 80076b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b6:	f000 b817 	b.w	80076e8 <_write_r>

080076ba <__sseek>:
 80076ba:	b510      	push	{r4, lr}
 80076bc:	460c      	mov	r4, r1
 80076be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c2:	f000 f855 	bl	8007770 <_lseek_r>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	bf15      	itete	ne
 80076cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80076ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076d6:	81a3      	strheq	r3, [r4, #12]
 80076d8:	bf18      	it	ne
 80076da:	81a3      	strhne	r3, [r4, #12]
 80076dc:	bd10      	pop	{r4, pc}

080076de <__sclose>:
 80076de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e2:	f000 b813 	b.w	800770c <_close_r>
	...

080076e8 <_write_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d07      	ldr	r5, [pc, #28]	; (8007708 <_write_r+0x20>)
 80076ec:	4604      	mov	r4, r0
 80076ee:	4608      	mov	r0, r1
 80076f0:	4611      	mov	r1, r2
 80076f2:	2200      	movs	r2, #0
 80076f4:	602a      	str	r2, [r5, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f7f9 fb13 	bl	8000d22 <_write>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d102      	bne.n	8007706 <_write_r+0x1e>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	b103      	cbz	r3, 8007706 <_write_r+0x1e>
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	200136b8 	.word	0x200136b8

0800770c <_close_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	4d06      	ldr	r5, [pc, #24]	; (8007728 <_close_r+0x1c>)
 8007710:	2300      	movs	r3, #0
 8007712:	4604      	mov	r4, r0
 8007714:	4608      	mov	r0, r1
 8007716:	602b      	str	r3, [r5, #0]
 8007718:	f7f9 fb1f 	bl	8000d5a <_close>
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	d102      	bne.n	8007726 <_close_r+0x1a>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	b103      	cbz	r3, 8007726 <_close_r+0x1a>
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	200136b8 	.word	0x200136b8

0800772c <_fstat_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4d07      	ldr	r5, [pc, #28]	; (800774c <_fstat_r+0x20>)
 8007730:	2300      	movs	r3, #0
 8007732:	4604      	mov	r4, r0
 8007734:	4608      	mov	r0, r1
 8007736:	4611      	mov	r1, r2
 8007738:	602b      	str	r3, [r5, #0]
 800773a:	f7f9 fb1a 	bl	8000d72 <_fstat>
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	d102      	bne.n	8007748 <_fstat_r+0x1c>
 8007742:	682b      	ldr	r3, [r5, #0]
 8007744:	b103      	cbz	r3, 8007748 <_fstat_r+0x1c>
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	bd38      	pop	{r3, r4, r5, pc}
 800774a:	bf00      	nop
 800774c:	200136b8 	.word	0x200136b8

08007750 <_isatty_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d06      	ldr	r5, [pc, #24]	; (800776c <_isatty_r+0x1c>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	f7f9 fb19 	bl	8000d92 <_isatty>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_isatty_r+0x1a>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_isatty_r+0x1a>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	200136b8 	.word	0x200136b8

08007770 <_lseek_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4d07      	ldr	r5, [pc, #28]	; (8007790 <_lseek_r+0x20>)
 8007774:	4604      	mov	r4, r0
 8007776:	4608      	mov	r0, r1
 8007778:	4611      	mov	r1, r2
 800777a:	2200      	movs	r2, #0
 800777c:	602a      	str	r2, [r5, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	f7f9 fb12 	bl	8000da8 <_lseek>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_lseek_r+0x1e>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_lseek_r+0x1e>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	200136b8 	.word	0x200136b8

08007794 <memcpy>:
 8007794:	440a      	add	r2, r1
 8007796:	4291      	cmp	r1, r2
 8007798:	f100 33ff 	add.w	r3, r0, #4294967295
 800779c:	d100      	bne.n	80077a0 <memcpy+0xc>
 800779e:	4770      	bx	lr
 80077a0:	b510      	push	{r4, lr}
 80077a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077aa:	4291      	cmp	r1, r2
 80077ac:	d1f9      	bne.n	80077a2 <memcpy+0xe>
 80077ae:	bd10      	pop	{r4, pc}

080077b0 <memmove>:
 80077b0:	4288      	cmp	r0, r1
 80077b2:	b510      	push	{r4, lr}
 80077b4:	eb01 0402 	add.w	r4, r1, r2
 80077b8:	d902      	bls.n	80077c0 <memmove+0x10>
 80077ba:	4284      	cmp	r4, r0
 80077bc:	4623      	mov	r3, r4
 80077be:	d807      	bhi.n	80077d0 <memmove+0x20>
 80077c0:	1e43      	subs	r3, r0, #1
 80077c2:	42a1      	cmp	r1, r4
 80077c4:	d008      	beq.n	80077d8 <memmove+0x28>
 80077c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ce:	e7f8      	b.n	80077c2 <memmove+0x12>
 80077d0:	4402      	add	r2, r0
 80077d2:	4601      	mov	r1, r0
 80077d4:	428a      	cmp	r2, r1
 80077d6:	d100      	bne.n	80077da <memmove+0x2a>
 80077d8:	bd10      	pop	{r4, pc}
 80077da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077e2:	e7f7      	b.n	80077d4 <memmove+0x24>

080077e4 <__malloc_lock>:
 80077e4:	4801      	ldr	r0, [pc, #4]	; (80077ec <__malloc_lock+0x8>)
 80077e6:	f7ff baf3 	b.w	8006dd0 <__retarget_lock_acquire_recursive>
 80077ea:	bf00      	nop
 80077ec:	200136ac 	.word	0x200136ac

080077f0 <__malloc_unlock>:
 80077f0:	4801      	ldr	r0, [pc, #4]	; (80077f8 <__malloc_unlock+0x8>)
 80077f2:	f7ff baee 	b.w	8006dd2 <__retarget_lock_release_recursive>
 80077f6:	bf00      	nop
 80077f8:	200136ac 	.word	0x200136ac

080077fc <_realloc_r>:
 80077fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007800:	4680      	mov	r8, r0
 8007802:	4614      	mov	r4, r2
 8007804:	460e      	mov	r6, r1
 8007806:	b921      	cbnz	r1, 8007812 <_realloc_r+0x16>
 8007808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780c:	4611      	mov	r1, r2
 800780e:	f7ff bbb3 	b.w	8006f78 <_malloc_r>
 8007812:	b92a      	cbnz	r2, 8007820 <_realloc_r+0x24>
 8007814:	f7ff fb44 	bl	8006ea0 <_free_r>
 8007818:	4625      	mov	r5, r4
 800781a:	4628      	mov	r0, r5
 800781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007820:	f000 f82e 	bl	8007880 <_malloc_usable_size_r>
 8007824:	4284      	cmp	r4, r0
 8007826:	4607      	mov	r7, r0
 8007828:	d802      	bhi.n	8007830 <_realloc_r+0x34>
 800782a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800782e:	d812      	bhi.n	8007856 <_realloc_r+0x5a>
 8007830:	4621      	mov	r1, r4
 8007832:	4640      	mov	r0, r8
 8007834:	f7ff fba0 	bl	8006f78 <_malloc_r>
 8007838:	4605      	mov	r5, r0
 800783a:	2800      	cmp	r0, #0
 800783c:	d0ed      	beq.n	800781a <_realloc_r+0x1e>
 800783e:	42bc      	cmp	r4, r7
 8007840:	4622      	mov	r2, r4
 8007842:	4631      	mov	r1, r6
 8007844:	bf28      	it	cs
 8007846:	463a      	movcs	r2, r7
 8007848:	f7ff ffa4 	bl	8007794 <memcpy>
 800784c:	4631      	mov	r1, r6
 800784e:	4640      	mov	r0, r8
 8007850:	f7ff fb26 	bl	8006ea0 <_free_r>
 8007854:	e7e1      	b.n	800781a <_realloc_r+0x1e>
 8007856:	4635      	mov	r5, r6
 8007858:	e7df      	b.n	800781a <_realloc_r+0x1e>
	...

0800785c <_read_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4d07      	ldr	r5, [pc, #28]	; (800787c <_read_r+0x20>)
 8007860:	4604      	mov	r4, r0
 8007862:	4608      	mov	r0, r1
 8007864:	4611      	mov	r1, r2
 8007866:	2200      	movs	r2, #0
 8007868:	602a      	str	r2, [r5, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	f7f9 fa3c 	bl	8000ce8 <_read>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_read_r+0x1e>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_read_r+0x1e>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	200136b8 	.word	0x200136b8

08007880 <_malloc_usable_size_r>:
 8007880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007884:	1f18      	subs	r0, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfbc      	itt	lt
 800788a:	580b      	ldrlt	r3, [r1, r0]
 800788c:	18c0      	addlt	r0, r0, r3
 800788e:	4770      	bx	lr

08007890 <_init>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	bf00      	nop
 8007894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007896:	bc08      	pop	{r3}
 8007898:	469e      	mov	lr, r3
 800789a:	4770      	bx	lr

0800789c <_fini>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	bf00      	nop
 80078a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a2:	bc08      	pop	{r3}
 80078a4:	469e      	mov	lr, r3
 80078a6:	4770      	bx	lr
