
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d54  08004d54  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d5c  08004d5c  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08004d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013250  200000e4  08004e48  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013334  08004e48  00023334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dda4  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002677  00000000  00000000  0002deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00030530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00031258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232ab  00000000  00000000  00031e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011085  00000000  00000000  000550e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cab56  00000000  00000000  00066168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130cbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037dc  00000000  00000000  00130d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e4 	.word	0x200000e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ad4 	.word	0x08004ad4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e8 	.word	0x200000e8
 80001c4:	08004ad4 	.word	0x08004ad4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f0:	f000 b974 	b.w	80004dc <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468e      	mov	lr, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14d      	bne.n	80002b6 <__udivmoddi4+0xaa>
 800021a:	428a      	cmp	r2, r1
 800021c:	4694      	mov	ip, r2
 800021e:	d969      	bls.n	80002f4 <__udivmoddi4+0xe8>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b152      	cbz	r2, 800023c <__udivmoddi4+0x30>
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	f1c2 0120 	rsb	r1, r2, #32
 800022e:	fa20 f101 	lsr.w	r1, r0, r1
 8000232:	fa0c fc02 	lsl.w	ip, ip, r2
 8000236:	ea41 0e03 	orr.w	lr, r1, r3
 800023a:	4094      	lsls	r4, r2
 800023c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000240:	0c21      	lsrs	r1, r4, #16
 8000242:	fbbe f6f8 	udiv	r6, lr, r8
 8000246:	fa1f f78c 	uxth.w	r7, ip
 800024a:	fb08 e316 	mls	r3, r8, r6, lr
 800024e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000252:	fb06 f107 	mul.w	r1, r6, r7
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 811f 	bcs.w	80004a4 <__udivmoddi4+0x298>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 811c 	bls.w	80004a4 <__udivmoddi4+0x298>
 800026c:	3e02      	subs	r6, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x92>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000290:	f080 810a 	bcs.w	80004a8 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8107 	bls.w	80004a8 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a2:	1be4      	subs	r4, r4, r7
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa4>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xc2>
 80002ba:	2d00      	cmp	r5, #0
 80002bc:	f000 80ef 	beq.w	800049e <__udivmoddi4+0x292>
 80002c0:	2600      	movs	r6, #0
 80002c2:	e9c5 0100 	strd	r0, r1, [r5]
 80002c6:	4630      	mov	r0, r6
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f683 	clz	r6, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d14a      	bne.n	800036c <__udivmoddi4+0x160>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd4>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80f9 	bhi.w	80004d2 <__udivmoddi4+0x2c6>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	469e      	mov	lr, r3
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa4>
 80002ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa4>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xec>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 8092 	bne.w	8000426 <__udivmoddi4+0x21a>
 8000302:	eba1 010c 	sub.w	r1, r1, ip
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2601      	movs	r6, #1
 8000310:	0c20      	lsrs	r0, r4, #16
 8000312:	fbb1 f3f7 	udiv	r3, r1, r7
 8000316:	fb07 1113 	mls	r1, r7, r3, r1
 800031a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031e:	fb0e f003 	mul.w	r0, lr, r3
 8000322:	4288      	cmp	r0, r1
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x12c>
 8000326:	eb1c 0101 	adds.w	r1, ip, r1
 800032a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x12a>
 8000330:	4288      	cmp	r0, r1
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2c0>
 8000336:	4643      	mov	r3, r8
 8000338:	1a09      	subs	r1, r1, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000340:	fb07 1110 	mls	r1, r7, r0, r1
 8000344:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x156>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x154>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2ca>
 8000360:	4608      	mov	r0, r1
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036a:	e79c      	b.n	80002a6 <__udivmoddi4+0x9a>
 800036c:	f1c6 0720 	rsb	r7, r6, #32
 8000370:	40b3      	lsls	r3, r6
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa20 f407 	lsr.w	r4, r0, r7
 800037e:	fa01 f306 	lsl.w	r3, r1, r6
 8000382:	431c      	orrs	r4, r3
 8000384:	40f9      	lsrs	r1, r7
 8000386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038a:	fa00 f306 	lsl.w	r3, r0, r6
 800038e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000392:	0c20      	lsrs	r0, r4, #16
 8000394:	fa1f fe8c 	uxth.w	lr, ip
 8000398:	fb09 1118 	mls	r1, r9, r8, r1
 800039c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a0:	fb08 f00e 	mul.w	r0, r8, lr
 80003a4:	4288      	cmp	r0, r1
 80003a6:	fa02 f206 	lsl.w	r2, r2, r6
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b8>
 80003ac:	eb1c 0101 	adds.w	r1, ip, r1
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2bc>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2bc>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4461      	add	r1, ip
 80003c4:	1a09      	subs	r1, r1, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003cc:	fb09 1110 	mls	r1, r9, r0, r1
 80003d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d8:	458e      	cmp	lr, r1
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1e2>
 80003dc:	eb1c 0101 	adds.w	r1, ip, r1
 80003e0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2b4>
 80003e6:	458e      	cmp	lr, r1
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2b4>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4461      	add	r1, ip
 80003ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f2:	fba0 9402 	umull	r9, r4, r0, r2
 80003f6:	eba1 010e 	sub.w	r1, r1, lr
 80003fa:	42a1      	cmp	r1, r4
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46a6      	mov	lr, r4
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x2a4>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x2a0>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x212>
 8000406:	ebb3 0208 	subs.w	r2, r3, r8
 800040a:	eb61 010e 	sbc.w	r1, r1, lr
 800040e:	fa01 f707 	lsl.w	r7, r1, r7
 8000412:	fa22 f306 	lsr.w	r3, r2, r6
 8000416:	40f1      	lsrs	r1, r6
 8000418:	431f      	orrs	r7, r3
 800041a:	e9c5 7100 	strd	r7, r1, [r5]
 800041e:	2600      	movs	r6, #0
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	f1c2 0320 	rsb	r3, r2, #32
 800042a:	40d8      	lsrs	r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa21 f303 	lsr.w	r3, r1, r3
 8000434:	4091      	lsls	r1, r2
 8000436:	4301      	orrs	r1, r0
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb3 f0f7 	udiv	r0, r3, r7
 8000444:	fb07 3610 	mls	r6, r7, r0, r3
 8000448:	0c0b      	lsrs	r3, r1, #16
 800044a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044e:	fb00 f60e 	mul.w	r6, r0, lr
 8000452:	429e      	cmp	r6, r3
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x260>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b8>
 8000464:	429e      	cmp	r6, r3
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b8>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1b9b      	subs	r3, r3, r6
 800046e:	b289      	uxth	r1, r1
 8000470:	fbb3 f6f7 	udiv	r6, r3, r7
 8000474:	fb07 3316 	mls	r3, r7, r6, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb06 f30e 	mul.w	r3, r6, lr
 8000480:	428b      	cmp	r3, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x28a>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800048e:	428b      	cmp	r3, r1
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000492:	3e02      	subs	r6, #2
 8000494:	4461      	add	r1, ip
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0x104>
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e705      	b.n	80002b0 <__udivmoddi4+0xa4>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e3      	b.n	8000270 <__udivmoddi4+0x64>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6f8      	b.n	800029e <__udivmoddi4+0x92>
 80004ac:	454b      	cmp	r3, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f8>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f8>
 80004bc:	4646      	mov	r6, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x28a>
 80004c0:	4620      	mov	r0, r4
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1e2>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x260>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b8>
 80004cc:	3b02      	subs	r3, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x12c>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e709      	b.n	80002ea <__udivmoddi4+0xde>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x156>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <RecieveCommandLijn>:
 * @brief when line command is recieved adds the nesisary args and adds them to the buffer
 *
 * @param commandArray
 * @param inputStruct
 */
void RecieveCommandLijn(command commandArray, input_vars inputStruct) {
 80004e0:	b084      	sub	sp, #16
 80004e2:	b580      	push	{r7, lr}
 80004e4:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 80004e8:	f44f 6783 	mov.w	r7, #1048	; 0x418
 80004ec:	446f      	add	r7, sp
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	f107 001c 	add.w	r0, r7, #28
 80004f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]
 8000500:	e03b      	b.n	800057a <RecieveCommandLijn+0x9a>
		neededArg = i + 1;
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	3301      	adds	r3, #1
 8000506:	73bb      	strb	r3, [r7, #14]
		if (i == 4) {
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	2b04      	cmp	r3, #4
 800050c:	d119      	bne.n	8000542 <RecieveCommandLijn+0x62>
			ParseOnKomma(inputStruct, neededArg, 0, 1, commandArray);
 800050e:	7bbb      	ldrb	r3, [r7, #14]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 8000516:	2201      	movs	r2, #1
 8000518:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 800051c:	2200      	movs	r2, #0
 800051e:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000522:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000526:	4668      	mov	r0, sp
 8000528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800052c:	f240 4204 	movw	r2, #1028	; 0x404
 8000530:	4619      	mov	r1, r3
 8000532:	f004 fa2d 	bl	8004990 <memcpy>
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800053c:	f000 f854 	bl	80005e8 <ParseOnKomma>
 8000540:	e018      	b.n	8000574 <RecieveCommandLijn+0x94>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, commandArray);
 8000542:	7bbb      	ldrb	r3, [r7, #14]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 800054a:	2200      	movs	r2, #0
 800054c:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 8000550:	2201      	movs	r2, #1
 8000552:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000556:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 800055a:	4668      	mov	r0, sp
 800055c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000560:	f240 4204 	movw	r2, #1028	; 0x404
 8000564:	4619      	mov	r1, r3
 8000566:	f004 fa13 	bl	8004990 <memcpy>
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000570:	f000 f83a 	bl	80005e8 <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	3301      	adds	r3, #1
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	2b06      	cmp	r3, #6
 800057e:	d9c0      	bls.n	8000502 <RecieveCommandLijn+0x22>
		}
	}
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800058c:	b004      	add	sp, #16
 800058e:	4770      	bx	lr

08000590 <RecieveCommandClear>:
 *
 * @param commandArray
 * @param inputStruct
 */
void RecieveCommandClear(command commandArray, input_vars inputStruct)
{
 8000590:	b084      	sub	sp, #16
 8000592:	b580      	push	{r7, lr}
 8000594:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000598:	f44f 6783 	mov.w	r7, #1048	; 0x418
 800059c:	446f      	add	r7, sp
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	f107 0014 	add.w	r0, r7, #20
 80005a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 0, 1, commandArray);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 80005ae:	2301      	movs	r3, #1
 80005b0:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 80005b4:	2300      	movs	r3, #0
 80005b6:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 80005ba:	2301      	movs	r3, #1
 80005bc:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 80005c0:	4668      	mov	r0, sp
 80005c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c6:	f240 4204 	movw	r2, #1028	; 0x404
 80005ca:	4619      	mov	r1, r3
 80005cc:	f004 f9e0 	bl	8004990 <memcpy>
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d6:	f000 f807 	bl	80005e8 <ParseOnKomma>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005e4:	b004      	add	sp, #16
 80005e6:	4770      	bx	lr

080005e8 <ParseOnKomma>:
 * @param convertColor
 * @param commandArray
 */
void ParseOnKomma(input_vars inputStruct, uint8_t neededArgument,
				  uint8_t convertToNumber, int convertColor,
				  command commandArray) {
 80005e8:	b084      	sub	sp, #16
 80005ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005ee:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80005f2:	f44f 6782 	mov.w	r7, #1040	; 0x410
 80005f6:	446f      	add	r7, sp
 80005f8:	f107 0630 	add.w	r6, r7, #48	; 0x30
 80005fc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000600:	466b      	mov	r3, sp
 8000602:	469a      	mov	sl, r3
	uint8_t commaCounter = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	73bb      	strb	r3, [r7, #14]
	uint8_t placeInBuf = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
	char incommingMessage[inputStruct.msglen];
 800060c:	f8d7 6434 	ldr.w	r6, [r7, #1076]	; 0x434
 8000610:	1e73      	subs	r3, r6, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4632      	mov	r2, r6
 8000616:	2300      	movs	r3, #0
 8000618:	4690      	mov	r8, r2
 800061a:	4699      	mov	r9, r3
 800061c:	f04f 0200 	mov.w	r2, #0
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000628:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800062c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000630:	4632      	mov	r2, r6
 8000632:	2300      	movs	r3, #0
 8000634:	4614      	mov	r4, r2
 8000636:	461d      	mov	r5, r3
 8000638:	f04f 0200 	mov.w	r2, #0
 800063c:	f04f 0300 	mov.w	r3, #0
 8000640:	00eb      	lsls	r3, r5, #3
 8000642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000646:	00e2      	lsls	r2, r4, #3
 8000648:	4633      	mov	r3, r6
 800064a:	3307      	adds	r3, #7
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	ebad 0d03 	sub.w	sp, sp, r3
 8000654:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000658:	3300      	adds	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	e099      	b.n	8000796 <ParseOnKomma+0x1ae>
		if (inputStruct.line_rx_buffer[j] == ',') {
 8000662:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b2c      	cmp	r3, #44	; 0x2c
 800066e:	d144      	bne.n	80006fa <ParseOnKomma+0x112>
			incommingMessage[j] = 0;
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	4413      	add	r3, r2
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
			placeInBuf = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageParse, sizeof(debugMessageParse), &huart2);
#endif
			if (commaCounter == neededArgument) {
 800067e:	7bba      	ldrb	r2, [r7, #14]
 8000680:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000684:	429a      	cmp	r2, r3
 8000686:	d12f      	bne.n	80006e8 <ParseOnKomma+0x100>
				if (!commaCounter)
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d10f      	bne.n	80006ae <ParseOnKomma+0xc6>
					CheckWhatCommand(incommingMessage, commandArray,
 800068e:	4668      	mov	r0, sp
 8000690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000694:	f240 420c 	movw	r2, #1036	; 0x40c
 8000698:	4619      	mov	r1, r3
 800069a:	f004 f979 	bl	8004990 <memcpy>
 800069e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006a2:	cb0c      	ldmia	r3, {r2, r3}
 80006a4:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80006a8:	6838      	ldr	r0, [r7, #0]
 80006aa:	f000 f887 	bl	80007bc <CheckWhatCommand>
									 inputStruct);
				if (convertColor)
 80006ae:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d007      	beq.n	80006c6 <ParseOnKomma+0xde>
					CheckWhatColor(incommingMessage, commandArray,
 80006b6:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 80006ba:	461a      	mov	r2, r3
 80006bc:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80006c0:	6838      	ldr	r0, [r7, #0]
 80006c2:	f000 f8b9 	bl	8000838 <CheckWhatColor>
								   neededArgument);
				if (convertToNumber)
 80006c6:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d06a      	beq.n	80007a4 <ParseOnKomma+0x1bc>
					commandArray[neededArgument] = atoi(incommingMessage);
 80006ce:	6838      	ldr	r0, [r7, #0]
 80006d0:	f004 f930 	bl	8004934 <atoi>
 80006d4:	4601      	mov	r1, r0
 80006d6:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80006e0:	4413      	add	r3, r2
 80006e2:	b28a      	uxth	r2, r1
 80006e4:	801a      	strh	r2, [r3, #0]
				break;
 80006e6:	e05d      	b.n	80007a4 <ParseOnKomma+0x1bc>
			}
			commaCounter++;
 80006e8:	7bbb      	ldrb	r3, [r7, #14]
 80006ea:	3301      	adds	r3, #1
 80006ec:	73bb      	strb	r3, [r7, #14]
			// set the array to 0 again to fill with the argument
			memset(incommingMessage, 0, sizeof(incommingMessage));
 80006ee:	4633      	mov	r3, r6
 80006f0:	461a      	mov	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	6838      	ldr	r0, [r7, #0]
 80006f6:	f004 f959 	bl	80049ac <memset>
		}
		if (j == inputStruct.msglen) {
 80006fa:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	429a      	cmp	r2, r3
 8000702:	d12c      	bne.n	800075e <ParseOnKomma+0x176>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	f107 0131 	add.w	r1, r7, #49	; 0x31
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	440a      	add	r2, r1
 800070e:	7811      	ldrb	r1, [r2, #0]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	3301      	adds	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
			if (commaCounter == neededArgument) {
 800071a:	7bba      	ldrb	r2, [r7, #14]
 800071c:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000720:	429a      	cmp	r2, r3
 8000722:	d141      	bne.n	80007a8 <ParseOnKomma+0x1c0>
				if (convertColor)
 8000724:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000728:	2b00      	cmp	r3, #0
 800072a:	d007      	beq.n	800073c <ParseOnKomma+0x154>
					CheckWhatColor(incommingMessage, commandArray,
 800072c:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000730:	461a      	mov	r2, r3
 8000732:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8000736:	6838      	ldr	r0, [r7, #0]
 8000738:	f000 f87e 	bl	8000838 <CheckWhatColor>
								   neededArgument);
				if (convertToNumber)
 800073c:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000740:	2b00      	cmp	r3, #0
 8000742:	d031      	beq.n	80007a8 <ParseOnKomma+0x1c0>
					commandArray[neededArgument] = atoi(incommingMessage);
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f004 f8f5 	bl	8004934 <atoi>
 800074a:	4601      	mov	r1, r0
 800074c:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8000756:	4413      	add	r3, r2
 8000758:	b28a      	uxth	r2, r1
 800075a:	801a      	strh	r2, [r3, #0]
			}
			break;
 800075c:	e024      	b.n	80007a8 <ParseOnKomma+0x1c0>
		}
		if (inputStruct.line_rx_buffer[j] != 0 &&
 800075e:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d011      	beq.n	8000790 <ParseOnKomma+0x1a8>
			inputStruct.line_rx_buffer[j] != ',') {
 800076c:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000776:	2b2c      	cmp	r3, #44	; 0x2c
 8000778:	d00a      	beq.n	8000790 <ParseOnKomma+0x1a8>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	440a      	add	r2, r1
 8000784:	7811      	ldrb	r1, [r2, #0]
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	3301      	adds	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	3301      	adds	r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	429a      	cmp	r2, r3
 800079e:	f77f af60 	ble.w	8000662 <ParseOnKomma+0x7a>
 80007a2:	e002      	b.n	80007aa <ParseOnKomma+0x1c2>
				break;
 80007a4:	bf00      	nop
 80007a6:	e000      	b.n	80007aa <ParseOnKomma+0x1c2>
			break;
 80007a8:	bf00      	nop
 80007aa:	46d5      	mov	sp, sl
		}
	}
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007b6:	b004      	add	sp, #16
 80007b8:	4770      	bx	lr
	...

080007bc <CheckWhatCommand>:
 * @param incommingCommand
 * @param commandArray
 * @param inputStruct
 */
void CheckWhatCommand(char incommingCommand[], command commandArray,
					  input_vars inputStruct) {
 80007bc:	b082      	sub	sp, #8
 80007be:	b580      	push	{r7, lr}
 80007c0:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 80007c4:	f44f 6781 	mov.w	r7, #1032	; 0x408
 80007c8:	446f      	add	r7, sp
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	f107 0118 	add.w	r1, r7, #24
 80007d2:	e881 000c 	stmia.w	r1, {r2, r3}
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e01f      	b.n	800081c <CheckWhatCommand+0x60>
		if (strcmp(incommingCommand, possibleCommands[i]) == 0) {
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <CheckWhatCommand+0x78>)
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	4619      	mov	r1, r3
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fcee 	bl	80001c8 <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d111      	bne.n	8000816 <CheckWhatCommand+0x5a>
			commandArray[0] = i;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	801a      	strh	r2, [r3, #0]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageCommand, sizeof(debugMessageCommand),
						&huart2);
#endif
			DoOnCommand(commandArray, inputStruct);
 80007fa:	4668      	mov	r0, sp
 80007fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000800:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8000804:	4619      	mov	r1, r3
 8000806:	f004 f8c3 	bl	8004990 <memcpy>
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f000 f83f 	bl	8000894 <DoOnCommand>
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	3301      	adds	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2b08      	cmp	r3, #8
 8000820:	d9dc      	bls.n	80007dc <CheckWhatCommand+0x20>
		}
	}
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800082e:	b002      	add	sp, #8
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000000 	.word	0x20000000

08000838 <CheckWhatColor>:
 * @param incommingColor
 * @param commandArray
 * @param argPlace
 */
void CheckWhatColor(char incommingColor[], command commandArray,
					uint8_t argPlace) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	4613      	mov	r3, r2
 8000844:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	75fb      	strb	r3, [r7, #23]
 800084a:	e017      	b.n	800087c <CheckWhatColor+0x44>
		if (strcmp(incommingColor, possibleColors[i]) == 0) {
 800084c:	7dfb      	ldrb	r3, [r7, #23]
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <CheckWhatColor+0x54>)
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	4619      	mov	r1, r3
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f7ff fcb6 	bl	80001c8 <strcmp>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d109      	bne.n	8000876 <CheckWhatColor+0x3e>
			commandArray[argPlace] = colorCodes[i];
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <CheckWhatColor+0x58>)
 8000866:	5cd1      	ldrb	r1, [r2, r3]
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	4413      	add	r3, r2
 8000870:	b28a      	uxth	r2, r1
 8000872:	801a      	strh	r2, [r3, #0]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageColor, sizeof(debugMessageColor), &huart2);
#endif
			break;
 8000874:	e006      	b.n	8000884 <CheckWhatColor+0x4c>
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8000876:	7dfb      	ldrb	r3, [r7, #23]
 8000878:	3301      	adds	r3, #1
 800087a:	75fb      	strb	r3, [r7, #23]
 800087c:	7dfb      	ldrb	r3, [r7, #23]
 800087e:	2b0f      	cmp	r3, #15
 8000880:	d9e4      	bls.n	800084c <CheckWhatColor+0x14>
		}
	}
}
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000024 	.word	0x20000024
 8000890:	20000064 	.word	0x20000064

08000894 <DoOnCommand>:
 * of the args
 *
 * @param commandArray
 * @param inputStruct
 */
void DoOnCommand(command commandArray, input_vars inputStruct) {
 8000894:	b084      	sub	sp, #16
 8000896:	b580      	push	{r7, lr}
 8000898:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800089c:	f44f 6781 	mov.w	r7, #1032	; 0x408
 80008a0:	446f      	add	r7, sp
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	f107 0014 	add.w	r0, r7, #20
 80008a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	switch (commandArray[0]) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d024      	beq.n	80008fe <DoOnCommand+0x6a>
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	dc23      	bgt.n	8000900 <DoOnCommand+0x6c>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <DoOnCommand+0x2e>
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d00f      	beq.n	80008e0 <DoOnCommand+0x4c>
			RecieveCommandClear(commandArray, inputStruct);
			break;
		case 2:
			break;
	}
}
 80008c0:	e01e      	b.n	8000900 <DoOnCommand+0x6c>
			RecieveCommandLijn(commandArray, inputStruct);
 80008c2:	4668      	mov	r0, sp
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80008cc:	4619      	mov	r1, r3
 80008ce:	f004 f85f 	bl	8004990 <memcpy>
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff fe01 	bl	80004e0 <RecieveCommandLijn>
			break;
 80008de:	e00f      	b.n	8000900 <DoOnCommand+0x6c>
			RecieveCommandClear(commandArray, inputStruct);
 80008e0:	4668      	mov	r0, sp
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80008ea:	4619      	mov	r1, r3
 80008ec:	f004 f850 	bl	8004990 <memcpy>
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fe4a 	bl	8000590 <RecieveCommandClear>
			break;
 80008fc:	e000      	b.n	8000900 <DoOnCommand+0x6c>
			break;
 80008fe:	bf00      	nop
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800090a:	b004      	add	sp, #16
 800090c:	4770      	bx	lr
	...

08000910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_DMA_Init+0x3c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <MX_DMA_Init+0x3c>)
 8000920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_DMA_Init+0x3c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2044      	movs	r0, #68	; 0x44
 8000938:	f000 fe9f 	bl	800167a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800093c:	2044      	movs	r0, #68	; 0x44
 800093e:	f000 feb8 	bl	80016b2 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <MX_GPIO_Init+0xe4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a31      	ldr	r2, [pc, #196]	; (8000a34 <MX_GPIO_Init+0xe4>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_GPIO_Init+0xe4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <MX_GPIO_Init+0xe4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a2a      	ldr	r2, [pc, #168]	; (8000a34 <MX_GPIO_Init+0xe4>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xe4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_GPIO_Init+0xe4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <MX_GPIO_Init+0xe4>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_GPIO_Init+0xe4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_GPIO_Init+0xe4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_GPIO_Init+0xe4>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_GPIO_Init+0xe4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80009dc:	4816      	ldr	r0, [pc, #88]	; (8000a38 <MX_GPIO_Init+0xe8>)
 80009de:	f001 fbb1 	bl	8002144 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e8:	4814      	ldr	r0, [pc, #80]	; (8000a3c <MX_GPIO_Init+0xec>)
 80009ea:	f001 fbab 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80009ee:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80009f2:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_GPIO_Init+0xe8>)
 8000a08:	f001 fa00 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_GPIO_Init+0xec>)
 8000a26:	f001 f9f1 	bl	8001e0c <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020400 	.word	0x40020400

08000a40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8000a46:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000a4a:	446f      	add	r7, sp

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000a4c:	f000 fcc8 	bl	80013e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  command commandBuf = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	615a      	str	r2, [r3, #20]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f85e 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f7ff ff74 	bl	8000950 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a68:	f7ff ff52 	bl	8000910 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a6c:	f000 fa00 	bl	8000e70 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a70:	f000 fa4e 	bl	8000f10 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000a74:	f000 fb64 	bl	8001140 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init();  // Init VGA-Screen
 8000a78:	f000 fc14 	bl	80012a4 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 fc63 	bl	8001348 <UB_VGA_FillScreen>
  //  UB_VGA_SetPixel(10,14,VGA_COL_BLUE);
  //  UB_VGA_SetPixel(10,15,VGA_COL_BLUE);
  //  UB_VGA_SetPixel(10,16,VGA_COL_BLUE);
  //  //UB_VGA_SetPixel(0,0,0x00);
  //  //UB_VGA_SetPixel(319,,0x00);
  UB_VGA_FillScreen(VGA_COL_WHITE);
 8000a82:	20ff      	movs	r0, #255	; 0xff
 8000a84:	f000 fc60 	bl	8001348 <UB_VGA_FillScreen>
 int i;

  for (i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e008      	b.n	8000aa0 <main+0x60>
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <main+0xd8>)
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	4413      	add	r3, r2
 8000a94:	3301      	adds	r3, #1
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa6:	dbf2      	blt.n	8000a8e <main+0x4e>

  //  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <main+0xd8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <main+0xd8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  input.command_execute_flag = FALSE;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <main+0xd8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

  // HAl wants a memory location to store the charachter it receives from the
  // UART We will pass it an array, but we will not use it. We declare our own
  // variable in the interupt handler See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4915      	ldr	r1, [pc, #84]	; (8000b18 <main+0xd8>)
 8000ac2:	4816      	ldr	r0, [pc, #88]	; (8000b1c <main+0xdc>)
 8000ac4:	f002 ffd3 	bl	8003a6e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (input.command_execute_flag == TRUE) {
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <main+0xd8>)
 8000aca:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8000ace:	2bff      	cmp	r3, #255	; 0xff
 8000ad0:	d1fa      	bne.n	8000ac8 <main+0x88>
      // Do some stuff
      ParseOnKomma(input, 0, 0, 0, commandBuf);
 8000ad2:	4c11      	ldr	r4, [pc, #68]	; (8000b18 <main+0xd8>)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000aec:	4668      	mov	r0, sp
 8000aee:	f104 0310 	add.w	r3, r4, #16
 8000af2:	f240 4204 	movw	r2, #1028	; 0x404
 8000af6:	4619      	mov	r1, r3
 8000af8:	f003 ff4a 	bl	8004990 <memcpy>
 8000afc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b00:	f7ff fd72 	bl	80005e8 <ParseOnKomma>
      ClearScreen(commandBuf[1]);
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fbbd 	bl	8001286 <ClearScreen>


      // When finished reset the flag
      input.command_execute_flag = FALSE;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <main+0xd8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    if (input.command_execute_flag == TRUE) {
 8000b14:	e7d8      	b.n	8000ac8 <main+0x88>
 8000b16:	bf00      	nop
 8000b18:	20000100 	.word	0x20000100
 8000b1c:	200005f4 	.word	0x200005f4

08000b20 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	; 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	; 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 ff3c 	bl	80049ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <SystemClock_Config+0xcc>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a27      	ldr	r2, [pc, #156]	; (8000bec <SystemClock_Config+0xcc>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <SystemClock_Config+0xcc>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <SystemClock_Config+0xd0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <SystemClock_Config+0xd0>)
 8000b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <SystemClock_Config+0xd0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b94:	23a8      	movs	r3, #168	; 0xa8
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fae7 	bl	8002178 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x94>
    Error_Handler();
 8000bb0:	f000 f820 	bl	8000bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2105      	movs	r1, #5
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fd3e 	bl	8002654 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xc2>
    Error_Handler();
 8000bde:	f000 f809 	bl	8000bf4 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	; 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 fbec 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cb4:	4828      	ldr	r0, [pc, #160]	; (8000d58 <TIM2_IRQHandler+0xa8>)
 8000cb6:	f002 f829 	bl	8002d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <TIM2_IRQHandler+0xa8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f06f 0208 	mvn.w	r2, #8
 8000cc2:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000cce:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000cd8:	d905      	bls.n	8000ce6 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <TIM2_IRQHandler+0xb0>)
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000ce4:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d802      	bhi.n	8000cf4 <TIM2_IRQHandler+0x44>
 8000cee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cf2:	e001      	b.n	8000cf8 <TIM2_IRQHandler+0x48>
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <TIM2_IRQHandler+0xb4>)
 8000cfa:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	2b23      	cmp	r3, #35	; 0x23
 8000d02:	d927      	bls.n	8000d54 <TIM2_IRQHandler+0xa4>
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	f240 2202 	movw	r2, #514	; 0x202
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d821      	bhi.n	8000d54 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000d10:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <TIM2_IRQHandler+0xb8>)
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <TIM2_IRQHandler+0xb8>)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <TIM2_IRQHandler+0xbc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <TIM2_IRQHandler+0xbc>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <TIM2_IRQHandler+0xc0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <TIM2_IRQHandler+0xc0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0201 	orr.w	r2, r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000d50:	4a02      	ldr	r2, [pc, #8]	; (8000d5c <TIM2_IRQHandler+0xac>)
 8000d52:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000554 	.word	0x20000554
 8000d5c:	20013324 	.word	0x20013324
 8000d60:	20000634 	.word	0x20000634
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40026488 	.word	0x40026488
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	20000594 	.word	0x20000594

08000d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <USART2_IRQHandler+0x70>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b0a      	cmp	r3, #10
 8000d84:	d026      	beq.n	8000dd4 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b0d      	cmp	r3, #13
 8000d8a:	d002      	beq.n	8000d92 <USART2_IRQHandler+0x1e>
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8000d90:	d10e      	bne.n	8000db0 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <USART2_IRQHandler+0x74>)
 8000d94:	22ff      	movs	r2, #255	; 0xff
 8000d96:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <USART2_IRQHandler+0x74>)
 8000d9c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000da0:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <USART2_IRQHandler+0x74>)
 8000da2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <USART2_IRQHandler+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 8000dae:	e011      	b.n	8000dd4 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <USART2_IRQHandler+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <USART2_IRQHandler+0x74>)
 8000dba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <USART2_IRQHandler+0x74>)
 8000dc0:	4413      	add	r3, r2
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <USART2_IRQHandler+0x74>)
 8000dc8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000dcc:	3301      	adds	r3, #1
 8000dce:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <USART2_IRQHandler+0x74>)
 8000dd0:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <USART2_IRQHandler+0x78>)
 8000dd6:	f002 fe9f 	bl	8003b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004400 	.word	0x40004400
 8000de8:	20000100 	.word	0x20000100
 8000dec:	200005f4 	.word	0x200005f4

08000df0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <DMA2_Stream5_IRQHandler+0x48>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6a1a      	ldr	r2, [r3, #32]
 8000dfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10f      	bne.n	8000e24 <DMA2_Stream5_IRQHandler+0x34>
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <DMA2_Stream5_IRQHandler+0x48>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6a1a      	ldr	r2, [r3, #32]
 8000e0a:	f240 4344 	movw	r3, #1092	; 0x444
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d107      	bne.n	8000e24 <DMA2_Stream5_IRQHandler+0x34>
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <DMA2_Stream5_IRQHandler+0x48>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <DMA2_Stream5_IRQHandler+0x48>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0201 	bic.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <DMA2_Stream5_IRQHandler+0x4c>)
 8000e26:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <DMA2_Stream5_IRQHandler+0x50>)
 8000e2e:	f000 fd83 	bl	8001938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000514 	.word	0x20000514
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	20000594 	.word	0x20000594

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <SystemInit+0x28>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <SystemInit+0x28>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <SystemInit+0x28>)
 8000e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <MX_TIM1_Init+0x9c>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000ea0:	220b      	movs	r2, #11
 8000ea2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eb6:	4814      	ldr	r0, [pc, #80]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000eb8:	f001 fdec 	bl	8002a94 <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000ec2:	f7ff fe97 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000ed4:	f002 f8e8 	bl	80030a8 <HAL_TIM_ConfigClockSource>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000ede:	f7ff fe89 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <MX_TIM1_Init+0x98>)
 8000ef0:	f002 fce0 	bl	80038b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000efa:	f7ff fe7b 	bl	8000bf4 <Error_Handler>
  }

}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000514 	.word	0x20000514
 8000f0c:	40010000 	.word	0x40010000

08000f10 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000f34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000f48:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000f4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f5a:	4820      	ldr	r0, [pc, #128]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000f5c:	f001 fde9 	bl	8002b32 <HAL_TIM_PWM_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f66:	f7ff fe45 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	4619      	mov	r1, r3
 8000f78:	4818      	ldr	r0, [pc, #96]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000f7a:	f002 fc9b 	bl	80038b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f84:	f7ff fe36 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f88:	2360      	movs	r3, #96	; 0x60
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000f8c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000f90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f92:	2302      	movs	r3, #2
 8000f94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480e      	ldr	r0, [pc, #56]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000fa2:	f001 ffbb 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000fac:	f7ff fe22 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000fb0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	220c      	movs	r2, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000fbe:	f001 ffad 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000fc8:	f7ff fe14 	bl	8000bf4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <MX_TIM2_Init+0xcc>)
 8000fce:	f000 f87f 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000554 	.word	0x20000554

08000fe0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <HAL_TIM_Base_MspInit+0x94>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d13c      	bne.n	800106c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <HAL_TIM_Base_MspInit+0x98>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <HAL_TIM_Base_MspInit+0x98>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_TIM_Base_MspInit+0x98>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 8001010:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <HAL_TIM_Base_MspInit+0xa0>)
 8001012:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 8001016:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800101a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 800101e:	2240      	movs	r2, #64	; 0x40
 8001020:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 800102a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102e:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 8001044:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001048:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 8001052:	f000 fb49 	bl	80016e8 <HAL_DMA_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 800105c:	f7ff fdca 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 8001064:	621a      	str	r2, [r3, #32]
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <HAL_TIM_Base_MspInit+0x9c>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40010000 	.word	0x40010000
 8001078:	40023800 	.word	0x40023800
 800107c:	20000594 	.word	0x20000594
 8001080:	40026488 	.word	0x40026488

08001084 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001094:	d115      	bne.n	80010c2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_TIM_PWM_MspInit+0x48>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_TIM_PWM_MspInit+0x48>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_TIM_PWM_MspInit+0x48>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	201c      	movs	r0, #28
 80010b8:	f000 fadf 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010bc:	201c      	movs	r0, #28
 80010be:	f000 faf8 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d11e      	bne.n	8001130 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_TIM_MspPostInit+0x68>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_TIM_MspPostInit+0x68>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_TIM_MspPostInit+0x68>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 800110e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001112:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001120:	2301      	movs	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <HAL_TIM_MspPostInit+0x6c>)
 800112c:	f000 fe6e 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40023800 	.word	0x40023800
 800113c:	40020400 	.word	0x40020400

08001140 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART2_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001178:	f002 fc2c 	bl	80039d4 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f7ff fd37 	bl	8000bf4 <Error_Handler>
  }

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200005f4 	.word	0x200005f4
 8001190:	40004400 	.word	0x40004400

08001194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_UART_MspInit+0x94>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d133      	bne.n	800121e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_UART_MspInit+0x98>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_UART_MspInit+0x98>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_UART_MspInit+0x98>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_UART_MspInit+0x98>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_UART_MspInit+0x98>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_UART_MspInit+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ee:	230c      	movs	r3, #12
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <HAL_UART_MspInit+0x9c>)
 800120a:	f000 fdff 	bl	8001e0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2026      	movs	r0, #38	; 0x26
 8001214:	f000 fa31 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001218:	2026      	movs	r0, #38	; 0x26
 800121a:	f000 fa4a 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40004400 	.word	0x40004400
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000

08001234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001238:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800123a:	e003      	b.n	8001244 <LoopCopyDataInit>

0800123c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800123e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001240:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001242:	3104      	adds	r1, #4

08001244 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001248:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800124a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800124c:	d3f6      	bcc.n	800123c <CopyDataInit>
  ldr  r2, =_sbss
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001250:	e002      	b.n	8001258 <LoopFillZerobss>

08001252 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001252:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001254:	f842 3b04 	str.w	r3, [r2], #4

08001258 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800125a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800125c:	d3f9      	bcc.n	8001252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800125e:	f7ff fdf1 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001262:	f003 fb71 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001266:	f7ff fbeb 	bl	8000a40 <main>
  bx  lr    
 800126a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800126c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001270:	08004d64 	.word	0x08004d64
  ldr  r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001278:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 800127c:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 8001280:	20013334 	.word	0x20013334

08001284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC_IRQHandler>

08001286 <ClearScreen>:
 * @brief Clears the screen in the specified color
 *
 * @param color
 * @return
 */
int ClearScreen(uint8_t color) {
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f858 	bl	8001348 <UB_VGA_FillScreen>
}
 8001298:	bf00      	nop
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <UB_VGA_Screen_Init+0x84>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <UB_VGA_Screen_Init+0x84>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <UB_VGA_Screen_Init+0x84>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <UB_VGA_Screen_Init+0x88>)
 80012bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c0:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80012c2:	481b      	ldr	r0, [pc, #108]	; (8001330 <UB_VGA_Screen_Init+0x8c>)
 80012c4:	f001 fc11 	bl	8002aea <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80012c8:	210c      	movs	r1, #12
 80012ca:	4819      	ldr	r0, [pc, #100]	; (8001330 <UB_VGA_Screen_Init+0x8c>)
 80012cc:	f001 fc5c 	bl	8002b88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80012d0:	2108      	movs	r1, #8
 80012d2:	4817      	ldr	r0, [pc, #92]	; (8001330 <UB_VGA_Screen_Init+0x8c>)
 80012d4:	f001 fc96 	bl	8002c04 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <UB_VGA_Screen_Init+0x90>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <UB_VGA_Screen_Init+0x90>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012e6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <UB_VGA_Screen_Init+0x90>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <UB_VGA_Screen_Init+0x90>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80012f8:	490f      	ldr	r1, [pc, #60]	; (8001338 <UB_VGA_Screen_Init+0x94>)
 80012fa:	f240 1341 	movw	r3, #321	; 0x141
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <UB_VGA_Screen_Init+0x98>)
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <UB_VGA_Screen_Init+0x9c>)
 8001302:	f000 fa9f 	bl	8001844 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <UB_VGA_Screen_Init+0x9c>)
 8001308:	f000 f9ee 	bl	80016e8 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <UB_VGA_Screen_Init+0x9c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <UB_VGA_Screen_Init+0x9c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0210 	orr.w	r2, r2, #16
 800131a:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <UB_VGA_Screen_Init+0xa0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a01      	ldr	r2, [pc, #4]	; (8001328 <UB_VGA_Screen_Init+0x84>)
 8001322:	6093      	str	r3, [r2, #8]
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20013324 	.word	0x20013324
 800132c:	40020400 	.word	0x40020400
 8001330:	20000554 	.word	0x20000554
 8001334:	20000514 	.word	0x20000514
 8001338:	20000634 	.word	0x20000634
 800133c:	40021015 	.word	0x40021015
 8001340:	20000594 	.word	0x20000594
 8001344:	40026488 	.word	0x40026488

08001348 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001352:	2300      	movs	r3, #0
 8001354:	81bb      	strh	r3, [r7, #12]
 8001356:	e012      	b.n	800137e <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001358:	2300      	movs	r3, #0
 800135a:	81fb      	strh	r3, [r7, #14]
 800135c:	e008      	b.n	8001370 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	89b9      	ldrh	r1, [r7, #12]
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f813 	bl	8001390 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	3301      	adds	r3, #1
 800136e:	81fb      	strh	r3, [r7, #14]
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001376:	d3f2      	bcc.n	800135e <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001378:	89bb      	ldrh	r3, [r7, #12]
 800137a:	3301      	adds	r3, #1
 800137c:	81bb      	strh	r3, [r7, #12]
 800137e:	89bb      	ldrh	r3, [r7, #12]
 8001380:	2bef      	cmp	r3, #239	; 0xef
 8001382:	d9e9      	bls.n	8001358 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
 800139a:	460b      	mov	r3, r1
 800139c:	80bb      	strh	r3, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013a8:	d301      	bcc.n	80013ae <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	2bef      	cmp	r3, #239	; 0xef
 80013b2:	d901      	bls.n	80013b8 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80013b8:	88ba      	ldrh	r2, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	019b      	lsls	r3, r3, #6
 80013c2:	441a      	add	r2, r3
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	4413      	add	r3, r2
 80013c8:	4904      	ldr	r1, [pc, #16]	; (80013dc <UB_VGA_SetPixel+0x4c>)
 80013ca:	78fa      	ldrb	r2, [r7, #3]
 80013cc:	54ca      	strb	r2, [r1, r3]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000634 	.word	0x20000634

080013e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <HAL_Init+0x40>)
 80013ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_Init+0x40>)
 80013f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_Init+0x40>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f92b 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f808 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fbf6 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023c00 	.word	0x40023c00

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x54>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x58>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f943 	bl	80016ce <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001460:	f000 f90b 	bl	800167a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_InitTick+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000074 	.word	0x20000074
 800147c:	2000007c 	.word	0x2000007c
 8001480:	20000078 	.word	0x20000078

08001484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x20>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x24>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_IncTick+0x24>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000007c 	.word	0x2000007c
 80014a8:	20013330 	.word	0x20013330

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20013330 	.word	0x20013330

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001644:	f7ff ff8e 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff29 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800168c:	f7ff ff3e 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	6978      	ldr	r0, [r7, #20]
 8001698:	f7ff ff8e 	bl	80015b8 <NVIC_EncodePriority>
 800169c:	4602      	mov	r2, r0
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5d 	bl	8001564 <__NVIC_SetPriority>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff31 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffa2 	bl	8001620 <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff feda 	bl	80014ac <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e099      	b.n	8001838 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2202      	movs	r2, #2
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001724:	e00f      	b.n	8001746 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001726:	f7ff fec1 	bl	80014ac <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b05      	cmp	r3, #5
 8001732:	d908      	bls.n	8001746 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2220      	movs	r2, #32
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e078      	b.n	8001838 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1e8      	bne.n	8001726 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_DMA_Init+0x158>)
 8001760:	4013      	ands	r3, r2
 8001762:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001772:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4313      	orrs	r3, r2
 8001796:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	2b04      	cmp	r3, #4
 800179e:	d107      	bne.n	80017b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4313      	orrs	r3, r2
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f023 0307 	bic.w	r3, r3, #7
 80017c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d117      	bne.n	800180a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00e      	beq.n	800180a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 fa91 	bl	8001d14 <DMA_CheckFifoParam>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001806:	2301      	movs	r3, #1
 8001808:	e016      	b.n	8001838 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fa48 	bl	8001ca8 <DMA_CalcBaseAndBitshift>
 8001818:	4603      	mov	r3, r0
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	223f      	movs	r2, #63	; 0x3f
 8001822:	409a      	lsls	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	f010803f 	.word	0xf010803f

08001844 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_DMA_Start_IT+0x26>
 8001866:	2302      	movs	r3, #2
 8001868:	e040      	b.n	80018ec <HAL_DMA_Start_IT+0xa8>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d12f      	bne.n	80018de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f9da 	bl	8001c4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	223f      	movs	r2, #63	; 0x3f
 800189e:	409a      	lsls	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0216 	orr.w	r2, r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0208 	orr.w	r2, r2, #8
 80018ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e005      	b.n	80018ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018e6:	2302      	movs	r3, #2
 80018e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d004      	beq.n	8001912 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00c      	b.n	800192c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2205      	movs	r2, #5
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0201 	bic.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001944:	4b8e      	ldr	r3, [pc, #568]	; (8001b80 <HAL_DMA_IRQHandler+0x248>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a8e      	ldr	r2, [pc, #568]	; (8001b84 <HAL_DMA_IRQHandler+0x24c>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	2208      	movs	r2, #8
 8001964:	409a      	lsls	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01a      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0204 	bic.w	r2, r2, #4
 800198a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	2208      	movs	r2, #8
 8001992:	409a      	lsls	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2201      	movs	r2, #1
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d012      	beq.n	80019da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2201      	movs	r2, #1
 80019c8:	409a      	lsls	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	f043 0202 	orr.w	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2204      	movs	r2, #4
 80019e0:	409a      	lsls	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d012      	beq.n	8001a10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00b      	beq.n	8001a10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	2204      	movs	r2, #4
 80019fe:	409a      	lsls	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f043 0204 	orr.w	r2, r3, #4
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	2210      	movs	r2, #16
 8001a16:	409a      	lsls	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d043      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d03c      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	2210      	movs	r2, #16
 8001a34:	409a      	lsls	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d018      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d108      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d024      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
 8001a66:	e01f      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
 8001a78:	e016      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d107      	bne.n	8001a98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0208 	bic.w	r2, r2, #8
 8001a96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2220      	movs	r2, #32
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 808f 	beq.w	8001bd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8087 	beq.w	8001bd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	2220      	movs	r2, #32
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d136      	bne.n	8001b50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0216 	bic.w	r2, r2, #22
 8001af0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <HAL_DMA_IRQHandler+0x1da>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0208 	bic.w	r2, r2, #8
 8001b20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	223f      	movs	r2, #63	; 0x3f
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d07e      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
        }
        return;
 8001b4e:	e079      	b.n	8001c44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01d      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10d      	bne.n	8001b88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d031      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
 8001b7c:	e02c      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x2a0>
 8001b7e:	bf00      	nop
 8001b80:	20000074 	.word	0x20000074
 8001b84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
 8001b98:	e01e      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10f      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0210 	bic.w	r2, r2, #16
 8001bb6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d032      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d022      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2205      	movs	r2, #5
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d307      	bcc.n	8001c20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f2      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x2cc>
 8001c1e:	e000      	b.n	8001c22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c20:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c44:	bf00      	nop
    }
  }
}
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b40      	cmp	r3, #64	; 0x40
 8001c78:	d108      	bne.n	8001c8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c8a:	e007      	b.n	8001c9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	3b10      	subs	r3, #16
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <DMA_CalcBaseAndBitshift+0x64>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cc2:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <DMA_CalcBaseAndBitshift+0x68>)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d909      	bls.n	8001cea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cde:	f023 0303 	bic.w	r3, r3, #3
 8001ce2:	1d1a      	adds	r2, r3, #4
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ce8:	e007      	b.n	8001cfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cf2:	f023 0303 	bic.w	r3, r3, #3
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	aaaaaaab 	.word	0xaaaaaaab
 8001d10:	08004be8 	.word	0x08004be8

08001d14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d11f      	bne.n	8001d6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d856      	bhi.n	8001de2 <DMA_CheckFifoParam+0xce>
 8001d34:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <DMA_CheckFifoParam+0x28>)
 8001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3a:	bf00      	nop
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001d5f 	.word	0x08001d5f
 8001d44:	08001d4d 	.word	0x08001d4d
 8001d48:	08001de3 	.word	0x08001de3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d046      	beq.n	8001de6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d5c:	e043      	b.n	8001de6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d66:	d140      	bne.n	8001dea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d6c:	e03d      	b.n	8001dea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d76:	d121      	bne.n	8001dbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d837      	bhi.n	8001dee <DMA_CheckFifoParam+0xda>
 8001d7e:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <DMA_CheckFifoParam+0x70>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001d9b 	.word	0x08001d9b
 8001d8c:	08001d95 	.word	0x08001d95
 8001d90:	08001dad 	.word	0x08001dad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      break;
 8001d98:	e030      	b.n	8001dfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d025      	beq.n	8001df2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001daa:	e022      	b.n	8001df2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001db4:	d11f      	bne.n	8001df6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dba:	e01c      	b.n	8001df6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d903      	bls.n	8001dca <DMA_CheckFifoParam+0xb6>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d003      	beq.n	8001dd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dc8:	e018      	b.n	8001dfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8001dce:	e015      	b.n	8001dfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00e      	beq.n	8001dfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
      break;
 8001de0:	e00b      	b.n	8001dfa <DMA_CheckFifoParam+0xe6>
      break;
 8001de2:	bf00      	nop
 8001de4:	e00a      	b.n	8001dfc <DMA_CheckFifoParam+0xe8>
      break;
 8001de6:	bf00      	nop
 8001de8:	e008      	b.n	8001dfc <DMA_CheckFifoParam+0xe8>
      break;
 8001dea:	bf00      	nop
 8001dec:	e006      	b.n	8001dfc <DMA_CheckFifoParam+0xe8>
      break;
 8001dee:	bf00      	nop
 8001df0:	e004      	b.n	8001dfc <DMA_CheckFifoParam+0xe8>
      break;
 8001df2:	bf00      	nop
 8001df4:	e002      	b.n	8001dfc <DMA_CheckFifoParam+0xe8>
      break;   
 8001df6:	bf00      	nop
 8001df8:	e000      	b.n	8001dfc <DMA_CheckFifoParam+0xe8>
      break;
 8001dfa:	bf00      	nop
    }
  } 
  
  return status; 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e16b      	b.n	8002100 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e28:	2201      	movs	r2, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 815a 	bne.w	80020fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d00b      	beq.n	8001e66 <HAL_GPIO_Init+0x5a>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e5a:	2b11      	cmp	r3, #17
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d130      	bne.n	8001ec8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 0201 	and.w	r2, r3, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0xfc>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b12      	cmp	r3, #18
 8001f06:	d123      	bne.n	8001f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	08da      	lsrs	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3208      	adds	r2, #8
 8001f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	08da      	lsrs	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3208      	adds	r2, #8
 8001f4a:	69b9      	ldr	r1, [r7, #24]
 8001f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0203 	and.w	r2, r3, #3
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80b4 	beq.w	80020fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b60      	ldr	r3, [pc, #384]	; (8002118 <HAL_GPIO_Init+0x30c>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	4a5f      	ldr	r2, [pc, #380]	; (8002118 <HAL_GPIO_Init+0x30c>)
 8001f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_GPIO_Init+0x30c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fae:	4a5b      	ldr	r2, [pc, #364]	; (800211c <HAL_GPIO_Init+0x310>)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_GPIO_Init+0x314>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02b      	beq.n	8002032 <HAL_GPIO_Init+0x226>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a51      	ldr	r2, [pc, #324]	; (8002124 <HAL_GPIO_Init+0x318>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d025      	beq.n	800202e <HAL_GPIO_Init+0x222>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a50      	ldr	r2, [pc, #320]	; (8002128 <HAL_GPIO_Init+0x31c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <HAL_GPIO_Init+0x21e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4f      	ldr	r2, [pc, #316]	; (800212c <HAL_GPIO_Init+0x320>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x21a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <HAL_GPIO_Init+0x324>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x216>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4d      	ldr	r2, [pc, #308]	; (8002134 <HAL_GPIO_Init+0x328>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x212>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x32c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x20e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4b      	ldr	r2, [pc, #300]	; (800213c <HAL_GPIO_Init+0x330>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x20a>
 8002012:	2307      	movs	r3, #7
 8002014:	e00e      	b.n	8002034 <HAL_GPIO_Init+0x228>
 8002016:	2308      	movs	r3, #8
 8002018:	e00c      	b.n	8002034 <HAL_GPIO_Init+0x228>
 800201a:	2306      	movs	r3, #6
 800201c:	e00a      	b.n	8002034 <HAL_GPIO_Init+0x228>
 800201e:	2305      	movs	r3, #5
 8002020:	e008      	b.n	8002034 <HAL_GPIO_Init+0x228>
 8002022:	2304      	movs	r3, #4
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x228>
 8002026:	2303      	movs	r3, #3
 8002028:	e004      	b.n	8002034 <HAL_GPIO_Init+0x228>
 800202a:	2302      	movs	r3, #2
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x228>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x228>
 8002032:	2300      	movs	r3, #0
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	f002 0203 	and.w	r2, r2, #3
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4093      	lsls	r3, r2
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002044:	4935      	ldr	r1, [pc, #212]	; (800211c <HAL_GPIO_Init+0x310>)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_GPIO_Init+0x334>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002076:	4a32      	ldr	r2, [pc, #200]	; (8002140 <HAL_GPIO_Init+0x334>)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_GPIO_Init+0x334>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a0:	4a27      	ldr	r2, [pc, #156]	; (8002140 <HAL_GPIO_Init+0x334>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_GPIO_Init+0x334>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ca:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <HAL_GPIO_Init+0x334>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_GPIO_Init+0x334>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_GPIO_Init+0x334>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3301      	adds	r3, #1
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b0f      	cmp	r3, #15
 8002104:	f67f ae90 	bls.w	8001e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3724      	adds	r7, #36	; 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	40013800 	.word	0x40013800
 8002120:	40020000 	.word	0x40020000
 8002124:	40020400 	.word	0x40020400
 8002128:	40020800 	.word	0x40020800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40021000 	.word	0x40021000
 8002134:	40021400 	.word	0x40021400
 8002138:	40021800 	.word	0x40021800
 800213c:	40021c00 	.word	0x40021c00
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e25e      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d075      	beq.n	8002282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002196:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d00c      	beq.n	80021bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a2:	4b85      	ldr	r3, [pc, #532]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d112      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4b82      	ldr	r3, [pc, #520]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	4b7e      	ldr	r3, [pc, #504]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d05b      	beq.n	8002280 <HAL_RCC_OscConfig+0x108>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d157      	bne.n	8002280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e239      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x74>
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a75      	ldr	r2, [pc, #468]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0xb0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x98>
 80021f6:	4b70      	ldr	r3, [pc, #448]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6f      	ldr	r2, [pc, #444]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6c      	ldr	r2, [pc, #432]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xb0>
 8002210:	4b69      	ldr	r3, [pc, #420]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a68      	ldr	r2, [pc, #416]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b66      	ldr	r3, [pc, #408]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff f93c 	bl	80014ac <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff f938 	bl	80014ac <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1fe      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b5b      	ldr	r3, [pc, #364]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0xc0>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff f928 	bl	80014ac <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff f924 	bl	80014ac <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1ea      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	4b51      	ldr	r3, [pc, #324]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0xe8>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228e:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d11c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b44      	ldr	r3, [pc, #272]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x152>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1be      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4937      	ldr	r1, [pc, #220]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	e03a      	b.n	8002356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e8:	4b34      	ldr	r3, [pc, #208]	; (80023bc <HAL_RCC_OscConfig+0x244>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7ff f8dd 	bl	80014ac <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f6:	f7ff f8d9 	bl	80014ac <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e19f      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4925      	ldr	r1, [pc, #148]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b24      	ldr	r3, [pc, #144]	; (80023bc <HAL_RCC_OscConfig+0x244>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff f8bc 	bl	80014ac <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002338:	f7ff f8b8 	bl	80014ac <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e17e      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d036      	beq.n	80023d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_RCC_OscConfig+0x248>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7ff f89c 	bl	80014ac <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002378:	f7ff f898 	bl	80014ac <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e15e      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_OscConfig+0x240>)
 800238c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x200>
 8002396:	e01b      	b.n	80023d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_OscConfig+0x248>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7ff f885 	bl	80014ac <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	e00e      	b.n	80023c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a6:	f7ff f881 	bl	80014ac <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d907      	bls.n	80023c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e147      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	42470000 	.word	0x42470000
 80023c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ea      	bne.n	80023a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8097 	beq.w	800250c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e2:	4b81      	ldr	r3, [pc, #516]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10f      	bne.n	800240e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	4b7d      	ldr	r3, [pc, #500]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a7c      	ldr	r2, [pc, #496]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b7a      	ldr	r3, [pc, #488]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b77      	ldr	r3, [pc, #476]	; (80025ec <HAL_RCC_OscConfig+0x474>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d118      	bne.n	800244c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241a:	4b74      	ldr	r3, [pc, #464]	; (80025ec <HAL_RCC_OscConfig+0x474>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a73      	ldr	r2, [pc, #460]	; (80025ec <HAL_RCC_OscConfig+0x474>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002426:	f7ff f841 	bl	80014ac <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242e:	f7ff f83d 	bl	80014ac <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e103      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_OscConfig+0x474>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x2ea>
 8002454:	4b64      	ldr	r3, [pc, #400]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	4a63      	ldr	r2, [pc, #396]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6713      	str	r3, [r2, #112]	; 0x70
 8002460:	e01c      	b.n	800249c <HAL_RCC_OscConfig+0x324>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b05      	cmp	r3, #5
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x30c>
 800246a:	4b5f      	ldr	r3, [pc, #380]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a5e      	ldr	r2, [pc, #376]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	4b5c      	ldr	r3, [pc, #368]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a5b      	ldr	r2, [pc, #364]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0x324>
 8002484:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a57      	ldr	r2, [pc, #348]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	4b55      	ldr	r3, [pc, #340]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a54      	ldr	r2, [pc, #336]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d015      	beq.n	80024d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7ff f802 	bl	80014ac <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fffe 	bl	80014ac <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0c2      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0ee      	beq.n	80024ac <HAL_RCC_OscConfig+0x334>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7fe ffec 	bl	80014ac <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7fe ffe8 	bl	80014ac <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0ac      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	4b3e      	ldr	r3, [pc, #248]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ee      	bne.n	80024d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002500:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	4a38      	ldr	r2, [pc, #224]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8098 	beq.w	8002646 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002516:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b08      	cmp	r3, #8
 8002520:	d05c      	beq.n	80025dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d141      	bne.n	80025ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCC_OscConfig+0x478>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe ffbc 	bl	80014ac <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe ffb8 	bl	80014ac <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e07e      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	019b      	lsls	r3, r3, #6
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	3b01      	subs	r3, #1
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	491b      	ldr	r1, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_RCC_OscConfig+0x478>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe ff91 	bl	80014ac <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe ff8d 	bl	80014ac <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e053      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x416>
 80025ac:	e04b      	b.n	8002646 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_OscConfig+0x478>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe ff7a 	bl	80014ac <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe ff76 	bl	80014ac <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e03c      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_RCC_OscConfig+0x470>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x444>
 80025da:	e034      	b.n	8002646 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e02f      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40007000 	.word	0x40007000
 80025f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f4:	4b16      	ldr	r3, [pc, #88]	; (8002650 <HAL_RCC_OscConfig+0x4d8>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	429a      	cmp	r2, r3
 8002606:	d11c      	bne.n	8002642 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d115      	bne.n	8002642 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002622:	4293      	cmp	r3, r2
 8002624:	d10d      	bne.n	8002642 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800

08002654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0cc      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 030f 	and.w	r3, r3, #15
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d90c      	bls.n	8002690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d044      	beq.n	8002774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d119      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d003      	beq.n	8002712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270e:	2b03      	cmp	r3, #3
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e067      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4934      	ldr	r1, [pc, #208]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002744:	f7fe feb2 	bl	80014ac <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7fe feae 	bl	80014ac <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e04f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d20c      	bcs.n	800279c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f821 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fe12 	bl	8001424 <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023c00 	.word	0x40023c00
 8002810:	40023800 	.word	0x40023800
 8002814:	08004bd0 	.word	0x08004bd0
 8002818:	20000074 	.word	0x20000074
 800281c:	20000078 	.word	0x20000078

08002820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002824:	b094      	sub	sp, #80	; 0x50
 8002826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	647b      	str	r3, [r7, #68]	; 0x44
 800282c:	2300      	movs	r3, #0
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002830:	2300      	movs	r3, #0
 8002832:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002838:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b08      	cmp	r3, #8
 8002842:	d00d      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x40>
 8002844:	2b08      	cmp	r3, #8
 8002846:	f200 80e1 	bhi.w	8002a0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x34>
 800284e:	2b04      	cmp	r3, #4
 8002850:	d003      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x3a>
 8002852:	e0db      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b73      	ldr	r3, [pc, #460]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002858:	e0db      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800285a:	4b73      	ldr	r3, [pc, #460]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x208>)
 800285c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800285e:	e0d8      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002868:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800286a:	4b6d      	ldr	r3, [pc, #436]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d063      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002876:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	099b      	lsrs	r3, r3, #6
 800287c:	2200      	movs	r2, #0
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002880:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
 800288a:	2300      	movs	r3, #0
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
 800288e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002892:	4622      	mov	r2, r4
 8002894:	462b      	mov	r3, r5
 8002896:	f04f 0000 	mov.w	r0, #0
 800289a:	f04f 0100 	mov.w	r1, #0
 800289e:	0159      	lsls	r1, r3, #5
 80028a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a4:	0150      	lsls	r0, r2, #5
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4621      	mov	r1, r4
 80028ac:	1a51      	subs	r1, r2, r1
 80028ae:	6139      	str	r1, [r7, #16]
 80028b0:	4629      	mov	r1, r5
 80028b2:	eb63 0301 	sbc.w	r3, r3, r1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028c4:	4659      	mov	r1, fp
 80028c6:	018b      	lsls	r3, r1, #6
 80028c8:	4651      	mov	r1, sl
 80028ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ce:	4651      	mov	r1, sl
 80028d0:	018a      	lsls	r2, r1, #6
 80028d2:	4651      	mov	r1, sl
 80028d4:	ebb2 0801 	subs.w	r8, r2, r1
 80028d8:	4659      	mov	r1, fp
 80028da:	eb63 0901 	sbc.w	r9, r3, r1
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028f2:	4690      	mov	r8, r2
 80028f4:	4699      	mov	r9, r3
 80028f6:	4623      	mov	r3, r4
 80028f8:	eb18 0303 	adds.w	r3, r8, r3
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	462b      	mov	r3, r5
 8002900:	eb49 0303 	adc.w	r3, r9, r3
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002912:	4629      	mov	r1, r5
 8002914:	024b      	lsls	r3, r1, #9
 8002916:	4621      	mov	r1, r4
 8002918:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800291c:	4621      	mov	r1, r4
 800291e:	024a      	lsls	r2, r1, #9
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002926:	2200      	movs	r2, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
 800292a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800292c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002930:	f7fd fc54 	bl	80001dc <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4613      	mov	r3, r2
 800293a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800293c:	e058      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293e:	4b38      	ldr	r3, [pc, #224]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	2200      	movs	r2, #0
 8002946:	4618      	mov	r0, r3
 8002948:	4611      	mov	r1, r2
 800294a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800294e:	623b      	str	r3, [r7, #32]
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
 8002954:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002958:	4642      	mov	r2, r8
 800295a:	464b      	mov	r3, r9
 800295c:	f04f 0000 	mov.w	r0, #0
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	0159      	lsls	r1, r3, #5
 8002966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800296a:	0150      	lsls	r0, r2, #5
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4641      	mov	r1, r8
 8002972:	ebb2 0a01 	subs.w	sl, r2, r1
 8002976:	4649      	mov	r1, r9
 8002978:	eb63 0b01 	sbc.w	fp, r3, r1
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800298c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002990:	ebb2 040a 	subs.w	r4, r2, sl
 8002994:	eb63 050b 	sbc.w	r5, r3, fp
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	00eb      	lsls	r3, r5, #3
 80029a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a6:	00e2      	lsls	r2, r4, #3
 80029a8:	4614      	mov	r4, r2
 80029aa:	461d      	mov	r5, r3
 80029ac:	4643      	mov	r3, r8
 80029ae:	18e3      	adds	r3, r4, r3
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	464b      	mov	r3, r9
 80029b4:	eb45 0303 	adc.w	r3, r5, r3
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c6:	4629      	mov	r1, r5
 80029c8:	028b      	lsls	r3, r1, #10
 80029ca:	4621      	mov	r1, r4
 80029cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d0:	4621      	mov	r1, r4
 80029d2:	028a      	lsls	r2, r1, #10
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029da:	2200      	movs	r2, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	61fa      	str	r2, [r7, #28]
 80029e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e4:	f7fd fbfa 	bl	80001dc <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4613      	mov	r3, r2
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	3301      	adds	r3, #1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a0a:	e002      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3750      	adds	r7, #80	; 0x50
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	007a1200 	.word	0x007a1200

08002a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000074 	.word	0x20000074

08002a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4903      	ldr	r1, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08004be0 	.word	0x08004be0

08002a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a70:	f7ff ffdc 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0b5b      	lsrs	r3, r3, #13
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08004be0 	.word	0x08004be0

08002a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e01d      	b.n	8002ae2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fa90 	bl	8000fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f000 fbde 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d007      	beq.n	8002b1c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e01d      	b.n	8002b80 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fe fa93 	bl	8001084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f000 fb8f 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2201      	movs	r2, #1
 8002b98:	6839      	ldr	r1, [r7, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fe64 	bl	8003868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <HAL_TIM_PWM_Start+0x74>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_TIM_PWM_Start+0x2c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <HAL_TIM_PWM_Start+0x78>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_TIM_PWM_Start+0x30>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_TIM_PWM_Start+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b06      	cmp	r3, #6
 8002bde:	d007      	beq.n	8002bf0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40010400 	.word	0x40010400

08002c04 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d841      	bhi.n	8002c98 <HAL_TIM_PWM_Start_IT+0x94>
 8002c14:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <HAL_TIM_PWM_Start_IT+0x18>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c51 	.word	0x08002c51
 8002c20:	08002c99 	.word	0x08002c99
 8002c24:	08002c99 	.word	0x08002c99
 8002c28:	08002c99 	.word	0x08002c99
 8002c2c:	08002c63 	.word	0x08002c63
 8002c30:	08002c99 	.word	0x08002c99
 8002c34:	08002c99 	.word	0x08002c99
 8002c38:	08002c99 	.word	0x08002c99
 8002c3c:	08002c75 	.word	0x08002c75
 8002c40:	08002c99 	.word	0x08002c99
 8002c44:	08002c99 	.word	0x08002c99
 8002c48:	08002c99 	.word	0x08002c99
 8002c4c:	08002c87 	.word	0x08002c87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0202 	orr.w	r2, r2, #2
 8002c5e:	60da      	str	r2, [r3, #12]
      break;
 8002c60:	e01b      	b.n	8002c9a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0204 	orr.w	r2, r2, #4
 8002c70:	60da      	str	r2, [r3, #12]
      break;
 8002c72:	e012      	b.n	8002c9a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0208 	orr.w	r2, r2, #8
 8002c82:	60da      	str	r2, [r3, #12]
      break;
 8002c84:	e009      	b.n	8002c9a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0210 	orr.w	r2, r2, #16
 8002c94:	60da      	str	r2, [r3, #12]
      break;
 8002c96:	e000      	b.n	8002c9a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002c98:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fde0 	bl	8003868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <HAL_TIM_PWM_Start_IT+0x100>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIM_PWM_Start_IT+0xb8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_TIM_PWM_Start_IT+0x104>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_PWM_Start_IT+0xbc>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_TIM_PWM_Start_IT+0xbe>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d007      	beq.n	8002cf8 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40010400 	.word	0x40010400

08002d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0202 	mvn.w	r2, #2
 8002d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa82 	bl	8003258 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa74 	bl	8003244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fa85 	bl	800326c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d122      	bne.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d11b      	bne.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0204 	mvn.w	r2, #4
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa58 	bl	8003258 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa4a 	bl	8003244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa5b 	bl	800326c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d122      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0208 	mvn.w	r2, #8
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa2e 	bl	8003258 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa20 	bl	8003244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fa31 	bl	800326c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0210 	mvn.w	r2, #16
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2208      	movs	r2, #8
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa04 	bl	8003258 <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9f6 	bl	8003244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fa07 	bl	800326c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0201 	mvn.w	r2, #1
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f9d0 	bl	8003230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b80      	cmp	r3, #128	; 0x80
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fd82 	bl	80039c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b40      	cmp	r3, #64	; 0x40
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9cc 	bl	8003280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0220 	mvn.w	r2, #32
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fd4c 	bl	80039ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0b4      	b.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	f200 809f 	bhi.w	800308c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002f4e:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002f89 	.word	0x08002f89
 8002f58:	0800308d 	.word	0x0800308d
 8002f5c:	0800308d 	.word	0x0800308d
 8002f60:	0800308d 	.word	0x0800308d
 8002f64:	08002fc9 	.word	0x08002fc9
 8002f68:	0800308d 	.word	0x0800308d
 8002f6c:	0800308d 	.word	0x0800308d
 8002f70:	0800308d 	.word	0x0800308d
 8002f74:	0800300b 	.word	0x0800300b
 8002f78:	0800308d 	.word	0x0800308d
 8002f7c:	0800308d 	.word	0x0800308d
 8002f80:	0800308d 	.word	0x0800308d
 8002f84:	0800304b 	.word	0x0800304b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fa20 	bl	80033d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6999      	ldr	r1, [r3, #24]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	619a      	str	r2, [r3, #24]
      break;
 8002fc6:	e062      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fa70 	bl	80034b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	021a      	lsls	r2, r3, #8
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	619a      	str	r2, [r3, #24]
      break;
 8003008:	e041      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fac5 	bl	80035a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0208 	orr.w	r2, r2, #8
 8003024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69d9      	ldr	r1, [r3, #28]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
      break;
 8003048:	e021      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fb19 	bl	8003688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	021a      	lsls	r2, r3, #8
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	61da      	str	r2, [r3, #28]
      break;
 800308a:	e000      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800308c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_TIM_ConfigClockSource+0x18>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0b3      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x180>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f8:	d03e      	beq.n	8003178 <HAL_TIM_ConfigClockSource+0xd0>
 80030fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fe:	f200 8087 	bhi.w	8003210 <HAL_TIM_ConfigClockSource+0x168>
 8003102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003106:	f000 8085 	beq.w	8003214 <HAL_TIM_ConfigClockSource+0x16c>
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310e:	d87f      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x168>
 8003110:	2b70      	cmp	r3, #112	; 0x70
 8003112:	d01a      	beq.n	800314a <HAL_TIM_ConfigClockSource+0xa2>
 8003114:	2b70      	cmp	r3, #112	; 0x70
 8003116:	d87b      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x168>
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d050      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x116>
 800311c:	2b60      	cmp	r3, #96	; 0x60
 800311e:	d877      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x168>
 8003120:	2b50      	cmp	r3, #80	; 0x50
 8003122:	d03c      	beq.n	800319e <HAL_TIM_ConfigClockSource+0xf6>
 8003124:	2b50      	cmp	r3, #80	; 0x50
 8003126:	d873      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x168>
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d058      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x136>
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d86f      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x168>
 8003130:	2b30      	cmp	r3, #48	; 0x30
 8003132:	d064      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x156>
 8003134:	2b30      	cmp	r3, #48	; 0x30
 8003136:	d86b      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x168>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d060      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x156>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d867      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x168>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d05c      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x156>
 8003144:	2b10      	cmp	r3, #16
 8003146:	d05a      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003148:	e062      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f000 fb65 	bl	8003828 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800316c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	609a      	str	r2, [r3, #8]
      break;
 8003176:	e04e      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f000 fb4e 	bl	8003828 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800319a:	609a      	str	r2, [r3, #8]
      break;
 800319c:	e03b      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f000 fac2 	bl	8003734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2150      	movs	r1, #80	; 0x50
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fb1b 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80031bc:	e02b      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f000 fae1 	bl	8003792 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2160      	movs	r1, #96	; 0x60
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fb0b 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80031dc:	e01b      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f000 faa2 	bl	8003734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fafb 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80031fc:	e00b      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f000 faf2 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 800320e:	e002      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003210:	bf00      	nop
 8003212:	e000      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003214:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a40      	ldr	r2, [pc, #256]	; (80033a8 <TIM_Base_SetConfig+0x114>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d00f      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3d      	ldr	r2, [pc, #244]	; (80033ac <TIM_Base_SetConfig+0x118>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00b      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3c      	ldr	r2, [pc, #240]	; (80033b0 <TIM_Base_SetConfig+0x11c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d007      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <TIM_Base_SetConfig+0x120>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3a      	ldr	r2, [pc, #232]	; (80033b8 <TIM_Base_SetConfig+0x124>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d108      	bne.n	80032e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2f      	ldr	r2, [pc, #188]	; (80033a8 <TIM_Base_SetConfig+0x114>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d02b      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d027      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2c      	ldr	r2, [pc, #176]	; (80033ac <TIM_Base_SetConfig+0x118>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d023      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2b      	ldr	r2, [pc, #172]	; (80033b0 <TIM_Base_SetConfig+0x11c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01f      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2a      	ldr	r2, [pc, #168]	; (80033b4 <TIM_Base_SetConfig+0x120>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01b      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <TIM_Base_SetConfig+0x124>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d017      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a28      	ldr	r2, [pc, #160]	; (80033bc <TIM_Base_SetConfig+0x128>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <TIM_Base_SetConfig+0x12c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00f      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <TIM_Base_SetConfig+0x130>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <TIM_Base_SetConfig+0x134>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a24      	ldr	r2, [pc, #144]	; (80033cc <TIM_Base_SetConfig+0x138>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <TIM_Base_SetConfig+0x13c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <TIM_Base_SetConfig+0x114>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0xf8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <TIM_Base_SetConfig+0x124>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d103      	bne.n	8003394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	615a      	str	r2, [r3, #20]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40010400 	.word	0x40010400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40014400 	.word	0x40014400
 80033c4:	40014800 	.word	0x40014800
 80033c8:	40001800 	.word	0x40001800
 80033cc:	40001c00 	.word	0x40001c00
 80033d0:	40002000 	.word	0x40002000

080033d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f023 0201 	bic.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 0302 	bic.w	r3, r3, #2
 800341c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a20      	ldr	r2, [pc, #128]	; (80034ac <TIM_OC1_SetConfig+0xd8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_OC1_SetConfig+0x64>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <TIM_OC1_SetConfig+0xdc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d10c      	bne.n	8003452 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0308 	bic.w	r3, r3, #8
 800343e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a15      	ldr	r2, [pc, #84]	; (80034ac <TIM_OC1_SetConfig+0xd8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_OC1_SetConfig+0x8e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <TIM_OC1_SetConfig+0xdc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d111      	bne.n	8003486 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40010000 	.word	0x40010000
 80034b0:	40010400 	.word	0x40010400

080034b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f023 0210 	bic.w	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0320 	bic.w	r3, r3, #32
 80034fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a22      	ldr	r2, [pc, #136]	; (8003598 <TIM_OC2_SetConfig+0xe4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_OC2_SetConfig+0x68>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <TIM_OC2_SetConfig+0xe8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d10d      	bne.n	8003538 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a17      	ldr	r2, [pc, #92]	; (8003598 <TIM_OC2_SetConfig+0xe4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_OC2_SetConfig+0x94>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a16      	ldr	r2, [pc, #88]	; (800359c <TIM_OC2_SetConfig+0xe8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d113      	bne.n	8003570 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40010000 	.word	0x40010000
 800359c:	40010400 	.word	0x40010400

080035a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a21      	ldr	r2, [pc, #132]	; (8003680 <TIM_OC3_SetConfig+0xe0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_OC3_SetConfig+0x66>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <TIM_OC3_SetConfig+0xe4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d10d      	bne.n	8003622 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800360c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a16      	ldr	r2, [pc, #88]	; (8003680 <TIM_OC3_SetConfig+0xe0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_OC3_SetConfig+0x92>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a15      	ldr	r2, [pc, #84]	; (8003684 <TIM_OC3_SetConfig+0xe4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d113      	bne.n	800365a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	621a      	str	r2, [r3, #32]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40010000 	.word	0x40010000
 8003684:	40010400 	.word	0x40010400

08003688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	031b      	lsls	r3, r3, #12
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a12      	ldr	r2, [pc, #72]	; (800372c <TIM_OC4_SetConfig+0xa4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d003      	beq.n	80036f0 <TIM_OC4_SetConfig+0x68>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a11      	ldr	r2, [pc, #68]	; (8003730 <TIM_OC4_SetConfig+0xa8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d109      	bne.n	8003704 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000
 8003730:	40010400 	.word	0x40010400

08003734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f023 030a 	bic.w	r3, r3, #10
 8003770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003792:	b480      	push	{r7}
 8003794:	b087      	sub	sp, #28
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0210 	bic.w	r2, r3, #16
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	031b      	lsls	r3, r3, #12
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	f043 0307 	orr.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	021a      	lsls	r2, r3, #8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	431a      	orrs	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4313      	orrs	r3, r2
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	609a      	str	r2, [r3, #8]
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	2201      	movs	r2, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	43db      	mvns	r3, r3
 800388a:	401a      	ands	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1a      	ldr	r2, [r3, #32]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	431a      	orrs	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e05a      	b.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a21      	ldr	r2, [pc, #132]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d022      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d01d      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d018      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1a      	ldr	r2, [pc, #104]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00e      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d009      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10c      	bne.n	8003970 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	4313      	orrs	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40010000 	.word	0x40010000
 8003994:	40000400 	.word	0x40000400
 8003998:	40000800 	.word	0x40000800
 800399c:	40000c00 	.word	0x40000c00
 80039a0:	40010400 	.word	0x40010400
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40001800 	.word	0x40001800

080039ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e03f      	b.n	8003a66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fbca 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	; 0x24
 8003a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fabd 	bl	8003f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d140      	bne.n	8003b0a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_UART_Receive_IT+0x26>
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e039      	b.n	8003b0c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Receive_IT+0x38>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e032      	b.n	8003b0c <HAL_UART_Receive_IT+0x9e>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	88fa      	ldrh	r2, [r7, #6]
 8003abe:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2222      	movs	r2, #34	; 0x22
 8003aca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0220 	orr.w	r2, r2, #32
 8003b04:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e000      	b.n	8003b0c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
  }
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10d      	bne.n	8003b6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_UART_IRQHandler+0x52>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f996 	bl	8003e94 <UART_Receive_IT>
      return;
 8003b68:	e0d0      	b.n	8003d0c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80b0 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x1ba>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <HAL_UART_IRQHandler+0x70>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a5 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x90>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	f043 0201 	orr.w	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_UART_IRQHandler+0xb0>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	f043 0202 	orr.w	r2, r3, #2
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_UART_IRQHandler+0xd0>
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00f      	beq.n	8003c12 <HAL_UART_IRQHandler+0xfa>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <HAL_UART_IRQHandler+0xee>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	f043 0208 	orr.w	r2, r3, #8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d077      	beq.n	8003d0a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_UART_IRQHandler+0x11c>
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f930 	bl	8003e94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <HAL_UART_IRQHandler+0x144>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d031      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f879 	bl	8003d54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d123      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_UART_IRQHandler+0x1fc>)
 8003c8e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fd fe2d 	bl	80018f4 <HAL_DMA_Abort_IT>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d016      	beq.n	8003cce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003caa:	4610      	mov	r0, r2
 8003cac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cae:	e00e      	b.n	8003cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f845 	bl	8003d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb6:	e00a      	b.n	8003cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f841 	bl	8003d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbe:	e006      	b.n	8003cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f83d 	bl	8003d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ccc:	e01d      	b.n	8003d0a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cce:	bf00      	nop
    return;
 8003cd0:	e01b      	b.n	8003d0a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_UART_IRQHandler+0x1d6>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f866 	bl	8003db8 <UART_Transmit_IT>
    return;
 8003cec:	e00e      	b.n	8003d0c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_UART_IRQHandler+0x1f4>
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8ae 	bl	8003e64 <UART_EndTransmit_IT>
    return;
 8003d08:	e000      	b.n	8003d0c <HAL_UART_IRQHandler+0x1f4>
    return;
 8003d0a:	bf00      	nop
  }
}
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	08003d91 	.word	0x08003d91

08003d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f7ff ffc8 	bl	8003d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b21      	cmp	r3, #33	; 0x21
 8003dca:	d144      	bne.n	8003e56 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d11a      	bne.n	8003e0c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	1c9a      	adds	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]
 8003dfe:	e00e      	b.n	8003e1e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	621a      	str	r2, [r3, #32]
 8003e0a:	e008      	b.n	8003e1e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	1c59      	adds	r1, r3, #1
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6211      	str	r1, [r2, #32]
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ff47 	bl	8003d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b22      	cmp	r3, #34	; 0x22
 8003ea6:	d171      	bne.n	8003f8c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb0:	d123      	bne.n	8003efa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10e      	bne.n	8003ede <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
 8003edc:	e029      	b.n	8003f32 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef8:	e01b      	b.n	8003f32 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6858      	ldr	r0, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	1c59      	adds	r1, r3, #1
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6291      	str	r1, [r2, #40]	; 0x28
 8003f12:	b2c2      	uxtb	r2, r0
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e00c      	b.n	8003f32 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	1c58      	adds	r0, r3, #1
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	6288      	str	r0, [r1, #40]	; 0x28
 8003f2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d120      	bne.n	8003f88 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0220 	bic.w	r2, r2, #32
 8003f54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fed4 	bl	8003d2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e002      	b.n	8003f8e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e000      	b.n	8003f8e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f9c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fb6:	68d9      	ldr	r1, [r3, #12]
 8003fb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	ea40 0301 	orr.w	r3, r0, r1
 8003fc2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003fe6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ff2:	f021 010c 	bic.w	r1, r1, #12
 8003ff6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004000:	430b      	orrs	r3, r1
 8004002:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004004:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004010:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	ea40 0301 	orr.w	r3, r0, r1
 8004020:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004022:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402c:	f040 824a 	bne.w	80044c4 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004030:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b96      	ldr	r3, [pc, #600]	; (8004290 <UART_SetConfig+0x2f8>)
 8004038:	429a      	cmp	r2, r3
 800403a:	d006      	beq.n	800404a <UART_SetConfig+0xb2>
 800403c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b94      	ldr	r3, [pc, #592]	; (8004294 <UART_SetConfig+0x2fc>)
 8004044:	429a      	cmp	r2, r3
 8004046:	f040 8129 	bne.w	800429c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800404a:	f7fe fd0f 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 800404e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004052:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800405c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004060:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004064:	4622      	mov	r2, r4
 8004066:	462b      	mov	r3, r5
 8004068:	1891      	adds	r1, r2, r2
 800406a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800406e:	415b      	adcs	r3, r3
 8004070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004074:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004078:	4621      	mov	r1, r4
 800407a:	1851      	adds	r1, r2, r1
 800407c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004080:	4629      	mov	r1, r5
 8004082:	414b      	adcs	r3, r1
 8004084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004094:	4649      	mov	r1, r9
 8004096:	00cb      	lsls	r3, r1, #3
 8004098:	4641      	mov	r1, r8
 800409a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800409e:	4641      	mov	r1, r8
 80040a0:	00ca      	lsls	r2, r1, #3
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	4622      	mov	r2, r4
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80040b0:	462b      	mov	r3, r5
 80040b2:	460a      	mov	r2, r1
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80040bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80040c8:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80040cc:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80040d0:	460b      	mov	r3, r1
 80040d2:	18db      	adds	r3, r3, r3
 80040d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040d8:	4613      	mov	r3, r2
 80040da:	eb42 0303 	adc.w	r3, r2, r3
 80040de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040e2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80040e6:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80040ea:	f7fc f877 	bl	80001dc <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b69      	ldr	r3, [pc, #420]	; (8004298 <UART_SetConfig+0x300>)
 80040f4:	fba3 2302 	umull	r2, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	011c      	lsls	r4, r3, #4
 80040fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004100:	2200      	movs	r2, #0
 8004102:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004106:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800410a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800410e:	4642      	mov	r2, r8
 8004110:	464b      	mov	r3, r9
 8004112:	1891      	adds	r1, r2, r2
 8004114:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004118:	415b      	adcs	r3, r3
 800411a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800411e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004122:	4641      	mov	r1, r8
 8004124:	1851      	adds	r1, r2, r1
 8004126:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800412a:	4649      	mov	r1, r9
 800412c:	414b      	adcs	r3, r1
 800412e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800413e:	4659      	mov	r1, fp
 8004140:	00cb      	lsls	r3, r1, #3
 8004142:	4651      	mov	r1, sl
 8004144:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004148:	4651      	mov	r1, sl
 800414a:	00ca      	lsls	r2, r1, #3
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	4603      	mov	r3, r0
 8004152:	4642      	mov	r2, r8
 8004154:	189b      	adds	r3, r3, r2
 8004156:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800415a:	464b      	mov	r3, r9
 800415c:	460a      	mov	r2, r1
 800415e:	eb42 0303 	adc.w	r3, r2, r3
 8004162:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004166:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004172:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004176:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800417a:	460b      	mov	r3, r1
 800417c:	18db      	adds	r3, r3, r3
 800417e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004182:	4613      	mov	r3, r2
 8004184:	eb42 0303 	adc.w	r3, r2, r3
 8004188:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800418c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004190:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004194:	f7fc f822 	bl	80001dc <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4611      	mov	r1, r2
 800419e:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <UART_SetConfig+0x300>)
 80041a0:	fba3 2301 	umull	r2, r3, r3, r1
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	2264      	movs	r2, #100	; 0x64
 80041a8:	fb02 f303 	mul.w	r3, r2, r3
 80041ac:	1acb      	subs	r3, r1, r3
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041b4:	4b38      	ldr	r3, [pc, #224]	; (8004298 <UART_SetConfig+0x300>)
 80041b6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041c2:	441c      	add	r4, r3
 80041c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80041ce:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80041d2:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80041d6:	4642      	mov	r2, r8
 80041d8:	464b      	mov	r3, r9
 80041da:	1891      	adds	r1, r2, r2
 80041dc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80041e0:	415b      	adcs	r3, r3
 80041e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041e6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80041ea:	4641      	mov	r1, r8
 80041ec:	1851      	adds	r1, r2, r1
 80041ee:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80041f2:	4649      	mov	r1, r9
 80041f4:	414b      	adcs	r3, r1
 80041f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004206:	4659      	mov	r1, fp
 8004208:	00cb      	lsls	r3, r1, #3
 800420a:	4651      	mov	r1, sl
 800420c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004210:	4651      	mov	r1, sl
 8004212:	00ca      	lsls	r2, r1, #3
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	4603      	mov	r3, r0
 800421a:	4642      	mov	r2, r8
 800421c:	189b      	adds	r3, r3, r2
 800421e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004222:	464b      	mov	r3, r9
 8004224:	460a      	mov	r2, r1
 8004226:	eb42 0303 	adc.w	r3, r2, r3
 800422a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800422e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800423a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800423e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004242:	460b      	mov	r3, r1
 8004244:	18db      	adds	r3, r3, r3
 8004246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800424a:	4613      	mov	r3, r2
 800424c:	eb42 0303 	adc.w	r3, r2, r3
 8004250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004254:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004258:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800425c:	f7fb ffbe 	bl	80001dc <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <UART_SetConfig+0x300>)
 8004266:	fba3 1302 	umull	r1, r3, r3, r2
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2164      	movs	r1, #100	; 0x64
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	3332      	adds	r3, #50	; 0x32
 8004278:	4a07      	ldr	r2, [pc, #28]	; (8004298 <UART_SetConfig+0x300>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	f003 0207 	and.w	r2, r3, #7
 8004284:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4422      	add	r2, r4
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	e349      	b.n	8004924 <UART_SetConfig+0x98c>
 8004290:	40011000 	.word	0x40011000
 8004294:	40011400 	.word	0x40011400
 8004298:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800429c:	f7fe fbd2 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 80042a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80042ae:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80042b2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80042b6:	4622      	mov	r2, r4
 80042b8:	462b      	mov	r3, r5
 80042ba:	1891      	adds	r1, r2, r2
 80042bc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80042c0:	415b      	adcs	r3, r3
 80042c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042c6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80042ca:	4621      	mov	r1, r4
 80042cc:	eb12 0a01 	adds.w	sl, r2, r1
 80042d0:	4629      	mov	r1, r5
 80042d2:	eb43 0b01 	adc.w	fp, r3, r1
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ea:	4692      	mov	sl, r2
 80042ec:	469b      	mov	fp, r3
 80042ee:	4623      	mov	r3, r4
 80042f0:	eb1a 0303 	adds.w	r3, sl, r3
 80042f4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80042f8:	462b      	mov	r3, r5
 80042fa:	eb4b 0303 	adc.w	r3, fp, r3
 80042fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004302:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800430e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004312:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004316:	460b      	mov	r3, r1
 8004318:	18db      	adds	r3, r3, r3
 800431a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800431e:	4613      	mov	r3, r2
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004328:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800432c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004330:	f7fb ff54 	bl	80001dc <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <UART_SetConfig+0x528>)
 800433a:	fba3 2302 	umull	r2, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	011c      	lsls	r4, r3, #4
 8004342:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800434c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004350:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	67b9      	str	r1, [r7, #120]	; 0x78
 800435c:	415b      	adcs	r3, r3
 800435e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004360:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6739      	str	r1, [r7, #112]	; 0x70
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	677b      	str	r3, [r7, #116]	; 0x74
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80043a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80043b0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80043b4:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80043ca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80043ce:	f7fb ff05 	bl	80001dc <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <UART_SetConfig+0x528>)
 80043da:	fba3 2301 	umull	r2, r3, r3, r1
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2264      	movs	r2, #100	; 0x64
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	1acb      	subs	r3, r1, r3
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043ee:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <UART_SetConfig+0x528>)
 80043f0:	fba3 2302 	umull	r2, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043fc:	441c      	add	r4, r3
 80043fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004402:	2200      	movs	r2, #0
 8004404:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004408:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800440c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004410:	4642      	mov	r2, r8
 8004412:	464b      	mov	r3, r9
 8004414:	1891      	adds	r1, r2, r2
 8004416:	6639      	str	r1, [r7, #96]	; 0x60
 8004418:	415b      	adcs	r3, r3
 800441a:	667b      	str	r3, [r7, #100]	; 0x64
 800441c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004420:	4641      	mov	r1, r8
 8004422:	1851      	adds	r1, r2, r1
 8004424:	65b9      	str	r1, [r7, #88]	; 0x58
 8004426:	4649      	mov	r1, r9
 8004428:	414b      	adcs	r3, r1
 800442a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004438:	4659      	mov	r1, fp
 800443a:	00cb      	lsls	r3, r1, #3
 800443c:	4651      	mov	r1, sl
 800443e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004442:	4651      	mov	r1, sl
 8004444:	00ca      	lsls	r2, r1, #3
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	4603      	mov	r3, r0
 800444c:	4642      	mov	r2, r8
 800444e:	189b      	adds	r3, r3, r2
 8004450:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004454:	464b      	mov	r3, r9
 8004456:	460a      	mov	r2, r1
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004460:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800446c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004470:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004474:	460b      	mov	r3, r1
 8004476:	18db      	adds	r3, r3, r3
 8004478:	653b      	str	r3, [r7, #80]	; 0x50
 800447a:	4613      	mov	r3, r2
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	657b      	str	r3, [r7, #84]	; 0x54
 8004482:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004486:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800448a:	f7fb fea7 	bl	80001dc <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <UART_SetConfig+0x528>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	; 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	3332      	adds	r3, #50	; 0x32
 80044a6:	4a06      	ldr	r2, [pc, #24]	; (80044c0 <UART_SetConfig+0x528>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 0207 	and.w	r2, r3, #7
 80044b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4422      	add	r2, r4
 80044ba:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80044bc:	e232      	b.n	8004924 <UART_SetConfig+0x98c>
 80044be:	bf00      	nop
 80044c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4b8d      	ldr	r3, [pc, #564]	; (8004700 <UART_SetConfig+0x768>)
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d006      	beq.n	80044de <UART_SetConfig+0x546>
 80044d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b8b      	ldr	r3, [pc, #556]	; (8004704 <UART_SetConfig+0x76c>)
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 8117 	bne.w	800470c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044de:	f7fe fac5 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 80044e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80044f0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80044f4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80044f8:	4622      	mov	r2, r4
 80044fa:	462b      	mov	r3, r5
 80044fc:	1891      	adds	r1, r2, r2
 80044fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004500:	415b      	adcs	r3, r3
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004508:	4621      	mov	r1, r4
 800450a:	eb12 0801 	adds.w	r8, r2, r1
 800450e:	4629      	mov	r1, r5
 8004510:	eb43 0901 	adc.w	r9, r3, r1
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004520:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004524:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004528:	4690      	mov	r8, r2
 800452a:	4699      	mov	r9, r3
 800452c:	4623      	mov	r3, r4
 800452e:	eb18 0303 	adds.w	r3, r8, r3
 8004532:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004536:	462b      	mov	r3, r5
 8004538:	eb49 0303 	adc.w	r3, r9, r3
 800453c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004540:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800454c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800455c:	4629      	mov	r1, r5
 800455e:	008b      	lsls	r3, r1, #2
 8004560:	4621      	mov	r1, r4
 8004562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004566:	4621      	mov	r1, r4
 8004568:	008a      	lsls	r2, r1, #2
 800456a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800456e:	f7fb fe35 	bl	80001dc <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4b64      	ldr	r3, [pc, #400]	; (8004708 <UART_SetConfig+0x770>)
 8004578:	fba3 2302 	umull	r2, r3, r3, r2
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	011c      	lsls	r4, r3, #4
 8004580:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004584:	2200      	movs	r2, #0
 8004586:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800458a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800458e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004592:	4642      	mov	r2, r8
 8004594:	464b      	mov	r3, r9
 8004596:	1891      	adds	r1, r2, r2
 8004598:	6439      	str	r1, [r7, #64]	; 0x40
 800459a:	415b      	adcs	r3, r3
 800459c:	647b      	str	r3, [r7, #68]	; 0x44
 800459e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045a2:	4641      	mov	r1, r8
 80045a4:	1851      	adds	r1, r2, r1
 80045a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045a8:	4649      	mov	r1, r9
 80045aa:	414b      	adcs	r3, r1
 80045ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80045ba:	4659      	mov	r1, fp
 80045bc:	00cb      	lsls	r3, r1, #3
 80045be:	4651      	mov	r1, sl
 80045c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c4:	4651      	mov	r1, sl
 80045c6:	00ca      	lsls	r2, r1, #3
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	4603      	mov	r3, r0
 80045ce:	4642      	mov	r2, r8
 80045d0:	189b      	adds	r3, r3, r2
 80045d2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80045d6:	464b      	mov	r3, r9
 80045d8:	460a      	mov	r2, r1
 80045da:	eb42 0303 	adc.w	r3, r2, r3
 80045de:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80045e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80045ee:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80045fe:	4649      	mov	r1, r9
 8004600:	008b      	lsls	r3, r1, #2
 8004602:	4641      	mov	r1, r8
 8004604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004608:	4641      	mov	r1, r8
 800460a:	008a      	lsls	r2, r1, #2
 800460c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004610:	f7fb fde4 	bl	80001dc <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <UART_SetConfig+0x770>)
 800461a:	fba3 1302 	umull	r1, r3, r3, r2
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2164      	movs	r1, #100	; 0x64
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	3332      	adds	r3, #50	; 0x32
 800462c:	4a36      	ldr	r2, [pc, #216]	; (8004708 <UART_SetConfig+0x770>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004638:	441c      	add	r4, r3
 800463a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004644:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004648:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800464c:	4642      	mov	r2, r8
 800464e:	464b      	mov	r3, r9
 8004650:	1891      	adds	r1, r2, r2
 8004652:	6339      	str	r1, [r7, #48]	; 0x30
 8004654:	415b      	adcs	r3, r3
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800465c:	4641      	mov	r1, r8
 800465e:	1851      	adds	r1, r2, r1
 8004660:	62b9      	str	r1, [r7, #40]	; 0x28
 8004662:	4649      	mov	r1, r9
 8004664:	414b      	adcs	r3, r1
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004674:	4659      	mov	r1, fp
 8004676:	00cb      	lsls	r3, r1, #3
 8004678:	4651      	mov	r1, sl
 800467a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467e:	4651      	mov	r1, sl
 8004680:	00ca      	lsls	r2, r1, #3
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	4603      	mov	r3, r0
 8004688:	4642      	mov	r2, r8
 800468a:	189b      	adds	r3, r3, r2
 800468c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004690:	464b      	mov	r3, r9
 8004692:	460a      	mov	r2, r1
 8004694:	eb42 0303 	adc.w	r3, r2, r3
 8004698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800469c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046a8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80046b8:	4649      	mov	r1, r9
 80046ba:	008b      	lsls	r3, r1, #2
 80046bc:	4641      	mov	r1, r8
 80046be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c2:	4641      	mov	r1, r8
 80046c4:	008a      	lsls	r2, r1, #2
 80046c6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80046ca:	f7fb fd87 	bl	80001dc <__aeabi_uldivmod>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <UART_SetConfig+0x770>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2164      	movs	r1, #100	; 0x64
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	3332      	adds	r3, #50	; 0x32
 80046e6:	4a08      	ldr	r2, [pc, #32]	; (8004708 <UART_SetConfig+0x770>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 020f 	and.w	r2, r3, #15
 80046f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4422      	add	r2, r4
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	e112      	b.n	8004924 <UART_SetConfig+0x98c>
 80046fe:	bf00      	nop
 8004700:	40011000 	.word	0x40011000
 8004704:	40011400 	.word	0x40011400
 8004708:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7fe f99a 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8004710:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004714:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004718:	2200      	movs	r2, #0
 800471a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800471e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004722:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004726:	4642      	mov	r2, r8
 8004728:	464b      	mov	r3, r9
 800472a:	1891      	adds	r1, r2, r2
 800472c:	6239      	str	r1, [r7, #32]
 800472e:	415b      	adcs	r3, r3
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004736:	4641      	mov	r1, r8
 8004738:	1854      	adds	r4, r2, r1
 800473a:	4649      	mov	r1, r9
 800473c:	eb43 0501 	adc.w	r5, r3, r1
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	00eb      	lsls	r3, r5, #3
 800474a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800474e:	00e2      	lsls	r2, r4, #3
 8004750:	4614      	mov	r4, r2
 8004752:	461d      	mov	r5, r3
 8004754:	4643      	mov	r3, r8
 8004756:	18e3      	adds	r3, r4, r3
 8004758:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800475c:	464b      	mov	r3, r9
 800475e:	eb45 0303 	adc.w	r3, r5, r3
 8004762:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004766:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004772:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004782:	4629      	mov	r1, r5
 8004784:	008b      	lsls	r3, r1, #2
 8004786:	4621      	mov	r1, r4
 8004788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800478c:	4621      	mov	r1, r4
 800478e:	008a      	lsls	r2, r1, #2
 8004790:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004794:	f7fb fd22 	bl	80001dc <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4b64      	ldr	r3, [pc, #400]	; (8004930 <UART_SetConfig+0x998>)
 800479e:	fba3 2302 	umull	r2, r3, r3, r2
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	011c      	lsls	r4, r3, #4
 80047a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047b0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80047b4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	61b9      	str	r1, [r7, #24]
 80047c0:	415b      	adcs	r3, r3
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c8:	4641      	mov	r1, r8
 80047ca:	1851      	adds	r1, r2, r1
 80047cc:	6139      	str	r1, [r7, #16]
 80047ce:	4649      	mov	r1, r9
 80047d0:	414b      	adcs	r3, r1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047e0:	4659      	mov	r1, fp
 80047e2:	00cb      	lsls	r3, r1, #3
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ea:	4651      	mov	r1, sl
 80047ec:	00ca      	lsls	r2, r1, #3
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	4642      	mov	r2, r8
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80047fc:	464b      	mov	r3, r9
 80047fe:	460a      	mov	r2, r1
 8004800:	eb42 0303 	adc.w	r3, r2, r3
 8004804:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004808:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004814:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004824:	4649      	mov	r1, r9
 8004826:	008b      	lsls	r3, r1, #2
 8004828:	4641      	mov	r1, r8
 800482a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800482e:	4641      	mov	r1, r8
 8004830:	008a      	lsls	r2, r1, #2
 8004832:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004836:	f7fb fcd1 	bl	80001dc <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <UART_SetConfig+0x998>)
 8004840:	fba3 1302 	umull	r1, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	2164      	movs	r1, #100	; 0x64
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	3332      	adds	r3, #50	; 0x32
 8004852:	4a37      	ldr	r2, [pc, #220]	; (8004930 <UART_SetConfig+0x998>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485e:	441c      	add	r4, r3
 8004860:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800486a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800486e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004872:	4642      	mov	r2, r8
 8004874:	464b      	mov	r3, r9
 8004876:	1891      	adds	r1, r2, r2
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	415b      	adcs	r3, r3
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004882:	4641      	mov	r1, r8
 8004884:	1851      	adds	r1, r2, r1
 8004886:	6039      	str	r1, [r7, #0]
 8004888:	4649      	mov	r1, r9
 800488a:	414b      	adcs	r3, r1
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800489a:	4659      	mov	r1, fp
 800489c:	00cb      	lsls	r3, r1, #3
 800489e:	4651      	mov	r1, sl
 80048a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a4:	4651      	mov	r1, sl
 80048a6:	00ca      	lsls	r2, r1, #3
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	4603      	mov	r3, r0
 80048ae:	4642      	mov	r2, r8
 80048b0:	189b      	adds	r3, r3, r2
 80048b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048b6:	464b      	mov	r3, r9
 80048b8:	460a      	mov	r2, r1
 80048ba:	eb42 0303 	adc.w	r3, r2, r3
 80048be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80048de:	4649      	mov	r1, r9
 80048e0:	008b      	lsls	r3, r1, #2
 80048e2:	4641      	mov	r1, r8
 80048e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e8:	4641      	mov	r1, r8
 80048ea:	008a      	lsls	r2, r1, #2
 80048ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048f0:	f7fb fc74 	bl	80001dc <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <UART_SetConfig+0x998>)
 80048fa:	fba3 1302 	umull	r1, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	2164      	movs	r1, #100	; 0x64
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	3332      	adds	r3, #50	; 0x32
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <UART_SetConfig+0x998>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	f003 020f 	and.w	r2, r3, #15
 8004918:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4422      	add	r2, r4
 8004920:	609a      	str	r2, [r3, #8]
}
 8004922:	e7ff      	b.n	8004924 <UART_SetConfig+0x98c>
 8004924:	bf00      	nop
 8004926:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800492a:	46bd      	mov	sp, r7
 800492c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004930:	51eb851f 	.word	0x51eb851f

08004934 <atoi>:
 8004934:	220a      	movs	r2, #10
 8004936:	2100      	movs	r1, #0
 8004938:	f000 b8c2 	b.w	8004ac0 <strtol>

0800493c <__errno>:
 800493c:	4b01      	ldr	r3, [pc, #4]	; (8004944 <__errno+0x8>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000080 	.word	0x20000080

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4d0d      	ldr	r5, [pc, #52]	; (8004980 <__libc_init_array+0x38>)
 800494c:	4c0d      	ldr	r4, [pc, #52]	; (8004984 <__libc_init_array+0x3c>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	2600      	movs	r6, #0
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	4d0b      	ldr	r5, [pc, #44]	; (8004988 <__libc_init_array+0x40>)
 800495a:	4c0c      	ldr	r4, [pc, #48]	; (800498c <__libc_init_array+0x44>)
 800495c:	f000 f8ba 	bl	8004ad4 <_init>
 8004960:	1b64      	subs	r4, r4, r5
 8004962:	10a4      	asrs	r4, r4, #2
 8004964:	2600      	movs	r6, #0
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	08004d5c 	.word	0x08004d5c
 8004984:	08004d5c 	.word	0x08004d5c
 8004988:	08004d5c 	.word	0x08004d5c
 800498c:	08004d60 	.word	0x08004d60

08004990 <memcpy>:
 8004990:	440a      	add	r2, r1
 8004992:	4291      	cmp	r1, r2
 8004994:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004998:	d100      	bne.n	800499c <memcpy+0xc>
 800499a:	4770      	bx	lr
 800499c:	b510      	push	{r4, lr}
 800499e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049a6:	4291      	cmp	r1, r2
 80049a8:	d1f9      	bne.n	800499e <memcpy+0xe>
 80049aa:	bd10      	pop	{r4, pc}

080049ac <memset>:
 80049ac:	4402      	add	r2, r0
 80049ae:	4603      	mov	r3, r0
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d100      	bne.n	80049b6 <memset+0xa>
 80049b4:	4770      	bx	lr
 80049b6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ba:	e7f9      	b.n	80049b0 <memset+0x4>

080049bc <_strtol_l.constprop.0>:
 80049bc:	2b01      	cmp	r3, #1
 80049be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c2:	d001      	beq.n	80049c8 <_strtol_l.constprop.0+0xc>
 80049c4:	2b24      	cmp	r3, #36	; 0x24
 80049c6:	d906      	bls.n	80049d6 <_strtol_l.constprop.0+0x1a>
 80049c8:	f7ff ffb8 	bl	800493c <__errno>
 80049cc:	2316      	movs	r3, #22
 80049ce:	6003      	str	r3, [r0, #0]
 80049d0:	2000      	movs	r0, #0
 80049d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004abc <_strtol_l.constprop.0+0x100>
 80049da:	460d      	mov	r5, r1
 80049dc:	462e      	mov	r6, r5
 80049de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80049e6:	f017 0708 	ands.w	r7, r7, #8
 80049ea:	d1f7      	bne.n	80049dc <_strtol_l.constprop.0+0x20>
 80049ec:	2c2d      	cmp	r4, #45	; 0x2d
 80049ee:	d132      	bne.n	8004a56 <_strtol_l.constprop.0+0x9a>
 80049f0:	782c      	ldrb	r4, [r5, #0]
 80049f2:	2701      	movs	r7, #1
 80049f4:	1cb5      	adds	r5, r6, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d05b      	beq.n	8004ab2 <_strtol_l.constprop.0+0xf6>
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d109      	bne.n	8004a12 <_strtol_l.constprop.0+0x56>
 80049fe:	2c30      	cmp	r4, #48	; 0x30
 8004a00:	d107      	bne.n	8004a12 <_strtol_l.constprop.0+0x56>
 8004a02:	782c      	ldrb	r4, [r5, #0]
 8004a04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004a08:	2c58      	cmp	r4, #88	; 0x58
 8004a0a:	d14d      	bne.n	8004aa8 <_strtol_l.constprop.0+0xec>
 8004a0c:	786c      	ldrb	r4, [r5, #1]
 8004a0e:	2310      	movs	r3, #16
 8004a10:	3502      	adds	r5, #2
 8004a12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004a16:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004a1a:	f04f 0c00 	mov.w	ip, #0
 8004a1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004a22:	4666      	mov	r6, ip
 8004a24:	fb03 8a19 	mls	sl, r3, r9, r8
 8004a28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004a2c:	f1be 0f09 	cmp.w	lr, #9
 8004a30:	d816      	bhi.n	8004a60 <_strtol_l.constprop.0+0xa4>
 8004a32:	4674      	mov	r4, lr
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	dd24      	ble.n	8004a82 <_strtol_l.constprop.0+0xc6>
 8004a38:	f1bc 0f00 	cmp.w	ip, #0
 8004a3c:	db1e      	blt.n	8004a7c <_strtol_l.constprop.0+0xc0>
 8004a3e:	45b1      	cmp	r9, r6
 8004a40:	d31c      	bcc.n	8004a7c <_strtol_l.constprop.0+0xc0>
 8004a42:	d101      	bne.n	8004a48 <_strtol_l.constprop.0+0x8c>
 8004a44:	45a2      	cmp	sl, r4
 8004a46:	db19      	blt.n	8004a7c <_strtol_l.constprop.0+0xc0>
 8004a48:	fb06 4603 	mla	r6, r6, r3, r4
 8004a4c:	f04f 0c01 	mov.w	ip, #1
 8004a50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a54:	e7e8      	b.n	8004a28 <_strtol_l.constprop.0+0x6c>
 8004a56:	2c2b      	cmp	r4, #43	; 0x2b
 8004a58:	bf04      	itt	eq
 8004a5a:	782c      	ldrbeq	r4, [r5, #0]
 8004a5c:	1cb5      	addeq	r5, r6, #2
 8004a5e:	e7ca      	b.n	80049f6 <_strtol_l.constprop.0+0x3a>
 8004a60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004a64:	f1be 0f19 	cmp.w	lr, #25
 8004a68:	d801      	bhi.n	8004a6e <_strtol_l.constprop.0+0xb2>
 8004a6a:	3c37      	subs	r4, #55	; 0x37
 8004a6c:	e7e2      	b.n	8004a34 <_strtol_l.constprop.0+0x78>
 8004a6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004a72:	f1be 0f19 	cmp.w	lr, #25
 8004a76:	d804      	bhi.n	8004a82 <_strtol_l.constprop.0+0xc6>
 8004a78:	3c57      	subs	r4, #87	; 0x57
 8004a7a:	e7db      	b.n	8004a34 <_strtol_l.constprop.0+0x78>
 8004a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004a80:	e7e6      	b.n	8004a50 <_strtol_l.constprop.0+0x94>
 8004a82:	f1bc 0f00 	cmp.w	ip, #0
 8004a86:	da05      	bge.n	8004a94 <_strtol_l.constprop.0+0xd8>
 8004a88:	2322      	movs	r3, #34	; 0x22
 8004a8a:	6003      	str	r3, [r0, #0]
 8004a8c:	4646      	mov	r6, r8
 8004a8e:	b942      	cbnz	r2, 8004aa2 <_strtol_l.constprop.0+0xe6>
 8004a90:	4630      	mov	r0, r6
 8004a92:	e79e      	b.n	80049d2 <_strtol_l.constprop.0+0x16>
 8004a94:	b107      	cbz	r7, 8004a98 <_strtol_l.constprop.0+0xdc>
 8004a96:	4276      	negs	r6, r6
 8004a98:	2a00      	cmp	r2, #0
 8004a9a:	d0f9      	beq.n	8004a90 <_strtol_l.constprop.0+0xd4>
 8004a9c:	f1bc 0f00 	cmp.w	ip, #0
 8004aa0:	d000      	beq.n	8004aa4 <_strtol_l.constprop.0+0xe8>
 8004aa2:	1e69      	subs	r1, r5, #1
 8004aa4:	6011      	str	r1, [r2, #0]
 8004aa6:	e7f3      	b.n	8004a90 <_strtol_l.constprop.0+0xd4>
 8004aa8:	2430      	movs	r4, #48	; 0x30
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1b1      	bne.n	8004a12 <_strtol_l.constprop.0+0x56>
 8004aae:	2308      	movs	r3, #8
 8004ab0:	e7af      	b.n	8004a12 <_strtol_l.constprop.0+0x56>
 8004ab2:	2c30      	cmp	r4, #48	; 0x30
 8004ab4:	d0a5      	beq.n	8004a02 <_strtol_l.constprop.0+0x46>
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	e7ab      	b.n	8004a12 <_strtol_l.constprop.0+0x56>
 8004aba:	bf00      	nop
 8004abc:	08004bf1 	.word	0x08004bf1

08004ac0 <strtol>:
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	460a      	mov	r2, r1
 8004ac4:	4601      	mov	r1, r0
 8004ac6:	4802      	ldr	r0, [pc, #8]	; (8004ad0 <strtol+0x10>)
 8004ac8:	6800      	ldr	r0, [r0, #0]
 8004aca:	f7ff bf77 	b.w	80049bc <_strtol_l.constprop.0>
 8004ace:	bf00      	nop
 8004ad0:	20000080 	.word	0x20000080

08004ad4 <_init>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr

08004ae0 <_fini>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr
