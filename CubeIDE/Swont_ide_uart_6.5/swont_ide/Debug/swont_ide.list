
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800814c  0800814c  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008154  08008154  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800815c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013634  200000e8  08008244  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001371c  08008244  0002371c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bdf  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003913  00000000  00000000  00034cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00038610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00039910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bd0  00000000  00000000  0003aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae6e  00000000  00000000  00060608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf181  00000000  00000000  0007b476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a5f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005684  00000000  00000000  0014a648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e8 	.word	0x200000e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c04 	.word	0x08007c04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	08007c04 	.word	0x08007c04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <TransmitError>:
 *
 * @param ErrorCode
 * @return Error
 */
Error TransmitError(Error ErrorCode)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	ErrorHandle* Error = GetError(ErrorCode);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f811 	bl	80005b8 <GetError>
 8000596:	60f8      	str	r0, [r7, #12]
	printf("[%d]%s", Error->Severity, Error->Msg);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	4619      	mov	r1, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <TransmitError+0x30>)
 80005a6:	f006 f933 	bl	8006810 <iprintf>
	return ERR_NONE;
 80005aa:	2304      	movs	r3, #4
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08007d74 	.word	0x08007d74

080005b8 <GetError>:
 *
 * @param ErrorCode
 * @return ErrorHandle
 */
ErrorHandle* GetError(Error ErrorCode)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	uint8_t SizeOfErrorList = sizeof(ErrorList)/sizeof(ErrorList[0]);
 80005c2:	230c      	movs	r3, #12
 80005c4:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < SizeOfErrorList; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e00e      	b.n	80005ea <GetError+0x32>
	{
		if(ErrorList[i].ErrorCode == ErrorCode)
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <GetError+0x48>)
 80005d0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d104      	bne.n	80005e4 <GetError+0x2c>
		{
			return &ErrorList[i];
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <GetError+0x48>)
 80005e0:	4413      	add	r3, r2
 80005e2:	e007      	b.n	80005f4 <GetError+0x3c>
	for(uint8_t i = 0; i < SizeOfErrorList; i++)
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	3301      	adds	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	7bfa      	ldrb	r2, [r7, #15]
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3ec      	bcc.n	80005cc <GetError+0x14>
		}
	}
	return ERR_UNKNOWN_ERR;
 80005f2:	2307      	movs	r3, #7
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000000 	.word	0x20000000

08000604 <SDCardInit>:
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

Error SDCardInit()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800060a:	2201      	movs	r2, #1
 800060c:	491f      	ldr	r1, [pc, #124]	; (800068c <SDCardInit+0x88>)
 800060e:	4820      	ldr	r0, [pc, #128]	; (8000690 <SDCardInit+0x8c>)
 8000610:	f005 ff74 	bl	80064fc <f_mount>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SDCardInit+0x90>)
 800061a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SDCardInit+0x90>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <SDCardInit+0x26>
		TransmitError(ERR_SDCARD_MOUNT);
 8000624:	2008      	movs	r0, #8
 8000626:	f7ff ffad 	bl	8000584 <TransmitError>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 800062a:	463a      	mov	r2, r7
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4619      	mov	r1, r3
 8000630:	4816      	ldr	r0, [pc, #88]	; (800068c <SDCardInit+0x88>)
 8000632:	f005 ffa9 	bl	8006588 <f_getfree>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <SDCardInit+0x90>)
 800063c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <SDCardInit+0x90>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <SDCardInit+0x50>
	myprintf("f_getfree error (%i)\r\n", fres);
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <SDCardInit+0x90>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4619      	mov	r1, r3
 800064c:	4812      	ldr	r0, [pc, #72]	; (8000698 <SDCardInit+0x94>)
 800064e:	f000 f8d3 	bl	80007f8 <myprintf>
	while(1);
 8000652:	e7fe      	b.n	8000652 <SDCardInit+0x4e>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	3b02      	subs	r3, #2
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	8952      	ldrh	r2, [r2, #10]
 800065e:	fb02 f303 	mul.w	r3, r2, r3
 8000662:	60fb      	str	r3, [r7, #12]
	free_sectors = free_clusters * getFreeFs->csize;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	895b      	ldrh	r3, [r3, #10]
 8000668:	461a      	mov	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	60bb      	str	r3, [r7, #8]

	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	0859      	lsrs	r1, r3, #1
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	461a      	mov	r2, r3
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <SDCardInit+0x98>)
 800067e:	f000 f8bb 	bl	80007f8 <myprintf>
//	myprintf("f_write error (%i)\r\n");
//	}
//
//	//Be a tidy kiwi - don't forget to close your file!
//	f_close(&fil);
}
 8000682:	bf00      	nop
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08007ed4 	.word	0x08007ed4
 8000690:	20000104 	.word	0x20000104
 8000694:	20000334 	.word	0x20000334
 8000698:	08007ed8 	.word	0x08007ed8
 800069c:	08007ef0 	.word	0x08007ef0

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_DMA_Init+0x3c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <MX_DMA_Init+0x3c>)
 80006b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_DMA_Init+0x3c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2044      	movs	r0, #68	; 0x44
 80006c8:	f000 fffd 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80006cc:	2044      	movs	r0, #68	; 0x44
 80006ce:	f001 f816 	bl	80016fe <HAL_NVIC_EnableIRQ>

}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <MX_GPIO_Init+0x108>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a3a      	ldr	r2, [pc, #232]	; (80007e8 <MX_GPIO_Init+0x108>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <MX_GPIO_Init+0x108>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <MX_GPIO_Init+0x108>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <MX_GPIO_Init+0x108>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <MX_GPIO_Init+0x108>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_GPIO_Init+0x108>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <MX_GPIO_Init+0x108>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_GPIO_Init+0x108>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_GPIO_Init+0x108>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <MX_GPIO_Init+0x108>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0x108>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2102      	movs	r1, #2
 800076a:	4820      	ldr	r0, [pc, #128]	; (80007ec <MX_GPIO_Init+0x10c>)
 800076c:	f001 fd10 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000776:	481e      	ldr	r0, [pc, #120]	; (80007f0 <MX_GPIO_Init+0x110>)
 8000778:	f001 fd0a 	bl	8002190 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000782:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_GPIO_Init+0x114>)
 8000784:	f001 fd04 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4813      	ldr	r0, [pc, #76]	; (80007ec <MX_GPIO_Init+0x10c>)
 80007a0:	f001 fb5a 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80007a4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80007a8:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <MX_GPIO_Init+0x110>)
 80007be:	f001 fb4b 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_GPIO_Init+0x114>)
 80007dc:	f001 fb3c 	bl	8001e58 <HAL_GPIO_Init>

}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40020400 	.word	0x40020400

080007f8 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80007f8:	b40f      	push	{r0, r1, r2, r3}
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <myprintf+0x44>)
 8000810:	f006 f8b8 	bl	8006984 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <myprintf+0x44>)
 8000816:	f7ff fcdb 	bl	80001d0 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	b29a      	uxth	r2, r3
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	4905      	ldr	r1, [pc, #20]	; (800083c <myprintf+0x44>)
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <myprintf+0x48>)
 800082a:	f003 fbf8 	bl	800401e <HAL_UART_Transmit>

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000838:	b004      	add	sp, #16
 800083a:	4770      	bx	lr
 800083c:	20000748 	.word	0x20000748
 8000840:	20000984 	.word	0x20000984

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f000 fdef 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f851 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f7ff ff45 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000856:	f7ff ff23 	bl	80006a0 <MX_DMA_Init>
  MX_TIM1_Init();
 800085a:	f000 fb3d 	bl	8000ed8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800085e:	f000 fb8b 	bl	8000f78 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000862:	f000 fca1 	bl	80011a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000866:	f000 f8c9 	bl	80009fc <MX_SPI1_Init>
  MX_FATFS_Init();
 800086a:	f004 fc1f 	bl	80050ac <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  SDCardInit(); //Init SD Card
 800086e:	f7ff fec9 	bl	8000604 <SDCardInit>

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000872:	f000 fd3d 	bl	80012f0 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8000876:	2000      	movs	r0, #0
 8000878:	f000 fd8c 	bl	8001394 <UB_VGA_FillScreen>
//  UB_VGA_SetPixel(10,16,VGA_COL_BLUE);
//  UB_VGA_SetPixel(0,0,0x00);
//  UB_VGA_SetPixel(319,,0x00);
  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	e008      	b.n	8000894 <main+0x50>
	  input.line_rx_buffer[i] = 0;
 8000882:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <main+0xa4>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	3301      	adds	r3, #1
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3301      	adds	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800089a:	dbf2      	blt.n	8000882 <main+0x3e>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <main+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <main+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <main+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 80008b2:	2201      	movs	r2, #1
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <main+0xa4>)
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <main+0xa8>)
 80008b8:	f003 fc4a 	bl	8004150 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 80008bc:	23ff      	movs	r3, #255	; 0xff
 80008be:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <main+0xa4>)
 80008c2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80008c6:	2bff      	cmp	r3, #255	; 0xff
 80008c8:	d1fa      	bne.n	80008c0 <main+0x7c>
	  {
		  // Do some stuff
		  printf("yes\n");
 80008ca:	4809      	ldr	r0, [pc, #36]	; (80008f0 <main+0xac>)
 80008cc:	f006 f826 	bl	800691c <puts>
		  colorTest = ~colorTest; // Toggle screen color
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	43db      	mvns	r3, r3
 80008d4:	70fb      	strb	r3, [r7, #3]
		  UB_VGA_FillScreen(colorTest);
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fd5b 	bl	8001394 <UB_VGA_FillScreen>

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 80008de:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <main+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 80008e6:	e7eb      	b.n	80008c0 <main+0x7c>
 80008e8:	20000338 	.word	0x20000338
 80008ec:	20000984 	.word	0x20000984
 80008f0:	08008090 	.word	0x08008090

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 ff7c 	bl	8006800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <SystemClock_Config+0xcc>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <SystemClock_Config+0xcc>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <SystemClock_Config+0xd0>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <SystemClock_Config+0xd0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000968:	23a8      	movs	r3, #168	; 0xa8
 800096a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fc23 	bl	80021c4 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000984:	f000 f832 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000994:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2105      	movs	r1, #5
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fe7a 	bl	80026a0 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009b2:	f000 f81b 	bl	80009ec <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	; 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80009d0:	1d39      	adds	r1, r7, #4
 80009d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009d6:	2201      	movs	r2, #1
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <__io_putchar+0x20>)
 80009da:	f003 fb20 	bl	800401e <HAL_UART_Transmit>
	return ch;												//Return the character
 80009de:	687b      	ldr	r3, [r7, #4]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000984 	.word	0x20000984

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a30:	2238      	movs	r2, #56	; 0x38
 8000a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a4e:	f002 f847 	bl	8002ae0 <HAL_SPI_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a58:	f7ff ffc8 	bl	80009ec <Error_Handler>
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000848 	.word	0x20000848
 8000a64:	40013000 	.word	0x40013000

08000a68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <HAL_SPI_MspInit+0xc0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d149      	bne.n	8000b1e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <HAL_SPI_MspInit+0xc4>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <HAL_SPI_MspInit+0xc4>)
 8000a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <HAL_SPI_MspInit+0xc4>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_SPI_MspInit+0xc4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <HAL_SPI_MspInit+0xc4>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_SPI_MspInit+0xc4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_SPI_MspInit+0xc4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <HAL_SPI_MspInit+0xc4>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_SPI_MspInit+0xc4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ade:	23c0      	movs	r3, #192	; 0xc0
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aee:	2305      	movs	r3, #5
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <HAL_SPI_MspInit+0xc8>)
 8000afa:	f001 f9ad 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CS_Pin;
 8000afe:	2308      	movs	r3, #8
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0e:	2305      	movs	r3, #5
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <HAL_SPI_MspInit+0xcc>)
 8000b1a:	f001 f99d 	bl	8001e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40013000 	.word	0x40013000
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 fc78 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be8:	4828      	ldr	r0, [pc, #160]	; (8000c8c <TIM2_IRQHandler+0xa8>)
 8000bea:	f002 fb67 	bl	80032bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <TIM2_IRQHandler+0xa8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f06f 0208 	mvn.w	r2, #8
 8000bf6:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c02:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000c0c:	d905      	bls.n	8000c1a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000c14:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <TIM2_IRQHandler+0xb0>)
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c18:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d802      	bhi.n	8000c28 <TIM2_IRQHandler+0x44>
 8000c22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c26:	e001      	b.n	8000c2c <TIM2_IRQHandler+0x48>
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <TIM2_IRQHandler+0xb4>)
 8000c2e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	2b23      	cmp	r3, #35	; 0x23
 8000c36:	d927      	bls.n	8000c88 <TIM2_IRQHandler+0xa4>
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	f240 2202 	movw	r2, #514	; 0x202
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d821      	bhi.n	8000c88 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <TIM2_IRQHandler+0xb8>)
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <TIM2_IRQHandler+0xb8>)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <TIM2_IRQHandler+0xbc>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <TIM2_IRQHandler+0xbc>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <TIM2_IRQHandler+0xc0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <TIM2_IRQHandler+0xc0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f042 0201 	orr.w	r2, r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d005      	beq.n	8000c88 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000c84:	4a02      	ldr	r2, [pc, #8]	; (8000c90 <TIM2_IRQHandler+0xac>)
 8000c86:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200008e4 	.word	0x200008e4
 8000c90:	200136b4 	.word	0x200136b4
 8000c94:	200009c4 	.word	0x200009c4
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	40026488 	.word	0x40026488
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	20000924 	.word	0x20000924

08000ca8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <USART2_IRQHandler+0x70>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b0a      	cmp	r3, #10
 8000cb8:	d026      	beq.n	8000d08 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b0d      	cmp	r3, #13
 8000cbe:	d002      	beq.n	8000cc6 <USART2_IRQHandler+0x1e>
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc4:	d10e      	bne.n	8000ce4 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <USART2_IRQHandler+0x74>)
 8000cc8:	22ff      	movs	r2, #255	; 0xff
 8000cca:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <USART2_IRQHandler+0x74>)
 8000cd0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000cd4:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <USART2_IRQHandler+0x74>)
 8000cd6:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <USART2_IRQHandler+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000ce2:	e011      	b.n	8000d08 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <USART2_IRQHandler+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <USART2_IRQHandler+0x74>)
 8000cee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <USART2_IRQHandler+0x74>)
 8000cf4:	4413      	add	r3, r2
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <USART2_IRQHandler+0x74>)
 8000cfc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <USART2_IRQHandler+0x74>)
 8000d04:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <USART2_IRQHandler+0x78>)
 8000d0a:	f003 fa77 	bl	80041fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	20000338 	.word	0x20000338
 8000d20:	20000984 	.word	0x20000984

08000d24 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <DMA2_Stream5_IRQHandler+0x48>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6a1a      	ldr	r2, [r3, #32]
 8000d2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10f      	bne.n	8000d58 <DMA2_Stream5_IRQHandler+0x34>
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <DMA2_Stream5_IRQHandler+0x48>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6a1a      	ldr	r2, [r3, #32]
 8000d3e:	f240 4344 	movw	r3, #1092	; 0x444
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d107      	bne.n	8000d58 <DMA2_Stream5_IRQHandler+0x34>
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <DMA2_Stream5_IRQHandler+0x48>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <DMA2_Stream5_IRQHandler+0x48>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 0201 	bic.w	r2, r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <DMA2_Stream5_IRQHandler+0x4c>)
 8000d5a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <DMA2_Stream5_IRQHandler+0x50>)
 8000d62:	f000 fe0f 	bl	8001984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200008a4 	.word	0x200008a4
 8000d70:	40021000 	.word	0x40021000
 8000d74:	20000924 	.word	0x20000924

08000d78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e00a      	b.n	8000da0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d8a:	f3af 8000 	nop.w
 8000d8e:	4601      	mov	r1, r0
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	b2ca      	uxtb	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf0      	blt.n	8000d8a <_read+0x12>
	}

return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	e009      	b.n	8000dd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	60ba      	str	r2, [r7, #8]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fdfb 	bl	80009c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf1      	blt.n	8000dc4 <_write+0x12>
	}
	return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_close>:

int _close(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	return -1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e12:	605a      	str	r2, [r3, #4]
	return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_isatty>:

int _isatty(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	return 1;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
	return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x50>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x16>
		heap_end = &end;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <_sbrk+0x50>)
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <_sbrk+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <_sbrk+0x50>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <_sbrk+0x50>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	466a      	mov	r2, sp
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d907      	bls.n	8000e8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e7e:	f005 fc95 	bl	80067ac <__errno>
 8000e82:	4603      	mov	r3, r0
 8000e84:	220c      	movs	r2, #12
 8000e86:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	e006      	b.n	8000e9c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <_sbrk+0x50>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <_sbrk+0x50>)
 8000e98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200008a0 	.word	0x200008a0
 8000ea8:	20013720 	.word	0x20013720

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SystemInit+0x28>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SystemInit+0x28>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x28>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <MX_TIM1_Init+0x9c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f08:	220b      	movs	r2, #11
 8000f0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f20:	f002 f890 	bl	8003044 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000f2a:	f7ff fd5f 	bl	80009ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f3c:	f002 fb8c 	bl	8003658 <HAL_TIM_ConfigClockSource>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000f46:	f7ff fd51 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_TIM1_Init+0x98>)
 8000f58:	f002 ff84 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000f62:	f7ff fd43 	bl	80009ec <Error_Handler>
  }

}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200008a4 	.word	0x200008a4
 8000f74:	40010000 	.word	0x40010000

08000f78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <MX_TIM2_Init+0xcc>)
 8000f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <MX_TIM2_Init+0xcc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <MX_TIM2_Init+0xcc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <MX_TIM2_Init+0xcc>)
 8000fb0:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000fb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <MX_TIM2_Init+0xcc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <MX_TIM2_Init+0xcc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fc2:	4820      	ldr	r0, [pc, #128]	; (8001044 <MX_TIM2_Init+0xcc>)
 8000fc4:	f002 f88d 	bl	80030e2 <HAL_TIM_PWM_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000fce:	f7ff fd0d 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4818      	ldr	r0, [pc, #96]	; (8001044 <MX_TIM2_Init+0xcc>)
 8000fe2:	f002 ff3f 	bl	8003e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000fec:	f7ff fcfe 	bl	80009ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff0:	2360      	movs	r3, #96	; 0x60
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000ff4:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000ff8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2208      	movs	r2, #8
 8001006:	4619      	mov	r1, r3
 8001008:	480e      	ldr	r0, [pc, #56]	; (8001044 <MX_TIM2_Init+0xcc>)
 800100a:	f002 fa5f 	bl	80034cc <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001014:	f7ff fcea 	bl	80009ec <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001018:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	220c      	movs	r2, #12
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <MX_TIM2_Init+0xcc>)
 8001026:	f002 fa51 	bl	80034cc <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001030:	f7ff fcdc 	bl	80009ec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <MX_TIM2_Init+0xcc>)
 8001036:	f000 f87f 	bl	8001138 <HAL_TIM_MspPostInit>

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200008e4 	.word	0x200008e4

08001048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <HAL_TIM_Base_MspInit+0x94>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d13c      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_TIM_Base_MspInit+0x98>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <HAL_TIM_Base_MspInit+0x98>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_TIM_Base_MspInit+0x98>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <HAL_TIM_Base_MspInit+0xa0>)
 800107a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 800107e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001082:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001086:	2240      	movs	r2, #64	; 0x40
 8001088:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001096:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 80010ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010b0:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 80010ba:	f000 fb3b 	bl	8001734 <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80010c4:	f7ff fc92 	bl	80009ec <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 80010cc:	621a      	str	r2, [r3, #32]
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_TIM_Base_MspInit+0x9c>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010000 	.word	0x40010000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	20000924 	.word	0x20000924
 80010e8:	40026488 	.word	0x40026488

080010ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010fc:	d115      	bne.n	800112a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_TIM_PWM_MspInit+0x48>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <HAL_TIM_PWM_MspInit+0x48>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_TIM_PWM_MspInit+0x48>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	201c      	movs	r0, #28
 8001120:	f000 fad1 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001124:	201c      	movs	r0, #28
 8001126:	f000 faea 	bl	80016fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001158:	d11e      	bne.n	8001198 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_TIM_MspPostInit+0x68>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_TIM_MspPostInit+0x68>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_TIM_MspPostInit+0x68>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800117a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	4804      	ldr	r0, [pc, #16]	; (80011a4 <HAL_TIM_MspPostInit+0x6c>)
 8001194:	f000 fe60 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020400 	.word	0x40020400

080011a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART2_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f002 fed0 	bl	8003f84 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f7ff fbff 	bl	80009ec <Error_Handler>
  }

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000984 	.word	0x20000984
 80011f8:	40004400 	.word	0x40004400

080011fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_UART_MspInit+0x94>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d133      	bne.n	8001286 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x98>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001266:	2307      	movs	r3, #7
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_UART_MspInit+0x9c>)
 8001272:	f000 fdf1 	bl	8001e58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2026      	movs	r0, #38	; 0x26
 800127c:	f000 fa23 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001280:	2026      	movs	r0, #38	; 0x26
 8001282:	f000 fa3c 	bl	80016fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40004400 	.word	0x40004400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012a2:	e003      	b.n	80012ac <LoopCopyDataInit>

080012a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012aa:	3104      	adds	r1, #4

080012ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b4:	d3f6      	bcc.n	80012a4 <CopyDataInit>
  ldr  r2, =_sbss
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012b8:	e002      	b.n	80012c0 <LoopFillZerobss>

080012ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012bc:	f842 3b04 	str.w	r3, [r2], #4

080012c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c4:	d3f9      	bcc.n	80012ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012c6:	f7ff fdf1 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f005 fa75 	bl	80067b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff fab9 	bl	8000844 <main>
  bx  lr    
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012d8:	0800815c 	.word	0x0800815c
  ldr  r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012e0:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 80012e4:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 80012e8:	2001371c 	.word	0x2001371c

080012ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>
	...

080012f0 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <UB_VGA_Screen_Init+0x84>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <UB_VGA_Screen_Init+0x84>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <UB_VGA_Screen_Init+0x84>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <UB_VGA_Screen_Init+0x88>)
 8001308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800130c:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <UB_VGA_Screen_Init+0x8c>)
 8001310:	f001 fec3 	bl	800309a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001314:	210c      	movs	r1, #12
 8001316:	4819      	ldr	r0, [pc, #100]	; (800137c <UB_VGA_Screen_Init+0x8c>)
 8001318:	f001 ff0e 	bl	8003138 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800131c:	2108      	movs	r1, #8
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <UB_VGA_Screen_Init+0x8c>)
 8001320:	f001 ff48 	bl	80031b4 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <UB_VGA_Screen_Init+0x90>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <UB_VGA_Screen_Init+0x90>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001332:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <UB_VGA_Screen_Init+0x90>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <UB_VGA_Screen_Init+0x90>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0201 	orr.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001344:	490f      	ldr	r1, [pc, #60]	; (8001384 <UB_VGA_Screen_Init+0x94>)
 8001346:	f240 1341 	movw	r3, #321	; 0x141
 800134a:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <UB_VGA_Screen_Init+0x98>)
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <UB_VGA_Screen_Init+0x9c>)
 800134e:	f000 fa9f 	bl	8001890 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <UB_VGA_Screen_Init+0x9c>)
 8001354:	f000 f9ee 	bl	8001734 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <UB_VGA_Screen_Init+0x9c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <UB_VGA_Screen_Init+0x9c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0210 	orr.w	r2, r2, #16
 8001366:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <UB_VGA_Screen_Init+0xa0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a01      	ldr	r2, [pc, #4]	; (8001374 <UB_VGA_Screen_Init+0x84>)
 800136e:	6093      	str	r3, [r2, #8]
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200136b4 	.word	0x200136b4
 8001378:	40020400 	.word	0x40020400
 800137c:	200008e4 	.word	0x200008e4
 8001380:	200008a4 	.word	0x200008a4
 8001384:	200009c4 	.word	0x200009c4
 8001388:	40021015 	.word	0x40021015
 800138c:	20000924 	.word	0x20000924
 8001390:	40026488 	.word	0x40026488

08001394 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	81bb      	strh	r3, [r7, #12]
 80013a2:	e012      	b.n	80013ca <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	81fb      	strh	r3, [r7, #14]
 80013a8:	e008      	b.n	80013bc <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	89b9      	ldrh	r1, [r7, #12]
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f813 	bl	80013dc <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	3301      	adds	r3, #1
 80013ba:	81fb      	strh	r3, [r7, #14]
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013c2:	d3f2      	bcc.n	80013aa <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80013c4:	89bb      	ldrh	r3, [r7, #12]
 80013c6:	3301      	adds	r3, #1
 80013c8:	81bb      	strh	r3, [r7, #12]
 80013ca:	89bb      	ldrh	r3, [r7, #12]
 80013cc:	2bef      	cmp	r3, #239	; 0xef
 80013ce:	d9e9      	bls.n	80013a4 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	460b      	mov	r3, r1
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013f4:	d301      	bcc.n	80013fa <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	2bef      	cmp	r3, #239	; 0xef
 80013fe:	d901      	bls.n	8001404 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001404:	88ba      	ldrh	r2, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	441a      	add	r2, r3
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	4413      	add	r3, r2
 8001414:	4904      	ldr	r1, [pc, #16]	; (8001428 <UB_VGA_SetPixel+0x4c>)
 8001416:	78fa      	ldrb	r2, [r7, #3]
 8001418:	54ca      	strb	r2, [r1, r3]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200009c4 	.word	0x200009c4

0800142c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_Init+0x40>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_Init+0x40>)
 8001442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_Init+0x40>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f92b 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fb6a 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f943 	bl	800171a <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f90b 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000060 	.word	0x20000060
 80014c8:	20000068 	.word	0x20000068
 80014cc:	20000064 	.word	0x20000064

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000068 	.word	0x20000068
 80014f4:	200136c0 	.word	0x200136c0

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200136c0 	.word	0x200136c0

08001510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001542:	4a04      	ldr	r2, [pc, #16]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60d3      	str	r3, [r2, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <__NVIC_EnableIRQ+0x38>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f7ff ff8e 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff29 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff3e 	bl	8001558 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff8e 	bl	8001604 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5d 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff31 	bl	8001574 <__NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffa2 	bl	800166c <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff feda 	bl	80014f8 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e099      	b.n	8001884 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001770:	e00f      	b.n	8001792 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001772:	f7ff fec1 	bl	80014f8 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b05      	cmp	r3, #5
 800177e:	d908      	bls.n	8001792 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2220      	movs	r2, #32
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e078      	b.n	8001884 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e8      	bne.n	8001772 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <HAL_DMA_Init+0x158>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d107      	bne.n	80017fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4313      	orrs	r3, r2
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f023 0307 	bic.w	r3, r3, #7
 8001812:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	4313      	orrs	r3, r2
 800181c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2b04      	cmp	r3, #4
 8001824:	d117      	bne.n	8001856 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00e      	beq.n	8001856 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fa91 	bl	8001d60 <DMA_CheckFifoParam>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001852:	2301      	movs	r3, #1
 8001854:	e016      	b.n	8001884 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fa48 	bl	8001cf4 <DMA_CalcBaseAndBitshift>
 8001864:	4603      	mov	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	223f      	movs	r2, #63	; 0x3f
 800186e:	409a      	lsls	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	f010803f 	.word	0xf010803f

08001890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_DMA_Start_IT+0x26>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e040      	b.n	8001938 <HAL_DMA_Start_IT+0xa8>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d12f      	bne.n	800192a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f9da 	bl	8001c98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	223f      	movs	r2, #63	; 0x3f
 80018ea:	409a      	lsls	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0216 	orr.w	r2, r2, #22
 80018fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0208 	orr.w	r2, r2, #8
 8001916:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e005      	b.n	8001936 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001932:	2302      	movs	r3, #2
 8001934:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001936:	7dfb      	ldrb	r3, [r7, #23]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d004      	beq.n	800195e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e00c      	b.n	8001978 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2205      	movs	r2, #5
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001990:	4b8e      	ldr	r3, [pc, #568]	; (8001bcc <HAL_DMA_IRQHandler+0x248>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a8e      	ldr	r2, [pc, #568]	; (8001bd0 <HAL_DMA_IRQHandler+0x24c>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0a9b      	lsrs	r3, r3, #10
 800199c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	2208      	movs	r2, #8
 80019b0:	409a      	lsls	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01a      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0204 	bic.w	r2, r2, #4
 80019d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	2208      	movs	r2, #8
 80019de:	409a      	lsls	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f043 0201 	orr.w	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	2201      	movs	r2, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d012      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2201      	movs	r2, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	f043 0202 	orr.w	r2, r3, #2
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d012      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	2204      	movs	r2, #4
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	2210      	movs	r2, #16
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d043      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d03c      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	2210      	movs	r2, #16
 8001a80:	409a      	lsls	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d018      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d108      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
 8001ab2:	e01f      	b.n	8001af4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01b      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
 8001ac4:	e016      	b.n	8001af4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d107      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0208 	bic.w	r2, r2, #8
 8001ae2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	2220      	movs	r2, #32
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 808f 	beq.w	8001c24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 8087 	beq.w	8001c24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d136      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0216 	bic.w	r2, r2, #22
 8001b3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <HAL_DMA_IRQHandler+0x1da>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0208 	bic.w	r2, r2, #8
 8001b6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	223f      	movs	r2, #63	; 0x3f
 8001b74:	409a      	lsls	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d07e      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
        }
        return;
 8001b9a:	e079      	b.n	8001c90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01d      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d031      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
 8001bc8:	e02c      	b.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
 8001bca:	bf00      	nop
 8001bcc:	20000060 	.word	0x20000060
 8001bd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d023      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
 8001be4:	e01e      	b.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10f      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0210 	bic.w	r2, r2, #16
 8001c02:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d032      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d307      	bcc.n	8001c6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f2      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x2cc>
 8001c6a:	e000      	b.n	8001c6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c6c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
 8001c8e:	e000      	b.n	8001c92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c90:	bf00      	nop
    }
  }
}
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	d108      	bne.n	8001cd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cd6:	e007      	b.n	8001ce8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3b10      	subs	r3, #16
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <DMA_CalcBaseAndBitshift+0x64>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <DMA_CalcBaseAndBitshift+0x68>)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d909      	bls.n	8001d36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	1d1a      	adds	r2, r3, #4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	659a      	str	r2, [r3, #88]	; 0x58
 8001d34:	e007      	b.n	8001d46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	aaaaaaab 	.word	0xaaaaaaab
 8001d5c:	080080ac 	.word	0x080080ac

08001d60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11f      	bne.n	8001dba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d856      	bhi.n	8001e2e <DMA_CheckFifoParam+0xce>
 8001d80:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <DMA_CheckFifoParam+0x28>)
 8001d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d86:	bf00      	nop
 8001d88:	08001d99 	.word	0x08001d99
 8001d8c:	08001dab 	.word	0x08001dab
 8001d90:	08001d99 	.word	0x08001d99
 8001d94:	08001e2f 	.word	0x08001e2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d046      	beq.n	8001e32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da8:	e043      	b.n	8001e32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001db2:	d140      	bne.n	8001e36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db8:	e03d      	b.n	8001e36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc2:	d121      	bne.n	8001e08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d837      	bhi.n	8001e3a <DMA_CheckFifoParam+0xda>
 8001dca:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <DMA_CheckFifoParam+0x70>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001de7 	.word	0x08001de7
 8001dd8:	08001de1 	.word	0x08001de1
 8001ddc:	08001df9 	.word	0x08001df9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
      break;
 8001de4:	e030      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d025      	beq.n	8001e3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df6:	e022      	b.n	8001e3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e00:	d11f      	bne.n	8001e42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e06:	e01c      	b.n	8001e42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d903      	bls.n	8001e16 <DMA_CheckFifoParam+0xb6>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d003      	beq.n	8001e1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e14:	e018      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1a:	e015      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00e      	beq.n	8001e46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e2c:	e00b      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      break;
 8001e2e:	bf00      	nop
 8001e30:	e00a      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e32:	bf00      	nop
 8001e34:	e008      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e36:	bf00      	nop
 8001e38:	e006      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e3a:	bf00      	nop
 8001e3c:	e004      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e3e:	bf00      	nop
 8001e40:	e002      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e42:	bf00      	nop
 8001e44:	e000      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e46:	bf00      	nop
    }
  } 
  
  return status; 
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e16b      	b.n	800214c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 815a 	bne.w	8002146 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d00b      	beq.n	8001eb2 <HAL_GPIO_Init+0x5a>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea6:	2b11      	cmp	r3, #17
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0xfc>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b12      	cmp	r3, #18
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80b4 	beq.w	8002146 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b60      	ldr	r3, [pc, #384]	; (8002164 <HAL_GPIO_Init+0x30c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a5f      	ldr	r2, [pc, #380]	; (8002164 <HAL_GPIO_Init+0x30c>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_GPIO_Init+0x30c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffa:	4a5b      	ldr	r2, [pc, #364]	; (8002168 <HAL_GPIO_Init+0x310>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_GPIO_Init+0x314>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02b      	beq.n	800207e <HAL_GPIO_Init+0x226>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a51      	ldr	r2, [pc, #324]	; (8002170 <HAL_GPIO_Init+0x318>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d025      	beq.n	800207a <HAL_GPIO_Init+0x222>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a50      	ldr	r2, [pc, #320]	; (8002174 <HAL_GPIO_Init+0x31c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01f      	beq.n	8002076 <HAL_GPIO_Init+0x21e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4f      	ldr	r2, [pc, #316]	; (8002178 <HAL_GPIO_Init+0x320>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x21a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4e      	ldr	r2, [pc, #312]	; (800217c <HAL_GPIO_Init+0x324>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x216>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4d      	ldr	r2, [pc, #308]	; (8002180 <HAL_GPIO_Init+0x328>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x212>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_GPIO_Init+0x32c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x20e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4b      	ldr	r2, [pc, #300]	; (8002188 <HAL_GPIO_Init+0x330>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x20a>
 800205e:	2307      	movs	r3, #7
 8002060:	e00e      	b.n	8002080 <HAL_GPIO_Init+0x228>
 8002062:	2308      	movs	r3, #8
 8002064:	e00c      	b.n	8002080 <HAL_GPIO_Init+0x228>
 8002066:	2306      	movs	r3, #6
 8002068:	e00a      	b.n	8002080 <HAL_GPIO_Init+0x228>
 800206a:	2305      	movs	r3, #5
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x228>
 800206e:	2304      	movs	r3, #4
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x228>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x228>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x228>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x228>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	; (8002168 <HAL_GPIO_Init+0x310>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_GPIO_Init+0x334>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c2:	4a32      	ldr	r2, [pc, #200]	; (800218c <HAL_GPIO_Init+0x334>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_GPIO_Init+0x334>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ec:	4a27      	ldr	r2, [pc, #156]	; (800218c <HAL_GPIO_Init+0x334>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_GPIO_Init+0x334>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002116:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_GPIO_Init+0x334>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_GPIO_Init+0x334>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <HAL_GPIO_Init+0x334>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f ae90 	bls.w	8001e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40013800 	.word	0x40013800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40021000 	.word	0x40021000
 8002180:	40021400 	.word	0x40021400
 8002184:	40021800 	.word	0x40021800
 8002188:	40021c00 	.word	0x40021c00
 800218c:	40013c00 	.word	0x40013c00

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021ac:	e003      	b.n	80021b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e25e      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d075      	beq.n	80022ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021e2:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d00c      	beq.n	8002208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ee:	4b85      	ldr	r3, [pc, #532]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d112      	bne.n	8002220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fa:	4b82      	ldr	r3, [pc, #520]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002206:	d10b      	bne.n	8002220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	4b7e      	ldr	r3, [pc, #504]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d05b      	beq.n	80022cc <HAL_RCC_OscConfig+0x108>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d157      	bne.n	80022cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e239      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d106      	bne.n	8002238 <HAL_RCC_OscConfig+0x74>
 800222a:	4b76      	ldr	r3, [pc, #472]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a75      	ldr	r2, [pc, #468]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e01d      	b.n	8002274 <HAL_RCC_OscConfig+0xb0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x98>
 8002242:	4b70      	ldr	r3, [pc, #448]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6f      	ldr	r2, [pc, #444]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b6d      	ldr	r3, [pc, #436]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6c      	ldr	r2, [pc, #432]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0xb0>
 800225c:	4b69      	ldr	r3, [pc, #420]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a68      	ldr	r2, [pc, #416]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b66      	ldr	r3, [pc, #408]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a65      	ldr	r2, [pc, #404]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 800226e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff f93c 	bl	80014f8 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002284:	f7ff f938 	bl	80014f8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1fe      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b5b      	ldr	r3, [pc, #364]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0xc0>
 80022a2:	e014      	b.n	80022ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f928 	bl	80014f8 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff f924 	bl	80014f8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1ea      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0xe8>
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d063      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022da:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d11c      	bne.n	800232c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f2:	4b44      	ldr	r3, [pc, #272]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d116      	bne.n	800232c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x152>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1be      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4937      	ldr	r1, [pc, #220]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	e03a      	b.n	80023a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002334:	4b34      	ldr	r3, [pc, #208]	; (8002408 <HAL_RCC_OscConfig+0x244>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233a:	f7ff f8dd 	bl	80014f8 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002342:	f7ff f8d9 	bl	80014f8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e19f      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4925      	ldr	r1, [pc, #148]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_OscConfig+0x244>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff f8bc 	bl	80014f8 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff f8b8 	bl	80014f8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e17e      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d036      	beq.n	800241c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d016      	beq.n	80023e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_RCC_OscConfig+0x248>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7ff f89c 	bl	80014f8 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c4:	f7ff f898 	bl	80014f8 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e15e      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_OscConfig+0x240>)
 80023d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x200>
 80023e2:	e01b      	b.n	800241c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_OscConfig+0x248>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7ff f885 	bl	80014f8 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f0:	e00e      	b.n	8002410 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f2:	f7ff f881 	bl	80014f8 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d907      	bls.n	8002410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e147      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
 8002404:	40023800 	.word	0x40023800
 8002408:	42470000 	.word	0x42470000
 800240c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002410:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 8002412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ea      	bne.n	80023f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8097 	beq.w	8002558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242e:	4b81      	ldr	r3, [pc, #516]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	4b7d      	ldr	r3, [pc, #500]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a7c      	ldr	r2, [pc, #496]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b77      	ldr	r3, [pc, #476]	; (8002638 <HAL_RCC_OscConfig+0x474>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d118      	bne.n	8002498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4b74      	ldr	r3, [pc, #464]	; (8002638 <HAL_RCC_OscConfig+0x474>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a73      	ldr	r2, [pc, #460]	; (8002638 <HAL_RCC_OscConfig+0x474>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7ff f841 	bl	80014f8 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7ff f83d 	bl	80014f8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e103      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_OscConfig+0x474>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x2ea>
 80024a0:	4b64      	ldr	r3, [pc, #400]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a63      	ldr	r2, [pc, #396]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
 80024ac:	e01c      	b.n	80024e8 <HAL_RCC_OscConfig+0x324>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b05      	cmp	r3, #5
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x30c>
 80024b6:	4b5f      	ldr	r3, [pc, #380]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a5e      	ldr	r2, [pc, #376]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	6713      	str	r3, [r2, #112]	; 0x70
 80024c2:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	4a5b      	ldr	r2, [pc, #364]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0x324>
 80024d0:	4b58      	ldr	r3, [pc, #352]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	4a57      	ldr	r2, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	6713      	str	r3, [r2, #112]	; 0x70
 80024dc:	4b55      	ldr	r3, [pc, #340]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	4a54      	ldr	r2, [pc, #336]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f023 0304 	bic.w	r3, r3, #4
 80024e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff f802 	bl	80014f8 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7fe fffe 	bl	80014f8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e0c2      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250e:	4b49      	ldr	r3, [pc, #292]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0ee      	beq.n	80024f8 <HAL_RCC_OscConfig+0x334>
 800251a:	e014      	b.n	8002546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7fe ffec 	bl	80014f8 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7fe ffe8 	bl	80014f8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0ac      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ee      	bne.n	8002524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254c:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	4a38      	ldr	r2, [pc, #224]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 8002552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8098 	beq.w	8002692 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002562:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b08      	cmp	r3, #8
 800256c:	d05c      	beq.n	8002628 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d141      	bne.n	80025fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_RCC_OscConfig+0x478>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe ffbc 	bl	80014f8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe ffb8 	bl	80014f8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e07e      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	4b27      	ldr	r3, [pc, #156]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	019b      	lsls	r3, r3, #6
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	3b01      	subs	r3, #1
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	061b      	lsls	r3, r3, #24
 80025c6:	491b      	ldr	r1, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x478>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7fe ff91 	bl	80014f8 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025da:	f7fe ff8d 	bl	80014f8 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e053      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x416>
 80025f8:	e04b      	b.n	8002692 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_RCC_OscConfig+0x478>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe ff7a 	bl	80014f8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe ff76 	bl	80014f8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e03c      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_OscConfig+0x470>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x444>
 8002626:	e034      	b.n	8002692 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e02f      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
 8002634:	40023800 	.word	0x40023800
 8002638:	40007000 	.word	0x40007000
 800263c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002640:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_RCC_OscConfig+0x4d8>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	429a      	cmp	r2, r3
 8002652:	d11c      	bne.n	800268e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d115      	bne.n	800268e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800266e:	4293      	cmp	r3, r2
 8002670:	d10d      	bne.n	800268e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0cc      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b68      	ldr	r3, [pc, #416]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d90c      	bls.n	80026dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b63      	ldr	r3, [pc, #396]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0b8      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a58      	ldr	r2, [pc, #352]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800270c:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	494d      	ldr	r1, [pc, #308]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d044      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d119      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e07f      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d003      	beq.n	800275e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275a:	2b03      	cmp	r3, #3
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e06f      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e067      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277e:	4b37      	ldr	r3, [pc, #220]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4934      	ldr	r1, [pc, #208]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	4313      	orrs	r3, r2
 800278e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002790:	f7fe feb2 	bl	80014f8 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7fe feae 	bl	80014f8 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e04f      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 020c 	and.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1eb      	bne.n	8002798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d20c      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e032      	b.n	800284e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4916      	ldr	r1, [pc, #88]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	490e      	ldr	r1, [pc, #56]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002826:	f000 f821 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800282a:	4602      	mov	r2, r0
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	490a      	ldr	r1, [pc, #40]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	5ccb      	ldrb	r3, [r1, r3]
 800283a:	fa22 f303 	lsr.w	r3, r2, r3
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fe12 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023c00 	.word	0x40023c00
 800285c:	40023800 	.word	0x40023800
 8002860:	08008094 	.word	0x08008094
 8002864:	20000060 	.word	0x20000060
 8002868:	20000064 	.word	0x20000064

0800286c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800286c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002870:	b094      	sub	sp, #80	; 0x50
 8002872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	647b      	str	r3, [r7, #68]	; 0x44
 8002878:	2300      	movs	r3, #0
 800287a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800287c:	2300      	movs	r3, #0
 800287e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002884:	4b79      	ldr	r3, [pc, #484]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d00d      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x40>
 8002890:	2b08      	cmp	r3, #8
 8002892:	f200 80e1 	bhi.w	8002a58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x34>
 800289a:	2b04      	cmp	r3, #4
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800289e:	e0db      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b73      	ldr	r3, [pc, #460]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x204>)
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028a4:	e0db      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a6:	4b73      	ldr	r3, [pc, #460]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x208>)
 80028a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028aa:	e0d8      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ac:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b6:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d063      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	2200      	movs	r2, #0
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80028cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
 80028da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028de:	4622      	mov	r2, r4
 80028e0:	462b      	mov	r3, r5
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	0159      	lsls	r1, r3, #5
 80028ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f0:	0150      	lsls	r0, r2, #5
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4621      	mov	r1, r4
 80028f8:	1a51      	subs	r1, r2, r1
 80028fa:	6139      	str	r1, [r7, #16]
 80028fc:	4629      	mov	r1, r5
 80028fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002910:	4659      	mov	r1, fp
 8002912:	018b      	lsls	r3, r1, #6
 8002914:	4651      	mov	r1, sl
 8002916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800291a:	4651      	mov	r1, sl
 800291c:	018a      	lsls	r2, r1, #6
 800291e:	4651      	mov	r1, sl
 8002920:	ebb2 0801 	subs.w	r8, r2, r1
 8002924:	4659      	mov	r1, fp
 8002926:	eb63 0901 	sbc.w	r9, r3, r1
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800293a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800293e:	4690      	mov	r8, r2
 8002940:	4699      	mov	r9, r3
 8002942:	4623      	mov	r3, r4
 8002944:	eb18 0303 	adds.w	r3, r8, r3
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	462b      	mov	r3, r5
 800294c:	eb49 0303 	adc.w	r3, r9, r3
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800295e:	4629      	mov	r1, r5
 8002960:	024b      	lsls	r3, r1, #9
 8002962:	4621      	mov	r1, r4
 8002964:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002968:	4621      	mov	r1, r4
 800296a:	024a      	lsls	r2, r1, #9
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002972:	2200      	movs	r2, #0
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
 8002976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002978:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800297c:	f7fd fc80 	bl	8000280 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4613      	mov	r3, r2
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002988:	e058      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	2200      	movs	r2, #0
 8002992:	4618      	mov	r0, r3
 8002994:	4611      	mov	r1, r2
 8002996:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
 80029a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029a4:	4642      	mov	r2, r8
 80029a6:	464b      	mov	r3, r9
 80029a8:	f04f 0000 	mov.w	r0, #0
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	0159      	lsls	r1, r3, #5
 80029b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b6:	0150      	lsls	r0, r2, #5
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4641      	mov	r1, r8
 80029be:	ebb2 0a01 	subs.w	sl, r2, r1
 80029c2:	4649      	mov	r1, r9
 80029c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029dc:	ebb2 040a 	subs.w	r4, r2, sl
 80029e0:	eb63 050b 	sbc.w	r5, r3, fp
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	00eb      	lsls	r3, r5, #3
 80029ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f2:	00e2      	lsls	r2, r4, #3
 80029f4:	4614      	mov	r4, r2
 80029f6:	461d      	mov	r5, r3
 80029f8:	4643      	mov	r3, r8
 80029fa:	18e3      	adds	r3, r4, r3
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	464b      	mov	r3, r9
 8002a00:	eb45 0303 	adc.w	r3, r5, r3
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a12:	4629      	mov	r1, r5
 8002a14:	028b      	lsls	r3, r1, #10
 8002a16:	4621      	mov	r1, r4
 8002a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	028a      	lsls	r2, r1, #10
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a26:	2200      	movs	r2, #0
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	61fa      	str	r2, [r7, #28]
 8002a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a30:	f7fd fc26 	bl	8000280 <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4613      	mov	r3, r2
 8002a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	3301      	adds	r3, #1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3750      	adds	r7, #80	; 0x50
 8002a64:	46bd      	mov	sp, r7
 8002a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	007a1200 	.word	0x007a1200

08002a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000060 	.word	0x20000060

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff0 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a9b      	lsrs	r3, r3, #10
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	080080a4 	.word	0x080080a4

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffdc 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0b5b      	lsrs	r3, r3, #13
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	080080a4 	.word	0x080080a4

08002ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e056      	b.n	8002ba0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7fd ffab 	bl	8000a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	ea42 0103 	orr.w	r1, r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	f003 0104 	and.w	r1, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	; 0x30
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_SPI_TransmitReceive+0x26>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e18a      	b.n	8002ee4 <HAL_SPI_TransmitReceive+0x33c>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd6:	f7fe fc8f 	bl	80014f8 <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002bec:	887b      	ldrh	r3, [r7, #2]
 8002bee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d00f      	beq.n	8002c18 <HAL_SPI_TransmitReceive+0x70>
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bfe:	d107      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d103      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x68>
 8002c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d003      	beq.n	8002c18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
 8002c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c16:	e15b      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_SPI_TransmitReceive+0x82>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_SPI_TransmitReceive+0x82>
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c30:	e14e      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d003      	beq.n	8002c46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2205      	movs	r2, #5
 8002c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	887a      	ldrh	r2, [r7, #2]
 8002c56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	887a      	ldrh	r2, [r7, #2]
 8002c6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d007      	beq.n	8002c9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca2:	d178      	bne.n	8002d96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_SPI_TransmitReceive+0x10a>
 8002cac:	8b7b      	ldrh	r3, [r7, #26]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d166      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	881a      	ldrh	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	1c9a      	adds	r2, r3, #2
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cd6:	e053      	b.n	8002d80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d11b      	bne.n	8002d1e <HAL_SPI_TransmitReceive+0x176>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d016      	beq.n	8002d1e <HAL_SPI_TransmitReceive+0x176>
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d113      	bne.n	8002d1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	1c9a      	adds	r2, r3, #2
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d119      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x1b8>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d014      	beq.n	8002d60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	b292      	uxth	r2, r2
 8002d42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	1c9a      	adds	r2, r3, #2
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d60:	f7fe fbca 	bl	80014f8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d807      	bhi.n	8002d80 <HAL_SPI_TransmitReceive+0x1d8>
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d003      	beq.n	8002d80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d7e:	e0a7      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1a6      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x130>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1a1      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x130>
 8002d94:	e07c      	b.n	8002e90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_TransmitReceive+0x1fc>
 8002d9e:	8b7b      	ldrh	r3, [r7, #26]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d16b      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	7812      	ldrb	r2, [r2, #0]
 8002db0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dca:	e057      	b.n	8002e7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d11c      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x26c>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d017      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x26c>
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d114      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d119      	bne.n	8002e56 <HAL_SPI_TransmitReceive+0x2ae>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d014      	beq.n	8002e56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e52:	2301      	movs	r3, #1
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e56:	f7fe fb4f 	bl	80014f8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d803      	bhi.n	8002e6e <HAL_SPI_TransmitReceive+0x2c6>
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d102      	bne.n	8002e74 <HAL_SPI_TransmitReceive+0x2cc>
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d103      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e7a:	e029      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1a2      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x224>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d19d      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f893 	bl	8002fc0 <SPI_EndRxTxTransaction>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d006      	beq.n	8002eae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002eac:	e010      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10b      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	e000      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ece:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3730      	adds	r7, #48	; 0x30
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002efc:	e04c      	b.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d048      	beq.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f06:	f7fe faf7 	bl	80014f8 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d902      	bls.n	8002f1c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d13d      	bne.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f34:	d111      	bne.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f3e:	d004      	beq.n	8002f4a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f48:	d107      	bne.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	d10f      	bne.n	8002f84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e00f      	b.n	8002fb8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d1a3      	bne.n	8002efe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <SPI_EndRxTxTransaction+0x7c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <SPI_EndRxTxTransaction+0x80>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	0d5b      	lsrs	r3, r3, #21
 8002fd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fea:	d112      	bne.n	8003012 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff ff78 	bl	8002eec <SPI_WaitFlagStateUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e00f      	b.n	8003032 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3b01      	subs	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	2b80      	cmp	r3, #128	; 0x80
 800302a:	d0f2      	beq.n	8003012 <SPI_EndRxTxTransaction+0x52>
 800302c:	e000      	b.n	8003030 <SPI_EndRxTxTransaction+0x70>
        break;
 800302e:	bf00      	nop
  }

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000060 	.word	0x20000060
 8003040:	165e9f81 	.word	0x165e9f81

08003044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e01d      	b.n	8003092 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd ffec 	bl	8001048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f000 fbde 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b06      	cmp	r3, #6
 80030ba:	d007      	beq.n	80030cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e01d      	b.n	8003130 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fd ffef 	bl	80010ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f000 fb8f 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2201      	movs	r2, #1
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fe64 	bl	8003e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <HAL_TIM_PWM_Start+0x74>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_PWM_Start+0x2c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_TIM_PWM_Start+0x78>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_TIM_PWM_Start+0x30>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_TIM_PWM_Start+0x32>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b06      	cmp	r3, #6
 800318e:	d007      	beq.n	80031a0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40010400 	.word	0x40010400

080031b4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d841      	bhi.n	8003248 <HAL_TIM_PWM_Start_IT+0x94>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_TIM_PWM_Start_IT+0x18>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003249 	.word	0x08003249
 80031d4:	08003249 	.word	0x08003249
 80031d8:	08003249 	.word	0x08003249
 80031dc:	08003213 	.word	0x08003213
 80031e0:	08003249 	.word	0x08003249
 80031e4:	08003249 	.word	0x08003249
 80031e8:	08003249 	.word	0x08003249
 80031ec:	08003225 	.word	0x08003225
 80031f0:	08003249 	.word	0x08003249
 80031f4:	08003249 	.word	0x08003249
 80031f8:	08003249 	.word	0x08003249
 80031fc:	08003237 	.word	0x08003237
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0202 	orr.w	r2, r2, #2
 800320e:	60da      	str	r2, [r3, #12]
      break;
 8003210:	e01b      	b.n	800324a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0204 	orr.w	r2, r2, #4
 8003220:	60da      	str	r2, [r3, #12]
      break;
 8003222:	e012      	b.n	800324a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0208 	orr.w	r2, r2, #8
 8003232:	60da      	str	r2, [r3, #12]
      break;
 8003234:	e009      	b.n	800324a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0210 	orr.w	r2, r2, #16
 8003244:	60da      	str	r2, [r3, #12]
      break;
 8003246:	e000      	b.n	800324a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003248:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2201      	movs	r2, #1
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fde0 	bl	8003e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <HAL_TIM_PWM_Start_IT+0x100>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d004      	beq.n	800326c <HAL_TIM_PWM_Start_IT+0xb8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <HAL_TIM_PWM_Start_IT+0x104>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <HAL_TIM_PWM_Start_IT+0xbc>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_TIM_PWM_Start_IT+0xbe>
 8003270:	2300      	movs	r3, #0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b06      	cmp	r3, #6
 8003296:	d007      	beq.n	80032a8 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40010000 	.word	0x40010000
 80032b8:	40010400 	.word	0x40010400

080032bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d122      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d11b      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0202 	mvn.w	r2, #2
 80032e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa82 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa74 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fa85 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d122      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b04      	cmp	r3, #4
 8003332:	d11b      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0204 	mvn.w	r2, #4
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa58 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa4a 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fa5b 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b08      	cmp	r3, #8
 8003378:	d122      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d11b      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0208 	mvn.w	r2, #8
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa2e 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa20 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa31 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0210 	mvn.w	r2, #16
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2208      	movs	r2, #8
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa04 	bl	8003808 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f9f6 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa07 	bl	800381c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0201 	mvn.w	r2, #1
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9d0 	bl	80037e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fd82 	bl	8003f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d10e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d107      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9cc 	bl	8003830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d10e      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d107      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0220 	mvn.w	r2, #32
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fd4c 	bl	8003f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e0b4      	b.n	8003650 <HAL_TIM_PWM_ConfigChannel+0x184>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2202      	movs	r2, #2
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	f200 809f 	bhi.w	800363c <HAL_TIM_PWM_ConfigChannel+0x170>
 80034fe:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003539 	.word	0x08003539
 8003508:	0800363d 	.word	0x0800363d
 800350c:	0800363d 	.word	0x0800363d
 8003510:	0800363d 	.word	0x0800363d
 8003514:	08003579 	.word	0x08003579
 8003518:	0800363d 	.word	0x0800363d
 800351c:	0800363d 	.word	0x0800363d
 8003520:	0800363d 	.word	0x0800363d
 8003524:	080035bb 	.word	0x080035bb
 8003528:	0800363d 	.word	0x0800363d
 800352c:	0800363d 	.word	0x0800363d
 8003530:	0800363d 	.word	0x0800363d
 8003534:	080035fb 	.word	0x080035fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fa20 	bl	8003984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0208 	orr.w	r2, r2, #8
 8003552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6999      	ldr	r1, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	619a      	str	r2, [r3, #24]
      break;
 8003576:	e062      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fa70 	bl	8003a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6999      	ldr	r1, [r3, #24]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	021a      	lsls	r2, r3, #8
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	619a      	str	r2, [r3, #24]
      break;
 80035b8:	e041      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fac5 	bl	8003b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0208 	orr.w	r2, r2, #8
 80035d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0204 	bic.w	r2, r2, #4
 80035e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69d9      	ldr	r1, [r3, #28]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	61da      	str	r2, [r3, #28]
      break;
 80035f8:	e021      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fb19 	bl	8003c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69d9      	ldr	r1, [r3, #28]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	021a      	lsls	r2, r3, #8
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	61da      	str	r2, [r3, #28]
      break;
 800363a:	e000      	b.n	800363e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800363c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_TIM_ConfigClockSource+0x18>
 800366c:	2302      	movs	r3, #2
 800366e:	e0b3      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x180>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800368e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003696:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a8:	d03e      	beq.n	8003728 <HAL_TIM_ConfigClockSource+0xd0>
 80036aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ae:	f200 8087 	bhi.w	80037c0 <HAL_TIM_ConfigClockSource+0x168>
 80036b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b6:	f000 8085 	beq.w	80037c4 <HAL_TIM_ConfigClockSource+0x16c>
 80036ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036be:	d87f      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x168>
 80036c0:	2b70      	cmp	r3, #112	; 0x70
 80036c2:	d01a      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0xa2>
 80036c4:	2b70      	cmp	r3, #112	; 0x70
 80036c6:	d87b      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x168>
 80036c8:	2b60      	cmp	r3, #96	; 0x60
 80036ca:	d050      	beq.n	800376e <HAL_TIM_ConfigClockSource+0x116>
 80036cc:	2b60      	cmp	r3, #96	; 0x60
 80036ce:	d877      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x168>
 80036d0:	2b50      	cmp	r3, #80	; 0x50
 80036d2:	d03c      	beq.n	800374e <HAL_TIM_ConfigClockSource+0xf6>
 80036d4:	2b50      	cmp	r3, #80	; 0x50
 80036d6:	d873      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x168>
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d058      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x136>
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d86f      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x168>
 80036e0:	2b30      	cmp	r3, #48	; 0x30
 80036e2:	d064      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x156>
 80036e4:	2b30      	cmp	r3, #48	; 0x30
 80036e6:	d86b      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x168>
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d060      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x156>
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d867      	bhi.n	80037c0 <HAL_TIM_ConfigClockSource+0x168>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05c      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x156>
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d05a      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80036f8:	e062      	b.n	80037c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f000 fb65 	bl	8003dd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800371c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	609a      	str	r2, [r3, #8]
      break;
 8003726:	e04e      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6899      	ldr	r1, [r3, #8]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f000 fb4e 	bl	8003dd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800374a:	609a      	str	r2, [r3, #8]
      break;
 800374c:	e03b      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	461a      	mov	r2, r3
 800375c:	f000 fac2 	bl	8003ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2150      	movs	r1, #80	; 0x50
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fb1b 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 800376c:	e02b      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	f000 fae1 	bl	8003d42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2160      	movs	r1, #96	; 0x60
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fb0b 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 800378c:	e01b      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f000 faa2 	bl	8003ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2140      	movs	r1, #64	; 0x40
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fafb 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e00b      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f000 faf2 	bl	8003da2 <TIM_ITRx_SetConfig>
      break;
 80037be:	e002      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037c0:	bf00      	nop
 80037c2:	e000      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a40      	ldr	r2, [pc, #256]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3d      	ldr	r2, [pc, #244]	; (800395c <TIM_Base_SetConfig+0x118>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <TIM_Base_SetConfig+0x120>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3a      	ldr	r2, [pc, #232]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <TIM_Base_SetConfig+0x114>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d027      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <TIM_Base_SetConfig+0x118>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d023      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <TIM_Base_SetConfig+0x11c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <TIM_Base_SetConfig+0x120>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <TIM_Base_SetConfig+0x124>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a28      	ldr	r2, [pc, #160]	; (800396c <TIM_Base_SetConfig+0x128>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <TIM_Base_SetConfig+0x12c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <TIM_Base_SetConfig+0x130>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a25      	ldr	r2, [pc, #148]	; (8003978 <TIM_Base_SetConfig+0x134>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a24      	ldr	r2, [pc, #144]	; (800397c <TIM_Base_SetConfig+0x138>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <TIM_Base_SetConfig+0x13c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <TIM_Base_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40010400 	.word	0x40010400
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	40001800 	.word	0x40001800
 800397c:	40001c00 	.word	0x40001c00
 8003980:	40002000 	.word	0x40002000

08003984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 0302 	bic.w	r3, r3, #2
 80039cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a20      	ldr	r2, [pc, #128]	; (8003a5c <TIM_OC1_SetConfig+0xd8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_OC1_SetConfig+0x64>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <TIM_OC1_SetConfig+0xdc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d10c      	bne.n	8003a02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 0308 	bic.w	r3, r3, #8
 80039ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <TIM_OC1_SetConfig+0xd8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_OC1_SetConfig+0x8e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <TIM_OC1_SetConfig+0xdc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d111      	bne.n	8003a36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010400 	.word	0x40010400

08003a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0210 	bic.w	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0320 	bic.w	r3, r3, #32
 8003aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <TIM_OC2_SetConfig+0xe4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_OC2_SetConfig+0x68>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <TIM_OC2_SetConfig+0xe8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10d      	bne.n	8003ae8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <TIM_OC2_SetConfig+0xe4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_OC2_SetConfig+0x94>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <TIM_OC2_SetConfig+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d113      	bne.n	8003b20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40010400 	.word	0x40010400

08003b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <TIM_OC3_SetConfig+0xe0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <TIM_OC3_SetConfig+0x66>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <TIM_OC3_SetConfig+0xe4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10d      	bne.n	8003bd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <TIM_OC3_SetConfig+0xe0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_OC3_SetConfig+0x92>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <TIM_OC3_SetConfig+0xe4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d113      	bne.n	8003c0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	621a      	str	r2, [r3, #32]
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40010400 	.word	0x40010400

08003c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	031b      	lsls	r3, r3, #12
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <TIM_OC4_SetConfig+0xa4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_OC4_SetConfig+0x68>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a11      	ldr	r2, [pc, #68]	; (8003ce0 <TIM_OC4_SetConfig+0xa8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d109      	bne.n	8003cb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f023 030a 	bic.w	r3, r3, #10
 8003d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b087      	sub	sp, #28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f023 0210 	bic.w	r2, r3, #16
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	031b      	lsls	r3, r3, #12
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f043 0307 	orr.w	r3, r3, #7
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	021a      	lsls	r2, r3, #8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e05a      	b.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d022      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d01d      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d018      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10c      	bne.n	8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e03f      	b.n	8004016 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd f926 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	; 0x24
 8003fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fba1 	bl	8004710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b088      	sub	sp, #32
 8004022:	af02      	add	r7, sp, #8
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	f040 8083 	bne.w	8004146 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_UART_Transmit+0x2e>
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e07b      	b.n	8004148 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_UART_Transmit+0x40>
 800405a:	2302      	movs	r3, #2
 800405c:	e074      	b.n	8004148 <HAL_UART_Transmit+0x12a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2221      	movs	r2, #33	; 0x21
 8004070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004074:	f7fd fa40 	bl	80014f8 <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800408e:	e042      	b.n	8004116 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d122      	bne.n	80040ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2200      	movs	r2, #0
 80040b0:	2180      	movs	r1, #128	; 0x80
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f9c0 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e042      	b.n	8004148 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3302      	adds	r3, #2
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	e017      	b.n	8004116 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	3301      	adds	r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	e013      	b.n	8004116 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f99d 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e01f      	b.n	8004148 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	60ba      	str	r2, [r7, #8]
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1b7      	bne.n	8004090 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2200      	movs	r2, #0
 8004128:	2140      	movs	r1, #64	; 0x40
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f984 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e006      	b.n	8004148 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	d140      	bne.n	80041ec <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_UART_Receive_IT+0x26>
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e039      	b.n	80041ee <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_UART_Receive_IT+0x38>
 8004184:	2302      	movs	r3, #2
 8004186:	e032      	b.n	80041ee <HAL_UART_Receive_IT+0x9e>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2222      	movs	r2, #34	; 0x22
 80041ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0220 	orr.w	r2, r2, #32
 80041e6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	e000      	b.n	80041ee <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_UART_IRQHandler+0x52>
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f9e0 	bl	800460c <UART_Receive_IT>
      return;
 800424c:	e0d0      	b.n	80043f0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80b0 	beq.w	80043b6 <HAL_UART_IRQHandler+0x1ba>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_UART_IRQHandler+0x70>
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80a5 	beq.w	80043b6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_UART_IRQHandler+0x90>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	f043 0201 	orr.w	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_UART_IRQHandler+0xb0>
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	f043 0202 	orr.w	r2, r3, #2
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_UART_IRQHandler+0xd0>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c4:	f043 0204 	orr.w	r2, r3, #4
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00f      	beq.n	80042f6 <HAL_UART_IRQHandler+0xfa>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_UART_IRQHandler+0xee>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	f043 0208 	orr.w	r2, r3, #8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d077      	beq.n	80043ee <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <HAL_UART_IRQHandler+0x11c>
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f97a 	bl	800460c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <HAL_UART_IRQHandler+0x144>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d031      	beq.n	80043a4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f8c3 	bl	80044cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d123      	bne.n	800439c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004362:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004370:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <HAL_UART_IRQHandler+0x1fc>)
 8004372:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd fae1 	bl	8001940 <HAL_DMA_Abort_IT>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d016      	beq.n	80043b2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438e:	4610      	mov	r0, r2
 8004390:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004392:	e00e      	b.n	80043b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f845 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439a:	e00a      	b.n	80043b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f841 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a2:	e006      	b.n	80043b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f83d 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80043b0:	e01d      	b.n	80043ee <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b2:	bf00      	nop
    return;
 80043b4:	e01b      	b.n	80043ee <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_UART_IRQHandler+0x1d6>
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8b0 	bl	8004530 <UART_Transmit_IT>
    return;
 80043d0:	e00e      	b.n	80043f0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d009      	beq.n	80043f0 <HAL_UART_IRQHandler+0x1f4>
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8f8 	bl	80045dc <UART_EndTransmit_IT>
    return;
 80043ec:	e000      	b.n	80043f0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80043ee:	bf00      	nop
  }
}
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	08004509 	.word	0x08004509

080043fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004448:	e02c      	b.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004450:	d028      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0x30>
 8004458:	f7fd f84e 	bl	80014f8 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	429a      	cmp	r2, r3
 8004466:	d21d      	bcs.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004476:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e00f      	b.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d0c3      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff ff7e 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b21      	cmp	r3, #33	; 0x21
 8004542:	d144      	bne.n	80045ce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d11a      	bne.n	8004584 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004562:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	1c9a      	adds	r2, r3, #2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	621a      	str	r2, [r3, #32]
 8004576:	e00e      	b.n	8004596 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]
 8004582:	e008      	b.n	8004596 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	1c59      	adds	r1, r3, #1
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6211      	str	r1, [r2, #32]
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29b      	uxth	r3, r3
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	4619      	mov	r1, r3
 80045a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e000      	b.n	80045d0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045ce:	2302      	movs	r3, #2
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fefd 	bl	80043fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b22      	cmp	r3, #34	; 0x22
 800461e:	d171      	bne.n	8004704 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004628:	d123      	bne.n	8004672 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10e      	bne.n	8004656 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	1c9a      	adds	r2, r3, #2
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	629a      	str	r2, [r3, #40]	; 0x28
 8004654:	e029      	b.n	80046aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	b29b      	uxth	r3, r3
 800465e:	b2db      	uxtb	r3, r3
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	; 0x28
 8004670:	e01b      	b.n	80046aa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6858      	ldr	r0, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6291      	str	r1, [r2, #40]	; 0x28
 800468a:	b2c2      	uxtb	r2, r0
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e00c      	b.n	80046aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	1c58      	adds	r0, r3, #1
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	6288      	str	r0, [r1, #40]	; 0x28
 80046a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	4619      	mov	r1, r3
 80046b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d120      	bne.n	8004700 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0220 	bic.w	r2, r2, #32
 80046cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff fe8a 	bl	8004410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e002      	b.n	8004706 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004718:	af00      	add	r7, sp, #0
 800471a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800471e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800472a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800472e:	68d9      	ldr	r1, [r3, #12]
 8004730:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	ea40 0301 	orr.w	r3, r0, r1
 800473a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800473c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	431a      	orrs	r2, r3
 800474a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	431a      	orrs	r2, r3
 8004752:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800475e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800476a:	f021 010c 	bic.w	r1, r1, #12
 800476e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004778:	430b      	orrs	r3, r1
 800477a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800477c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004788:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800478c:	6999      	ldr	r1, [r3, #24]
 800478e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	ea40 0301 	orr.w	r3, r0, r1
 8004798:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a4:	f040 824a 	bne.w	8004c3c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b96      	ldr	r3, [pc, #600]	; (8004a08 <UART_SetConfig+0x2f8>)
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d006      	beq.n	80047c2 <UART_SetConfig+0xb2>
 80047b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b94      	ldr	r3, [pc, #592]	; (8004a0c <UART_SetConfig+0x2fc>)
 80047bc:	429a      	cmp	r2, r3
 80047be:	f040 8129 	bne.w	8004a14 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047c2:	f7fe f979 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 80047c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80047d4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80047d8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80047dc:	4622      	mov	r2, r4
 80047de:	462b      	mov	r3, r5
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80047e6:	415b      	adcs	r3, r3
 80047e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047ec:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80047f0:	4621      	mov	r1, r4
 80047f2:	1851      	adds	r1, r2, r1
 80047f4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80047f8:	4629      	mov	r1, r5
 80047fa:	414b      	adcs	r3, r1
 80047fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800480c:	4649      	mov	r1, r9
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	4641      	mov	r1, r8
 8004812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004816:	4641      	mov	r1, r8
 8004818:	00ca      	lsls	r2, r1, #3
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	4603      	mov	r3, r0
 8004820:	4622      	mov	r2, r4
 8004822:	189b      	adds	r3, r3, r2
 8004824:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004828:	462b      	mov	r3, r5
 800482a:	460a      	mov	r2, r1
 800482c:	eb42 0303 	adc.w	r3, r2, r3
 8004830:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004834:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004840:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004844:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004848:	460b      	mov	r3, r1
 800484a:	18db      	adds	r3, r3, r3
 800484c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004850:	4613      	mov	r3, r2
 8004852:	eb42 0303 	adc.w	r3, r2, r3
 8004856:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800485a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800485e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004862:	f7fb fd0d 	bl	8000280 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b69      	ldr	r3, [pc, #420]	; (8004a10 <UART_SetConfig+0x300>)
 800486c:	fba3 2302 	umull	r2, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	011c      	lsls	r4, r3, #4
 8004874:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004878:	2200      	movs	r2, #0
 800487a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800487e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004882:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004886:	4642      	mov	r2, r8
 8004888:	464b      	mov	r3, r9
 800488a:	1891      	adds	r1, r2, r2
 800488c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004890:	415b      	adcs	r3, r3
 8004892:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004896:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800489a:	4641      	mov	r1, r8
 800489c:	1851      	adds	r1, r2, r1
 800489e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80048a2:	4649      	mov	r1, r9
 80048a4:	414b      	adcs	r3, r1
 80048a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80048b6:	4659      	mov	r1, fp
 80048b8:	00cb      	lsls	r3, r1, #3
 80048ba:	4651      	mov	r1, sl
 80048bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c0:	4651      	mov	r1, sl
 80048c2:	00ca      	lsls	r2, r1, #3
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	4603      	mov	r3, r0
 80048ca:	4642      	mov	r2, r8
 80048cc:	189b      	adds	r3, r3, r2
 80048ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80048d2:	464b      	mov	r3, r9
 80048d4:	460a      	mov	r2, r1
 80048d6:	eb42 0303 	adc.w	r3, r2, r3
 80048da:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80048de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80048ea:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80048ee:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80048f2:	460b      	mov	r3, r1
 80048f4:	18db      	adds	r3, r3, r3
 80048f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048fa:	4613      	mov	r3, r2
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004904:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004908:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800490c:	f7fb fcb8 	bl	8000280 <__aeabi_uldivmod>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4611      	mov	r1, r2
 8004916:	4b3e      	ldr	r3, [pc, #248]	; (8004a10 <UART_SetConfig+0x300>)
 8004918:	fba3 2301 	umull	r2, r3, r3, r1
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	2264      	movs	r2, #100	; 0x64
 8004920:	fb02 f303 	mul.w	r3, r2, r3
 8004924:	1acb      	subs	r3, r1, r3
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800492c:	4b38      	ldr	r3, [pc, #224]	; (8004a10 <UART_SetConfig+0x300>)
 800492e:	fba3 2302 	umull	r2, r3, r3, r2
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800493a:	441c      	add	r4, r3
 800493c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004940:	2200      	movs	r2, #0
 8004942:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004946:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800494a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800494e:	4642      	mov	r2, r8
 8004950:	464b      	mov	r3, r9
 8004952:	1891      	adds	r1, r2, r2
 8004954:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004958:	415b      	adcs	r3, r3
 800495a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800495e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004962:	4641      	mov	r1, r8
 8004964:	1851      	adds	r1, r2, r1
 8004966:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800496a:	4649      	mov	r1, r9
 800496c:	414b      	adcs	r3, r1
 800496e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800497e:	4659      	mov	r1, fp
 8004980:	00cb      	lsls	r3, r1, #3
 8004982:	4651      	mov	r1, sl
 8004984:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004988:	4651      	mov	r1, sl
 800498a:	00ca      	lsls	r2, r1, #3
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	4603      	mov	r3, r0
 8004992:	4642      	mov	r2, r8
 8004994:	189b      	adds	r3, r3, r2
 8004996:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800499a:	464b      	mov	r3, r9
 800499c:	460a      	mov	r2, r1
 800499e:	eb42 0303 	adc.w	r3, r2, r3
 80049a2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80049a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80049b2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80049b6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80049ba:	460b      	mov	r3, r1
 80049bc:	18db      	adds	r3, r3, r3
 80049be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049c2:	4613      	mov	r3, r2
 80049c4:	eb42 0303 	adc.w	r3, r2, r3
 80049c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049cc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80049d0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80049d4:	f7fb fc54 	bl	8000280 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <UART_SetConfig+0x300>)
 80049de:	fba3 1302 	umull	r1, r3, r3, r2
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	2164      	movs	r1, #100	; 0x64
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	3332      	adds	r3, #50	; 0x32
 80049f0:	4a07      	ldr	r2, [pc, #28]	; (8004a10 <UART_SetConfig+0x300>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	f003 0207 	and.w	r2, r3, #7
 80049fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4422      	add	r2, r4
 8004a04:	609a      	str	r2, [r3, #8]
 8004a06:	e349      	b.n	800509c <UART_SetConfig+0x98c>
 8004a08:	40011000 	.word	0x40011000
 8004a0c:	40011400 	.word	0x40011400
 8004a10:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a14:	f7fe f83c 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8004a18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004a26:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004a2a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004a2e:	4622      	mov	r2, r4
 8004a30:	462b      	mov	r3, r5
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004a38:	415b      	adcs	r3, r3
 8004a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a3e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004a42:	4621      	mov	r1, r4
 8004a44:	eb12 0a01 	adds.w	sl, r2, r1
 8004a48:	4629      	mov	r1, r5
 8004a4a:	eb43 0b01 	adc.w	fp, r3, r1
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a5a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a62:	4692      	mov	sl, r2
 8004a64:	469b      	mov	fp, r3
 8004a66:	4623      	mov	r3, r4
 8004a68:	eb1a 0303 	adds.w	r3, sl, r3
 8004a6c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a70:	462b      	mov	r3, r5
 8004a72:	eb4b 0303 	adc.w	r3, fp, r3
 8004a76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004a86:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004a8a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004a8e:	460b      	mov	r3, r1
 8004a90:	18db      	adds	r3, r3, r3
 8004a92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a96:	4613      	mov	r3, r2
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aa0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004aa4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004aa8:	f7fb fbea 	bl	8000280 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4b61      	ldr	r3, [pc, #388]	; (8004c38 <UART_SetConfig+0x528>)
 8004ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	011c      	lsls	r4, r3, #4
 8004aba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004ac4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004ac8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	67b9      	str	r1, [r7, #120]	; 0x78
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ad8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004adc:	4641      	mov	r1, r8
 8004ade:	1851      	adds	r1, r2, r1
 8004ae0:	6739      	str	r1, [r7, #112]	; 0x70
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	414b      	adcs	r3, r1
 8004ae6:	677b      	str	r3, [r7, #116]	; 0x74
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004af4:	4659      	mov	r1, fp
 8004af6:	00cb      	lsls	r3, r1, #3
 8004af8:	4651      	mov	r1, sl
 8004afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afe:	4651      	mov	r1, sl
 8004b00:	00ca      	lsls	r2, r1, #3
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004b10:	464b      	mov	r3, r9
 8004b12:	460a      	mov	r2, r1
 8004b14:	eb42 0303 	adc.w	r3, r2, r3
 8004b18:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004b1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b28:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004b2c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004b30:	460b      	mov	r3, r1
 8004b32:	18db      	adds	r3, r3, r3
 8004b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b36:	4613      	mov	r3, r2
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004b42:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004b46:	f7fb fb9b 	bl	8000280 <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <UART_SetConfig+0x528>)
 8004b52:	fba3 2301 	umull	r2, r3, r3, r1
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2264      	movs	r2, #100	; 0x64
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	1acb      	subs	r3, r1, r3
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b66:	4b34      	ldr	r3, [pc, #208]	; (8004c38 <UART_SetConfig+0x528>)
 8004b68:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b74:	441c      	add	r4, r3
 8004b76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004b80:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004b84:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004b88:	4642      	mov	r2, r8
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	1891      	adds	r1, r2, r2
 8004b8e:	6639      	str	r1, [r7, #96]	; 0x60
 8004b90:	415b      	adcs	r3, r3
 8004b92:	667b      	str	r3, [r7, #100]	; 0x64
 8004b94:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004b98:	4641      	mov	r1, r8
 8004b9a:	1851      	adds	r1, r2, r1
 8004b9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	414b      	adcs	r3, r1
 8004ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004bb0:	4659      	mov	r1, fp
 8004bb2:	00cb      	lsls	r3, r1, #3
 8004bb4:	4651      	mov	r1, sl
 8004bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bba:	4651      	mov	r1, sl
 8004bbc:	00ca      	lsls	r2, r1, #3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004bcc:	464b      	mov	r3, r9
 8004bce:	460a      	mov	r2, r1
 8004bd0:	eb42 0303 	adc.w	r3, r2, r3
 8004bd4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004bd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004be4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004be8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004bec:	460b      	mov	r3, r1
 8004bee:	18db      	adds	r3, r3, r3
 8004bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	eb42 0303 	adc.w	r3, r2, r3
 8004bf8:	657b      	str	r3, [r7, #84]	; 0x54
 8004bfa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bfe:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004c02:	f7fb fb3d 	bl	8000280 <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <UART_SetConfig+0x528>)
 8004c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	2164      	movs	r1, #100	; 0x64
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	3332      	adds	r3, #50	; 0x32
 8004c1e:	4a06      	ldr	r2, [pc, #24]	; (8004c38 <UART_SetConfig+0x528>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 0207 	and.w	r2, r3, #7
 8004c2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4422      	add	r2, r4
 8004c32:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004c34:	e232      	b.n	800509c <UART_SetConfig+0x98c>
 8004c36:	bf00      	nop
 8004c38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b8d      	ldr	r3, [pc, #564]	; (8004e78 <UART_SetConfig+0x768>)
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d006      	beq.n	8004c56 <UART_SetConfig+0x546>
 8004c48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b8b      	ldr	r3, [pc, #556]	; (8004e7c <UART_SetConfig+0x76c>)
 8004c50:	429a      	cmp	r2, r3
 8004c52:	f040 8117 	bne.w	8004e84 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c56:	f7fd ff2f 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8004c5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004c68:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004c6c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	1891      	adds	r1, r2, r2
 8004c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c78:	415b      	adcs	r3, r3
 8004c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c80:	4621      	mov	r1, r4
 8004c82:	eb12 0801 	adds.w	r8, r2, r1
 8004c86:	4629      	mov	r1, r5
 8004c88:	eb43 0901 	adc.w	r9, r3, r1
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca0:	4690      	mov	r8, r2
 8004ca2:	4699      	mov	r9, r3
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	eb18 0303 	adds.w	r3, r8, r3
 8004caa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004cae:	462b      	mov	r3, r5
 8004cb0:	eb49 0303 	adc.w	r3, r9, r3
 8004cb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004cb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004cc4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	008b      	lsls	r3, r1, #2
 8004cd8:	4621      	mov	r1, r4
 8004cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cde:	4621      	mov	r1, r4
 8004ce0:	008a      	lsls	r2, r1, #2
 8004ce2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004ce6:	f7fb facb 	bl	8000280 <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4b64      	ldr	r3, [pc, #400]	; (8004e80 <UART_SetConfig+0x770>)
 8004cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	011c      	lsls	r4, r3, #4
 8004cf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004d02:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004d06:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	1891      	adds	r1, r2, r2
 8004d10:	6439      	str	r1, [r7, #64]	; 0x40
 8004d12:	415b      	adcs	r3, r3
 8004d14:	647b      	str	r3, [r7, #68]	; 0x44
 8004d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	1851      	adds	r1, r2, r1
 8004d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d20:	4649      	mov	r1, r9
 8004d22:	414b      	adcs	r3, r1
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004d32:	4659      	mov	r1, fp
 8004d34:	00cb      	lsls	r3, r1, #3
 8004d36:	4651      	mov	r1, sl
 8004d38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	00ca      	lsls	r2, r1, #3
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	4603      	mov	r3, r0
 8004d46:	4642      	mov	r2, r8
 8004d48:	189b      	adds	r3, r3, r2
 8004d4a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004d4e:	464b      	mov	r3, r9
 8004d50:	460a      	mov	r2, r1
 8004d52:	eb42 0303 	adc.w	r3, r2, r3
 8004d56:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004d5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004d66:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004d76:	4649      	mov	r1, r9
 8004d78:	008b      	lsls	r3, r1, #2
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d80:	4641      	mov	r1, r8
 8004d82:	008a      	lsls	r2, r1, #2
 8004d84:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004d88:	f7fb fa7a 	bl	8000280 <__aeabi_uldivmod>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <UART_SetConfig+0x770>)
 8004d92:	fba3 1302 	umull	r1, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2164      	movs	r1, #100	; 0x64
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	3332      	adds	r3, #50	; 0x32
 8004da4:	4a36      	ldr	r2, [pc, #216]	; (8004e80 <UART_SetConfig+0x770>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db0:	441c      	add	r4, r3
 8004db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004dbc:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004dc0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	1891      	adds	r1, r2, r2
 8004dca:	6339      	str	r1, [r7, #48]	; 0x30
 8004dcc:	415b      	adcs	r3, r3
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	1851      	adds	r1, r2, r1
 8004dd8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dda:	4649      	mov	r1, r9
 8004ddc:	414b      	adcs	r3, r1
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004dec:	4659      	mov	r1, fp
 8004dee:	00cb      	lsls	r3, r1, #3
 8004df0:	4651      	mov	r1, sl
 8004df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004df6:	4651      	mov	r1, sl
 8004df8:	00ca      	lsls	r2, r1, #3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4642      	mov	r2, r8
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e08:	464b      	mov	r3, r9
 8004e0a:	460a      	mov	r2, r1
 8004e0c:	eb42 0303 	adc.w	r3, r2, r3
 8004e10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e20:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004e30:	4649      	mov	r1, r9
 8004e32:	008b      	lsls	r3, r1, #2
 8004e34:	4641      	mov	r1, r8
 8004e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	008a      	lsls	r2, r1, #2
 8004e3e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004e42:	f7fb fa1d 	bl	8000280 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <UART_SetConfig+0x770>)
 8004e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	2164      	movs	r1, #100	; 0x64
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	3332      	adds	r3, #50	; 0x32
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <UART_SetConfig+0x770>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f003 020f 	and.w	r2, r3, #15
 8004e6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4422      	add	r2, r4
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	e112      	b.n	800509c <UART_SetConfig+0x98c>
 8004e76:	bf00      	nop
 8004e78:	40011000 	.word	0x40011000
 8004e7c:	40011400 	.word	0x40011400
 8004e80:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fd fe04 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8004e88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e96:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004e9a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	1891      	adds	r1, r2, r2
 8004ea4:	6239      	str	r1, [r7, #32]
 8004ea6:	415b      	adcs	r3, r3
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eae:	4641      	mov	r1, r8
 8004eb0:	1854      	adds	r4, r2, r1
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	eb43 0501 	adc.w	r5, r3, r1
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	00eb      	lsls	r3, r5, #3
 8004ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ec6:	00e2      	lsls	r2, r4, #3
 8004ec8:	4614      	mov	r4, r2
 8004eca:	461d      	mov	r5, r3
 8004ecc:	4643      	mov	r3, r8
 8004ece:	18e3      	adds	r3, r4, r3
 8004ed0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	eb45 0303 	adc.w	r3, r5, r3
 8004eda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ede:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004eea:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004efa:	4629      	mov	r1, r5
 8004efc:	008b      	lsls	r3, r1, #2
 8004efe:	4621      	mov	r1, r4
 8004f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f04:	4621      	mov	r1, r4
 8004f06:	008a      	lsls	r2, r1, #2
 8004f08:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004f0c:	f7fb f9b8 	bl	8000280 <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4b64      	ldr	r3, [pc, #400]	; (80050a8 <UART_SetConfig+0x998>)
 8004f16:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	011c      	lsls	r4, r3, #4
 8004f1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f28:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004f2c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004f30:	4642      	mov	r2, r8
 8004f32:	464b      	mov	r3, r9
 8004f34:	1891      	adds	r1, r2, r2
 8004f36:	61b9      	str	r1, [r7, #24]
 8004f38:	415b      	adcs	r3, r3
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f40:	4641      	mov	r1, r8
 8004f42:	1851      	adds	r1, r2, r1
 8004f44:	6139      	str	r1, [r7, #16]
 8004f46:	4649      	mov	r1, r9
 8004f48:	414b      	adcs	r3, r1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f58:	4659      	mov	r1, fp
 8004f5a:	00cb      	lsls	r3, r1, #3
 8004f5c:	4651      	mov	r1, sl
 8004f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f62:	4651      	mov	r1, sl
 8004f64:	00ca      	lsls	r2, r1, #3
 8004f66:	4610      	mov	r0, r2
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	189b      	adds	r3, r3, r2
 8004f70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f74:	464b      	mov	r3, r9
 8004f76:	460a      	mov	r2, r1
 8004f78:	eb42 0303 	adc.w	r3, r2, r3
 8004f7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f8c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	008b      	lsls	r3, r1, #2
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	008a      	lsls	r2, r1, #2
 8004faa:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004fae:	f7fb f967 	bl	8000280 <__aeabi_uldivmod>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4b3c      	ldr	r3, [pc, #240]	; (80050a8 <UART_SetConfig+0x998>)
 8004fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	2164      	movs	r1, #100	; 0x64
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	3332      	adds	r3, #50	; 0x32
 8004fca:	4a37      	ldr	r2, [pc, #220]	; (80050a8 <UART_SetConfig+0x998>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fd6:	441c      	add	r4, r3
 8004fd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fe2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fe6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004fea:	4642      	mov	r2, r8
 8004fec:	464b      	mov	r3, r9
 8004fee:	1891      	adds	r1, r2, r2
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	415b      	adcs	r3, r3
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	1851      	adds	r1, r2, r1
 8004ffe:	6039      	str	r1, [r7, #0]
 8005000:	4649      	mov	r1, r9
 8005002:	414b      	adcs	r3, r1
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005012:	4659      	mov	r1, fp
 8005014:	00cb      	lsls	r3, r1, #3
 8005016:	4651      	mov	r1, sl
 8005018:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800501c:	4651      	mov	r1, sl
 800501e:	00ca      	lsls	r2, r1, #3
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	4603      	mov	r3, r0
 8005026:	4642      	mov	r2, r8
 8005028:	189b      	adds	r3, r3, r2
 800502a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800502e:	464b      	mov	r3, r9
 8005030:	460a      	mov	r2, r1
 8005032:	eb42 0303 	adc.w	r3, r2, r3
 8005036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800503a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005046:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005056:	4649      	mov	r1, r9
 8005058:	008b      	lsls	r3, r1, #2
 800505a:	4641      	mov	r1, r8
 800505c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005060:	4641      	mov	r1, r8
 8005062:	008a      	lsls	r2, r1, #2
 8005064:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005068:	f7fb f90a 	bl	8000280 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <UART_SetConfig+0x998>)
 8005072:	fba3 1302 	umull	r1, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2164      	movs	r1, #100	; 0x64
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	3332      	adds	r3, #50	; 0x32
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <UART_SetConfig+0x998>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	f003 020f 	and.w	r2, r3, #15
 8005090:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4422      	add	r2, r4
 8005098:	609a      	str	r2, [r3, #8]
}
 800509a:	e7ff      	b.n	800509c <UART_SetConfig+0x98c>
 800509c:	bf00      	nop
 800509e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80050a2:	46bd      	mov	sp, r7
 80050a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a8:	51eb851f 	.word	0x51eb851f

080050ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80050b0:	4904      	ldr	r1, [pc, #16]	; (80050c4 <MX_FATFS_Init+0x18>)
 80050b2:	4805      	ldr	r0, [pc, #20]	; (80050c8 <MX_FATFS_Init+0x1c>)
 80050b4:	f001 fb6a 	bl	800678c <FATFS_LinkDriver>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461a      	mov	r2, r3
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <MX_FATFS_Init+0x20>)
 80050be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80050c0:	bf00      	nop
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	200136c8 	.word	0x200136c8
 80050c8:	2000006c 	.word	0x2000006c
 80050cc:	200136c4 	.word	0x200136c4

080050d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 f9d9 	bl	8005494 <USER_SPI_initialize>
 80050e2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fab7 	bl	800566c <USER_SPI_status>
 80050fe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4603      	mov	r3, r0
 8005116:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8005118:	7bf8      	ldrb	r0, [r7, #15]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	f000 faba 	bl	8005698 <USER_SPI_read>
 8005124:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4603      	mov	r3, r0
 800513c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800513e:	7bf8      	ldrb	r0, [r7, #15]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	f000 fb0d 	bl	8005764 <USER_SPI_write>
 800514a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	603a      	str	r2, [r7, #0]
 800515e:	71fb      	strb	r3, [r7, #7]
 8005160:	460b      	mov	r3, r1
 8005162:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8005164:	79b9      	ldrb	r1, [r7, #6]
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fb76 	bl	800585c <USER_SPI_ioctl>
 8005170:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005184:	f7fc f9b8 	bl	80014f8 <HAL_GetTick>
 8005188:	4603      	mov	r3, r0
 800518a:	4a04      	ldr	r2, [pc, #16]	; (800519c <SPI_Timer_On+0x20>)
 800518c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800518e:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <SPI_Timer_On+0x24>)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6013      	str	r3, [r2, #0]
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	200136d0 	.word	0x200136d0
 80051a0:	200136d4 	.word	0x200136d4

080051a4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80051a8:	f7fc f9a6 	bl	80014f8 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <SPI_Timer_Status+0x24>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <SPI_Timer_Status+0x28>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	bf34      	ite	cc
 80051bc:	2301      	movcc	r3, #1
 80051be:	2300      	movcs	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	200136d0 	.word	0x200136d0
 80051cc:	200136d4 	.word	0x200136d4

080051d0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	4603      	mov	r3, r0
 80051d8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80051da:	f107 020f 	add.w	r2, r7, #15
 80051de:	1df9      	adds	r1, r7, #7
 80051e0:	2332      	movs	r3, #50	; 0x32
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2301      	movs	r3, #1
 80051e6:	4804      	ldr	r0, [pc, #16]	; (80051f8 <xchg_spi+0x28>)
 80051e8:	f7fd fcde 	bl	8002ba8 <HAL_SPI_TransmitReceive>
    return rxDat;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000848 	.word	0x20000848

080051fc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e00a      	b.n	8005222 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	18d4      	adds	r4, r2, r3
 8005212:	20ff      	movs	r0, #255	; 0xff
 8005214:	f7ff ffdc 	bl	80051d0 <xchg_spi>
 8005218:	4603      	mov	r3, r0
 800521a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d3f0      	bcc.n	800520c <rcvr_spi_multi+0x10>
	}
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	bd90      	pop	{r4, r7, pc}

08005234 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e009      	b.n	8005258 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ffbf 	bl	80051d0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d3f1      	bcc.n	8005244 <xmit_spi_multi+0x10>
	}
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b086      	sub	sp, #24
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005272:	f7fc f941 	bl	80014f8 <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800527c:	20ff      	movs	r0, #255	; 0xff
 800527e:	f7ff ffa7 	bl	80051d0 <xchg_spi>
 8005282:	4603      	mov	r3, r0
 8005284:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	2bff      	cmp	r3, #255	; 0xff
 800528a:	d007      	beq.n	800529c <wait_ready+0x32>
 800528c:	f7fc f934 	bl	80014f8 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	429a      	cmp	r2, r3
 800529a:	d8ef      	bhi.n	800527c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2bff      	cmp	r3, #255	; 0xff
 80052a0:	bf0c      	ite	eq
 80052a2:	2301      	moveq	r3, #1
 80052a4:	2300      	movne	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80052b4:	2201      	movs	r2, #1
 80052b6:	2108      	movs	r1, #8
 80052b8:	4803      	ldr	r0, [pc, #12]	; (80052c8 <despiselect+0x18>)
 80052ba:	f7fc ff69 	bl	8002190 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80052be:	20ff      	movs	r0, #255	; 0xff
 80052c0:	f7ff ff86 	bl	80051d0 <xchg_spi>

}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40020400 	.word	0x40020400

080052cc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80052d0:	2200      	movs	r2, #0
 80052d2:	2108      	movs	r1, #8
 80052d4:	4809      	ldr	r0, [pc, #36]	; (80052fc <spiselect+0x30>)
 80052d6:	f7fc ff5b 	bl	8002190 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80052da:	20ff      	movs	r0, #255	; 0xff
 80052dc:	f7ff ff78 	bl	80051d0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80052e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052e4:	f7ff ffc1 	bl	800526a <wait_ready>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <spiselect+0x26>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e002      	b.n	80052f8 <spiselect+0x2c>

	despiselect();
 80052f2:	f7ff ffdd 	bl	80052b0 <despiselect>
	return 0;	/* Timeout */
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40020400 	.word	0x40020400

08005300 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800530a:	20c8      	movs	r0, #200	; 0xc8
 800530c:	f7ff ff36 	bl	800517c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005310:	20ff      	movs	r0, #255	; 0xff
 8005312:	f7ff ff5d 	bl	80051d0 <xchg_spi>
 8005316:	4603      	mov	r3, r0
 8005318:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2bff      	cmp	r3, #255	; 0xff
 800531e:	d104      	bne.n	800532a <rcvr_datablock+0x2a>
 8005320:	f7ff ff40 	bl	80051a4 <SPI_Timer_Status>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f2      	bne.n	8005310 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2bfe      	cmp	r3, #254	; 0xfe
 800532e:	d001      	beq.n	8005334 <rcvr_datablock+0x34>
 8005330:	2300      	movs	r3, #0
 8005332:	e00a      	b.n	800534a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff ff60 	bl	80051fc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800533c:	20ff      	movs	r0, #255	; 0xff
 800533e:	f7ff ff47 	bl	80051d0 <xchg_spi>
 8005342:	20ff      	movs	r0, #255	; 0xff
 8005344:	f7ff ff44 	bl	80051d0 <xchg_spi>

	return 1;						/* Function succeeded */
 8005348:	2301      	movs	r3, #1
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800535e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005362:	f7ff ff82 	bl	800526a <wait_ready>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <xmit_datablock+0x1e>
 800536c:	2300      	movs	r3, #0
 800536e:	e01e      	b.n	80053ae <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ff2c 	bl	80051d0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	2bfd      	cmp	r3, #253	; 0xfd
 800537c:	d016      	beq.n	80053ac <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800537e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff ff56 	bl	8005234 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005388:	20ff      	movs	r0, #255	; 0xff
 800538a:	f7ff ff21 	bl	80051d0 <xchg_spi>
 800538e:	20ff      	movs	r0, #255	; 0xff
 8005390:	f7ff ff1e 	bl	80051d0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005394:	20ff      	movs	r0, #255	; 0xff
 8005396:	f7ff ff1b 	bl	80051d0 <xchg_spi>
 800539a:	4603      	mov	r3, r0
 800539c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	d001      	beq.n	80053ac <xmit_datablock+0x5a>
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <xmit_datablock+0x5c>
	}
	return 1;
 80053ac:	2301      	movs	r3, #1
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	4603      	mov	r3, r0
 80053be:	6039      	str	r1, [r7, #0]
 80053c0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80053c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da0e      	bge.n	80053e8 <send_cmd+0x32>
		cmd &= 0x7F;
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80053d2:	2100      	movs	r1, #0
 80053d4:	2037      	movs	r0, #55	; 0x37
 80053d6:	f7ff ffee 	bl	80053b6 <send_cmd>
 80053da:	4603      	mov	r3, r0
 80053dc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80053de:	7bbb      	ldrb	r3, [r7, #14]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d901      	bls.n	80053e8 <send_cmd+0x32>
 80053e4:	7bbb      	ldrb	r3, [r7, #14]
 80053e6:	e051      	b.n	800548c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	2b0c      	cmp	r3, #12
 80053ec:	d008      	beq.n	8005400 <send_cmd+0x4a>
		despiselect();
 80053ee:	f7ff ff5f 	bl	80052b0 <despiselect>
		if (!spiselect()) return 0xFF;
 80053f2:	f7ff ff6b 	bl	80052cc <spiselect>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <send_cmd+0x4a>
 80053fc:	23ff      	movs	r3, #255	; 0xff
 80053fe:	e045      	b.n	800548c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005406:	b2db      	uxtb	r3, r3
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fee1 	bl	80051d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	0e1b      	lsrs	r3, r3, #24
 8005412:	b2db      	uxtb	r3, r3
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fedb 	bl	80051d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fed5 	bl	80051d0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	0a1b      	lsrs	r3, r3, #8
 800542a:	b2db      	uxtb	r3, r3
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fecf 	bl	80051d0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff feca 	bl	80051d0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <send_cmd+0x94>
 8005446:	2395      	movs	r3, #149	; 0x95
 8005448:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d101      	bne.n	8005454 <send_cmd+0x9e>
 8005450:	2387      	movs	r3, #135	; 0x87
 8005452:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff feba 	bl	80051d0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	2b0c      	cmp	r3, #12
 8005460:	d102      	bne.n	8005468 <send_cmd+0xb2>
 8005462:	20ff      	movs	r0, #255	; 0xff
 8005464:	f7ff feb4 	bl	80051d0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005468:	230a      	movs	r3, #10
 800546a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800546c:	20ff      	movs	r0, #255	; 0xff
 800546e:	f7ff feaf 	bl	80051d0 <xchg_spi>
 8005472:	4603      	mov	r3, r0
 8005474:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800547a:	2b00      	cmp	r3, #0
 800547c:	da05      	bge.n	800548a <send_cmd+0xd4>
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	3b01      	subs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <send_cmd+0xb6>

	return res;							/* Return received response */
 800548a:	7bbb      	ldrb	r3, [r7, #14]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <USER_SPI_initialize+0x14>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0d6      	b.n	8005656 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80054a8:	4b6d      	ldr	r3, [pc, #436]	; (8005660 <USER_SPI_initialize+0x1cc>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <USER_SPI_initialize+0x2a>
 80054b6:	4b6a      	ldr	r3, [pc, #424]	; (8005660 <USER_SPI_initialize+0x1cc>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e0cb      	b.n	8005656 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80054be:	4b69      	ldr	r3, [pc, #420]	; (8005664 <USER_SPI_initialize+0x1d0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80054c8:	4b66      	ldr	r3, [pc, #408]	; (8005664 <USER_SPI_initialize+0x1d0>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80054d0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80054d2:	230a      	movs	r3, #10
 80054d4:	73fb      	strb	r3, [r7, #15]
 80054d6:	e005      	b.n	80054e4 <USER_SPI_initialize+0x50>
 80054d8:	20ff      	movs	r0, #255	; 0xff
 80054da:	f7ff fe79 	bl	80051d0 <xchg_spi>
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	73fb      	strb	r3, [r7, #15]
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f6      	bne.n	80054d8 <USER_SPI_initialize+0x44>

	ty = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80054ee:	2100      	movs	r1, #0
 80054f0:	2000      	movs	r0, #0
 80054f2:	f7ff ff60 	bl	80053b6 <send_cmd>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	f040 808b 	bne.w	8005614 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80054fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005502:	f7ff fe3b 	bl	800517c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005506:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800550a:	2008      	movs	r0, #8
 800550c:	f7ff ff53 	bl	80053b6 <send_cmd>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d151      	bne.n	80055ba <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	e00d      	b.n	8005538 <USER_SPI_initialize+0xa4>
 800551c:	7bfc      	ldrb	r4, [r7, #15]
 800551e:	20ff      	movs	r0, #255	; 0xff
 8005520:	f7ff fe56 	bl	80051d0 <xchg_spi>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	f104 0310 	add.w	r3, r4, #16
 800552c:	443b      	add	r3, r7
 800552e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	3301      	adds	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b03      	cmp	r3, #3
 800553c:	d9ee      	bls.n	800551c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800553e:	7abb      	ldrb	r3, [r7, #10]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d167      	bne.n	8005614 <USER_SPI_initialize+0x180>
 8005544:	7afb      	ldrb	r3, [r7, #11]
 8005546:	2baa      	cmp	r3, #170	; 0xaa
 8005548:	d164      	bne.n	8005614 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800554a:	bf00      	nop
 800554c:	f7ff fe2a 	bl	80051a4 <SPI_Timer_Status>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <USER_SPI_initialize+0xd2>
 8005556:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800555a:	20a9      	movs	r0, #169	; 0xa9
 800555c:	f7ff ff2b 	bl	80053b6 <send_cmd>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f2      	bne.n	800554c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005566:	f7ff fe1d 	bl	80051a4 <SPI_Timer_Status>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d051      	beq.n	8005614 <USER_SPI_initialize+0x180>
 8005570:	2100      	movs	r1, #0
 8005572:	203a      	movs	r0, #58	; 0x3a
 8005574:	f7ff ff1f 	bl	80053b6 <send_cmd>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d14a      	bne.n	8005614 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
 8005582:	e00d      	b.n	80055a0 <USER_SPI_initialize+0x10c>
 8005584:	7bfc      	ldrb	r4, [r7, #15]
 8005586:	20ff      	movs	r0, #255	; 0xff
 8005588:	f7ff fe22 	bl	80051d0 <xchg_spi>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	f104 0310 	add.w	r3, r4, #16
 8005594:	443b      	add	r3, r7
 8005596:	f803 2c08 	strb.w	r2, [r3, #-8]
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	3301      	adds	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d9ee      	bls.n	8005584 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80055a6:	7a3b      	ldrb	r3, [r7, #8]
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <USER_SPI_initialize+0x120>
 80055b0:	230c      	movs	r3, #12
 80055b2:	e000      	b.n	80055b6 <USER_SPI_initialize+0x122>
 80055b4:	2304      	movs	r3, #4
 80055b6:	737b      	strb	r3, [r7, #13]
 80055b8:	e02c      	b.n	8005614 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80055ba:	2100      	movs	r1, #0
 80055bc:	20a9      	movs	r0, #169	; 0xa9
 80055be:	f7ff fefa 	bl	80053b6 <send_cmd>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d804      	bhi.n	80055d2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80055c8:	2302      	movs	r3, #2
 80055ca:	737b      	strb	r3, [r7, #13]
 80055cc:	23a9      	movs	r3, #169	; 0xa9
 80055ce:	73bb      	strb	r3, [r7, #14]
 80055d0:	e003      	b.n	80055da <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80055d2:	2301      	movs	r3, #1
 80055d4:	737b      	strb	r3, [r7, #13]
 80055d6:	2301      	movs	r3, #1
 80055d8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80055da:	bf00      	nop
 80055dc:	f7ff fde2 	bl	80051a4 <SPI_Timer_Status>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <USER_SPI_initialize+0x162>
 80055e6:	7bbb      	ldrb	r3, [r7, #14]
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fee3 	bl	80053b6 <send_cmd>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f2      	bne.n	80055dc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80055f6:	f7ff fdd5 	bl	80051a4 <SPI_Timer_Status>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <USER_SPI_initialize+0x17c>
 8005600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005604:	2010      	movs	r0, #16
 8005606:	f7ff fed6 	bl	80053b6 <send_cmd>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <USER_SPI_initialize+0x180>
				ty = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005614:	4a14      	ldr	r2, [pc, #80]	; (8005668 <USER_SPI_initialize+0x1d4>)
 8005616:	7b7b      	ldrb	r3, [r7, #13]
 8005618:	7013      	strb	r3, [r2, #0]
	despiselect();
 800561a:	f7ff fe49 	bl	80052b0 <despiselect>

	if (ty) {			/* OK */
 800561e:	7b7b      	ldrb	r3, [r7, #13]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d012      	beq.n	800564a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005624:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <USER_SPI_initialize+0x1d0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800562e:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <USER_SPI_initialize+0x1d0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0210 	orr.w	r2, r2, #16
 8005636:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <USER_SPI_initialize+0x1cc>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	b2da      	uxtb	r2, r3
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <USER_SPI_initialize+0x1cc>)
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e002      	b.n	8005650 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <USER_SPI_initialize+0x1cc>)
 800564c:	2201      	movs	r2, #1
 800564e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <USER_SPI_initialize+0x1cc>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	b2db      	uxtb	r3, r3
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	bd90      	pop	{r4, r7, pc}
 800565e:	bf00      	nop
 8005660:	20000080 	.word	0x20000080
 8005664:	20000848 	.word	0x20000848
 8005668:	200136cc 	.word	0x200136cc

0800566c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <USER_SPI_status+0x14>
 800567c:	2301      	movs	r3, #1
 800567e:	e002      	b.n	8005686 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <USER_SPI_status+0x28>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	b2db      	uxtb	r3, r3
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000080 	.word	0x20000080

08005698 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <USER_SPI_read+0x1c>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <USER_SPI_read+0x20>
 80056b4:	2304      	movs	r3, #4
 80056b6:	e04d      	b.n	8005754 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80056b8:	4b28      	ldr	r3, [pc, #160]	; (800575c <USER_SPI_read+0xc4>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <USER_SPI_read+0x32>
 80056c6:	2303      	movs	r3, #3
 80056c8:	e044      	b.n	8005754 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80056ca:	4b25      	ldr	r3, [pc, #148]	; (8005760 <USER_SPI_read+0xc8>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <USER_SPI_read+0x44>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	025b      	lsls	r3, r3, #9
 80056da:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d111      	bne.n	8005706 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	2011      	movs	r0, #17
 80056e6:	f7ff fe66 	bl	80053b6 <send_cmd>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d129      	bne.n	8005744 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80056f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056f4:	68b8      	ldr	r0, [r7, #8]
 80056f6:	f7ff fe03 	bl	8005300 <rcvr_datablock>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d021      	beq.n	8005744 <USER_SPI_read+0xac>
			count = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	e01e      	b.n	8005744 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	2012      	movs	r0, #18
 800570a:	f7ff fe54 	bl	80053b6 <send_cmd>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d117      	bne.n	8005744 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005718:	68b8      	ldr	r0, [r7, #8]
 800571a:	f7ff fdf1 	bl	8005300 <rcvr_datablock>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <USER_SPI_read+0xa2>
				buff += 512;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800572a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	3b01      	subs	r3, #1
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1ed      	bne.n	8005714 <USER_SPI_read+0x7c>
 8005738:	e000      	b.n	800573c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800573a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800573c:	2100      	movs	r1, #0
 800573e:	200c      	movs	r0, #12
 8005740:	f7ff fe39 	bl	80053b6 <send_cmd>
		}
	}
	despiselect();
 8005744:	f7ff fdb4 	bl	80052b0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf14      	ite	ne
 800574e:	2301      	movne	r3, #1
 8005750:	2300      	moveq	r3, #0
 8005752:	b2db      	uxtb	r3, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000080 	.word	0x20000080
 8005760:	200136cc 	.word	0x200136cc

08005764 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4603      	mov	r3, r0
 8005772:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <USER_SPI_write+0x1c>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <USER_SPI_write+0x20>
 8005780:	2304      	movs	r3, #4
 8005782:	e063      	b.n	800584c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005784:	4b33      	ldr	r3, [pc, #204]	; (8005854 <USER_SPI_write+0xf0>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <USER_SPI_write+0x32>
 8005792:	2303      	movs	r3, #3
 8005794:	e05a      	b.n	800584c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005796:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <USER_SPI_write+0xf0>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <USER_SPI_write+0x44>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e051      	b.n	800584c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80057a8:	4b2b      	ldr	r3, [pc, #172]	; (8005858 <USER_SPI_write+0xf4>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <USER_SPI_write+0x56>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	025b      	lsls	r3, r3, #9
 80057b8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d110      	bne.n	80057e2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	2018      	movs	r0, #24
 80057c4:	f7ff fdf7 	bl	80053b6 <send_cmd>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d136      	bne.n	800583c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80057ce:	21fe      	movs	r1, #254	; 0xfe
 80057d0:	68b8      	ldr	r0, [r7, #8]
 80057d2:	f7ff fdbe 	bl	8005352 <xmit_datablock>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02f      	beq.n	800583c <USER_SPI_write+0xd8>
			count = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	e02c      	b.n	800583c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80057e2:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <USER_SPI_write+0xf4>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f003 0306 	and.w	r3, r3, #6
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <USER_SPI_write+0x92>
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	2097      	movs	r0, #151	; 0x97
 80057f2:	f7ff fde0 	bl	80053b6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	2019      	movs	r0, #25
 80057fa:	f7ff fddc 	bl	80053b6 <send_cmd>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11b      	bne.n	800583c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005804:	21fc      	movs	r1, #252	; 0xfc
 8005806:	68b8      	ldr	r0, [r7, #8]
 8005808:	f7ff fda3 	bl	8005352 <xmit_datablock>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <USER_SPI_write+0xc4>
				buff += 512;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005818:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	3b01      	subs	r3, #1
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1ee      	bne.n	8005804 <USER_SPI_write+0xa0>
 8005826:	e000      	b.n	800582a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005828:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800582a:	21fd      	movs	r1, #253	; 0xfd
 800582c:	2000      	movs	r0, #0
 800582e:	f7ff fd90 	bl	8005352 <xmit_datablock>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <USER_SPI_write+0xd8>
 8005838:	2301      	movs	r3, #1
 800583a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800583c:	f7ff fd38 	bl	80052b0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	bf14      	ite	ne
 8005846:	2301      	movne	r3, #1
 8005848:	2300      	moveq	r3, #0
 800584a:	b2db      	uxtb	r3, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000080 	.word	0x20000080
 8005858:	200136cc 	.word	0x200136cc

0800585c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08c      	sub	sp, #48	; 0x30
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	603a      	str	r2, [r7, #0]
 8005866:	71fb      	strb	r3, [r7, #7]
 8005868:	460b      	mov	r3, r1
 800586a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <USER_SPI_ioctl+0x1a>
 8005872:	2304      	movs	r3, #4
 8005874:	e15a      	b.n	8005b2c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005876:	4baf      	ldr	r3, [pc, #700]	; (8005b34 <USER_SPI_ioctl+0x2d8>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <USER_SPI_ioctl+0x2c>
 8005884:	2303      	movs	r3, #3
 8005886:	e151      	b.n	8005b2c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800588e:	79bb      	ldrb	r3, [r7, #6]
 8005890:	2b04      	cmp	r3, #4
 8005892:	f200 8136 	bhi.w	8005b02 <USER_SPI_ioctl+0x2a6>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <USER_SPI_ioctl+0x40>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058b1 	.word	0x080058b1
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	08005b03 	.word	0x08005b03
 80058a8:	08005971 	.word	0x08005971
 80058ac:	08005a67 	.word	0x08005a67
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80058b0:	f7ff fd0c 	bl	80052cc <spiselect>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8127 	beq.w	8005b0a <USER_SPI_ioctl+0x2ae>
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80058c2:	e122      	b.n	8005b0a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80058c4:	2100      	movs	r1, #0
 80058c6:	2009      	movs	r0, #9
 80058c8:	f7ff fd75 	bl	80053b6 <send_cmd>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 811d 	bne.w	8005b0e <USER_SPI_ioctl+0x2b2>
 80058d4:	f107 030c 	add.w	r3, r7, #12
 80058d8:	2110      	movs	r1, #16
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fd10 	bl	8005300 <rcvr_datablock>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 8113 	beq.w	8005b0e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80058e8:	7b3b      	ldrb	r3, [r7, #12]
 80058ea:	099b      	lsrs	r3, r3, #6
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d111      	bne.n	8005916 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80058f2:	7d7b      	ldrb	r3, [r7, #21]
 80058f4:	461a      	mov	r2, r3
 80058f6:	7d3b      	ldrb	r3, [r7, #20]
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	4413      	add	r3, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	7cfb      	ldrb	r3, [r7, #19]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005906:	4413      	add	r3, r2
 8005908:	3301      	adds	r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	029a      	lsls	r2, r3, #10
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e028      	b.n	8005968 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005916:	7c7b      	ldrb	r3, [r7, #17]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	b2da      	uxtb	r2, r3
 800591e:	7dbb      	ldrb	r3, [r7, #22]
 8005920:	09db      	lsrs	r3, r3, #7
 8005922:	b2db      	uxtb	r3, r3
 8005924:	4413      	add	r3, r2
 8005926:	b2da      	uxtb	r2, r3
 8005928:	7d7b      	ldrb	r3, [r7, #21]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 0306 	and.w	r3, r3, #6
 8005932:	b2db      	uxtb	r3, r3
 8005934:	4413      	add	r3, r2
 8005936:	b2db      	uxtb	r3, r3
 8005938:	3302      	adds	r3, #2
 800593a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800593e:	7d3b      	ldrb	r3, [r7, #20]
 8005940:	099b      	lsrs	r3, r3, #6
 8005942:	b2db      	uxtb	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	7cfb      	ldrb	r3, [r7, #19]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	7cbb      	ldrb	r3, [r7, #18]
 800594e:	029b      	lsls	r3, r3, #10
 8005950:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005954:	4413      	add	r3, r2
 8005956:	3301      	adds	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800595a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800595e:	3b09      	subs	r3, #9
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	409a      	lsls	r2, r3
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800596e:	e0ce      	b.n	8005b0e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005970:	4b71      	ldr	r3, [pc, #452]	; (8005b38 <USER_SPI_ioctl+0x2dc>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d031      	beq.n	80059e0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800597c:	2100      	movs	r1, #0
 800597e:	208d      	movs	r0, #141	; 0x8d
 8005980:	f7ff fd19 	bl	80053b6 <send_cmd>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 80c3 	bne.w	8005b12 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800598c:	20ff      	movs	r0, #255	; 0xff
 800598e:	f7ff fc1f 	bl	80051d0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005992:	f107 030c 	add.w	r3, r7, #12
 8005996:	2110      	movs	r1, #16
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fcb1 	bl	8005300 <rcvr_datablock>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80b6 	beq.w	8005b12 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80059a6:	2330      	movs	r3, #48	; 0x30
 80059a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80059ac:	e007      	b.n	80059be <USER_SPI_ioctl+0x162>
 80059ae:	20ff      	movs	r0, #255	; 0xff
 80059b0:	f7ff fc0e 	bl	80051d0 <xchg_spi>
 80059b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80059b8:	3b01      	subs	r3, #1
 80059ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80059be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f3      	bne.n	80059ae <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80059c6:	7dbb      	ldrb	r3, [r7, #22]
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	2310      	movs	r3, #16
 80059d0:	fa03 f202 	lsl.w	r2, r3, r2
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80059de:	e098      	b.n	8005b12 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80059e0:	2100      	movs	r1, #0
 80059e2:	2009      	movs	r0, #9
 80059e4:	f7ff fce7 	bl	80053b6 <send_cmd>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f040 8091 	bne.w	8005b12 <USER_SPI_ioctl+0x2b6>
 80059f0:	f107 030c 	add.w	r3, r7, #12
 80059f4:	2110      	movs	r1, #16
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fc82 	bl	8005300 <rcvr_datablock>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 8087 	beq.w	8005b12 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005a04:	4b4c      	ldr	r3, [pc, #304]	; (8005b38 <USER_SPI_ioctl+0x2dc>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d012      	beq.n	8005a36 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005a10:	7dbb      	ldrb	r3, [r7, #22]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005a18:	7dfa      	ldrb	r2, [r7, #23]
 8005a1a:	09d2      	lsrs	r2, r2, #7
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	4413      	add	r3, r2
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	7e7b      	ldrb	r3, [r7, #25]
 8005a24:	099b      	lsrs	r3, r3, #6
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e013      	b.n	8005a5e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005a36:	7dbb      	ldrb	r3, [r7, #22]
 8005a38:	109b      	asrs	r3, r3, #2
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	3301      	adds	r3, #1
 8005a42:	7dfa      	ldrb	r2, [r7, #23]
 8005a44:	00d2      	lsls	r2, r2, #3
 8005a46:	f002 0218 	and.w	r2, r2, #24
 8005a4a:	7df9      	ldrb	r1, [r7, #23]
 8005a4c:	0949      	lsrs	r1, r1, #5
 8005a4e:	b2c9      	uxtb	r1, r1
 8005a50:	440a      	add	r2, r1
 8005a52:	3201      	adds	r2, #1
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005a64:	e055      	b.n	8005b12 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005a66:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <USER_SPI_ioctl+0x2dc>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	f003 0306 	and.w	r3, r3, #6
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d051      	beq.n	8005b16 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005a72:	f107 020c 	add.w	r2, r7, #12
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	210b      	movs	r1, #11
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff feee 	bl	800585c <USER_SPI_ioctl>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d149      	bne.n	8005b1a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005a86:	7b3b      	ldrb	r3, [r7, #12]
 8005a88:	099b      	lsrs	r3, r3, #6
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <USER_SPI_ioctl+0x23e>
 8005a90:	7dbb      	ldrb	r3, [r7, #22]
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d041      	beq.n	8005b1e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	623b      	str	r3, [r7, #32]
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005aaa:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <USER_SPI_ioctl+0x2dc>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d105      	bne.n	8005ac2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	025b      	lsls	r3, r3, #9
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	025b      	lsls	r3, r3, #9
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ac4:	2020      	movs	r0, #32
 8005ac6:	f7ff fc76 	bl	80053b6 <send_cmd>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d128      	bne.n	8005b22 <USER_SPI_ioctl+0x2c6>
 8005ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ad2:	2021      	movs	r0, #33	; 0x21
 8005ad4:	f7ff fc6f 	bl	80053b6 <send_cmd>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d121      	bne.n	8005b22 <USER_SPI_ioctl+0x2c6>
 8005ade:	2100      	movs	r1, #0
 8005ae0:	2026      	movs	r0, #38	; 0x26
 8005ae2:	f7ff fc68 	bl	80053b6 <send_cmd>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11a      	bne.n	8005b22 <USER_SPI_ioctl+0x2c6>
 8005aec:	f247 5030 	movw	r0, #30000	; 0x7530
 8005af0:	f7ff fbbb 	bl	800526a <wait_ready>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d013      	beq.n	8005b22 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005afa:	2300      	movs	r3, #0
 8005afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005b00:	e00f      	b.n	8005b22 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005b02:	2304      	movs	r3, #4
 8005b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005b08:	e00c      	b.n	8005b24 <USER_SPI_ioctl+0x2c8>
		break;
 8005b0a:	bf00      	nop
 8005b0c:	e00a      	b.n	8005b24 <USER_SPI_ioctl+0x2c8>
		break;
 8005b0e:	bf00      	nop
 8005b10:	e008      	b.n	8005b24 <USER_SPI_ioctl+0x2c8>
		break;
 8005b12:	bf00      	nop
 8005b14:	e006      	b.n	8005b24 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005b16:	bf00      	nop
 8005b18:	e004      	b.n	8005b24 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <USER_SPI_ioctl+0x2c8>
		break;
 8005b22:	bf00      	nop
	}

	despiselect();
 8005b24:	f7ff fbc4 	bl	80052b0 <despiselect>

	return res;
 8005b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3730      	adds	r7, #48	; 0x30
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20000080 	.word	0x20000080
 8005b38:	200136cc 	.word	0x200136cc

08005b3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	4603      	mov	r3, r0
 8005b44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <disk_status+0x30>)
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	79fa      	ldrb	r2, [r7, #7]
 8005b54:	4905      	ldr	r1, [pc, #20]	; (8005b6c <disk_status+0x30>)
 8005b56:	440a      	add	r2, r1
 8005b58:	7a12      	ldrb	r2, [r2, #8]
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4798      	blx	r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20013700 	.word	0x20013700

08005b70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	4a0d      	ldr	r2, [pc, #52]	; (8005bb8 <disk_initialize+0x48>)
 8005b82:	5cd3      	ldrb	r3, [r2, r3]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d111      	bne.n	8005bac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <disk_initialize+0x48>)
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <disk_initialize+0x48>)
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	79fa      	ldrb	r2, [r7, #7]
 8005b9e:	4906      	ldr	r1, [pc, #24]	; (8005bb8 <disk_initialize+0x48>)
 8005ba0:	440a      	add	r2, r1
 8005ba2:	7a12      	ldrb	r2, [r2, #8]
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20013700 	.word	0x20013700

08005bbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <disk_read+0x3c>)
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	689c      	ldr	r4, [r3, #8]
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	4a07      	ldr	r2, [pc, #28]	; (8005bf8 <disk_read+0x3c>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	7a18      	ldrb	r0, [r3, #8]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	47a0      	blx	r4
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20013700 	.word	0x20013700

08005bfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <disk_write+0x3c>)
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	68dc      	ldr	r4, [r3, #12]
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4a07      	ldr	r2, [pc, #28]	; (8005c38 <disk_write+0x3c>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	7a18      	ldrb	r0, [r3, #8]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	47a0      	blx	r4
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd90      	pop	{r4, r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20013700 	.word	0x20013700

08005c3c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3301      	adds	r3, #1
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c4c:	89fb      	ldrh	r3, [r7, #14]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	b21a      	sxth	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	b21b      	sxth	r3, r3
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	b21b      	sxth	r3, r3
 8005c5c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3303      	adds	r3, #3
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	3202      	adds	r2, #2
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	3201      	adds	r2, #1
 8005c92:	7812      	ldrb	r2, [r2, #0]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e010      	b.n	8005ce4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005cc2:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <clear_lock+0x44>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	4413      	add	r3, r2
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d105      	bne.n	8005cde <clear_lock+0x2a>
 8005cd2:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <clear_lock+0x44>)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	4413      	add	r3, r2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d9eb      	bls.n	8005cc2 <clear_lock+0xe>
	}
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	200136e0 	.word	0x200136e0

08005cfc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	78db      	ldrb	r3, [r3, #3]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d034      	beq.n	8005d7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7858      	ldrb	r0, [r3, #1]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d20:	2301      	movs	r3, #1
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	f7ff ff6a 	bl	8005bfc <disk_write>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
 8005d32:	e022      	b.n	8005d7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d217      	bcs.n	8005d7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	789b      	ldrb	r3, [r3, #2]
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	e010      	b.n	8005d74 <sync_window+0x78>
					wsect += fs->fsize;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4413      	add	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	7858      	ldrb	r0, [r3, #1]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d66:	2301      	movs	r3, #1
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	f7ff ff47 	bl	8005bfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d8eb      	bhi.n	8005d52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d01b      	beq.n	8005dd4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ffad 	bl	8005cfc <sync_window>
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d113      	bne.n	8005dd4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	7858      	ldrb	r0, [r3, #1]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005db6:	2301      	movs	r3, #1
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	f7ff feff 	bl	8005bbc <disk_read>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b086      	sub	sp, #24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d904      	bls.n	8005dfe <get_fat+0x20>
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005dfe:	2301      	movs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	e08f      	b.n	8005f24 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
 8005e08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d062      	beq.n	8005ed8 <get_fat+0xfa>
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	dc7c      	bgt.n	8005f10 <get_fat+0x132>
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d002      	beq.n	8005e20 <get_fat+0x42>
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d042      	beq.n	8005ea4 <get_fat+0xc6>
 8005e1e:	e077      	b.n	8005f10 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	0a5b      	lsrs	r3, r3, #9
 8005e36:	4413      	add	r3, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6938      	ldr	r0, [r7, #16]
 8005e3c:	f7ff ffa2 	bl	8005d84 <move_window>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d167      	bne.n	8005f16 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	60fa      	str	r2, [r7, #12]
 8005e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4413      	add	r3, r2
 8005e54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6a1a      	ldr	r2, [r3, #32]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	0a5b      	lsrs	r3, r3, #9
 8005e62:	4413      	add	r3, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	6938      	ldr	r0, [r7, #16]
 8005e68:	f7ff ff8c 	bl	8005d84 <move_window>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d153      	bne.n	8005f1a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	461a      	mov	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <get_fat+0xbc>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	e002      	b.n	8005ea0 <get_fat+0xc2>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea0:	617b      	str	r3, [r7, #20]
			break;
 8005ea2:	e03f      	b.n	8005f24 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6a1a      	ldr	r2, [r3, #32]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	4413      	add	r3, r2
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6938      	ldr	r0, [r7, #16]
 8005eb2:	f7ff ff67 	bl	8005d84 <move_window>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d130      	bne.n	8005f1e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005eca:	4413      	add	r3, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff feb5 	bl	8005c3c <ld_word>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	617b      	str	r3, [r7, #20]
			break;
 8005ed6:	e025      	b.n	8005f24 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6a1a      	ldr	r2, [r3, #32]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	09db      	lsrs	r3, r3, #7
 8005ee0:	4413      	add	r3, r2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6938      	ldr	r0, [r7, #16]
 8005ee6:	f7ff ff4d 	bl	8005d84 <move_window>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d118      	bne.n	8005f22 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005efe:	4413      	add	r3, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff feb3 	bl	8005c6c <ld_dword>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f0c:	617b      	str	r3, [r7, #20]
			break;
 8005f0e:	e009      	b.n	8005f24 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005f10:	2301      	movs	r3, #1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e006      	b.n	8005f24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f16:	bf00      	nop
 8005f18:	e004      	b.n	8005f24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f1a:	bf00      	nop
 8005f1c:	e002      	b.n	8005f24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f1e:	bf00      	nop
 8005f20:	e000      	b.n	8005f24 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f22:	bf00      	nop
		}
	}

	return val;
 8005f24:	697b      	ldr	r3, [r7, #20]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b087      	sub	sp, #28
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d031      	beq.n	8005fa8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e002      	b.n	8005f52 <get_ldnumber+0x24>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d903      	bls.n	8005f62 <get_ldnumber+0x34>
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b3a      	cmp	r3, #58	; 0x3a
 8005f60:	d1f4      	bne.n	8005f4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b3a      	cmp	r3, #58	; 0x3a
 8005f68:	d11c      	bne.n	8005fa4 <get_ldnumber+0x76>
			tp = *path;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	60fa      	str	r2, [r7, #12]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	3b30      	subs	r3, #48	; 0x30
 8005f7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	d80e      	bhi.n	8005fa0 <get_ldnumber+0x72>
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d10a      	bne.n	8005fa0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d107      	bne.n	8005fa0 <get_ldnumber+0x72>
					vol = (int)i;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	3301      	adds	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	e002      	b.n	8005faa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005fa8:	693b      	ldr	r3, [r7, #16]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
	...

08005fb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	70da      	strb	r2, [r3, #3]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fed6 	bl	8005d84 <move_window>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <check_fs+0x2a>
 8005fde:	2304      	movs	r3, #4
 8005fe0:	e038      	b.n	8006054 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3330      	adds	r3, #48	; 0x30
 8005fe6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff fe26 	bl	8005c3c <ld_word>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d001      	beq.n	8006000 <check_fs+0x48>
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e029      	b.n	8006054 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006006:	2be9      	cmp	r3, #233	; 0xe9
 8006008:	d009      	beq.n	800601e <check_fs+0x66>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006010:	2beb      	cmp	r3, #235	; 0xeb
 8006012:	d11e      	bne.n	8006052 <check_fs+0x9a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800601a:	2b90      	cmp	r3, #144	; 0x90
 800601c:	d119      	bne.n	8006052 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3330      	adds	r3, #48	; 0x30
 8006022:	3336      	adds	r3, #54	; 0x36
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fe21 	bl	8005c6c <ld_dword>
 800602a:	4603      	mov	r3, r0
 800602c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006030:	4a0a      	ldr	r2, [pc, #40]	; (800605c <check_fs+0xa4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d101      	bne.n	800603a <check_fs+0x82>
 8006036:	2300      	movs	r3, #0
 8006038:	e00c      	b.n	8006054 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3330      	adds	r3, #48	; 0x30
 800603e:	3352      	adds	r3, #82	; 0x52
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fe13 	bl	8005c6c <ld_dword>
 8006046:	4603      	mov	r3, r0
 8006048:	4a05      	ldr	r2, [pc, #20]	; (8006060 <check_fs+0xa8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d101      	bne.n	8006052 <check_fs+0x9a>
 800604e:	2300      	movs	r3, #0
 8006050:	e000      	b.n	8006054 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006052:	2302      	movs	r3, #2
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	00544146 	.word	0x00544146
 8006060:	33544146 	.word	0x33544146

08006064 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b096      	sub	sp, #88	; 0x58
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff ff58 	bl	8005f2e <get_ldnumber>
 800607e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	da01      	bge.n	800608a <find_volume+0x26>
 8006086:	230b      	movs	r3, #11
 8006088:	e22d      	b.n	80064e6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800608a:	4aa1      	ldr	r2, [pc, #644]	; (8006310 <find_volume+0x2ac>)
 800608c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006092:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <find_volume+0x3a>
 800609a:	230c      	movs	r3, #12
 800609c:	e223      	b.n	80064e6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01a      	beq.n	80060ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fd3f 	bl	8005b3c <disk_status>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80060c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10c      	bne.n	80060ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <find_volume+0x82>
 80060d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80060e2:	230a      	movs	r3, #10
 80060e4:	e1ff      	b.n	80064e6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80060e6:	2300      	movs	r3, #0
 80060e8:	e1fd      	b.n	80064e6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80060f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff fd37 	bl	8005b70 <disk_initialize>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006114:	2303      	movs	r3, #3
 8006116:	e1e6      	b.n	80064e6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <find_volume+0xca>
 800611e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800612a:	230a      	movs	r3, #10
 800612c:	e1db      	b.n	80064e6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006132:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006136:	f7ff ff3f 	bl	8005fb8 <check_fs>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006144:	2b02      	cmp	r3, #2
 8006146:	d149      	bne.n	80061dc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006148:	2300      	movs	r3, #0
 800614a:	643b      	str	r3, [r7, #64]	; 0x40
 800614c:	e01e      	b.n	800618c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800615c:	4413      	add	r3, r2
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	3304      	adds	r3, #4
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d006      	beq.n	8006178 <find_volume+0x114>
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	3308      	adds	r3, #8
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fd7c 	bl	8005c6c <ld_dword>
 8006174:	4602      	mov	r2, r0
 8006176:	e000      	b.n	800617a <find_volume+0x116>
 8006178:	2200      	movs	r2, #0
 800617a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	3358      	adds	r3, #88	; 0x58
 8006180:	443b      	add	r3, r7
 8006182:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006188:	3301      	adds	r3, #1
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
 800618c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618e:	2b03      	cmp	r3, #3
 8006190:	d9dd      	bls.n	800614e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006192:	2300      	movs	r3, #0
 8006194:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <find_volume+0x13e>
 800619c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619e:	3b01      	subs	r3, #1
 80061a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80061a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	3358      	adds	r3, #88	; 0x58
 80061a8:	443b      	add	r3, r7
 80061aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80061ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80061b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <find_volume+0x15e>
 80061b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061ba:	f7ff fefd 	bl	8005fb8 <check_fs>
 80061be:	4603      	mov	r3, r0
 80061c0:	e000      	b.n	80061c4 <find_volume+0x160>
 80061c2:	2303      	movs	r3, #3
 80061c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80061c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d905      	bls.n	80061dc <find_volume+0x178>
 80061d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d2:	3301      	adds	r3, #1
 80061d4:	643b      	str	r3, [r7, #64]	; 0x40
 80061d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d9e2      	bls.n	80061a2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80061dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d101      	bne.n	80061e8 <find_volume+0x184>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e17e      	b.n	80064e6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80061e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d901      	bls.n	80061f4 <find_volume+0x190>
 80061f0:	230d      	movs	r3, #13
 80061f2:	e178      	b.n	80064e6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	3330      	adds	r3, #48	; 0x30
 80061f8:	330b      	adds	r3, #11
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fd1e 	bl	8005c3c <ld_word>
 8006200:	4603      	mov	r3, r0
 8006202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006206:	d001      	beq.n	800620c <find_volume+0x1a8>
 8006208:	230d      	movs	r3, #13
 800620a:	e16c      	b.n	80064e6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	3330      	adds	r3, #48	; 0x30
 8006210:	3316      	adds	r3, #22
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fd12 	bl	8005c3c <ld_word>
 8006218:	4603      	mov	r3, r0
 800621a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <find_volume+0x1cc>
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	3330      	adds	r3, #48	; 0x30
 8006226:	3324      	adds	r3, #36	; 0x24
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fd1f 	bl	8005c6c <ld_dword>
 800622e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006234:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	789b      	ldrb	r3, [r3, #2]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d005      	beq.n	8006254 <find_volume+0x1f0>
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	789b      	ldrb	r3, [r3, #2]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d001      	beq.n	8006254 <find_volume+0x1f0>
 8006250:	230d      	movs	r3, #13
 8006252:	e148      	b.n	80064e6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	789b      	ldrb	r3, [r3, #2]
 8006258:	461a      	mov	r2, r3
 800625a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625c:	fb02 f303 	mul.w	r3, r2, r3
 8006260:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006268:	b29a      	uxth	r2, r3
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	895b      	ldrh	r3, [r3, #10]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <find_volume+0x224>
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	895b      	ldrh	r3, [r3, #10]
 800627a:	461a      	mov	r2, r3
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	895b      	ldrh	r3, [r3, #10]
 8006280:	3b01      	subs	r3, #1
 8006282:	4013      	ands	r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <find_volume+0x228>
 8006288:	230d      	movs	r3, #13
 800628a:	e12c      	b.n	80064e6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	3330      	adds	r3, #48	; 0x30
 8006290:	3311      	adds	r3, #17
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff fcd2 	bl	8005c3c <ld_word>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	891b      	ldrh	r3, [r3, #8]
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <find_volume+0x24e>
 80062ae:	230d      	movs	r3, #13
 80062b0:	e119      	b.n	80064e6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	3330      	adds	r3, #48	; 0x30
 80062b6:	3313      	adds	r3, #19
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fcbf 	bl	8005c3c <ld_word>
 80062be:	4603      	mov	r3, r0
 80062c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80062c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <find_volume+0x272>
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	3330      	adds	r3, #48	; 0x30
 80062cc:	3320      	adds	r3, #32
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fccc 	bl	8005c6c <ld_dword>
 80062d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	3330      	adds	r3, #48	; 0x30
 80062da:	330e      	adds	r3, #14
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff fcad 	bl	8005c3c <ld_word>
 80062e2:	4603      	mov	r3, r0
 80062e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80062e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <find_volume+0x28c>
 80062ec:	230d      	movs	r3, #13
 80062ee:	e0fa      	b.n	80064e6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80062f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80062f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f4:	4413      	add	r3, r2
 80062f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062f8:	8912      	ldrh	r2, [r2, #8]
 80062fa:	0912      	lsrs	r2, r2, #4
 80062fc:	b292      	uxth	r2, r2
 80062fe:	4413      	add	r3, r2
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	429a      	cmp	r2, r3
 8006308:	d204      	bcs.n	8006314 <find_volume+0x2b0>
 800630a:	230d      	movs	r3, #13
 800630c:	e0eb      	b.n	80064e6 <find_volume+0x482>
 800630e:	bf00      	nop
 8006310:	200136d8 	.word	0x200136d8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800631c:	8952      	ldrh	r2, [r2, #10]
 800631e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <find_volume+0x2ca>
 800632a:	230d      	movs	r3, #13
 800632c:	e0db      	b.n	80064e6 <find_volume+0x482>
		fmt = FS_FAT32;
 800632e:	2303      	movs	r3, #3
 8006330:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800633a:	4293      	cmp	r3, r2
 800633c:	d802      	bhi.n	8006344 <find_volume+0x2e0>
 800633e:	2302      	movs	r3, #2
 8006340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	f640 72f5 	movw	r2, #4085	; 0xff5
 800634a:	4293      	cmp	r3, r2
 800634c:	d802      	bhi.n	8006354 <find_volume+0x2f0>
 800634e:	2301      	movs	r3, #1
 8006350:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	1c9a      	adds	r2, r3, #2
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006360:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006362:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006366:	441a      	add	r2, r3
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800636c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	441a      	add	r2, r3
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800637a:	2b03      	cmp	r3, #3
 800637c:	d11e      	bne.n	80063bc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	3330      	adds	r3, #48	; 0x30
 8006382:	332a      	adds	r3, #42	; 0x2a
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fc59 	bl	8005c3c <ld_word>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <find_volume+0x330>
 8006390:	230d      	movs	r3, #13
 8006392:	e0a8      	b.n	80064e6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006396:	891b      	ldrh	r3, [r3, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <find_volume+0x33c>
 800639c:	230d      	movs	r3, #13
 800639e:	e0a2      	b.n	80064e6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	3330      	adds	r3, #48	; 0x30
 80063a4:	332c      	adds	r3, #44	; 0x2c
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fc60 	bl	8005c6c <ld_dword>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	647b      	str	r3, [r7, #68]	; 0x44
 80063ba:	e01f      	b.n	80063fc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	891b      	ldrh	r3, [r3, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <find_volume+0x364>
 80063c4:	230d      	movs	r3, #13
 80063c6:	e08e      	b.n	80064e6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ce:	441a      	add	r2, r3
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80063d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d103      	bne.n	80063e4 <find_volume+0x380>
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	e00a      	b.n	80063fa <find_volume+0x396>
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	695a      	ldr	r2, [r3, #20]
 80063e8:	4613      	mov	r3, r2
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	4413      	add	r3, r2
 80063ee:	085a      	lsrs	r2, r3, #1
 80063f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80063fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	699a      	ldr	r2, [r3, #24]
 8006400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006402:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006406:	0a5b      	lsrs	r3, r3, #9
 8006408:	429a      	cmp	r2, r3
 800640a:	d201      	bcs.n	8006410 <find_volume+0x3ac>
 800640c:	230d      	movs	r3, #13
 800640e:	e06a      	b.n	80064e6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	f04f 32ff 	mov.w	r2, #4294967295
 8006416:	611a      	str	r2, [r3, #16]
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	2280      	movs	r2, #128	; 0x80
 8006424:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006426:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800642a:	2b03      	cmp	r3, #3
 800642c:	d149      	bne.n	80064c2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	3330      	adds	r3, #48	; 0x30
 8006432:	3330      	adds	r3, #48	; 0x30
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff fc01 	bl	8005c3c <ld_word>
 800643a:	4603      	mov	r3, r0
 800643c:	2b01      	cmp	r3, #1
 800643e:	d140      	bne.n	80064c2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006442:	3301      	adds	r3, #1
 8006444:	4619      	mov	r1, r3
 8006446:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006448:	f7ff fc9c 	bl	8005d84 <move_window>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d137      	bne.n	80064c2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	2200      	movs	r2, #0
 8006456:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	3330      	adds	r3, #48	; 0x30
 800645c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff fbeb 	bl	8005c3c <ld_word>
 8006466:	4603      	mov	r3, r0
 8006468:	461a      	mov	r2, r3
 800646a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800646e:	429a      	cmp	r2, r3
 8006470:	d127      	bne.n	80064c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	3330      	adds	r3, #48	; 0x30
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fbf8 	bl	8005c6c <ld_dword>
 800647c:	4603      	mov	r3, r0
 800647e:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <find_volume+0x48c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d11e      	bne.n	80064c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	3330      	adds	r3, #48	; 0x30
 8006488:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800648c:	4618      	mov	r0, r3
 800648e:	f7ff fbed 	bl	8005c6c <ld_dword>
 8006492:	4603      	mov	r3, r0
 8006494:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <find_volume+0x490>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d113      	bne.n	80064c2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	3330      	adds	r3, #48	; 0x30
 800649e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fbe2 	bl	8005c6c <ld_dword>
 80064a8:	4602      	mov	r2, r0
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	3330      	adds	r3, #48	; 0x30
 80064b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff fbd8 	bl	8005c6c <ld_dword>
 80064bc:	4602      	mov	r2, r0
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80064c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80064ca:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <find_volume+0x494>)
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	3301      	adds	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <find_volume+0x494>)
 80064d4:	801a      	strh	r2, [r3, #0]
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <find_volume+0x494>)
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80064de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064e0:	f7ff fbe8 	bl	8005cb4 <clear_lock>
#endif
	return FR_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3758      	adds	r7, #88	; 0x58
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	41615252 	.word	0x41615252
 80064f4:	61417272 	.word	0x61417272
 80064f8:	200136dc 	.word	0x200136dc

080064fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800650e:	f107 0310 	add.w	r3, r7, #16
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fd0b 	bl	8005f2e <get_ldnumber>
 8006518:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	da01      	bge.n	8006524 <f_mount+0x28>
 8006520:	230b      	movs	r3, #11
 8006522:	e02b      	b.n	800657c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006524:	4a17      	ldr	r2, [pc, #92]	; (8006584 <f_mount+0x88>)
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006534:	69b8      	ldr	r0, [r7, #24]
 8006536:	f7ff fbbd 	bl	8005cb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2200      	movs	r2, #0
 800653e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	490d      	ldr	r1, [pc, #52]	; (8006584 <f_mount+0x88>)
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <f_mount+0x66>
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d001      	beq.n	8006566 <f_mount+0x6a>
 8006562:	2300      	movs	r3, #0
 8006564:	e00a      	b.n	800657c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006566:	f107 010c 	add.w	r1, r7, #12
 800656a:	f107 0308 	add.w	r3, r7, #8
 800656e:	2200      	movs	r2, #0
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fd77 	bl	8006064 <find_volume>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3720      	adds	r7, #32
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	200136d8 	.word	0x200136d8

08006588 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b092      	sub	sp, #72	; 0x48
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006594:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006598:	f107 030c 	add.w	r3, r7, #12
 800659c:	2200      	movs	r2, #0
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fd60 	bl	8006064 <find_volume>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80065aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 8099 	bne.w	80066e6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80065b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	3b02      	subs	r3, #2
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d804      	bhi.n	80065d2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	e089      	b.n	80066e6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d128      	bne.n	8006630 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80065de:	2302      	movs	r3, #2
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80065e6:	f107 0314 	add.w	r3, r7, #20
 80065ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fbf6 	bl	8005dde <get_fat>
 80065f2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d103      	bne.n	8006604 <f_getfree+0x7c>
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006602:	e063      	b.n	80066cc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d103      	bne.n	8006612 <f_getfree+0x8a>
 800660a:	2302      	movs	r3, #2
 800660c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006610:	e05c      	b.n	80066cc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <f_getfree+0x96>
 8006618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661a:	3301      	adds	r3, #1
 800661c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	3301      	adds	r3, #1
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800662a:	429a      	cmp	r2, r3
 800662c:	d3db      	bcc.n	80065e6 <f_getfree+0x5e>
 800662e:	e04d      	b.n	80066cc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
 8006640:	2300      	movs	r3, #0
 8006642:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006646:	2b00      	cmp	r3, #0
 8006648:	d113      	bne.n	8006672 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800664a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	63ba      	str	r2, [r7, #56]	; 0x38
 8006652:	4619      	mov	r1, r3
 8006654:	f7ff fb96 	bl	8005d84 <move_window>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800665e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006662:	2b00      	cmp	r3, #0
 8006664:	d131      	bne.n	80066ca <f_getfree+0x142>
							p = fs->win;
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	3330      	adds	r3, #48	; 0x30
 800666a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800666c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b02      	cmp	r3, #2
 8006678:	d10f      	bne.n	800669a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800667a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800667c:	f7ff fade 	bl	8005c3c <ld_word>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <f_getfree+0x104>
 8006686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006688:	3301      	adds	r3, #1
 800668a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	3302      	adds	r3, #2
 8006690:	633b      	str	r3, [r7, #48]	; 0x30
 8006692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006694:	3b02      	subs	r3, #2
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
 8006698:	e010      	b.n	80066bc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800669a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800669c:	f7ff fae6 	bl	8005c6c <ld_dword>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <f_getfree+0x128>
 80066aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ac:	3301      	adds	r3, #1
 80066ae:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	3304      	adds	r3, #4
 80066b4:	633b      	str	r3, [r7, #48]	; 0x30
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	3b04      	subs	r3, #4
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80066bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066be:	3b01      	subs	r3, #1
 80066c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1bd      	bne.n	8006644 <f_getfree+0xbc>
 80066c8:	e000      	b.n	80066cc <f_getfree+0x144>
							if (res != FR_OK) break;
 80066ca:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066d0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066d6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	791a      	ldrb	r2, [r3, #4]
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	f042 0201 	orr.w	r2, r2, #1
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80066e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3748      	adds	r7, #72	; 0x48
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006702:	2301      	movs	r3, #1
 8006704:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800670a:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <FATFS_LinkDriverEx+0x94>)
 800670c:	7a5b      	ldrb	r3, [r3, #9]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d131      	bne.n	8006778 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006714:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <FATFS_LinkDriverEx+0x94>)
 8006716:	7a5b      	ldrb	r3, [r3, #9]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <FATFS_LinkDriverEx+0x94>)
 800671e:	2100      	movs	r1, #0
 8006720:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006722:	4b19      	ldr	r3, [pc, #100]	; (8006788 <FATFS_LinkDriverEx+0x94>)
 8006724:	7a5b      	ldrb	r3, [r3, #9]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	4a17      	ldr	r2, [pc, #92]	; (8006788 <FATFS_LinkDriverEx+0x94>)
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <FATFS_LinkDriverEx+0x94>)
 8006734:	7a5b      	ldrb	r3, [r3, #9]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	4b13      	ldr	r3, [pc, #76]	; (8006788 <FATFS_LinkDriverEx+0x94>)
 800673c:	4413      	add	r3, r2
 800673e:	79fa      	ldrb	r2, [r7, #7]
 8006740:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006742:	4b11      	ldr	r3, [pc, #68]	; (8006788 <FATFS_LinkDriverEx+0x94>)
 8006744:	7a5b      	ldrb	r3, [r3, #9]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	b2d1      	uxtb	r1, r2
 800674c:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <FATFS_LinkDriverEx+0x94>)
 800674e:	7251      	strb	r1, [r2, #9]
 8006750:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006752:	7dbb      	ldrb	r3, [r7, #22]
 8006754:	3330      	adds	r3, #48	; 0x30
 8006756:	b2da      	uxtb	r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	3301      	adds	r3, #1
 8006760:	223a      	movs	r2, #58	; 0x3a
 8006762:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	3302      	adds	r3, #2
 8006768:	222f      	movs	r2, #47	; 0x2f
 800676a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	3303      	adds	r3, #3
 8006770:	2200      	movs	r2, #0
 8006772:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20013700 	.word	0x20013700

0800678c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006796:	2200      	movs	r2, #0
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff ffaa 	bl	80066f4 <FATFS_LinkDriverEx>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <__errno>:
 80067ac:	4b01      	ldr	r3, [pc, #4]	; (80067b4 <__errno+0x8>)
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20000084 	.word	0x20000084

080067b8 <__libc_init_array>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	4d0d      	ldr	r5, [pc, #52]	; (80067f0 <__libc_init_array+0x38>)
 80067bc:	4c0d      	ldr	r4, [pc, #52]	; (80067f4 <__libc_init_array+0x3c>)
 80067be:	1b64      	subs	r4, r4, r5
 80067c0:	10a4      	asrs	r4, r4, #2
 80067c2:	2600      	movs	r6, #0
 80067c4:	42a6      	cmp	r6, r4
 80067c6:	d109      	bne.n	80067dc <__libc_init_array+0x24>
 80067c8:	4d0b      	ldr	r5, [pc, #44]	; (80067f8 <__libc_init_array+0x40>)
 80067ca:	4c0c      	ldr	r4, [pc, #48]	; (80067fc <__libc_init_array+0x44>)
 80067cc:	f001 fa1a 	bl	8007c04 <_init>
 80067d0:	1b64      	subs	r4, r4, r5
 80067d2:	10a4      	asrs	r4, r4, #2
 80067d4:	2600      	movs	r6, #0
 80067d6:	42a6      	cmp	r6, r4
 80067d8:	d105      	bne.n	80067e6 <__libc_init_array+0x2e>
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e0:	4798      	blx	r3
 80067e2:	3601      	adds	r6, #1
 80067e4:	e7ee      	b.n	80067c4 <__libc_init_array+0xc>
 80067e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ea:	4798      	blx	r3
 80067ec:	3601      	adds	r6, #1
 80067ee:	e7f2      	b.n	80067d6 <__libc_init_array+0x1e>
 80067f0:	08008154 	.word	0x08008154
 80067f4:	08008154 	.word	0x08008154
 80067f8:	08008154 	.word	0x08008154
 80067fc:	08008158 	.word	0x08008158

08006800 <memset>:
 8006800:	4402      	add	r2, r0
 8006802:	4603      	mov	r3, r0
 8006804:	4293      	cmp	r3, r2
 8006806:	d100      	bne.n	800680a <memset+0xa>
 8006808:	4770      	bx	lr
 800680a:	f803 1b01 	strb.w	r1, [r3], #1
 800680e:	e7f9      	b.n	8006804 <memset+0x4>

08006810 <iprintf>:
 8006810:	b40f      	push	{r0, r1, r2, r3}
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <iprintf+0x2c>)
 8006814:	b513      	push	{r0, r1, r4, lr}
 8006816:	681c      	ldr	r4, [r3, #0]
 8006818:	b124      	cbz	r4, 8006824 <iprintf+0x14>
 800681a:	69a3      	ldr	r3, [r4, #24]
 800681c:	b913      	cbnz	r3, 8006824 <iprintf+0x14>
 800681e:	4620      	mov	r0, r4
 8006820:	f000 fa98 	bl	8006d54 <__sinit>
 8006824:	ab05      	add	r3, sp, #20
 8006826:	9a04      	ldr	r2, [sp, #16]
 8006828:	68a1      	ldr	r1, [r4, #8]
 800682a:	9301      	str	r3, [sp, #4]
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fdfd 	bl	800742c <_vfiprintf_r>
 8006832:	b002      	add	sp, #8
 8006834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006838:	b004      	add	sp, #16
 800683a:	4770      	bx	lr
 800683c:	20000084 	.word	0x20000084

08006840 <_puts_r>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	460e      	mov	r6, r1
 8006844:	4605      	mov	r5, r0
 8006846:	b118      	cbz	r0, 8006850 <_puts_r+0x10>
 8006848:	6983      	ldr	r3, [r0, #24]
 800684a:	b90b      	cbnz	r3, 8006850 <_puts_r+0x10>
 800684c:	f000 fa82 	bl	8006d54 <__sinit>
 8006850:	69ab      	ldr	r3, [r5, #24]
 8006852:	68ac      	ldr	r4, [r5, #8]
 8006854:	b913      	cbnz	r3, 800685c <_puts_r+0x1c>
 8006856:	4628      	mov	r0, r5
 8006858:	f000 fa7c 	bl	8006d54 <__sinit>
 800685c:	4b2c      	ldr	r3, [pc, #176]	; (8006910 <_puts_r+0xd0>)
 800685e:	429c      	cmp	r4, r3
 8006860:	d120      	bne.n	80068a4 <_puts_r+0x64>
 8006862:	686c      	ldr	r4, [r5, #4]
 8006864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006866:	07db      	lsls	r3, r3, #31
 8006868:	d405      	bmi.n	8006876 <_puts_r+0x36>
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	0598      	lsls	r0, r3, #22
 800686e:	d402      	bmi.n	8006876 <_puts_r+0x36>
 8006870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006872:	f000 fb0d 	bl	8006e90 <__retarget_lock_acquire_recursive>
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	0719      	lsls	r1, r3, #28
 800687a:	d51d      	bpl.n	80068b8 <_puts_r+0x78>
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	b1db      	cbz	r3, 80068b8 <_puts_r+0x78>
 8006880:	3e01      	subs	r6, #1
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006888:	3b01      	subs	r3, #1
 800688a:	60a3      	str	r3, [r4, #8]
 800688c:	bb39      	cbnz	r1, 80068de <_puts_r+0x9e>
 800688e:	2b00      	cmp	r3, #0
 8006890:	da38      	bge.n	8006904 <_puts_r+0xc4>
 8006892:	4622      	mov	r2, r4
 8006894:	210a      	movs	r1, #10
 8006896:	4628      	mov	r0, r5
 8006898:	f000 f882 	bl	80069a0 <__swbuf_r>
 800689c:	3001      	adds	r0, #1
 800689e:	d011      	beq.n	80068c4 <_puts_r+0x84>
 80068a0:	250a      	movs	r5, #10
 80068a2:	e011      	b.n	80068c8 <_puts_r+0x88>
 80068a4:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <_puts_r+0xd4>)
 80068a6:	429c      	cmp	r4, r3
 80068a8:	d101      	bne.n	80068ae <_puts_r+0x6e>
 80068aa:	68ac      	ldr	r4, [r5, #8]
 80068ac:	e7da      	b.n	8006864 <_puts_r+0x24>
 80068ae:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <_puts_r+0xd8>)
 80068b0:	429c      	cmp	r4, r3
 80068b2:	bf08      	it	eq
 80068b4:	68ec      	ldreq	r4, [r5, #12]
 80068b6:	e7d5      	b.n	8006864 <_puts_r+0x24>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 f8c2 	bl	8006a44 <__swsetup_r>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d0dd      	beq.n	8006880 <_puts_r+0x40>
 80068c4:	f04f 35ff 	mov.w	r5, #4294967295
 80068c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ca:	07da      	lsls	r2, r3, #31
 80068cc:	d405      	bmi.n	80068da <_puts_r+0x9a>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	059b      	lsls	r3, r3, #22
 80068d2:	d402      	bmi.n	80068da <_puts_r+0x9a>
 80068d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068d6:	f000 fadc 	bl	8006e92 <__retarget_lock_release_recursive>
 80068da:	4628      	mov	r0, r5
 80068dc:	bd70      	pop	{r4, r5, r6, pc}
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da04      	bge.n	80068ec <_puts_r+0xac>
 80068e2:	69a2      	ldr	r2, [r4, #24]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	dc06      	bgt.n	80068f6 <_puts_r+0xb6>
 80068e8:	290a      	cmp	r1, #10
 80068ea:	d004      	beq.n	80068f6 <_puts_r+0xb6>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	6022      	str	r2, [r4, #0]
 80068f2:	7019      	strb	r1, [r3, #0]
 80068f4:	e7c5      	b.n	8006882 <_puts_r+0x42>
 80068f6:	4622      	mov	r2, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 f851 	bl	80069a0 <__swbuf_r>
 80068fe:	3001      	adds	r0, #1
 8006900:	d1bf      	bne.n	8006882 <_puts_r+0x42>
 8006902:	e7df      	b.n	80068c4 <_puts_r+0x84>
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	250a      	movs	r5, #10
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	701d      	strb	r5, [r3, #0]
 800690e:	e7db      	b.n	80068c8 <_puts_r+0x88>
 8006910:	080080d8 	.word	0x080080d8
 8006914:	080080f8 	.word	0x080080f8
 8006918:	080080b8 	.word	0x080080b8

0800691c <puts>:
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <puts+0xc>)
 800691e:	4601      	mov	r1, r0
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	f7ff bf8d 	b.w	8006840 <_puts_r>
 8006926:	bf00      	nop
 8006928:	20000084 	.word	0x20000084

0800692c <_vsniprintf_r>:
 800692c:	b530      	push	{r4, r5, lr}
 800692e:	4614      	mov	r4, r2
 8006930:	2c00      	cmp	r4, #0
 8006932:	b09b      	sub	sp, #108	; 0x6c
 8006934:	4605      	mov	r5, r0
 8006936:	461a      	mov	r2, r3
 8006938:	da05      	bge.n	8006946 <_vsniprintf_r+0x1a>
 800693a:	238b      	movs	r3, #139	; 0x8b
 800693c:	6003      	str	r3, [r0, #0]
 800693e:	f04f 30ff 	mov.w	r0, #4294967295
 8006942:	b01b      	add	sp, #108	; 0x6c
 8006944:	bd30      	pop	{r4, r5, pc}
 8006946:	f44f 7302 	mov.w	r3, #520	; 0x208
 800694a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800694e:	bf14      	ite	ne
 8006950:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006954:	4623      	moveq	r3, r4
 8006956:	9302      	str	r3, [sp, #8]
 8006958:	9305      	str	r3, [sp, #20]
 800695a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800695e:	9100      	str	r1, [sp, #0]
 8006960:	9104      	str	r1, [sp, #16]
 8006962:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006966:	4669      	mov	r1, sp
 8006968:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800696a:	f000 fc35 	bl	80071d8 <_svfiprintf_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	bfbc      	itt	lt
 8006972:	238b      	movlt	r3, #139	; 0x8b
 8006974:	602b      	strlt	r3, [r5, #0]
 8006976:	2c00      	cmp	r4, #0
 8006978:	d0e3      	beq.n	8006942 <_vsniprintf_r+0x16>
 800697a:	9b00      	ldr	r3, [sp, #0]
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e7df      	b.n	8006942 <_vsniprintf_r+0x16>
	...

08006984 <vsniprintf>:
 8006984:	b507      	push	{r0, r1, r2, lr}
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	460a      	mov	r2, r1
 800698c:	4601      	mov	r1, r0
 800698e:	4803      	ldr	r0, [pc, #12]	; (800699c <vsniprintf+0x18>)
 8006990:	6800      	ldr	r0, [r0, #0]
 8006992:	f7ff ffcb 	bl	800692c <_vsniprintf_r>
 8006996:	b003      	add	sp, #12
 8006998:	f85d fb04 	ldr.w	pc, [sp], #4
 800699c:	20000084 	.word	0x20000084

080069a0 <__swbuf_r>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	460e      	mov	r6, r1
 80069a4:	4614      	mov	r4, r2
 80069a6:	4605      	mov	r5, r0
 80069a8:	b118      	cbz	r0, 80069b2 <__swbuf_r+0x12>
 80069aa:	6983      	ldr	r3, [r0, #24]
 80069ac:	b90b      	cbnz	r3, 80069b2 <__swbuf_r+0x12>
 80069ae:	f000 f9d1 	bl	8006d54 <__sinit>
 80069b2:	4b21      	ldr	r3, [pc, #132]	; (8006a38 <__swbuf_r+0x98>)
 80069b4:	429c      	cmp	r4, r3
 80069b6:	d12b      	bne.n	8006a10 <__swbuf_r+0x70>
 80069b8:	686c      	ldr	r4, [r5, #4]
 80069ba:	69a3      	ldr	r3, [r4, #24]
 80069bc:	60a3      	str	r3, [r4, #8]
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	071a      	lsls	r2, r3, #28
 80069c2:	d52f      	bpl.n	8006a24 <__swbuf_r+0x84>
 80069c4:	6923      	ldr	r3, [r4, #16]
 80069c6:	b36b      	cbz	r3, 8006a24 <__swbuf_r+0x84>
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	6820      	ldr	r0, [r4, #0]
 80069cc:	1ac0      	subs	r0, r0, r3
 80069ce:	6963      	ldr	r3, [r4, #20]
 80069d0:	b2f6      	uxtb	r6, r6
 80069d2:	4283      	cmp	r3, r0
 80069d4:	4637      	mov	r7, r6
 80069d6:	dc04      	bgt.n	80069e2 <__swbuf_r+0x42>
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 f926 	bl	8006c2c <_fflush_r>
 80069e0:	bb30      	cbnz	r0, 8006a30 <__swbuf_r+0x90>
 80069e2:	68a3      	ldr	r3, [r4, #8]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	60a3      	str	r3, [r4, #8]
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	6022      	str	r2, [r4, #0]
 80069ee:	701e      	strb	r6, [r3, #0]
 80069f0:	6963      	ldr	r3, [r4, #20]
 80069f2:	3001      	adds	r0, #1
 80069f4:	4283      	cmp	r3, r0
 80069f6:	d004      	beq.n	8006a02 <__swbuf_r+0x62>
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	07db      	lsls	r3, r3, #31
 80069fc:	d506      	bpl.n	8006a0c <__swbuf_r+0x6c>
 80069fe:	2e0a      	cmp	r6, #10
 8006a00:	d104      	bne.n	8006a0c <__swbuf_r+0x6c>
 8006a02:	4621      	mov	r1, r4
 8006a04:	4628      	mov	r0, r5
 8006a06:	f000 f911 	bl	8006c2c <_fflush_r>
 8006a0a:	b988      	cbnz	r0, 8006a30 <__swbuf_r+0x90>
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <__swbuf_r+0x9c>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	d101      	bne.n	8006a1a <__swbuf_r+0x7a>
 8006a16:	68ac      	ldr	r4, [r5, #8]
 8006a18:	e7cf      	b.n	80069ba <__swbuf_r+0x1a>
 8006a1a:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <__swbuf_r+0xa0>)
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	bf08      	it	eq
 8006a20:	68ec      	ldreq	r4, [r5, #12]
 8006a22:	e7ca      	b.n	80069ba <__swbuf_r+0x1a>
 8006a24:	4621      	mov	r1, r4
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 f80c 	bl	8006a44 <__swsetup_r>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d0cb      	beq.n	80069c8 <__swbuf_r+0x28>
 8006a30:	f04f 37ff 	mov.w	r7, #4294967295
 8006a34:	e7ea      	b.n	8006a0c <__swbuf_r+0x6c>
 8006a36:	bf00      	nop
 8006a38:	080080d8 	.word	0x080080d8
 8006a3c:	080080f8 	.word	0x080080f8
 8006a40:	080080b8 	.word	0x080080b8

08006a44 <__swsetup_r>:
 8006a44:	4b32      	ldr	r3, [pc, #200]	; (8006b10 <__swsetup_r+0xcc>)
 8006a46:	b570      	push	{r4, r5, r6, lr}
 8006a48:	681d      	ldr	r5, [r3, #0]
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	b125      	cbz	r5, 8006a5a <__swsetup_r+0x16>
 8006a50:	69ab      	ldr	r3, [r5, #24]
 8006a52:	b913      	cbnz	r3, 8006a5a <__swsetup_r+0x16>
 8006a54:	4628      	mov	r0, r5
 8006a56:	f000 f97d 	bl	8006d54 <__sinit>
 8006a5a:	4b2e      	ldr	r3, [pc, #184]	; (8006b14 <__swsetup_r+0xd0>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	d10f      	bne.n	8006a80 <__swsetup_r+0x3c>
 8006a60:	686c      	ldr	r4, [r5, #4]
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a68:	0719      	lsls	r1, r3, #28
 8006a6a:	d42c      	bmi.n	8006ac6 <__swsetup_r+0x82>
 8006a6c:	06dd      	lsls	r5, r3, #27
 8006a6e:	d411      	bmi.n	8006a94 <__swsetup_r+0x50>
 8006a70:	2309      	movs	r3, #9
 8006a72:	6033      	str	r3, [r6, #0]
 8006a74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a78:	81a3      	strh	r3, [r4, #12]
 8006a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7e:	e03e      	b.n	8006afe <__swsetup_r+0xba>
 8006a80:	4b25      	ldr	r3, [pc, #148]	; (8006b18 <__swsetup_r+0xd4>)
 8006a82:	429c      	cmp	r4, r3
 8006a84:	d101      	bne.n	8006a8a <__swsetup_r+0x46>
 8006a86:	68ac      	ldr	r4, [r5, #8]
 8006a88:	e7eb      	b.n	8006a62 <__swsetup_r+0x1e>
 8006a8a:	4b24      	ldr	r3, [pc, #144]	; (8006b1c <__swsetup_r+0xd8>)
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	bf08      	it	eq
 8006a90:	68ec      	ldreq	r4, [r5, #12]
 8006a92:	e7e6      	b.n	8006a62 <__swsetup_r+0x1e>
 8006a94:	0758      	lsls	r0, r3, #29
 8006a96:	d512      	bpl.n	8006abe <__swsetup_r+0x7a>
 8006a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a9a:	b141      	cbz	r1, 8006aae <__swsetup_r+0x6a>
 8006a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aa0:	4299      	cmp	r1, r3
 8006aa2:	d002      	beq.n	8006aaa <__swsetup_r+0x66>
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f000 fa5b 	bl	8006f60 <_free_r>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	6363      	str	r3, [r4, #52]	; 0x34
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	6063      	str	r3, [r4, #4]
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f043 0308 	orr.w	r3, r3, #8
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	6923      	ldr	r3, [r4, #16]
 8006ac8:	b94b      	cbnz	r3, 8006ade <__swsetup_r+0x9a>
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad4:	d003      	beq.n	8006ade <__swsetup_r+0x9a>
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f000 fa01 	bl	8006ee0 <__smakebuf_r>
 8006ade:	89a0      	ldrh	r0, [r4, #12]
 8006ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ae4:	f010 0301 	ands.w	r3, r0, #1
 8006ae8:	d00a      	beq.n	8006b00 <__swsetup_r+0xbc>
 8006aea:	2300      	movs	r3, #0
 8006aec:	60a3      	str	r3, [r4, #8]
 8006aee:	6963      	ldr	r3, [r4, #20]
 8006af0:	425b      	negs	r3, r3
 8006af2:	61a3      	str	r3, [r4, #24]
 8006af4:	6923      	ldr	r3, [r4, #16]
 8006af6:	b943      	cbnz	r3, 8006b0a <__swsetup_r+0xc6>
 8006af8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006afc:	d1ba      	bne.n	8006a74 <__swsetup_r+0x30>
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	0781      	lsls	r1, r0, #30
 8006b02:	bf58      	it	pl
 8006b04:	6963      	ldrpl	r3, [r4, #20]
 8006b06:	60a3      	str	r3, [r4, #8]
 8006b08:	e7f4      	b.n	8006af4 <__swsetup_r+0xb0>
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e7f7      	b.n	8006afe <__swsetup_r+0xba>
 8006b0e:	bf00      	nop
 8006b10:	20000084 	.word	0x20000084
 8006b14:	080080d8 	.word	0x080080d8
 8006b18:	080080f8 	.word	0x080080f8
 8006b1c:	080080b8 	.word	0x080080b8

08006b20 <__sflush_r>:
 8006b20:	898a      	ldrh	r2, [r1, #12]
 8006b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b26:	4605      	mov	r5, r0
 8006b28:	0710      	lsls	r0, r2, #28
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	d458      	bmi.n	8006be0 <__sflush_r+0xc0>
 8006b2e:	684b      	ldr	r3, [r1, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	dc05      	bgt.n	8006b40 <__sflush_r+0x20>
 8006b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	dc02      	bgt.n	8006b40 <__sflush_r+0x20>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	d0f9      	beq.n	8006b3a <__sflush_r+0x1a>
 8006b46:	2300      	movs	r3, #0
 8006b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b4c:	682f      	ldr	r7, [r5, #0]
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	d032      	beq.n	8006bb8 <__sflush_r+0x98>
 8006b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	075a      	lsls	r2, r3, #29
 8006b58:	d505      	bpl.n	8006b66 <__sflush_r+0x46>
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	1ac0      	subs	r0, r0, r3
 8006b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b60:	b10b      	cbz	r3, 8006b66 <__sflush_r+0x46>
 8006b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b64:	1ac0      	subs	r0, r0, r3
 8006b66:	2300      	movs	r3, #0
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b6c:	6a21      	ldr	r1, [r4, #32]
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b0      	blx	r6
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	d106      	bne.n	8006b86 <__sflush_r+0x66>
 8006b78:	6829      	ldr	r1, [r5, #0]
 8006b7a:	291d      	cmp	r1, #29
 8006b7c:	d82c      	bhi.n	8006bd8 <__sflush_r+0xb8>
 8006b7e:	4a2a      	ldr	r2, [pc, #168]	; (8006c28 <__sflush_r+0x108>)
 8006b80:	40ca      	lsrs	r2, r1
 8006b82:	07d6      	lsls	r6, r2, #31
 8006b84:	d528      	bpl.n	8006bd8 <__sflush_r+0xb8>
 8006b86:	2200      	movs	r2, #0
 8006b88:	6062      	str	r2, [r4, #4]
 8006b8a:	04d9      	lsls	r1, r3, #19
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	6022      	str	r2, [r4, #0]
 8006b90:	d504      	bpl.n	8006b9c <__sflush_r+0x7c>
 8006b92:	1c42      	adds	r2, r0, #1
 8006b94:	d101      	bne.n	8006b9a <__sflush_r+0x7a>
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	b903      	cbnz	r3, 8006b9c <__sflush_r+0x7c>
 8006b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8006b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b9e:	602f      	str	r7, [r5, #0]
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d0ca      	beq.n	8006b3a <__sflush_r+0x1a>
 8006ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	d002      	beq.n	8006bb2 <__sflush_r+0x92>
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 f9d7 	bl	8006f60 <_free_r>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8006bb6:	e7c1      	b.n	8006b3c <__sflush_r+0x1c>
 8006bb8:	6a21      	ldr	r1, [r4, #32]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	47b0      	blx	r6
 8006bc0:	1c41      	adds	r1, r0, #1
 8006bc2:	d1c7      	bne.n	8006b54 <__sflush_r+0x34>
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0c4      	beq.n	8006b54 <__sflush_r+0x34>
 8006bca:	2b1d      	cmp	r3, #29
 8006bcc:	d001      	beq.n	8006bd2 <__sflush_r+0xb2>
 8006bce:	2b16      	cmp	r3, #22
 8006bd0:	d101      	bne.n	8006bd6 <__sflush_r+0xb6>
 8006bd2:	602f      	str	r7, [r5, #0]
 8006bd4:	e7b1      	b.n	8006b3a <__sflush_r+0x1a>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bdc:	81a3      	strh	r3, [r4, #12]
 8006bde:	e7ad      	b.n	8006b3c <__sflush_r+0x1c>
 8006be0:	690f      	ldr	r7, [r1, #16]
 8006be2:	2f00      	cmp	r7, #0
 8006be4:	d0a9      	beq.n	8006b3a <__sflush_r+0x1a>
 8006be6:	0793      	lsls	r3, r2, #30
 8006be8:	680e      	ldr	r6, [r1, #0]
 8006bea:	bf08      	it	eq
 8006bec:	694b      	ldreq	r3, [r1, #20]
 8006bee:	600f      	str	r7, [r1, #0]
 8006bf0:	bf18      	it	ne
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	eba6 0807 	sub.w	r8, r6, r7
 8006bf8:	608b      	str	r3, [r1, #8]
 8006bfa:	f1b8 0f00 	cmp.w	r8, #0
 8006bfe:	dd9c      	ble.n	8006b3a <__sflush_r+0x1a>
 8006c00:	6a21      	ldr	r1, [r4, #32]
 8006c02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c04:	4643      	mov	r3, r8
 8006c06:	463a      	mov	r2, r7
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b0      	blx	r6
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	dc06      	bgt.n	8006c1e <__sflush_r+0xfe>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	e78e      	b.n	8006b3c <__sflush_r+0x1c>
 8006c1e:	4407      	add	r7, r0
 8006c20:	eba8 0800 	sub.w	r8, r8, r0
 8006c24:	e7e9      	b.n	8006bfa <__sflush_r+0xda>
 8006c26:	bf00      	nop
 8006c28:	20400001 	.word	0x20400001

08006c2c <_fflush_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	690b      	ldr	r3, [r1, #16]
 8006c30:	4605      	mov	r5, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	b913      	cbnz	r3, 8006c3c <_fflush_r+0x10>
 8006c36:	2500      	movs	r5, #0
 8006c38:	4628      	mov	r0, r5
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	b118      	cbz	r0, 8006c46 <_fflush_r+0x1a>
 8006c3e:	6983      	ldr	r3, [r0, #24]
 8006c40:	b90b      	cbnz	r3, 8006c46 <_fflush_r+0x1a>
 8006c42:	f000 f887 	bl	8006d54 <__sinit>
 8006c46:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <_fflush_r+0x6c>)
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	d11b      	bne.n	8006c84 <_fflush_r+0x58>
 8006c4c:	686c      	ldr	r4, [r5, #4]
 8006c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0ef      	beq.n	8006c36 <_fflush_r+0xa>
 8006c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c58:	07d0      	lsls	r0, r2, #31
 8006c5a:	d404      	bmi.n	8006c66 <_fflush_r+0x3a>
 8006c5c:	0599      	lsls	r1, r3, #22
 8006c5e:	d402      	bmi.n	8006c66 <_fflush_r+0x3a>
 8006c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c62:	f000 f915 	bl	8006e90 <__retarget_lock_acquire_recursive>
 8006c66:	4628      	mov	r0, r5
 8006c68:	4621      	mov	r1, r4
 8006c6a:	f7ff ff59 	bl	8006b20 <__sflush_r>
 8006c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c70:	07da      	lsls	r2, r3, #31
 8006c72:	4605      	mov	r5, r0
 8006c74:	d4e0      	bmi.n	8006c38 <_fflush_r+0xc>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	059b      	lsls	r3, r3, #22
 8006c7a:	d4dd      	bmi.n	8006c38 <_fflush_r+0xc>
 8006c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c7e:	f000 f908 	bl	8006e92 <__retarget_lock_release_recursive>
 8006c82:	e7d9      	b.n	8006c38 <_fflush_r+0xc>
 8006c84:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <_fflush_r+0x70>)
 8006c86:	429c      	cmp	r4, r3
 8006c88:	d101      	bne.n	8006c8e <_fflush_r+0x62>
 8006c8a:	68ac      	ldr	r4, [r5, #8]
 8006c8c:	e7df      	b.n	8006c4e <_fflush_r+0x22>
 8006c8e:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <_fflush_r+0x74>)
 8006c90:	429c      	cmp	r4, r3
 8006c92:	bf08      	it	eq
 8006c94:	68ec      	ldreq	r4, [r5, #12]
 8006c96:	e7da      	b.n	8006c4e <_fflush_r+0x22>
 8006c98:	080080d8 	.word	0x080080d8
 8006c9c:	080080f8 	.word	0x080080f8
 8006ca0:	080080b8 	.word	0x080080b8

08006ca4 <std>:
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	b510      	push	{r4, lr}
 8006ca8:	4604      	mov	r4, r0
 8006caa:	e9c0 3300 	strd	r3, r3, [r0]
 8006cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cb2:	6083      	str	r3, [r0, #8]
 8006cb4:	8181      	strh	r1, [r0, #12]
 8006cb6:	6643      	str	r3, [r0, #100]	; 0x64
 8006cb8:	81c2      	strh	r2, [r0, #14]
 8006cba:	6183      	str	r3, [r0, #24]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	305c      	adds	r0, #92	; 0x5c
 8006cc2:	f7ff fd9d 	bl	8006800 <memset>
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <std+0x38>)
 8006cc8:	6263      	str	r3, [r4, #36]	; 0x24
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <std+0x3c>)
 8006ccc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cce:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <std+0x40>)
 8006cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cd2:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <std+0x44>)
 8006cd4:	6224      	str	r4, [r4, #32]
 8006cd6:	6323      	str	r3, [r4, #48]	; 0x30
 8006cd8:	bd10      	pop	{r4, pc}
 8006cda:	bf00      	nop
 8006cdc:	080079d5 	.word	0x080079d5
 8006ce0:	080079f7 	.word	0x080079f7
 8006ce4:	08007a2f 	.word	0x08007a2f
 8006ce8:	08007a53 	.word	0x08007a53

08006cec <_cleanup_r>:
 8006cec:	4901      	ldr	r1, [pc, #4]	; (8006cf4 <_cleanup_r+0x8>)
 8006cee:	f000 b8af 	b.w	8006e50 <_fwalk_reent>
 8006cf2:	bf00      	nop
 8006cf4:	08006c2d 	.word	0x08006c2d

08006cf8 <__sfmoreglue>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	2268      	movs	r2, #104	; 0x68
 8006cfc:	1e4d      	subs	r5, r1, #1
 8006cfe:	4355      	muls	r5, r2
 8006d00:	460e      	mov	r6, r1
 8006d02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d06:	f000 f997 	bl	8007038 <_malloc_r>
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	b140      	cbz	r0, 8006d20 <__sfmoreglue+0x28>
 8006d0e:	2100      	movs	r1, #0
 8006d10:	e9c0 1600 	strd	r1, r6, [r0]
 8006d14:	300c      	adds	r0, #12
 8006d16:	60a0      	str	r0, [r4, #8]
 8006d18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d1c:	f7ff fd70 	bl	8006800 <memset>
 8006d20:	4620      	mov	r0, r4
 8006d22:	bd70      	pop	{r4, r5, r6, pc}

08006d24 <__sfp_lock_acquire>:
 8006d24:	4801      	ldr	r0, [pc, #4]	; (8006d2c <__sfp_lock_acquire+0x8>)
 8006d26:	f000 b8b3 	b.w	8006e90 <__retarget_lock_acquire_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	2001370d 	.word	0x2001370d

08006d30 <__sfp_lock_release>:
 8006d30:	4801      	ldr	r0, [pc, #4]	; (8006d38 <__sfp_lock_release+0x8>)
 8006d32:	f000 b8ae 	b.w	8006e92 <__retarget_lock_release_recursive>
 8006d36:	bf00      	nop
 8006d38:	2001370d 	.word	0x2001370d

08006d3c <__sinit_lock_acquire>:
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <__sinit_lock_acquire+0x8>)
 8006d3e:	f000 b8a7 	b.w	8006e90 <__retarget_lock_acquire_recursive>
 8006d42:	bf00      	nop
 8006d44:	2001370e 	.word	0x2001370e

08006d48 <__sinit_lock_release>:
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <__sinit_lock_release+0x8>)
 8006d4a:	f000 b8a2 	b.w	8006e92 <__retarget_lock_release_recursive>
 8006d4e:	bf00      	nop
 8006d50:	2001370e 	.word	0x2001370e

08006d54 <__sinit>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	4604      	mov	r4, r0
 8006d58:	f7ff fff0 	bl	8006d3c <__sinit_lock_acquire>
 8006d5c:	69a3      	ldr	r3, [r4, #24]
 8006d5e:	b11b      	cbz	r3, 8006d68 <__sinit+0x14>
 8006d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d64:	f7ff bff0 	b.w	8006d48 <__sinit_lock_release>
 8006d68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d6c:	6523      	str	r3, [r4, #80]	; 0x50
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <__sinit+0x68>)
 8006d70:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <__sinit+0x6c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d76:	42a3      	cmp	r3, r4
 8006d78:	bf04      	itt	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	61a3      	streq	r3, [r4, #24]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 f820 	bl	8006dc4 <__sfp>
 8006d84:	6060      	str	r0, [r4, #4]
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 f81c 	bl	8006dc4 <__sfp>
 8006d8c:	60a0      	str	r0, [r4, #8]
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 f818 	bl	8006dc4 <__sfp>
 8006d94:	2200      	movs	r2, #0
 8006d96:	60e0      	str	r0, [r4, #12]
 8006d98:	2104      	movs	r1, #4
 8006d9a:	6860      	ldr	r0, [r4, #4]
 8006d9c:	f7ff ff82 	bl	8006ca4 <std>
 8006da0:	68a0      	ldr	r0, [r4, #8]
 8006da2:	2201      	movs	r2, #1
 8006da4:	2109      	movs	r1, #9
 8006da6:	f7ff ff7d 	bl	8006ca4 <std>
 8006daa:	68e0      	ldr	r0, [r4, #12]
 8006dac:	2202      	movs	r2, #2
 8006dae:	2112      	movs	r1, #18
 8006db0:	f7ff ff78 	bl	8006ca4 <std>
 8006db4:	2301      	movs	r3, #1
 8006db6:	61a3      	str	r3, [r4, #24]
 8006db8:	e7d2      	b.n	8006d60 <__sinit+0xc>
 8006dba:	bf00      	nop
 8006dbc:	080080b4 	.word	0x080080b4
 8006dc0:	08006ced 	.word	0x08006ced

08006dc4 <__sfp>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	4607      	mov	r7, r0
 8006dc8:	f7ff ffac 	bl	8006d24 <__sfp_lock_acquire>
 8006dcc:	4b1e      	ldr	r3, [pc, #120]	; (8006e48 <__sfp+0x84>)
 8006dce:	681e      	ldr	r6, [r3, #0]
 8006dd0:	69b3      	ldr	r3, [r6, #24]
 8006dd2:	b913      	cbnz	r3, 8006dda <__sfp+0x16>
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f7ff ffbd 	bl	8006d54 <__sinit>
 8006dda:	3648      	adds	r6, #72	; 0x48
 8006ddc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	d503      	bpl.n	8006dec <__sfp+0x28>
 8006de4:	6833      	ldr	r3, [r6, #0]
 8006de6:	b30b      	cbz	r3, 8006e2c <__sfp+0x68>
 8006de8:	6836      	ldr	r6, [r6, #0]
 8006dea:	e7f7      	b.n	8006ddc <__sfp+0x18>
 8006dec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006df0:	b9d5      	cbnz	r5, 8006e28 <__sfp+0x64>
 8006df2:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <__sfp+0x88>)
 8006df4:	60e3      	str	r3, [r4, #12]
 8006df6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dfa:	6665      	str	r5, [r4, #100]	; 0x64
 8006dfc:	f000 f847 	bl	8006e8e <__retarget_lock_init_recursive>
 8006e00:	f7ff ff96 	bl	8006d30 <__sfp_lock_release>
 8006e04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e0c:	6025      	str	r5, [r4, #0]
 8006e0e:	61a5      	str	r5, [r4, #24]
 8006e10:	2208      	movs	r2, #8
 8006e12:	4629      	mov	r1, r5
 8006e14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e18:	f7ff fcf2 	bl	8006800 <memset>
 8006e1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e24:	4620      	mov	r0, r4
 8006e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e28:	3468      	adds	r4, #104	; 0x68
 8006e2a:	e7d9      	b.n	8006de0 <__sfp+0x1c>
 8006e2c:	2104      	movs	r1, #4
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f7ff ff62 	bl	8006cf8 <__sfmoreglue>
 8006e34:	4604      	mov	r4, r0
 8006e36:	6030      	str	r0, [r6, #0]
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d1d5      	bne.n	8006de8 <__sfp+0x24>
 8006e3c:	f7ff ff78 	bl	8006d30 <__sfp_lock_release>
 8006e40:	230c      	movs	r3, #12
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	e7ee      	b.n	8006e24 <__sfp+0x60>
 8006e46:	bf00      	nop
 8006e48:	080080b4 	.word	0x080080b4
 8006e4c:	ffff0001 	.word	0xffff0001

08006e50 <_fwalk_reent>:
 8006e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e54:	4606      	mov	r6, r0
 8006e56:	4688      	mov	r8, r1
 8006e58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e5c:	2700      	movs	r7, #0
 8006e5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e62:	f1b9 0901 	subs.w	r9, r9, #1
 8006e66:	d505      	bpl.n	8006e74 <_fwalk_reent+0x24>
 8006e68:	6824      	ldr	r4, [r4, #0]
 8006e6a:	2c00      	cmp	r4, #0
 8006e6c:	d1f7      	bne.n	8006e5e <_fwalk_reent+0xe>
 8006e6e:	4638      	mov	r0, r7
 8006e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e74:	89ab      	ldrh	r3, [r5, #12]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d907      	bls.n	8006e8a <_fwalk_reent+0x3a>
 8006e7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	d003      	beq.n	8006e8a <_fwalk_reent+0x3a>
 8006e82:	4629      	mov	r1, r5
 8006e84:	4630      	mov	r0, r6
 8006e86:	47c0      	blx	r8
 8006e88:	4307      	orrs	r7, r0
 8006e8a:	3568      	adds	r5, #104	; 0x68
 8006e8c:	e7e9      	b.n	8006e62 <_fwalk_reent+0x12>

08006e8e <__retarget_lock_init_recursive>:
 8006e8e:	4770      	bx	lr

08006e90 <__retarget_lock_acquire_recursive>:
 8006e90:	4770      	bx	lr

08006e92 <__retarget_lock_release_recursive>:
 8006e92:	4770      	bx	lr

08006e94 <__swhatbuf_r>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	460e      	mov	r6, r1
 8006e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9c:	2900      	cmp	r1, #0
 8006e9e:	b096      	sub	sp, #88	; 0x58
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	da08      	bge.n	8006eb8 <__swhatbuf_r+0x24>
 8006ea6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	602a      	str	r2, [r5, #0]
 8006eae:	061a      	lsls	r2, r3, #24
 8006eb0:	d410      	bmi.n	8006ed4 <__swhatbuf_r+0x40>
 8006eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb6:	e00e      	b.n	8006ed6 <__swhatbuf_r+0x42>
 8006eb8:	466a      	mov	r2, sp
 8006eba:	f000 fdf1 	bl	8007aa0 <_fstat_r>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	dbf1      	blt.n	8006ea6 <__swhatbuf_r+0x12>
 8006ec2:	9a01      	ldr	r2, [sp, #4]
 8006ec4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ec8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ecc:	425a      	negs	r2, r3
 8006ece:	415a      	adcs	r2, r3
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	e7ee      	b.n	8006eb2 <__swhatbuf_r+0x1e>
 8006ed4:	2340      	movs	r3, #64	; 0x40
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	b016      	add	sp, #88	; 0x58
 8006edc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ee0 <__smakebuf_r>:
 8006ee0:	898b      	ldrh	r3, [r1, #12]
 8006ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ee4:	079d      	lsls	r5, r3, #30
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	460c      	mov	r4, r1
 8006eea:	d507      	bpl.n	8006efc <__smakebuf_r+0x1c>
 8006eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	6163      	str	r3, [r4, #20]
 8006ef8:	b002      	add	sp, #8
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	ab01      	add	r3, sp, #4
 8006efe:	466a      	mov	r2, sp
 8006f00:	f7ff ffc8 	bl	8006e94 <__swhatbuf_r>
 8006f04:	9900      	ldr	r1, [sp, #0]
 8006f06:	4605      	mov	r5, r0
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f000 f895 	bl	8007038 <_malloc_r>
 8006f0e:	b948      	cbnz	r0, 8006f24 <__smakebuf_r+0x44>
 8006f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f14:	059a      	lsls	r2, r3, #22
 8006f16:	d4ef      	bmi.n	8006ef8 <__smakebuf_r+0x18>
 8006f18:	f023 0303 	bic.w	r3, r3, #3
 8006f1c:	f043 0302 	orr.w	r3, r3, #2
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	e7e3      	b.n	8006eec <__smakebuf_r+0xc>
 8006f24:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <__smakebuf_r+0x7c>)
 8006f26:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	6020      	str	r0, [r4, #0]
 8006f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f30:	81a3      	strh	r3, [r4, #12]
 8006f32:	9b00      	ldr	r3, [sp, #0]
 8006f34:	6163      	str	r3, [r4, #20]
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	6120      	str	r0, [r4, #16]
 8006f3a:	b15b      	cbz	r3, 8006f54 <__smakebuf_r+0x74>
 8006f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f40:	4630      	mov	r0, r6
 8006f42:	f000 fdbf 	bl	8007ac4 <_isatty_r>
 8006f46:	b128      	cbz	r0, 8006f54 <__smakebuf_r+0x74>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	81a3      	strh	r3, [r4, #12]
 8006f54:	89a0      	ldrh	r0, [r4, #12]
 8006f56:	4305      	orrs	r5, r0
 8006f58:	81a5      	strh	r5, [r4, #12]
 8006f5a:	e7cd      	b.n	8006ef8 <__smakebuf_r+0x18>
 8006f5c:	08006ced 	.word	0x08006ced

08006f60 <_free_r>:
 8006f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f62:	2900      	cmp	r1, #0
 8006f64:	d044      	beq.n	8006ff0 <_free_r+0x90>
 8006f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f6a:	9001      	str	r0, [sp, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f72:	bfb8      	it	lt
 8006f74:	18e4      	addlt	r4, r4, r3
 8006f76:	f000 fdef 	bl	8007b58 <__malloc_lock>
 8006f7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ff4 <_free_r+0x94>)
 8006f7c:	9801      	ldr	r0, [sp, #4]
 8006f7e:	6813      	ldr	r3, [r2, #0]
 8006f80:	b933      	cbnz	r3, 8006f90 <_free_r+0x30>
 8006f82:	6063      	str	r3, [r4, #4]
 8006f84:	6014      	str	r4, [r2, #0]
 8006f86:	b003      	add	sp, #12
 8006f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f8c:	f000 bdea 	b.w	8007b64 <__malloc_unlock>
 8006f90:	42a3      	cmp	r3, r4
 8006f92:	d908      	bls.n	8006fa6 <_free_r+0x46>
 8006f94:	6825      	ldr	r5, [r4, #0]
 8006f96:	1961      	adds	r1, r4, r5
 8006f98:	428b      	cmp	r3, r1
 8006f9a:	bf01      	itttt	eq
 8006f9c:	6819      	ldreq	r1, [r3, #0]
 8006f9e:	685b      	ldreq	r3, [r3, #4]
 8006fa0:	1949      	addeq	r1, r1, r5
 8006fa2:	6021      	streq	r1, [r4, #0]
 8006fa4:	e7ed      	b.n	8006f82 <_free_r+0x22>
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	b10b      	cbz	r3, 8006fb0 <_free_r+0x50>
 8006fac:	42a3      	cmp	r3, r4
 8006fae:	d9fa      	bls.n	8006fa6 <_free_r+0x46>
 8006fb0:	6811      	ldr	r1, [r2, #0]
 8006fb2:	1855      	adds	r5, r2, r1
 8006fb4:	42a5      	cmp	r5, r4
 8006fb6:	d10b      	bne.n	8006fd0 <_free_r+0x70>
 8006fb8:	6824      	ldr	r4, [r4, #0]
 8006fba:	4421      	add	r1, r4
 8006fbc:	1854      	adds	r4, r2, r1
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	6011      	str	r1, [r2, #0]
 8006fc2:	d1e0      	bne.n	8006f86 <_free_r+0x26>
 8006fc4:	681c      	ldr	r4, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	6053      	str	r3, [r2, #4]
 8006fca:	4421      	add	r1, r4
 8006fcc:	6011      	str	r1, [r2, #0]
 8006fce:	e7da      	b.n	8006f86 <_free_r+0x26>
 8006fd0:	d902      	bls.n	8006fd8 <_free_r+0x78>
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	6003      	str	r3, [r0, #0]
 8006fd6:	e7d6      	b.n	8006f86 <_free_r+0x26>
 8006fd8:	6825      	ldr	r5, [r4, #0]
 8006fda:	1961      	adds	r1, r4, r5
 8006fdc:	428b      	cmp	r3, r1
 8006fde:	bf04      	itt	eq
 8006fe0:	6819      	ldreq	r1, [r3, #0]
 8006fe2:	685b      	ldreq	r3, [r3, #4]
 8006fe4:	6063      	str	r3, [r4, #4]
 8006fe6:	bf04      	itt	eq
 8006fe8:	1949      	addeq	r1, r1, r5
 8006fea:	6021      	streq	r1, [r4, #0]
 8006fec:	6054      	str	r4, [r2, #4]
 8006fee:	e7ca      	b.n	8006f86 <_free_r+0x26>
 8006ff0:	b003      	add	sp, #12
 8006ff2:	bd30      	pop	{r4, r5, pc}
 8006ff4:	20013710 	.word	0x20013710

08006ff8 <sbrk_aligned>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4e0e      	ldr	r6, [pc, #56]	; (8007034 <sbrk_aligned+0x3c>)
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	6831      	ldr	r1, [r6, #0]
 8007000:	4605      	mov	r5, r0
 8007002:	b911      	cbnz	r1, 800700a <sbrk_aligned+0x12>
 8007004:	f000 fcd6 	bl	80079b4 <_sbrk_r>
 8007008:	6030      	str	r0, [r6, #0]
 800700a:	4621      	mov	r1, r4
 800700c:	4628      	mov	r0, r5
 800700e:	f000 fcd1 	bl	80079b4 <_sbrk_r>
 8007012:	1c43      	adds	r3, r0, #1
 8007014:	d00a      	beq.n	800702c <sbrk_aligned+0x34>
 8007016:	1cc4      	adds	r4, r0, #3
 8007018:	f024 0403 	bic.w	r4, r4, #3
 800701c:	42a0      	cmp	r0, r4
 800701e:	d007      	beq.n	8007030 <sbrk_aligned+0x38>
 8007020:	1a21      	subs	r1, r4, r0
 8007022:	4628      	mov	r0, r5
 8007024:	f000 fcc6 	bl	80079b4 <_sbrk_r>
 8007028:	3001      	adds	r0, #1
 800702a:	d101      	bne.n	8007030 <sbrk_aligned+0x38>
 800702c:	f04f 34ff 	mov.w	r4, #4294967295
 8007030:	4620      	mov	r0, r4
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	20013714 	.word	0x20013714

08007038 <_malloc_r>:
 8007038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703c:	1ccd      	adds	r5, r1, #3
 800703e:	f025 0503 	bic.w	r5, r5, #3
 8007042:	3508      	adds	r5, #8
 8007044:	2d0c      	cmp	r5, #12
 8007046:	bf38      	it	cc
 8007048:	250c      	movcc	r5, #12
 800704a:	2d00      	cmp	r5, #0
 800704c:	4607      	mov	r7, r0
 800704e:	db01      	blt.n	8007054 <_malloc_r+0x1c>
 8007050:	42a9      	cmp	r1, r5
 8007052:	d905      	bls.n	8007060 <_malloc_r+0x28>
 8007054:	230c      	movs	r3, #12
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	2600      	movs	r6, #0
 800705a:	4630      	mov	r0, r6
 800705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007060:	4e2e      	ldr	r6, [pc, #184]	; (800711c <_malloc_r+0xe4>)
 8007062:	f000 fd79 	bl	8007b58 <__malloc_lock>
 8007066:	6833      	ldr	r3, [r6, #0]
 8007068:	461c      	mov	r4, r3
 800706a:	bb34      	cbnz	r4, 80070ba <_malloc_r+0x82>
 800706c:	4629      	mov	r1, r5
 800706e:	4638      	mov	r0, r7
 8007070:	f7ff ffc2 	bl	8006ff8 <sbrk_aligned>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	4604      	mov	r4, r0
 8007078:	d14d      	bne.n	8007116 <_malloc_r+0xde>
 800707a:	6834      	ldr	r4, [r6, #0]
 800707c:	4626      	mov	r6, r4
 800707e:	2e00      	cmp	r6, #0
 8007080:	d140      	bne.n	8007104 <_malloc_r+0xcc>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	4631      	mov	r1, r6
 8007086:	4638      	mov	r0, r7
 8007088:	eb04 0803 	add.w	r8, r4, r3
 800708c:	f000 fc92 	bl	80079b4 <_sbrk_r>
 8007090:	4580      	cmp	r8, r0
 8007092:	d13a      	bne.n	800710a <_malloc_r+0xd2>
 8007094:	6821      	ldr	r1, [r4, #0]
 8007096:	3503      	adds	r5, #3
 8007098:	1a6d      	subs	r5, r5, r1
 800709a:	f025 0503 	bic.w	r5, r5, #3
 800709e:	3508      	adds	r5, #8
 80070a0:	2d0c      	cmp	r5, #12
 80070a2:	bf38      	it	cc
 80070a4:	250c      	movcc	r5, #12
 80070a6:	4629      	mov	r1, r5
 80070a8:	4638      	mov	r0, r7
 80070aa:	f7ff ffa5 	bl	8006ff8 <sbrk_aligned>
 80070ae:	3001      	adds	r0, #1
 80070b0:	d02b      	beq.n	800710a <_malloc_r+0xd2>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	442b      	add	r3, r5
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	e00e      	b.n	80070d8 <_malloc_r+0xa0>
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	1b52      	subs	r2, r2, r5
 80070be:	d41e      	bmi.n	80070fe <_malloc_r+0xc6>
 80070c0:	2a0b      	cmp	r2, #11
 80070c2:	d916      	bls.n	80070f2 <_malloc_r+0xba>
 80070c4:	1961      	adds	r1, r4, r5
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	6025      	str	r5, [r4, #0]
 80070ca:	bf18      	it	ne
 80070cc:	6059      	strne	r1, [r3, #4]
 80070ce:	6863      	ldr	r3, [r4, #4]
 80070d0:	bf08      	it	eq
 80070d2:	6031      	streq	r1, [r6, #0]
 80070d4:	5162      	str	r2, [r4, r5]
 80070d6:	604b      	str	r3, [r1, #4]
 80070d8:	4638      	mov	r0, r7
 80070da:	f104 060b 	add.w	r6, r4, #11
 80070de:	f000 fd41 	bl	8007b64 <__malloc_unlock>
 80070e2:	f026 0607 	bic.w	r6, r6, #7
 80070e6:	1d23      	adds	r3, r4, #4
 80070e8:	1af2      	subs	r2, r6, r3
 80070ea:	d0b6      	beq.n	800705a <_malloc_r+0x22>
 80070ec:	1b9b      	subs	r3, r3, r6
 80070ee:	50a3      	str	r3, [r4, r2]
 80070f0:	e7b3      	b.n	800705a <_malloc_r+0x22>
 80070f2:	6862      	ldr	r2, [r4, #4]
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	bf0c      	ite	eq
 80070f8:	6032      	streq	r2, [r6, #0]
 80070fa:	605a      	strne	r2, [r3, #4]
 80070fc:	e7ec      	b.n	80070d8 <_malloc_r+0xa0>
 80070fe:	4623      	mov	r3, r4
 8007100:	6864      	ldr	r4, [r4, #4]
 8007102:	e7b2      	b.n	800706a <_malloc_r+0x32>
 8007104:	4634      	mov	r4, r6
 8007106:	6876      	ldr	r6, [r6, #4]
 8007108:	e7b9      	b.n	800707e <_malloc_r+0x46>
 800710a:	230c      	movs	r3, #12
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4638      	mov	r0, r7
 8007110:	f000 fd28 	bl	8007b64 <__malloc_unlock>
 8007114:	e7a1      	b.n	800705a <_malloc_r+0x22>
 8007116:	6025      	str	r5, [r4, #0]
 8007118:	e7de      	b.n	80070d8 <_malloc_r+0xa0>
 800711a:	bf00      	nop
 800711c:	20013710 	.word	0x20013710

08007120 <__ssputs_r>:
 8007120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	688e      	ldr	r6, [r1, #8]
 8007126:	429e      	cmp	r6, r3
 8007128:	4682      	mov	sl, r0
 800712a:	460c      	mov	r4, r1
 800712c:	4690      	mov	r8, r2
 800712e:	461f      	mov	r7, r3
 8007130:	d838      	bhi.n	80071a4 <__ssputs_r+0x84>
 8007132:	898a      	ldrh	r2, [r1, #12]
 8007134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007138:	d032      	beq.n	80071a0 <__ssputs_r+0x80>
 800713a:	6825      	ldr	r5, [r4, #0]
 800713c:	6909      	ldr	r1, [r1, #16]
 800713e:	eba5 0901 	sub.w	r9, r5, r1
 8007142:	6965      	ldr	r5, [r4, #20]
 8007144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800714c:	3301      	adds	r3, #1
 800714e:	444b      	add	r3, r9
 8007150:	106d      	asrs	r5, r5, #1
 8007152:	429d      	cmp	r5, r3
 8007154:	bf38      	it	cc
 8007156:	461d      	movcc	r5, r3
 8007158:	0553      	lsls	r3, r2, #21
 800715a:	d531      	bpl.n	80071c0 <__ssputs_r+0xa0>
 800715c:	4629      	mov	r1, r5
 800715e:	f7ff ff6b 	bl	8007038 <_malloc_r>
 8007162:	4606      	mov	r6, r0
 8007164:	b950      	cbnz	r0, 800717c <__ssputs_r+0x5c>
 8007166:	230c      	movs	r3, #12
 8007168:	f8ca 3000 	str.w	r3, [sl]
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717c:	6921      	ldr	r1, [r4, #16]
 800717e:	464a      	mov	r2, r9
 8007180:	f000 fcc2 	bl	8007b08 <memcpy>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800718a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718e:	81a3      	strh	r3, [r4, #12]
 8007190:	6126      	str	r6, [r4, #16]
 8007192:	6165      	str	r5, [r4, #20]
 8007194:	444e      	add	r6, r9
 8007196:	eba5 0509 	sub.w	r5, r5, r9
 800719a:	6026      	str	r6, [r4, #0]
 800719c:	60a5      	str	r5, [r4, #8]
 800719e:	463e      	mov	r6, r7
 80071a0:	42be      	cmp	r6, r7
 80071a2:	d900      	bls.n	80071a6 <__ssputs_r+0x86>
 80071a4:	463e      	mov	r6, r7
 80071a6:	6820      	ldr	r0, [r4, #0]
 80071a8:	4632      	mov	r2, r6
 80071aa:	4641      	mov	r1, r8
 80071ac:	f000 fcba 	bl	8007b24 <memmove>
 80071b0:	68a3      	ldr	r3, [r4, #8]
 80071b2:	1b9b      	subs	r3, r3, r6
 80071b4:	60a3      	str	r3, [r4, #8]
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	4433      	add	r3, r6
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	2000      	movs	r0, #0
 80071be:	e7db      	b.n	8007178 <__ssputs_r+0x58>
 80071c0:	462a      	mov	r2, r5
 80071c2:	f000 fcd5 	bl	8007b70 <_realloc_r>
 80071c6:	4606      	mov	r6, r0
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d1e1      	bne.n	8007190 <__ssputs_r+0x70>
 80071cc:	6921      	ldr	r1, [r4, #16]
 80071ce:	4650      	mov	r0, sl
 80071d0:	f7ff fec6 	bl	8006f60 <_free_r>
 80071d4:	e7c7      	b.n	8007166 <__ssputs_r+0x46>
	...

080071d8 <_svfiprintf_r>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	4698      	mov	r8, r3
 80071de:	898b      	ldrh	r3, [r1, #12]
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	b09d      	sub	sp, #116	; 0x74
 80071e4:	4607      	mov	r7, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	4614      	mov	r4, r2
 80071ea:	d50e      	bpl.n	800720a <_svfiprintf_r+0x32>
 80071ec:	690b      	ldr	r3, [r1, #16]
 80071ee:	b963      	cbnz	r3, 800720a <_svfiprintf_r+0x32>
 80071f0:	2140      	movs	r1, #64	; 0x40
 80071f2:	f7ff ff21 	bl	8007038 <_malloc_r>
 80071f6:	6028      	str	r0, [r5, #0]
 80071f8:	6128      	str	r0, [r5, #16]
 80071fa:	b920      	cbnz	r0, 8007206 <_svfiprintf_r+0x2e>
 80071fc:	230c      	movs	r3, #12
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e0d1      	b.n	80073aa <_svfiprintf_r+0x1d2>
 8007206:	2340      	movs	r3, #64	; 0x40
 8007208:	616b      	str	r3, [r5, #20]
 800720a:	2300      	movs	r3, #0
 800720c:	9309      	str	r3, [sp, #36]	; 0x24
 800720e:	2320      	movs	r3, #32
 8007210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007214:	f8cd 800c 	str.w	r8, [sp, #12]
 8007218:	2330      	movs	r3, #48	; 0x30
 800721a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073c4 <_svfiprintf_r+0x1ec>
 800721e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007222:	f04f 0901 	mov.w	r9, #1
 8007226:	4623      	mov	r3, r4
 8007228:	469a      	mov	sl, r3
 800722a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722e:	b10a      	cbz	r2, 8007234 <_svfiprintf_r+0x5c>
 8007230:	2a25      	cmp	r2, #37	; 0x25
 8007232:	d1f9      	bne.n	8007228 <_svfiprintf_r+0x50>
 8007234:	ebba 0b04 	subs.w	fp, sl, r4
 8007238:	d00b      	beq.n	8007252 <_svfiprintf_r+0x7a>
 800723a:	465b      	mov	r3, fp
 800723c:	4622      	mov	r2, r4
 800723e:	4629      	mov	r1, r5
 8007240:	4638      	mov	r0, r7
 8007242:	f7ff ff6d 	bl	8007120 <__ssputs_r>
 8007246:	3001      	adds	r0, #1
 8007248:	f000 80aa 	beq.w	80073a0 <_svfiprintf_r+0x1c8>
 800724c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724e:	445a      	add	r2, fp
 8007250:	9209      	str	r2, [sp, #36]	; 0x24
 8007252:	f89a 3000 	ldrb.w	r3, [sl]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 80a2 	beq.w	80073a0 <_svfiprintf_r+0x1c8>
 800725c:	2300      	movs	r3, #0
 800725e:	f04f 32ff 	mov.w	r2, #4294967295
 8007262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007266:	f10a 0a01 	add.w	sl, sl, #1
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	9307      	str	r3, [sp, #28]
 800726e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007272:	931a      	str	r3, [sp, #104]	; 0x68
 8007274:	4654      	mov	r4, sl
 8007276:	2205      	movs	r2, #5
 8007278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727c:	4851      	ldr	r0, [pc, #324]	; (80073c4 <_svfiprintf_r+0x1ec>)
 800727e:	f7f8 ffaf 	bl	80001e0 <memchr>
 8007282:	9a04      	ldr	r2, [sp, #16]
 8007284:	b9d8      	cbnz	r0, 80072be <_svfiprintf_r+0xe6>
 8007286:	06d0      	lsls	r0, r2, #27
 8007288:	bf44      	itt	mi
 800728a:	2320      	movmi	r3, #32
 800728c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007290:	0711      	lsls	r1, r2, #28
 8007292:	bf44      	itt	mi
 8007294:	232b      	movmi	r3, #43	; 0x2b
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729a:	f89a 3000 	ldrb.w	r3, [sl]
 800729e:	2b2a      	cmp	r3, #42	; 0x2a
 80072a0:	d015      	beq.n	80072ce <_svfiprintf_r+0xf6>
 80072a2:	9a07      	ldr	r2, [sp, #28]
 80072a4:	4654      	mov	r4, sl
 80072a6:	2000      	movs	r0, #0
 80072a8:	f04f 0c0a 	mov.w	ip, #10
 80072ac:	4621      	mov	r1, r4
 80072ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b2:	3b30      	subs	r3, #48	; 0x30
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	d94e      	bls.n	8007356 <_svfiprintf_r+0x17e>
 80072b8:	b1b0      	cbz	r0, 80072e8 <_svfiprintf_r+0x110>
 80072ba:	9207      	str	r2, [sp, #28]
 80072bc:	e014      	b.n	80072e8 <_svfiprintf_r+0x110>
 80072be:	eba0 0308 	sub.w	r3, r0, r8
 80072c2:	fa09 f303 	lsl.w	r3, r9, r3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	46a2      	mov	sl, r4
 80072cc:	e7d2      	b.n	8007274 <_svfiprintf_r+0x9c>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	1d19      	adds	r1, r3, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	9103      	str	r1, [sp, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfbb      	ittet	lt
 80072da:	425b      	neglt	r3, r3
 80072dc:	f042 0202 	orrlt.w	r2, r2, #2
 80072e0:	9307      	strge	r3, [sp, #28]
 80072e2:	9307      	strlt	r3, [sp, #28]
 80072e4:	bfb8      	it	lt
 80072e6:	9204      	strlt	r2, [sp, #16]
 80072e8:	7823      	ldrb	r3, [r4, #0]
 80072ea:	2b2e      	cmp	r3, #46	; 0x2e
 80072ec:	d10c      	bne.n	8007308 <_svfiprintf_r+0x130>
 80072ee:	7863      	ldrb	r3, [r4, #1]
 80072f0:	2b2a      	cmp	r3, #42	; 0x2a
 80072f2:	d135      	bne.n	8007360 <_svfiprintf_r+0x188>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	9203      	str	r2, [sp, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bfb8      	it	lt
 8007300:	f04f 33ff 	movlt.w	r3, #4294967295
 8007304:	3402      	adds	r4, #2
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073d4 <_svfiprintf_r+0x1fc>
 800730c:	7821      	ldrb	r1, [r4, #0]
 800730e:	2203      	movs	r2, #3
 8007310:	4650      	mov	r0, sl
 8007312:	f7f8 ff65 	bl	80001e0 <memchr>
 8007316:	b140      	cbz	r0, 800732a <_svfiprintf_r+0x152>
 8007318:	2340      	movs	r3, #64	; 0x40
 800731a:	eba0 000a 	sub.w	r0, r0, sl
 800731e:	fa03 f000 	lsl.w	r0, r3, r0
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	4303      	orrs	r3, r0
 8007326:	3401      	adds	r4, #1
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732e:	4826      	ldr	r0, [pc, #152]	; (80073c8 <_svfiprintf_r+0x1f0>)
 8007330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007334:	2206      	movs	r2, #6
 8007336:	f7f8 ff53 	bl	80001e0 <memchr>
 800733a:	2800      	cmp	r0, #0
 800733c:	d038      	beq.n	80073b0 <_svfiprintf_r+0x1d8>
 800733e:	4b23      	ldr	r3, [pc, #140]	; (80073cc <_svfiprintf_r+0x1f4>)
 8007340:	bb1b      	cbnz	r3, 800738a <_svfiprintf_r+0x1b2>
 8007342:	9b03      	ldr	r3, [sp, #12]
 8007344:	3307      	adds	r3, #7
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	3308      	adds	r3, #8
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007350:	4433      	add	r3, r6
 8007352:	9309      	str	r3, [sp, #36]	; 0x24
 8007354:	e767      	b.n	8007226 <_svfiprintf_r+0x4e>
 8007356:	fb0c 3202 	mla	r2, ip, r2, r3
 800735a:	460c      	mov	r4, r1
 800735c:	2001      	movs	r0, #1
 800735e:	e7a5      	b.n	80072ac <_svfiprintf_r+0xd4>
 8007360:	2300      	movs	r3, #0
 8007362:	3401      	adds	r4, #1
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	4619      	mov	r1, r3
 8007368:	f04f 0c0a 	mov.w	ip, #10
 800736c:	4620      	mov	r0, r4
 800736e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007372:	3a30      	subs	r2, #48	; 0x30
 8007374:	2a09      	cmp	r2, #9
 8007376:	d903      	bls.n	8007380 <_svfiprintf_r+0x1a8>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0c5      	beq.n	8007308 <_svfiprintf_r+0x130>
 800737c:	9105      	str	r1, [sp, #20]
 800737e:	e7c3      	b.n	8007308 <_svfiprintf_r+0x130>
 8007380:	fb0c 2101 	mla	r1, ip, r1, r2
 8007384:	4604      	mov	r4, r0
 8007386:	2301      	movs	r3, #1
 8007388:	e7f0      	b.n	800736c <_svfiprintf_r+0x194>
 800738a:	ab03      	add	r3, sp, #12
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	462a      	mov	r2, r5
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <_svfiprintf_r+0x1f8>)
 8007392:	a904      	add	r1, sp, #16
 8007394:	4638      	mov	r0, r7
 8007396:	f3af 8000 	nop.w
 800739a:	1c42      	adds	r2, r0, #1
 800739c:	4606      	mov	r6, r0
 800739e:	d1d6      	bne.n	800734e <_svfiprintf_r+0x176>
 80073a0:	89ab      	ldrh	r3, [r5, #12]
 80073a2:	065b      	lsls	r3, r3, #25
 80073a4:	f53f af2c 	bmi.w	8007200 <_svfiprintf_r+0x28>
 80073a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073aa:	b01d      	add	sp, #116	; 0x74
 80073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b0:	ab03      	add	r3, sp, #12
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	462a      	mov	r2, r5
 80073b6:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <_svfiprintf_r+0x1f8>)
 80073b8:	a904      	add	r1, sp, #16
 80073ba:	4638      	mov	r0, r7
 80073bc:	f000 f9d4 	bl	8007768 <_printf_i>
 80073c0:	e7eb      	b.n	800739a <_svfiprintf_r+0x1c2>
 80073c2:	bf00      	nop
 80073c4:	08008118 	.word	0x08008118
 80073c8:	08008122 	.word	0x08008122
 80073cc:	00000000 	.word	0x00000000
 80073d0:	08007121 	.word	0x08007121
 80073d4:	0800811e 	.word	0x0800811e

080073d8 <__sfputc_r>:
 80073d8:	6893      	ldr	r3, [r2, #8]
 80073da:	3b01      	subs	r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	b410      	push	{r4}
 80073e0:	6093      	str	r3, [r2, #8]
 80073e2:	da08      	bge.n	80073f6 <__sfputc_r+0x1e>
 80073e4:	6994      	ldr	r4, [r2, #24]
 80073e6:	42a3      	cmp	r3, r4
 80073e8:	db01      	blt.n	80073ee <__sfputc_r+0x16>
 80073ea:	290a      	cmp	r1, #10
 80073ec:	d103      	bne.n	80073f6 <__sfputc_r+0x1e>
 80073ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f2:	f7ff bad5 	b.w	80069a0 <__swbuf_r>
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	1c58      	adds	r0, r3, #1
 80073fa:	6010      	str	r0, [r2, #0]
 80073fc:	7019      	strb	r1, [r3, #0]
 80073fe:	4608      	mov	r0, r1
 8007400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007404:	4770      	bx	lr

08007406 <__sfputs_r>:
 8007406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007408:	4606      	mov	r6, r0
 800740a:	460f      	mov	r7, r1
 800740c:	4614      	mov	r4, r2
 800740e:	18d5      	adds	r5, r2, r3
 8007410:	42ac      	cmp	r4, r5
 8007412:	d101      	bne.n	8007418 <__sfputs_r+0x12>
 8007414:	2000      	movs	r0, #0
 8007416:	e007      	b.n	8007428 <__sfputs_r+0x22>
 8007418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741c:	463a      	mov	r2, r7
 800741e:	4630      	mov	r0, r6
 8007420:	f7ff ffda 	bl	80073d8 <__sfputc_r>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d1f3      	bne.n	8007410 <__sfputs_r+0xa>
 8007428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800742c <_vfiprintf_r>:
 800742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	460d      	mov	r5, r1
 8007432:	b09d      	sub	sp, #116	; 0x74
 8007434:	4614      	mov	r4, r2
 8007436:	4698      	mov	r8, r3
 8007438:	4606      	mov	r6, r0
 800743a:	b118      	cbz	r0, 8007444 <_vfiprintf_r+0x18>
 800743c:	6983      	ldr	r3, [r0, #24]
 800743e:	b90b      	cbnz	r3, 8007444 <_vfiprintf_r+0x18>
 8007440:	f7ff fc88 	bl	8006d54 <__sinit>
 8007444:	4b89      	ldr	r3, [pc, #548]	; (800766c <_vfiprintf_r+0x240>)
 8007446:	429d      	cmp	r5, r3
 8007448:	d11b      	bne.n	8007482 <_vfiprintf_r+0x56>
 800744a:	6875      	ldr	r5, [r6, #4]
 800744c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800744e:	07d9      	lsls	r1, r3, #31
 8007450:	d405      	bmi.n	800745e <_vfiprintf_r+0x32>
 8007452:	89ab      	ldrh	r3, [r5, #12]
 8007454:	059a      	lsls	r2, r3, #22
 8007456:	d402      	bmi.n	800745e <_vfiprintf_r+0x32>
 8007458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800745a:	f7ff fd19 	bl	8006e90 <__retarget_lock_acquire_recursive>
 800745e:	89ab      	ldrh	r3, [r5, #12]
 8007460:	071b      	lsls	r3, r3, #28
 8007462:	d501      	bpl.n	8007468 <_vfiprintf_r+0x3c>
 8007464:	692b      	ldr	r3, [r5, #16]
 8007466:	b9eb      	cbnz	r3, 80074a4 <_vfiprintf_r+0x78>
 8007468:	4629      	mov	r1, r5
 800746a:	4630      	mov	r0, r6
 800746c:	f7ff faea 	bl	8006a44 <__swsetup_r>
 8007470:	b1c0      	cbz	r0, 80074a4 <_vfiprintf_r+0x78>
 8007472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007474:	07dc      	lsls	r4, r3, #31
 8007476:	d50e      	bpl.n	8007496 <_vfiprintf_r+0x6a>
 8007478:	f04f 30ff 	mov.w	r0, #4294967295
 800747c:	b01d      	add	sp, #116	; 0x74
 800747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007482:	4b7b      	ldr	r3, [pc, #492]	; (8007670 <_vfiprintf_r+0x244>)
 8007484:	429d      	cmp	r5, r3
 8007486:	d101      	bne.n	800748c <_vfiprintf_r+0x60>
 8007488:	68b5      	ldr	r5, [r6, #8]
 800748a:	e7df      	b.n	800744c <_vfiprintf_r+0x20>
 800748c:	4b79      	ldr	r3, [pc, #484]	; (8007674 <_vfiprintf_r+0x248>)
 800748e:	429d      	cmp	r5, r3
 8007490:	bf08      	it	eq
 8007492:	68f5      	ldreq	r5, [r6, #12]
 8007494:	e7da      	b.n	800744c <_vfiprintf_r+0x20>
 8007496:	89ab      	ldrh	r3, [r5, #12]
 8007498:	0598      	lsls	r0, r3, #22
 800749a:	d4ed      	bmi.n	8007478 <_vfiprintf_r+0x4c>
 800749c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800749e:	f7ff fcf8 	bl	8006e92 <__retarget_lock_release_recursive>
 80074a2:	e7e9      	b.n	8007478 <_vfiprintf_r+0x4c>
 80074a4:	2300      	movs	r3, #0
 80074a6:	9309      	str	r3, [sp, #36]	; 0x24
 80074a8:	2320      	movs	r3, #32
 80074aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80074b2:	2330      	movs	r3, #48	; 0x30
 80074b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007678 <_vfiprintf_r+0x24c>
 80074b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074bc:	f04f 0901 	mov.w	r9, #1
 80074c0:	4623      	mov	r3, r4
 80074c2:	469a      	mov	sl, r3
 80074c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074c8:	b10a      	cbz	r2, 80074ce <_vfiprintf_r+0xa2>
 80074ca:	2a25      	cmp	r2, #37	; 0x25
 80074cc:	d1f9      	bne.n	80074c2 <_vfiprintf_r+0x96>
 80074ce:	ebba 0b04 	subs.w	fp, sl, r4
 80074d2:	d00b      	beq.n	80074ec <_vfiprintf_r+0xc0>
 80074d4:	465b      	mov	r3, fp
 80074d6:	4622      	mov	r2, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	4630      	mov	r0, r6
 80074dc:	f7ff ff93 	bl	8007406 <__sfputs_r>
 80074e0:	3001      	adds	r0, #1
 80074e2:	f000 80aa 	beq.w	800763a <_vfiprintf_r+0x20e>
 80074e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074e8:	445a      	add	r2, fp
 80074ea:	9209      	str	r2, [sp, #36]	; 0x24
 80074ec:	f89a 3000 	ldrb.w	r3, [sl]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 80a2 	beq.w	800763a <_vfiprintf_r+0x20e>
 80074f6:	2300      	movs	r3, #0
 80074f8:	f04f 32ff 	mov.w	r2, #4294967295
 80074fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007500:	f10a 0a01 	add.w	sl, sl, #1
 8007504:	9304      	str	r3, [sp, #16]
 8007506:	9307      	str	r3, [sp, #28]
 8007508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800750c:	931a      	str	r3, [sp, #104]	; 0x68
 800750e:	4654      	mov	r4, sl
 8007510:	2205      	movs	r2, #5
 8007512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007516:	4858      	ldr	r0, [pc, #352]	; (8007678 <_vfiprintf_r+0x24c>)
 8007518:	f7f8 fe62 	bl	80001e0 <memchr>
 800751c:	9a04      	ldr	r2, [sp, #16]
 800751e:	b9d8      	cbnz	r0, 8007558 <_vfiprintf_r+0x12c>
 8007520:	06d1      	lsls	r1, r2, #27
 8007522:	bf44      	itt	mi
 8007524:	2320      	movmi	r3, #32
 8007526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800752a:	0713      	lsls	r3, r2, #28
 800752c:	bf44      	itt	mi
 800752e:	232b      	movmi	r3, #43	; 0x2b
 8007530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007534:	f89a 3000 	ldrb.w	r3, [sl]
 8007538:	2b2a      	cmp	r3, #42	; 0x2a
 800753a:	d015      	beq.n	8007568 <_vfiprintf_r+0x13c>
 800753c:	9a07      	ldr	r2, [sp, #28]
 800753e:	4654      	mov	r4, sl
 8007540:	2000      	movs	r0, #0
 8007542:	f04f 0c0a 	mov.w	ip, #10
 8007546:	4621      	mov	r1, r4
 8007548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800754c:	3b30      	subs	r3, #48	; 0x30
 800754e:	2b09      	cmp	r3, #9
 8007550:	d94e      	bls.n	80075f0 <_vfiprintf_r+0x1c4>
 8007552:	b1b0      	cbz	r0, 8007582 <_vfiprintf_r+0x156>
 8007554:	9207      	str	r2, [sp, #28]
 8007556:	e014      	b.n	8007582 <_vfiprintf_r+0x156>
 8007558:	eba0 0308 	sub.w	r3, r0, r8
 800755c:	fa09 f303 	lsl.w	r3, r9, r3
 8007560:	4313      	orrs	r3, r2
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	46a2      	mov	sl, r4
 8007566:	e7d2      	b.n	800750e <_vfiprintf_r+0xe2>
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	1d19      	adds	r1, r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	9103      	str	r1, [sp, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	bfbb      	ittet	lt
 8007574:	425b      	neglt	r3, r3
 8007576:	f042 0202 	orrlt.w	r2, r2, #2
 800757a:	9307      	strge	r3, [sp, #28]
 800757c:	9307      	strlt	r3, [sp, #28]
 800757e:	bfb8      	it	lt
 8007580:	9204      	strlt	r2, [sp, #16]
 8007582:	7823      	ldrb	r3, [r4, #0]
 8007584:	2b2e      	cmp	r3, #46	; 0x2e
 8007586:	d10c      	bne.n	80075a2 <_vfiprintf_r+0x176>
 8007588:	7863      	ldrb	r3, [r4, #1]
 800758a:	2b2a      	cmp	r3, #42	; 0x2a
 800758c:	d135      	bne.n	80075fa <_vfiprintf_r+0x1ce>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	1d1a      	adds	r2, r3, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	9203      	str	r2, [sp, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	bfb8      	it	lt
 800759a:	f04f 33ff 	movlt.w	r3, #4294967295
 800759e:	3402      	adds	r4, #2
 80075a0:	9305      	str	r3, [sp, #20]
 80075a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007688 <_vfiprintf_r+0x25c>
 80075a6:	7821      	ldrb	r1, [r4, #0]
 80075a8:	2203      	movs	r2, #3
 80075aa:	4650      	mov	r0, sl
 80075ac:	f7f8 fe18 	bl	80001e0 <memchr>
 80075b0:	b140      	cbz	r0, 80075c4 <_vfiprintf_r+0x198>
 80075b2:	2340      	movs	r3, #64	; 0x40
 80075b4:	eba0 000a 	sub.w	r0, r0, sl
 80075b8:	fa03 f000 	lsl.w	r0, r3, r0
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	4303      	orrs	r3, r0
 80075c0:	3401      	adds	r4, #1
 80075c2:	9304      	str	r3, [sp, #16]
 80075c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c8:	482c      	ldr	r0, [pc, #176]	; (800767c <_vfiprintf_r+0x250>)
 80075ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ce:	2206      	movs	r2, #6
 80075d0:	f7f8 fe06 	bl	80001e0 <memchr>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d03f      	beq.n	8007658 <_vfiprintf_r+0x22c>
 80075d8:	4b29      	ldr	r3, [pc, #164]	; (8007680 <_vfiprintf_r+0x254>)
 80075da:	bb1b      	cbnz	r3, 8007624 <_vfiprintf_r+0x1f8>
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	3307      	adds	r3, #7
 80075e0:	f023 0307 	bic.w	r3, r3, #7
 80075e4:	3308      	adds	r3, #8
 80075e6:	9303      	str	r3, [sp, #12]
 80075e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ea:	443b      	add	r3, r7
 80075ec:	9309      	str	r3, [sp, #36]	; 0x24
 80075ee:	e767      	b.n	80074c0 <_vfiprintf_r+0x94>
 80075f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80075f4:	460c      	mov	r4, r1
 80075f6:	2001      	movs	r0, #1
 80075f8:	e7a5      	b.n	8007546 <_vfiprintf_r+0x11a>
 80075fa:	2300      	movs	r3, #0
 80075fc:	3401      	adds	r4, #1
 80075fe:	9305      	str	r3, [sp, #20]
 8007600:	4619      	mov	r1, r3
 8007602:	f04f 0c0a 	mov.w	ip, #10
 8007606:	4620      	mov	r0, r4
 8007608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800760c:	3a30      	subs	r2, #48	; 0x30
 800760e:	2a09      	cmp	r2, #9
 8007610:	d903      	bls.n	800761a <_vfiprintf_r+0x1ee>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0c5      	beq.n	80075a2 <_vfiprintf_r+0x176>
 8007616:	9105      	str	r1, [sp, #20]
 8007618:	e7c3      	b.n	80075a2 <_vfiprintf_r+0x176>
 800761a:	fb0c 2101 	mla	r1, ip, r1, r2
 800761e:	4604      	mov	r4, r0
 8007620:	2301      	movs	r3, #1
 8007622:	e7f0      	b.n	8007606 <_vfiprintf_r+0x1da>
 8007624:	ab03      	add	r3, sp, #12
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	462a      	mov	r2, r5
 800762a:	4b16      	ldr	r3, [pc, #88]	; (8007684 <_vfiprintf_r+0x258>)
 800762c:	a904      	add	r1, sp, #16
 800762e:	4630      	mov	r0, r6
 8007630:	f3af 8000 	nop.w
 8007634:	4607      	mov	r7, r0
 8007636:	1c78      	adds	r0, r7, #1
 8007638:	d1d6      	bne.n	80075e8 <_vfiprintf_r+0x1bc>
 800763a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800763c:	07d9      	lsls	r1, r3, #31
 800763e:	d405      	bmi.n	800764c <_vfiprintf_r+0x220>
 8007640:	89ab      	ldrh	r3, [r5, #12]
 8007642:	059a      	lsls	r2, r3, #22
 8007644:	d402      	bmi.n	800764c <_vfiprintf_r+0x220>
 8007646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007648:	f7ff fc23 	bl	8006e92 <__retarget_lock_release_recursive>
 800764c:	89ab      	ldrh	r3, [r5, #12]
 800764e:	065b      	lsls	r3, r3, #25
 8007650:	f53f af12 	bmi.w	8007478 <_vfiprintf_r+0x4c>
 8007654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007656:	e711      	b.n	800747c <_vfiprintf_r+0x50>
 8007658:	ab03      	add	r3, sp, #12
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	462a      	mov	r2, r5
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <_vfiprintf_r+0x258>)
 8007660:	a904      	add	r1, sp, #16
 8007662:	4630      	mov	r0, r6
 8007664:	f000 f880 	bl	8007768 <_printf_i>
 8007668:	e7e4      	b.n	8007634 <_vfiprintf_r+0x208>
 800766a:	bf00      	nop
 800766c:	080080d8 	.word	0x080080d8
 8007670:	080080f8 	.word	0x080080f8
 8007674:	080080b8 	.word	0x080080b8
 8007678:	08008118 	.word	0x08008118
 800767c:	08008122 	.word	0x08008122
 8007680:	00000000 	.word	0x00000000
 8007684:	08007407 	.word	0x08007407
 8007688:	0800811e 	.word	0x0800811e

0800768c <_printf_common>:
 800768c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007690:	4616      	mov	r6, r2
 8007692:	4699      	mov	r9, r3
 8007694:	688a      	ldr	r2, [r1, #8]
 8007696:	690b      	ldr	r3, [r1, #16]
 8007698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800769c:	4293      	cmp	r3, r2
 800769e:	bfb8      	it	lt
 80076a0:	4613      	movlt	r3, r2
 80076a2:	6033      	str	r3, [r6, #0]
 80076a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076a8:	4607      	mov	r7, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	b10a      	cbz	r2, 80076b2 <_printf_common+0x26>
 80076ae:	3301      	adds	r3, #1
 80076b0:	6033      	str	r3, [r6, #0]
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	0699      	lsls	r1, r3, #26
 80076b6:	bf42      	ittt	mi
 80076b8:	6833      	ldrmi	r3, [r6, #0]
 80076ba:	3302      	addmi	r3, #2
 80076bc:	6033      	strmi	r3, [r6, #0]
 80076be:	6825      	ldr	r5, [r4, #0]
 80076c0:	f015 0506 	ands.w	r5, r5, #6
 80076c4:	d106      	bne.n	80076d4 <_printf_common+0x48>
 80076c6:	f104 0a19 	add.w	sl, r4, #25
 80076ca:	68e3      	ldr	r3, [r4, #12]
 80076cc:	6832      	ldr	r2, [r6, #0]
 80076ce:	1a9b      	subs	r3, r3, r2
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	dc26      	bgt.n	8007722 <_printf_common+0x96>
 80076d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076d8:	1e13      	subs	r3, r2, #0
 80076da:	6822      	ldr	r2, [r4, #0]
 80076dc:	bf18      	it	ne
 80076de:	2301      	movne	r3, #1
 80076e0:	0692      	lsls	r2, r2, #26
 80076e2:	d42b      	bmi.n	800773c <_printf_common+0xb0>
 80076e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076e8:	4649      	mov	r1, r9
 80076ea:	4638      	mov	r0, r7
 80076ec:	47c0      	blx	r8
 80076ee:	3001      	adds	r0, #1
 80076f0:	d01e      	beq.n	8007730 <_printf_common+0xa4>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	68e5      	ldr	r5, [r4, #12]
 80076f6:	6832      	ldr	r2, [r6, #0]
 80076f8:	f003 0306 	and.w	r3, r3, #6
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	bf08      	it	eq
 8007700:	1aad      	subeq	r5, r5, r2
 8007702:	68a3      	ldr	r3, [r4, #8]
 8007704:	6922      	ldr	r2, [r4, #16]
 8007706:	bf0c      	ite	eq
 8007708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800770c:	2500      	movne	r5, #0
 800770e:	4293      	cmp	r3, r2
 8007710:	bfc4      	itt	gt
 8007712:	1a9b      	subgt	r3, r3, r2
 8007714:	18ed      	addgt	r5, r5, r3
 8007716:	2600      	movs	r6, #0
 8007718:	341a      	adds	r4, #26
 800771a:	42b5      	cmp	r5, r6
 800771c:	d11a      	bne.n	8007754 <_printf_common+0xc8>
 800771e:	2000      	movs	r0, #0
 8007720:	e008      	b.n	8007734 <_printf_common+0xa8>
 8007722:	2301      	movs	r3, #1
 8007724:	4652      	mov	r2, sl
 8007726:	4649      	mov	r1, r9
 8007728:	4638      	mov	r0, r7
 800772a:	47c0      	blx	r8
 800772c:	3001      	adds	r0, #1
 800772e:	d103      	bne.n	8007738 <_printf_common+0xac>
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007738:	3501      	adds	r5, #1
 800773a:	e7c6      	b.n	80076ca <_printf_common+0x3e>
 800773c:	18e1      	adds	r1, r4, r3
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	2030      	movs	r0, #48	; 0x30
 8007742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007746:	4422      	add	r2, r4
 8007748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800774c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007750:	3302      	adds	r3, #2
 8007752:	e7c7      	b.n	80076e4 <_printf_common+0x58>
 8007754:	2301      	movs	r3, #1
 8007756:	4622      	mov	r2, r4
 8007758:	4649      	mov	r1, r9
 800775a:	4638      	mov	r0, r7
 800775c:	47c0      	blx	r8
 800775e:	3001      	adds	r0, #1
 8007760:	d0e6      	beq.n	8007730 <_printf_common+0xa4>
 8007762:	3601      	adds	r6, #1
 8007764:	e7d9      	b.n	800771a <_printf_common+0x8e>
	...

08007768 <_printf_i>:
 8007768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800776c:	7e0f      	ldrb	r7, [r1, #24]
 800776e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007770:	2f78      	cmp	r7, #120	; 0x78
 8007772:	4691      	mov	r9, r2
 8007774:	4680      	mov	r8, r0
 8007776:	460c      	mov	r4, r1
 8007778:	469a      	mov	sl, r3
 800777a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800777e:	d807      	bhi.n	8007790 <_printf_i+0x28>
 8007780:	2f62      	cmp	r7, #98	; 0x62
 8007782:	d80a      	bhi.n	800779a <_printf_i+0x32>
 8007784:	2f00      	cmp	r7, #0
 8007786:	f000 80d8 	beq.w	800793a <_printf_i+0x1d2>
 800778a:	2f58      	cmp	r7, #88	; 0x58
 800778c:	f000 80a3 	beq.w	80078d6 <_printf_i+0x16e>
 8007790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007798:	e03a      	b.n	8007810 <_printf_i+0xa8>
 800779a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800779e:	2b15      	cmp	r3, #21
 80077a0:	d8f6      	bhi.n	8007790 <_printf_i+0x28>
 80077a2:	a101      	add	r1, pc, #4	; (adr r1, 80077a8 <_printf_i+0x40>)
 80077a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077a8:	08007801 	.word	0x08007801
 80077ac:	08007815 	.word	0x08007815
 80077b0:	08007791 	.word	0x08007791
 80077b4:	08007791 	.word	0x08007791
 80077b8:	08007791 	.word	0x08007791
 80077bc:	08007791 	.word	0x08007791
 80077c0:	08007815 	.word	0x08007815
 80077c4:	08007791 	.word	0x08007791
 80077c8:	08007791 	.word	0x08007791
 80077cc:	08007791 	.word	0x08007791
 80077d0:	08007791 	.word	0x08007791
 80077d4:	08007921 	.word	0x08007921
 80077d8:	08007845 	.word	0x08007845
 80077dc:	08007903 	.word	0x08007903
 80077e0:	08007791 	.word	0x08007791
 80077e4:	08007791 	.word	0x08007791
 80077e8:	08007943 	.word	0x08007943
 80077ec:	08007791 	.word	0x08007791
 80077f0:	08007845 	.word	0x08007845
 80077f4:	08007791 	.word	0x08007791
 80077f8:	08007791 	.word	0x08007791
 80077fc:	0800790b 	.word	0x0800790b
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	1d1a      	adds	r2, r3, #4
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	602a      	str	r2, [r5, #0]
 8007808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800780c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007810:	2301      	movs	r3, #1
 8007812:	e0a3      	b.n	800795c <_printf_i+0x1f4>
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	6829      	ldr	r1, [r5, #0]
 8007818:	0606      	lsls	r6, r0, #24
 800781a:	f101 0304 	add.w	r3, r1, #4
 800781e:	d50a      	bpl.n	8007836 <_printf_i+0xce>
 8007820:	680e      	ldr	r6, [r1, #0]
 8007822:	602b      	str	r3, [r5, #0]
 8007824:	2e00      	cmp	r6, #0
 8007826:	da03      	bge.n	8007830 <_printf_i+0xc8>
 8007828:	232d      	movs	r3, #45	; 0x2d
 800782a:	4276      	negs	r6, r6
 800782c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007830:	485e      	ldr	r0, [pc, #376]	; (80079ac <_printf_i+0x244>)
 8007832:	230a      	movs	r3, #10
 8007834:	e019      	b.n	800786a <_printf_i+0x102>
 8007836:	680e      	ldr	r6, [r1, #0]
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800783e:	bf18      	it	ne
 8007840:	b236      	sxthne	r6, r6
 8007842:	e7ef      	b.n	8007824 <_printf_i+0xbc>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	6820      	ldr	r0, [r4, #0]
 8007848:	1d19      	adds	r1, r3, #4
 800784a:	6029      	str	r1, [r5, #0]
 800784c:	0601      	lsls	r1, r0, #24
 800784e:	d501      	bpl.n	8007854 <_printf_i+0xec>
 8007850:	681e      	ldr	r6, [r3, #0]
 8007852:	e002      	b.n	800785a <_printf_i+0xf2>
 8007854:	0646      	lsls	r6, r0, #25
 8007856:	d5fb      	bpl.n	8007850 <_printf_i+0xe8>
 8007858:	881e      	ldrh	r6, [r3, #0]
 800785a:	4854      	ldr	r0, [pc, #336]	; (80079ac <_printf_i+0x244>)
 800785c:	2f6f      	cmp	r7, #111	; 0x6f
 800785e:	bf0c      	ite	eq
 8007860:	2308      	moveq	r3, #8
 8007862:	230a      	movne	r3, #10
 8007864:	2100      	movs	r1, #0
 8007866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800786a:	6865      	ldr	r5, [r4, #4]
 800786c:	60a5      	str	r5, [r4, #8]
 800786e:	2d00      	cmp	r5, #0
 8007870:	bfa2      	ittt	ge
 8007872:	6821      	ldrge	r1, [r4, #0]
 8007874:	f021 0104 	bicge.w	r1, r1, #4
 8007878:	6021      	strge	r1, [r4, #0]
 800787a:	b90e      	cbnz	r6, 8007880 <_printf_i+0x118>
 800787c:	2d00      	cmp	r5, #0
 800787e:	d04d      	beq.n	800791c <_printf_i+0x1b4>
 8007880:	4615      	mov	r5, r2
 8007882:	fbb6 f1f3 	udiv	r1, r6, r3
 8007886:	fb03 6711 	mls	r7, r3, r1, r6
 800788a:	5dc7      	ldrb	r7, [r0, r7]
 800788c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007890:	4637      	mov	r7, r6
 8007892:	42bb      	cmp	r3, r7
 8007894:	460e      	mov	r6, r1
 8007896:	d9f4      	bls.n	8007882 <_printf_i+0x11a>
 8007898:	2b08      	cmp	r3, #8
 800789a:	d10b      	bne.n	80078b4 <_printf_i+0x14c>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	07de      	lsls	r6, r3, #31
 80078a0:	d508      	bpl.n	80078b4 <_printf_i+0x14c>
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	6861      	ldr	r1, [r4, #4]
 80078a6:	4299      	cmp	r1, r3
 80078a8:	bfde      	ittt	le
 80078aa:	2330      	movle	r3, #48	; 0x30
 80078ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078b4:	1b52      	subs	r2, r2, r5
 80078b6:	6122      	str	r2, [r4, #16]
 80078b8:	f8cd a000 	str.w	sl, [sp]
 80078bc:	464b      	mov	r3, r9
 80078be:	aa03      	add	r2, sp, #12
 80078c0:	4621      	mov	r1, r4
 80078c2:	4640      	mov	r0, r8
 80078c4:	f7ff fee2 	bl	800768c <_printf_common>
 80078c8:	3001      	adds	r0, #1
 80078ca:	d14c      	bne.n	8007966 <_printf_i+0x1fe>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	b004      	add	sp, #16
 80078d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d6:	4835      	ldr	r0, [pc, #212]	; (80079ac <_printf_i+0x244>)
 80078d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078dc:	6829      	ldr	r1, [r5, #0]
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80078e4:	6029      	str	r1, [r5, #0]
 80078e6:	061d      	lsls	r5, r3, #24
 80078e8:	d514      	bpl.n	8007914 <_printf_i+0x1ac>
 80078ea:	07df      	lsls	r7, r3, #31
 80078ec:	bf44      	itt	mi
 80078ee:	f043 0320 	orrmi.w	r3, r3, #32
 80078f2:	6023      	strmi	r3, [r4, #0]
 80078f4:	b91e      	cbnz	r6, 80078fe <_printf_i+0x196>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	f023 0320 	bic.w	r3, r3, #32
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	2310      	movs	r3, #16
 8007900:	e7b0      	b.n	8007864 <_printf_i+0xfc>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	f043 0320 	orr.w	r3, r3, #32
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	2378      	movs	r3, #120	; 0x78
 800790c:	4828      	ldr	r0, [pc, #160]	; (80079b0 <_printf_i+0x248>)
 800790e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007912:	e7e3      	b.n	80078dc <_printf_i+0x174>
 8007914:	0659      	lsls	r1, r3, #25
 8007916:	bf48      	it	mi
 8007918:	b2b6      	uxthmi	r6, r6
 800791a:	e7e6      	b.n	80078ea <_printf_i+0x182>
 800791c:	4615      	mov	r5, r2
 800791e:	e7bb      	b.n	8007898 <_printf_i+0x130>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	6826      	ldr	r6, [r4, #0]
 8007924:	6961      	ldr	r1, [r4, #20]
 8007926:	1d18      	adds	r0, r3, #4
 8007928:	6028      	str	r0, [r5, #0]
 800792a:	0635      	lsls	r5, r6, #24
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	d501      	bpl.n	8007934 <_printf_i+0x1cc>
 8007930:	6019      	str	r1, [r3, #0]
 8007932:	e002      	b.n	800793a <_printf_i+0x1d2>
 8007934:	0670      	lsls	r0, r6, #25
 8007936:	d5fb      	bpl.n	8007930 <_printf_i+0x1c8>
 8007938:	8019      	strh	r1, [r3, #0]
 800793a:	2300      	movs	r3, #0
 800793c:	6123      	str	r3, [r4, #16]
 800793e:	4615      	mov	r5, r2
 8007940:	e7ba      	b.n	80078b8 <_printf_i+0x150>
 8007942:	682b      	ldr	r3, [r5, #0]
 8007944:	1d1a      	adds	r2, r3, #4
 8007946:	602a      	str	r2, [r5, #0]
 8007948:	681d      	ldr	r5, [r3, #0]
 800794a:	6862      	ldr	r2, [r4, #4]
 800794c:	2100      	movs	r1, #0
 800794e:	4628      	mov	r0, r5
 8007950:	f7f8 fc46 	bl	80001e0 <memchr>
 8007954:	b108      	cbz	r0, 800795a <_printf_i+0x1f2>
 8007956:	1b40      	subs	r0, r0, r5
 8007958:	6060      	str	r0, [r4, #4]
 800795a:	6863      	ldr	r3, [r4, #4]
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	2300      	movs	r3, #0
 8007960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007964:	e7a8      	b.n	80078b8 <_printf_i+0x150>
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	462a      	mov	r2, r5
 800796a:	4649      	mov	r1, r9
 800796c:	4640      	mov	r0, r8
 800796e:	47d0      	blx	sl
 8007970:	3001      	adds	r0, #1
 8007972:	d0ab      	beq.n	80078cc <_printf_i+0x164>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	079b      	lsls	r3, r3, #30
 8007978:	d413      	bmi.n	80079a2 <_printf_i+0x23a>
 800797a:	68e0      	ldr	r0, [r4, #12]
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	4298      	cmp	r0, r3
 8007980:	bfb8      	it	lt
 8007982:	4618      	movlt	r0, r3
 8007984:	e7a4      	b.n	80078d0 <_printf_i+0x168>
 8007986:	2301      	movs	r3, #1
 8007988:	4632      	mov	r2, r6
 800798a:	4649      	mov	r1, r9
 800798c:	4640      	mov	r0, r8
 800798e:	47d0      	blx	sl
 8007990:	3001      	adds	r0, #1
 8007992:	d09b      	beq.n	80078cc <_printf_i+0x164>
 8007994:	3501      	adds	r5, #1
 8007996:	68e3      	ldr	r3, [r4, #12]
 8007998:	9903      	ldr	r1, [sp, #12]
 800799a:	1a5b      	subs	r3, r3, r1
 800799c:	42ab      	cmp	r3, r5
 800799e:	dcf2      	bgt.n	8007986 <_printf_i+0x21e>
 80079a0:	e7eb      	b.n	800797a <_printf_i+0x212>
 80079a2:	2500      	movs	r5, #0
 80079a4:	f104 0619 	add.w	r6, r4, #25
 80079a8:	e7f5      	b.n	8007996 <_printf_i+0x22e>
 80079aa:	bf00      	nop
 80079ac:	08008129 	.word	0x08008129
 80079b0:	0800813a 	.word	0x0800813a

080079b4 <_sbrk_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d06      	ldr	r5, [pc, #24]	; (80079d0 <_sbrk_r+0x1c>)
 80079b8:	2300      	movs	r3, #0
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	f7f9 fa48 	bl	8000e54 <_sbrk>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_sbrk_r+0x1a>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_sbrk_r+0x1a>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	20013718 	.word	0x20013718

080079d4 <__sread>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	460c      	mov	r4, r1
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	f000 f8f8 	bl	8007bd0 <_read_r>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	bfab      	itete	ge
 80079e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079e6:	89a3      	ldrhlt	r3, [r4, #12]
 80079e8:	181b      	addge	r3, r3, r0
 80079ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079ee:	bfac      	ite	ge
 80079f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80079f2:	81a3      	strhlt	r3, [r4, #12]
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <__swrite>:
 80079f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	461f      	mov	r7, r3
 80079fc:	898b      	ldrh	r3, [r1, #12]
 80079fe:	05db      	lsls	r3, r3, #23
 8007a00:	4605      	mov	r5, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	4616      	mov	r6, r2
 8007a06:	d505      	bpl.n	8007a14 <__swrite+0x1e>
 8007a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f000 f868 	bl	8007ae4 <_lseek_r>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	4632      	mov	r2, r6
 8007a22:	463b      	mov	r3, r7
 8007a24:	4628      	mov	r0, r5
 8007a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	f000 b817 	b.w	8007a5c <_write_r>

08007a2e <__sseek>:
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	460c      	mov	r4, r1
 8007a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a36:	f000 f855 	bl	8007ae4 <_lseek_r>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	bf15      	itete	ne
 8007a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a4a:	81a3      	strheq	r3, [r4, #12]
 8007a4c:	bf18      	it	ne
 8007a4e:	81a3      	strhne	r3, [r4, #12]
 8007a50:	bd10      	pop	{r4, pc}

08007a52 <__sclose>:
 8007a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a56:	f000 b813 	b.w	8007a80 <_close_r>
	...

08007a5c <_write_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_write_r+0x20>)
 8007a60:	4604      	mov	r4, r0
 8007a62:	4608      	mov	r0, r1
 8007a64:	4611      	mov	r1, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7f9 f9a1 	bl	8000db2 <_write>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_write_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_write_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	20013718 	.word	0x20013718

08007a80 <_close_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d06      	ldr	r5, [pc, #24]	; (8007a9c <_close_r+0x1c>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7f9 f9ad 	bl	8000dea <_close>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_close_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_close_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20013718 	.word	0x20013718

08007aa0 <_fstat_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d07      	ldr	r5, [pc, #28]	; (8007ac0 <_fstat_r+0x20>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	4611      	mov	r1, r2
 8007aac:	602b      	str	r3, [r5, #0]
 8007aae:	f7f9 f9a8 	bl	8000e02 <_fstat>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	d102      	bne.n	8007abc <_fstat_r+0x1c>
 8007ab6:	682b      	ldr	r3, [r5, #0]
 8007ab8:	b103      	cbz	r3, 8007abc <_fstat_r+0x1c>
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
 8007abe:	bf00      	nop
 8007ac0:	20013718 	.word	0x20013718

08007ac4 <_isatty_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d06      	ldr	r5, [pc, #24]	; (8007ae0 <_isatty_r+0x1c>)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	602b      	str	r3, [r5, #0]
 8007ad0:	f7f9 f9a7 	bl	8000e22 <_isatty>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_isatty_r+0x1a>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_isatty_r+0x1a>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20013718 	.word	0x20013718

08007ae4 <_lseek_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	; (8007b04 <_lseek_r+0x20>)
 8007ae8:	4604      	mov	r4, r0
 8007aea:	4608      	mov	r0, r1
 8007aec:	4611      	mov	r1, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7f9 f9a0 	bl	8000e38 <_lseek>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_lseek_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_lseek_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20013718 	.word	0x20013718

08007b08 <memcpy>:
 8007b08:	440a      	add	r2, r1
 8007b0a:	4291      	cmp	r1, r2
 8007b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b10:	d100      	bne.n	8007b14 <memcpy+0xc>
 8007b12:	4770      	bx	lr
 8007b14:	b510      	push	{r4, lr}
 8007b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b1e:	4291      	cmp	r1, r2
 8007b20:	d1f9      	bne.n	8007b16 <memcpy+0xe>
 8007b22:	bd10      	pop	{r4, pc}

08007b24 <memmove>:
 8007b24:	4288      	cmp	r0, r1
 8007b26:	b510      	push	{r4, lr}
 8007b28:	eb01 0402 	add.w	r4, r1, r2
 8007b2c:	d902      	bls.n	8007b34 <memmove+0x10>
 8007b2e:	4284      	cmp	r4, r0
 8007b30:	4623      	mov	r3, r4
 8007b32:	d807      	bhi.n	8007b44 <memmove+0x20>
 8007b34:	1e43      	subs	r3, r0, #1
 8007b36:	42a1      	cmp	r1, r4
 8007b38:	d008      	beq.n	8007b4c <memmove+0x28>
 8007b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b42:	e7f8      	b.n	8007b36 <memmove+0x12>
 8007b44:	4402      	add	r2, r0
 8007b46:	4601      	mov	r1, r0
 8007b48:	428a      	cmp	r2, r1
 8007b4a:	d100      	bne.n	8007b4e <memmove+0x2a>
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b56:	e7f7      	b.n	8007b48 <memmove+0x24>

08007b58 <__malloc_lock>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__malloc_lock+0x8>)
 8007b5a:	f7ff b999 	b.w	8006e90 <__retarget_lock_acquire_recursive>
 8007b5e:	bf00      	nop
 8007b60:	2001370c 	.word	0x2001370c

08007b64 <__malloc_unlock>:
 8007b64:	4801      	ldr	r0, [pc, #4]	; (8007b6c <__malloc_unlock+0x8>)
 8007b66:	f7ff b994 	b.w	8006e92 <__retarget_lock_release_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	2001370c 	.word	0x2001370c

08007b70 <_realloc_r>:
 8007b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b74:	4680      	mov	r8, r0
 8007b76:	4614      	mov	r4, r2
 8007b78:	460e      	mov	r6, r1
 8007b7a:	b921      	cbnz	r1, 8007b86 <_realloc_r+0x16>
 8007b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b80:	4611      	mov	r1, r2
 8007b82:	f7ff ba59 	b.w	8007038 <_malloc_r>
 8007b86:	b92a      	cbnz	r2, 8007b94 <_realloc_r+0x24>
 8007b88:	f7ff f9ea 	bl	8006f60 <_free_r>
 8007b8c:	4625      	mov	r5, r4
 8007b8e:	4628      	mov	r0, r5
 8007b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b94:	f000 f82e 	bl	8007bf4 <_malloc_usable_size_r>
 8007b98:	4284      	cmp	r4, r0
 8007b9a:	4607      	mov	r7, r0
 8007b9c:	d802      	bhi.n	8007ba4 <_realloc_r+0x34>
 8007b9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ba2:	d812      	bhi.n	8007bca <_realloc_r+0x5a>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	f7ff fa46 	bl	8007038 <_malloc_r>
 8007bac:	4605      	mov	r5, r0
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d0ed      	beq.n	8007b8e <_realloc_r+0x1e>
 8007bb2:	42bc      	cmp	r4, r7
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	bf28      	it	cs
 8007bba:	463a      	movcs	r2, r7
 8007bbc:	f7ff ffa4 	bl	8007b08 <memcpy>
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	f7ff f9cc 	bl	8006f60 <_free_r>
 8007bc8:	e7e1      	b.n	8007b8e <_realloc_r+0x1e>
 8007bca:	4635      	mov	r5, r6
 8007bcc:	e7df      	b.n	8007b8e <_realloc_r+0x1e>
	...

08007bd0 <_read_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	; (8007bf0 <_read_r+0x20>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7f9 f8ca 	bl	8000d78 <_read>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_read_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_read_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20013718 	.word	0x20013718

08007bf4 <_malloc_usable_size_r>:
 8007bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf8:	1f18      	subs	r0, r3, #4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bfbc      	itt	lt
 8007bfe:	580b      	ldrlt	r3, [r1, r0]
 8007c00:	18c0      	addlt	r0, r0, r3
 8007c02:	4770      	bx	lr

08007c04 <_init>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr

08007c10 <_fini>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	bf00      	nop
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr
