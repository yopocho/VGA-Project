
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
<<<<<<< HEAD
  1 .text         00009650  08000190  08000190  00010190  2**4
=======
<<<<<<< HEAD
  1 .text         000049dc  08000188  08000188  00010188  2**2
=======
  1 .text         000058a0  08000188  08000188  00010188  2**2
>>>>>>> Feature_Parser2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d48  08005d48  00021e30  2**0
                  CONTENTS
  4 .ARM          00000008  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d50  08005d50  00021e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e30  20000000  08005d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013250  20001e30  08007b88  00021e30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015080  08007b88  00025080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021e30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e341  00000000  00000000  00021e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002711  00000000  00000000  000301a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  000328b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  000335e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232b3  00000000  00000000  000341d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001129a  00000000  00000000  00057483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cabda  00000000  00000000  0006871d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001332f7  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 20 .debug_frame  0000346c  00000000  00000000  0012e3e8  2**2
=======
  1 .text         000057dc  08000190  08000190  00010190  2**4
>>>>>>> master
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  080097e0  080097e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a12c  0800a12c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a134  0800a134  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a134  0800a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a13c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013768  20000088  0800a1c4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200137f0  0800a1c4  000237f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015114  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ba  00000000  00000000  000351cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00038b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00039e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c79  00000000  00000000  0003afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0d5  00000000  00000000  00060c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf2b4  00000000  00000000  0007bd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014afca  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 20 .debug_frame  000055cc  00000000  00000000  0014b01c  2**2
=======
 20 .debug_frame  00003d80  00000000  00000000  0012f82c  2**2
>>>>>>> master
>>>>>>> master
=======
 20 .debug_frame  000038f4  00000000  00000000  00133348  2**2
>>>>>>> Feature_Parser2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001e30 	.word	0x20001e30
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a10 	.word	0x08005a10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001e34 	.word	0x20001e34
 80001c4:	08005a10 	.word	0x08005a10

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_d2f>:
 8000554:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000558:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800055c:	bf24      	itt	cs
 800055e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000562:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000566:	d90d      	bls.n	8000584 <__aeabi_d2f+0x30>
 8000568:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800056c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000570:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000574:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000578:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800057c:	bf08      	it	eq
 800057e:	f020 0001 	biceq.w	r0, r0, #1
 8000582:	4770      	bx	lr
 8000584:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000588:	d121      	bne.n	80005ce <__aeabi_d2f+0x7a>
 800058a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058e:	bfbc      	itt	lt
 8000590:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000594:	4770      	bxlt	lr
 8000596:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059e:	f1c2 0218 	rsb	r2, r2, #24
 80005a2:	f1c2 0c20 	rsb	ip, r2, #32
 80005a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	bf18      	it	ne
 80005b0:	f040 0001 	orrne.w	r0, r0, #1
 80005b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005c0:	ea40 000c 	orr.w	r0, r0, ip
 80005c4:	fa23 f302 	lsr.w	r3, r3, r2
 80005c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005cc:	e7cc      	b.n	8000568 <__aeabi_d2f+0x14>
 80005ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005d2:	d107      	bne.n	80005e4 <__aeabi_d2f+0x90>
 80005d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d8:	bf1e      	ittt	ne
 80005da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005e2:	4770      	bxne	lr
 80005e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <__aeabi_uldivmod>:
 80005f4:	b953      	cbnz	r3, 800060c <__aeabi_uldivmod+0x18>
 80005f6:	b94a      	cbnz	r2, 800060c <__aeabi_uldivmod+0x18>
 80005f8:	2900      	cmp	r1, #0
 80005fa:	bf08      	it	eq
 80005fc:	2800      	cmpeq	r0, #0
 80005fe:	bf1c      	itt	ne
 8000600:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000604:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000608:	f000 b974 	b.w	80008f4 <__aeabi_idiv0>
 800060c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000610:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000614:	f000 f806 	bl	8000624 <__udivmoddi4>
 8000618:	f8dd e004 	ldr.w	lr, [sp, #4]
 800061c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr

08000624 <__udivmoddi4>:
 8000624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000628:	9d08      	ldr	r5, [sp, #32]
 800062a:	4604      	mov	r4, r0
 800062c:	468e      	mov	lr, r1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d14d      	bne.n	80006ce <__udivmoddi4+0xaa>
 8000632:	428a      	cmp	r2, r1
 8000634:	4694      	mov	ip, r2
 8000636:	d969      	bls.n	800070c <__udivmoddi4+0xe8>
 8000638:	fab2 f282 	clz	r2, r2
 800063c:	b152      	cbz	r2, 8000654 <__udivmoddi4+0x30>
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	f1c2 0120 	rsb	r1, r2, #32
 8000646:	fa20 f101 	lsr.w	r1, r0, r1
 800064a:	fa0c fc02 	lsl.w	ip, ip, r2
 800064e:	ea41 0e03 	orr.w	lr, r1, r3
 8000652:	4094      	lsls	r4, r2
 8000654:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000658:	0c21      	lsrs	r1, r4, #16
 800065a:	fbbe f6f8 	udiv	r6, lr, r8
 800065e:	fa1f f78c 	uxth.w	r7, ip
 8000662:	fb08 e316 	mls	r3, r8, r6, lr
 8000666:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066a:	fb06 f107 	mul.w	r1, r6, r7
 800066e:	4299      	cmp	r1, r3
 8000670:	d90a      	bls.n	8000688 <__udivmoddi4+0x64>
 8000672:	eb1c 0303 	adds.w	r3, ip, r3
 8000676:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800067a:	f080 811f 	bcs.w	80008bc <__udivmoddi4+0x298>
 800067e:	4299      	cmp	r1, r3
 8000680:	f240 811c 	bls.w	80008bc <__udivmoddi4+0x298>
 8000684:	3e02      	subs	r6, #2
 8000686:	4463      	add	r3, ip
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	b2a4      	uxth	r4, r4
 800068c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000690:	fb08 3310 	mls	r3, r8, r0, r3
 8000694:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000698:	fb00 f707 	mul.w	r7, r0, r7
 800069c:	42a7      	cmp	r7, r4
 800069e:	d90a      	bls.n	80006b6 <__udivmoddi4+0x92>
 80006a0:	eb1c 0404 	adds.w	r4, ip, r4
 80006a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006a8:	f080 810a 	bcs.w	80008c0 <__udivmoddi4+0x29c>
 80006ac:	42a7      	cmp	r7, r4
 80006ae:	f240 8107 	bls.w	80008c0 <__udivmoddi4+0x29c>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ba:	1be4      	subs	r4, r4, r7
 80006bc:	2600      	movs	r6, #0
 80006be:	b11d      	cbz	r5, 80006c8 <__udivmoddi4+0xa4>
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	2300      	movs	r3, #0
 80006c4:	e9c5 4300 	strd	r4, r3, [r5]
 80006c8:	4631      	mov	r1, r6
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d909      	bls.n	80006e6 <__udivmoddi4+0xc2>
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	f000 80ef 	beq.w	80008b6 <__udivmoddi4+0x292>
 80006d8:	2600      	movs	r6, #0
 80006da:	e9c5 0100 	strd	r0, r1, [r5]
 80006de:	4630      	mov	r0, r6
 80006e0:	4631      	mov	r1, r6
 80006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e6:	fab3 f683 	clz	r6, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d14a      	bne.n	8000784 <__udivmoddi4+0x160>
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d302      	bcc.n	80006f8 <__udivmoddi4+0xd4>
 80006f2:	4282      	cmp	r2, r0
 80006f4:	f200 80f9 	bhi.w	80008ea <__udivmoddi4+0x2c6>
 80006f8:	1a84      	subs	r4, r0, r2
 80006fa:	eb61 0303 	sbc.w	r3, r1, r3
 80006fe:	2001      	movs	r0, #1
 8000700:	469e      	mov	lr, r3
 8000702:	2d00      	cmp	r5, #0
 8000704:	d0e0      	beq.n	80006c8 <__udivmoddi4+0xa4>
 8000706:	e9c5 4e00 	strd	r4, lr, [r5]
 800070a:	e7dd      	b.n	80006c8 <__udivmoddi4+0xa4>
 800070c:	b902      	cbnz	r2, 8000710 <__udivmoddi4+0xec>
 800070e:	deff      	udf	#255	; 0xff
 8000710:	fab2 f282 	clz	r2, r2
 8000714:	2a00      	cmp	r2, #0
 8000716:	f040 8092 	bne.w	800083e <__udivmoddi4+0x21a>
 800071a:	eba1 010c 	sub.w	r1, r1, ip
 800071e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000722:	fa1f fe8c 	uxth.w	lr, ip
 8000726:	2601      	movs	r6, #1
 8000728:	0c20      	lsrs	r0, r4, #16
 800072a:	fbb1 f3f7 	udiv	r3, r1, r7
 800072e:	fb07 1113 	mls	r1, r7, r3, r1
 8000732:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000736:	fb0e f003 	mul.w	r0, lr, r3
 800073a:	4288      	cmp	r0, r1
 800073c:	d908      	bls.n	8000750 <__udivmoddi4+0x12c>
 800073e:	eb1c 0101 	adds.w	r1, ip, r1
 8000742:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000746:	d202      	bcs.n	800074e <__udivmoddi4+0x12a>
 8000748:	4288      	cmp	r0, r1
 800074a:	f200 80cb 	bhi.w	80008e4 <__udivmoddi4+0x2c0>
 800074e:	4643      	mov	r3, r8
 8000750:	1a09      	subs	r1, r1, r0
 8000752:	b2a4      	uxth	r4, r4
 8000754:	fbb1 f0f7 	udiv	r0, r1, r7
 8000758:	fb07 1110 	mls	r1, r7, r0, r1
 800075c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000760:	fb0e fe00 	mul.w	lr, lr, r0
 8000764:	45a6      	cmp	lr, r4
 8000766:	d908      	bls.n	800077a <__udivmoddi4+0x156>
 8000768:	eb1c 0404 	adds.w	r4, ip, r4
 800076c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000770:	d202      	bcs.n	8000778 <__udivmoddi4+0x154>
 8000772:	45a6      	cmp	lr, r4
 8000774:	f200 80bb 	bhi.w	80008ee <__udivmoddi4+0x2ca>
 8000778:	4608      	mov	r0, r1
 800077a:	eba4 040e 	sub.w	r4, r4, lr
 800077e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000782:	e79c      	b.n	80006be <__udivmoddi4+0x9a>
 8000784:	f1c6 0720 	rsb	r7, r6, #32
 8000788:	40b3      	lsls	r3, r6
 800078a:	fa22 fc07 	lsr.w	ip, r2, r7
 800078e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000792:	fa20 f407 	lsr.w	r4, r0, r7
 8000796:	fa01 f306 	lsl.w	r3, r1, r6
 800079a:	431c      	orrs	r4, r3
 800079c:	40f9      	lsrs	r1, r7
 800079e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007a2:	fa00 f306 	lsl.w	r3, r0, r6
 80007a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80007aa:	0c20      	lsrs	r0, r4, #16
 80007ac:	fa1f fe8c 	uxth.w	lr, ip
 80007b0:	fb09 1118 	mls	r1, r9, r8, r1
 80007b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007b8:	fb08 f00e 	mul.w	r0, r8, lr
 80007bc:	4288      	cmp	r0, r1
 80007be:	fa02 f206 	lsl.w	r2, r2, r6
 80007c2:	d90b      	bls.n	80007dc <__udivmoddi4+0x1b8>
 80007c4:	eb1c 0101 	adds.w	r1, ip, r1
 80007c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007cc:	f080 8088 	bcs.w	80008e0 <__udivmoddi4+0x2bc>
 80007d0:	4288      	cmp	r0, r1
 80007d2:	f240 8085 	bls.w	80008e0 <__udivmoddi4+0x2bc>
 80007d6:	f1a8 0802 	sub.w	r8, r8, #2
 80007da:	4461      	add	r1, ip
 80007dc:	1a09      	subs	r1, r1, r0
 80007de:	b2a4      	uxth	r4, r4
 80007e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e4:	fb09 1110 	mls	r1, r9, r0, r1
 80007e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80007f0:	458e      	cmp	lr, r1
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1e2>
 80007f4:	eb1c 0101 	adds.w	r1, ip, r1
 80007f8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007fc:	d26c      	bcs.n	80008d8 <__udivmoddi4+0x2b4>
 80007fe:	458e      	cmp	lr, r1
 8000800:	d96a      	bls.n	80008d8 <__udivmoddi4+0x2b4>
 8000802:	3802      	subs	r0, #2
 8000804:	4461      	add	r1, ip
 8000806:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800080a:	fba0 9402 	umull	r9, r4, r0, r2
 800080e:	eba1 010e 	sub.w	r1, r1, lr
 8000812:	42a1      	cmp	r1, r4
 8000814:	46c8      	mov	r8, r9
 8000816:	46a6      	mov	lr, r4
 8000818:	d356      	bcc.n	80008c8 <__udivmoddi4+0x2a4>
 800081a:	d053      	beq.n	80008c4 <__udivmoddi4+0x2a0>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x212>
 800081e:	ebb3 0208 	subs.w	r2, r3, r8
 8000822:	eb61 010e 	sbc.w	r1, r1, lr
 8000826:	fa01 f707 	lsl.w	r7, r1, r7
 800082a:	fa22 f306 	lsr.w	r3, r2, r6
 800082e:	40f1      	lsrs	r1, r6
 8000830:	431f      	orrs	r7, r3
 8000832:	e9c5 7100 	strd	r7, r1, [r5]
 8000836:	2600      	movs	r6, #0
 8000838:	4631      	mov	r1, r6
 800083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	40d8      	lsrs	r0, r3
 8000844:	fa0c fc02 	lsl.w	ip, ip, r2
 8000848:	fa21 f303 	lsr.w	r3, r1, r3
 800084c:	4091      	lsls	r1, r2
 800084e:	4301      	orrs	r1, r0
 8000850:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000854:	fa1f fe8c 	uxth.w	lr, ip
 8000858:	fbb3 f0f7 	udiv	r0, r3, r7
 800085c:	fb07 3610 	mls	r6, r7, r0, r3
 8000860:	0c0b      	lsrs	r3, r1, #16
 8000862:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000866:	fb00 f60e 	mul.w	r6, r0, lr
 800086a:	429e      	cmp	r6, r3
 800086c:	fa04 f402 	lsl.w	r4, r4, r2
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x260>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800087a:	d22f      	bcs.n	80008dc <__udivmoddi4+0x2b8>
 800087c:	429e      	cmp	r6, r3
 800087e:	d92d      	bls.n	80008dc <__udivmoddi4+0x2b8>
 8000880:	3802      	subs	r0, #2
 8000882:	4463      	add	r3, ip
 8000884:	1b9b      	subs	r3, r3, r6
 8000886:	b289      	uxth	r1, r1
 8000888:	fbb3 f6f7 	udiv	r6, r3, r7
 800088c:	fb07 3316 	mls	r3, r7, r6, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb06 f30e 	mul.w	r3, r6, lr
 8000898:	428b      	cmp	r3, r1
 800089a:	d908      	bls.n	80008ae <__udivmoddi4+0x28a>
 800089c:	eb1c 0101 	adds.w	r1, ip, r1
 80008a0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80008a4:	d216      	bcs.n	80008d4 <__udivmoddi4+0x2b0>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d914      	bls.n	80008d4 <__udivmoddi4+0x2b0>
 80008aa:	3e02      	subs	r6, #2
 80008ac:	4461      	add	r1, ip
 80008ae:	1ac9      	subs	r1, r1, r3
 80008b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b4:	e738      	b.n	8000728 <__udivmoddi4+0x104>
 80008b6:	462e      	mov	r6, r5
 80008b8:	4628      	mov	r0, r5
 80008ba:	e705      	b.n	80006c8 <__udivmoddi4+0xa4>
 80008bc:	4606      	mov	r6, r0
 80008be:	e6e3      	b.n	8000688 <__udivmoddi4+0x64>
 80008c0:	4618      	mov	r0, r3
 80008c2:	e6f8      	b.n	80006b6 <__udivmoddi4+0x92>
 80008c4:	454b      	cmp	r3, r9
 80008c6:	d2a9      	bcs.n	800081c <__udivmoddi4+0x1f8>
 80008c8:	ebb9 0802 	subs.w	r8, r9, r2
 80008cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008d0:	3801      	subs	r0, #1
 80008d2:	e7a3      	b.n	800081c <__udivmoddi4+0x1f8>
 80008d4:	4646      	mov	r6, r8
 80008d6:	e7ea      	b.n	80008ae <__udivmoddi4+0x28a>
 80008d8:	4620      	mov	r0, r4
 80008da:	e794      	b.n	8000806 <__udivmoddi4+0x1e2>
 80008dc:	4640      	mov	r0, r8
 80008de:	e7d1      	b.n	8000884 <__udivmoddi4+0x260>
 80008e0:	46d0      	mov	r8, sl
 80008e2:	e77b      	b.n	80007dc <__udivmoddi4+0x1b8>
 80008e4:	3b02      	subs	r3, #2
 80008e6:	4461      	add	r1, ip
 80008e8:	e732      	b.n	8000750 <__udivmoddi4+0x12c>
 80008ea:	4630      	mov	r0, r6
 80008ec:	e709      	b.n	8000702 <__udivmoddi4+0xde>
 80008ee:	4464      	add	r4, ip
 80008f0:	3802      	subs	r0, #2
 80008f2:	e742      	b.n	800077a <__udivmoddi4+0x156>

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <RecieveCommandLijn>:
 * the buffer
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandLijn(CmdStruct *CmdBuf, input_vars inputStruct) {
 80008f8:	b084      	sub	sp, #16
 80008fa:	b590      	push	{r4, r7, lr}
 80008fc:	f2ad 5d8c 	subw	sp, sp, #1420	; 0x58c
 8000900:	f44f 67af 	mov.w	r7, #1400	; 0x578
 8000904:	446f      	add	r7, sp
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800090c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e059      	b.n	80009ce <RecieveCommandLijn+0xd6>
		neededArg = i + 1;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	3301      	adds	r3, #1
 800091e:	73bb      	strb	r3, [r7, #14]
		if (i == 4) {
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b04      	cmp	r3, #4
 8000924:	d128      	bne.n	8000978 <RecieveCommandLijn+0x80>
			ParseOnKomma(inputStruct, neededArg, 0, 1, 0, 0, 0, *CmdBuf);
 8000926:	7bbc      	ldrb	r4, [r7, #14]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 800092e:	4611      	mov	r1, r2
 8000930:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000934:	4618      	mov	r0, r3
 8000936:	f004 ffc1 	bl	80058bc <memcpy>
 800093a:	2300      	movs	r3, #0
 800093c:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000940:	2300      	movs	r3, #0
 8000942:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000946:	2300      	movs	r3, #0
 8000948:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 800094c:	2301      	movs	r3, #1
 800094e:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000952:	2300      	movs	r3, #0
 8000954:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000958:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 800095c:	4668      	mov	r0, sp
 800095e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000962:	f240 4204 	movw	r2, #1028	; 0x404
 8000966:	4619      	mov	r1, r3
 8000968:	f004 ffa8 	bl	80058bc <memcpy>
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000972:	f000 f9bf 	bl	8000cf4 <ParseOnKomma>
 8000976:	e027      	b.n	80009c8 <RecieveCommandLijn+0xd0>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, 0,0,0,  *CmdBuf);
 8000978:	7bbc      	ldrb	r4, [r7, #14]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 8000980:	4611      	mov	r1, r2
 8000982:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000986:	4618      	mov	r0, r3
 8000988:	f004 ff98 	bl	80058bc <memcpy>
 800098c:	2300      	movs	r3, #0
 800098e:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000992:	2300      	movs	r3, #0
 8000994:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000998:	2300      	movs	r3, #0
 800099a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 800099e:	2300      	movs	r3, #0
 80009a0:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 80009a4:	2301      	movs	r3, #1
 80009a6:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 80009aa:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 80009ae:	4668      	mov	r0, sp
 80009b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009b4:	f240 4204 	movw	r2, #1028	; 0x404
 80009b8:	4619      	mov	r1, r3
 80009ba:	f004 ff7f 	bl	80058bc <memcpy>
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	f000 f996 	bl	8000cf4 <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	3301      	adds	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d9a2      	bls.n	800091a <RecieveCommandLijn+0x22>
		}
	}
//	AddToBuffer(&CmdBuf);
}
 80009d4:	bf00      	nop
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <RecieveCommandClear>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandClear(CmdStruct *CmdBuf, input_vars inputStruct) {
 80009e4:	b084      	sub	sp, #16
 80009e6:	b580      	push	{r7, lr}
 80009e8:	f5ad 6db0 	sub.w	sp, sp, #1408	; 0x580
 80009ec:	f44f 67af 	mov.w	r7, #1400	; 0x578
 80009f0:	446f      	add	r7, sp
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	f107 0014 	add.w	r0, r7, #20
 80009f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 0, 1, 0, 0, 0,  *CmdBuf);
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 8000a02:	4611      	mov	r1, r2
 8000a04:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 ff57 	bl	80058bc <memcpy>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000a20:	2301      	movs	r3, #1
 8000a22:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000a32:	4668      	mov	r0, sp
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	f240 4204 	movw	r2, #1028	; 0x404
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f004 ff3d 	bl	80058bc <memcpy>
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a48:	f000 f954 	bl	8000cf4 <ParseOnKomma>
}
 8000a4c:	bf00      	nop
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <RecieveCommandRechthoek>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandRechthoek(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	b590      	push	{r4, r7, lr}
 8000a60:	f2ad 5d8c 	subw	sp, sp, #1420	; 0x58c
 8000a64:	f44f 67af 	mov.w	r7, #1400	; 0x578
 8000a68:	446f      	add	r7, sp
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000a70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	e059      	b.n	8000b32 <RecieveCommandRechthoek+0xd6>
		neededArg = i + 1;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	3301      	adds	r3, #1
 8000a82:	73bb      	strb	r3, [r7, #14]
		if (i == 4) {
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d128      	bne.n	8000adc <RecieveCommandRechthoek+0x80>
			ParseOnKomma(inputStruct, neededArg, 0, 1, 0, 0, 0, *CmdBuf);
 8000a8a:	7bbc      	ldrb	r4, [r7, #14]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 8000a92:	4611      	mov	r1, r2
 8000a94:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 ff0f 	bl	80058bc <memcpy>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000abc:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000ac0:	4668      	mov	r0, sp
 8000ac2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ac6:	f240 4204 	movw	r2, #1028	; 0x404
 8000aca:	4619      	mov	r1, r3
 8000acc:	f004 fef6 	bl	80058bc <memcpy>
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad6:	f000 f90d 	bl	8000cf4 <ParseOnKomma>
 8000ada:	e027      	b.n	8000b2c <RecieveCommandRechthoek+0xd0>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, 0, 0, 0, *CmdBuf);
 8000adc:	7bbc      	ldrb	r4, [r7, #14]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 fee6 	bl	80058bc <memcpy>
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000b08:	2301      	movs	r3, #1
 8000b0a:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000b0e:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000b12:	4668      	mov	r0, sp
 8000b14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b18:	f240 4204 	movw	r2, #1028	; 0x404
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f004 fecd 	bl	80058bc <memcpy>
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b28:	f000 f8e4 	bl	8000cf4 <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b06      	cmp	r3, #6
 8000b36:	d9a2      	bls.n	8000a7e <RecieveCommandRechthoek+0x22>
		}
	}
}
 8000b38:	bf00      	nop
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <RecieveCommandTekst>:

Error RecieveCommandTekst(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000b48:	b084      	sub	sp, #16
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	f107 0014 	add.w	r0, r7, #20
 8000b56:	e880 000e 	stmia.w	r0, {r1, r2, r3}

}
 8000b5a:	bf00      	nop
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	b004      	add	sp, #16
 8000b68:	4770      	bx	lr

08000b6a <RecieveCommandBitmap>:

Error RecieveCommandBitmap(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000b72:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000b76:	446f      	add	r7, sp
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	f107 001c 	add.w	r0, r7, #28
 8000b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 3; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e01e      	b.n	8000bca <RecieveCommandBitmap+0x60>
		neededArg = i + 1;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	73bb      	strb	r3, [r7, #14]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000ba6:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000baa:	4668      	mov	r0, sp
 8000bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb0:	f240 4204 	movw	r2, #1028	; 0x404
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f004 fe81 	bl	80058bc <memcpy>
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc0:	f000 f898 	bl	8000cf4 <ParseOnKomma>
	for (uint8_t i = 0; i < 3; i++) {
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d9dd      	bls.n	8000b8c <RecieveCommandBitmap+0x22>
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <RecieveCommandWacht>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandWacht(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000be0:	b084      	sub	sp, #16
 8000be2:	b580      	push	{r7, lr}
 8000be4:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000be8:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000bec:	446f      	add	r7, sp
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	f107 0014 	add.w	r0, r7, #20
 8000bf4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 1, 0, CmdBuf);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000c10:	4668      	mov	r0, sp
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	f240 4204 	movw	r2, #1028	; 0x404
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f004 fe4e 	bl	80058bc <memcpy>
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c26:	f000 f865 	bl	8000cf4 <ParseOnKomma>
}
 8000c2a:	bf00      	nop
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr

08000c3a <RecieveCommandHerhaal>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandHerhaal(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000c42:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000c46:	446f      	add	r7, sp
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	f107 001c 	add.w	r0, r7, #28
 8000c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 2; i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e01e      	b.n	8000c9a <RecieveCommandHerhaal+0x60>
		neededArg = i + 1;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	73bb      	strb	r3, [r7, #14]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 8000c70:	2201      	movs	r2, #1
 8000c72:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000c76:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000c7a:	4668      	mov	r0, sp
 8000c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c80:	f240 4204 	movw	r2, #1028	; 0x404
 8000c84:	4619      	mov	r1, r3
 8000c86:	f004 fe19 	bl	80058bc <memcpy>
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c90:	f000 f830 	bl	8000cf4 <ParseOnKomma>
	for (uint8_t i = 0; i < 2; i++) {
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	3301      	adds	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d9dd      	bls.n	8000c5c <RecieveCommandHerhaal+0x22>
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <RecieveCommandFiguur>:

Error RecieveCommandFiguur(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	f107 0014 	add.w	r0, r7, #20
 8000cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000cc2:	bf00      	nop
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	b004      	add	sp, #16
 8000cd0:	4770      	bx	lr

08000cd2 <RecieveCommandCirkel>:

Error RecieveCommandCirkel(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	f107 0014 	add.w	r0, r7, #20
 8000ce0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000ce4:	bf00      	nop
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4770      	bx	lr

08000cf4 <ParseOnKomma>:
 * @param convertColor
 * @param commandArray
 */
Error ParseOnKomma(input_vars inputStruct, uint8_t neededArgument,
				   uint8_t convertToNumber, int convertColor, uint8_t getText,
				   uint8_t getFont, uint8_t getStyle, CmdStruct *CmdBuf) {
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfa:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000cfe:	f44f 6782 	mov.w	r7, #1040	; 0x410
 8000d02:	446f      	add	r7, sp
 8000d04:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8000d08:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000d0c:	466b      	mov	r3, sp
 8000d0e:	469a      	mov	sl, r3
	uint8_t commaCounter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73bb      	strb	r3, [r7, #14]
	uint8_t placeInBuf = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
	char incommingMessage[inputStruct.msglen];
 8000d18:	f8d7 6434 	ldr.w	r6, [r7, #1076]	; 0x434
 8000d1c:	1e73      	subs	r3, r6, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4632      	mov	r2, r6
 8000d22:	2300      	movs	r3, #0
 8000d24:	4690      	mov	r8, r2
 8000d26:	4699      	mov	r9, r3
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d3c:	4632      	mov	r2, r6
 8000d3e:	2300      	movs	r3, #0
 8000d40:	4614      	mov	r4, r2
 8000d42:	461d      	mov	r5, r3
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	00eb      	lsls	r3, r5, #3
 8000d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d52:	00e2      	lsls	r2, r4, #3
 8000d54:	4633      	mov	r3, r6
 8000d56:	3307      	adds	r3, #7
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d60:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000d64:	3300      	adds	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	e0e2      	b.n	8000f34 <ParseOnKomma+0x240>
		if (inputStruct.line_rx_buffer[j] == ',') {
 8000d6e:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b2c      	cmp	r3, #44	; 0x2c
 8000d7a:	d169      	bne.n	8000e50 <ParseOnKomma+0x15c>
			incommingMessage[j] = 0;
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	4413      	add	r3, r2
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
			placeInBuf = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageParse, sizeof(debugMessageParse), &huart2);
#endif
			if (commaCounter == neededArgument) {
 8000d8a:	7bba      	ldrb	r2, [r7, #14]
 8000d8c:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d154      	bne.n	8000e3e <ParseOnKomma+0x14a>
				if (!commaCounter)
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10f      	bne.n	8000dba <ParseOnKomma+0xc6>
					CheckWhatCommand(incommingMessage, CmdBuf, inputStruct);
 8000d9a:	4668      	mov	r0, sp
 8000d9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000da0:	f240 420c 	movw	r2, #1036	; 0x40c
 8000da4:	4619      	mov	r1, r3
 8000da6:	f004 fd89 	bl	80058bc <memcpy>
 8000daa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dae:	cb0c      	ldmia	r3, {r2, r3}
 8000db0:	f8d7 145c 	ldr.w	r1, [r7, #1116]	; 0x45c
 8000db4:	6838      	ldr	r0, [r7, #0]
 8000db6:	f000 f8d1 	bl	8000f5c <CheckWhatCommand>
				if (convertColor)
 8000dba:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <ParseOnKomma+0xde>
					CheckWhatColor(incommingMessage, CmdBuf, neededArgument);
 8000dc2:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f8d7 145c 	ldr.w	r1, [r7, #1116]	; 0x45c
 8000dcc:	6838      	ldr	r0, [r7, #0]
 8000dce:	f000 f901 	bl	8000fd4 <CheckWhatColor>
				if (convertToNumber)
 8000dd2:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00c      	beq.n	8000df4 <ParseOnKomma+0x100>
					CmdBuf->argBuf[neededArgument] = atoi(incommingMessage);
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f004 fd40 	bl	8005860 <atoi>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000de6:	b291      	uxth	r1, r2
 8000de8:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	460a      	mov	r2, r1
 8000df2:	809a      	strh	r2, [r3, #4]
				if (getText) strcpy(CmdBuf->textSentence, incommingMessage);
 8000df4:	f897 3450 	ldrb.w	r3, [r7, #1104]	; 0x450
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <ParseOnKomma+0x116>
 8000dfc:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000e00:	331c      	adds	r3, #28
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 fd6f 	bl	80058e8 <strcpy>
				if (getStyle) strcpy(CmdBuf->textStyle, incommingMessage);
 8000e0a:	f897 3458 	ldrb.w	r3, [r7, #1112]	; 0x458
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d007      	beq.n	8000e22 <ParseOnKomma+0x12e>
 8000e12:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000e16:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fd63 	bl	80058e8 <strcpy>
				if (getFont) strcpy(CmdBuf->textFont , incommingMessage);
 8000e22:	f897 3454 	ldrb.w	r3, [r7, #1108]	; 0x454
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 808b 	beq.w	8000f42 <ParseOnKomma+0x24e>
 8000e2c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000e30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fd56 	bl	80058e8 <strcpy>
				break;
 8000e3c:	e081      	b.n	8000f42 <ParseOnKomma+0x24e>
			}
			commaCounter++;
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	3301      	adds	r3, #1
 8000e42:	73bb      	strb	r3, [r7, #14]
			// set the array to 0 again to fill with the argument
			memset(incommingMessage, 0, sizeof(incommingMessage));
 8000e44:	4633      	mov	r3, r6
 8000e46:	461a      	mov	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f004 fd44 	bl	80058d8 <memset>
		}
		if (j == inputStruct.msglen) {
 8000e50:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d150      	bne.n	8000efc <ParseOnKomma+0x208>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	440a      	add	r2, r1
 8000e64:	7811      	ldrb	r1, [r2, #0]
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
			if (commaCounter == neededArgument) {
 8000e70:	7bba      	ldrb	r2, [r7, #14]
 8000e72:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d165      	bne.n	8000f46 <ParseOnKomma+0x252>
				if (convertColor)
 8000e7a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <ParseOnKomma+0x19e>
					CheckWhatColor(incommingMessage, CmdBuf, neededArgument);
 8000e82:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000e86:	461a      	mov	r2, r3
 8000e88:	f8d7 145c 	ldr.w	r1, [r7, #1116]	; 0x45c
 8000e8c:	6838      	ldr	r0, [r7, #0]
 8000e8e:	f000 f8a1 	bl	8000fd4 <CheckWhatColor>
				if (convertToNumber)
 8000e92:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00c      	beq.n	8000eb4 <ParseOnKomma+0x1c0>
					CmdBuf->argBuf[neededArgument] = atoi(incommingMessage);
 8000e9a:	6838      	ldr	r0, [r7, #0]
 8000e9c:	f004 fce0 	bl	8005860 <atoi>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000ea6:	b291      	uxth	r1, r2
 8000ea8:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	809a      	strh	r2, [r3, #4]
				if (getText) strcpy(CmdBuf->textSentence, incommingMessage);
 8000eb4:	f897 3450 	ldrb.w	r3, [r7, #1104]	; 0x450
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <ParseOnKomma+0x1d6>
 8000ebc:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000ec0:	331c      	adds	r3, #28
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fd0f 	bl	80058e8 <strcpy>
								if (getStyle) strcpy(CmdBuf->textStyle, incommingMessage);
 8000eca:	f897 3458 	ldrb.w	r3, [r7, #1112]	; 0x458
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <ParseOnKomma+0x1ee>
 8000ed2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000ed6:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 8000eda:	6839      	ldr	r1, [r7, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 fd03 	bl	80058e8 <strcpy>
								if (getFont) strcpy(CmdBuf->textFont , incommingMessage);
 8000ee2:	f897 3454 	ldrb.w	r3, [r7, #1108]	; 0x454
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d02d      	beq.n	8000f46 <ParseOnKomma+0x252>
 8000eea:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000eee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000ef2:	6839      	ldr	r1, [r7, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 fcf7 	bl	80058e8 <strcpy>
			}
			break;
 8000efa:	e024      	b.n	8000f46 <ParseOnKomma+0x252>
		}
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000efc:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d011      	beq.n	8000f2e <ParseOnKomma+0x23a>
			inputStruct.line_rx_buffer[j] != ',') {
 8000f0a:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000f14:	2b2c      	cmp	r3, #44	; 0x2c
 8000f16:	d00a      	beq.n	8000f2e <ParseOnKomma+0x23a>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	440a      	add	r2, r1
 8000f22:	7811      	ldrb	r1, [r2, #0]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	f77f af17 	ble.w	8000d6e <ParseOnKomma+0x7a>
 8000f40:	e002      	b.n	8000f48 <ParseOnKomma+0x254>
				break;
 8000f42:	bf00      	nop
 8000f44:	e000      	b.n	8000f48 <ParseOnKomma+0x254>
			break;
 8000f46:	bf00      	nop
 8000f48:	46d5      	mov	sp, sl
		}
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f56:	b004      	add	sp, #16
 8000f58:	4770      	bx	lr
	...

08000f5c <CheckWhatCommand>:
 * @param incommingCommand
 * @param commandArray
 * @param inputStruct
 */
Error CheckWhatCommand(char incommingCommand[], CmdStruct *CmdBuf,
					   input_vars inputStruct) {
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000f64:	f44f 6781 	mov.w	r7, #1032	; 0x408
 8000f68:	446f      	add	r7, sp
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	f107 0118 	add.w	r1, r7, #24
 8000f72:	e881 000c 	stmia.w	r1, {r2, r3}
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e01e      	b.n	8000fba <CheckWhatCommand+0x5e>
		if (strcmp(incommingCommand, possibleCommands[i]) == 0) {
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <CheckWhatCommand+0x74>)
 8000f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff f91e 	bl	80001c8 <strcmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d110      	bne.n	8000fb4 <CheckWhatCommand+0x58>
			CmdBuf->commandNummer = i;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	601a      	str	r2, [r3, #0]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageCommand, sizeof(debugMessageCommand),
						&huart2);
#endif
			DoOnCommand(CmdBuf, inputStruct);
 8000f98:	4668      	mov	r0, sp
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f004 fc8a 	bl	80058bc <memcpy>
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fae:	6838      	ldr	r0, [r7, #0]
 8000fb0:	f000 f840 	bl	8001034 <DoOnCommand>
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d9dd      	bls.n	8000f7c <CheckWhatCommand+0x20>
		}
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fcc:	b002      	add	sp, #8
 8000fce:	4770      	bx	lr
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <CheckWhatColor>:
 * @param incommingColor
 * @param commandArray
 * @param argPlace
 */
Error CheckWhatColor(char incommingColor[], CmdStruct *CmdBuf,
					 uint8_t argPlace) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]
 8000fe6:	e018      	b.n	800101a <CheckWhatColor+0x46>
		if (strcmp(incommingColor, possibleColors[i]) == 0) {
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <CheckWhatColor+0x58>)
 8000fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f7ff f8e8 	bl	80001c8 <strcmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10a      	bne.n	8001014 <CheckWhatColor+0x40>
			CmdBuf->argBuf[argPlace] = colorCodes[i];
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <CheckWhatColor+0x5c>)
 8001002:	5cd2      	ldrb	r2, [r2, r3]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	b291      	uxth	r1, r2
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	460a      	mov	r2, r1
 8001010:	809a      	strh	r2, [r3, #4]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageColor, sizeof(debugMessageColor), &huart2);
#endif
			break;
 8001012:	e005      	b.n	8001020 <CheckWhatColor+0x4c>
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	3301      	adds	r3, #1
 8001018:	75fb      	strb	r3, [r7, #23]
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d9e3      	bls.n	8000fe8 <CheckWhatColor+0x14>
		}
	}
}
 8001020:	bf00      	nop
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000024 	.word	0x20000024
 8001030:	20000064 	.word	0x20000064

08001034 <DoOnCommand>:
 * of the args
 *
 * @param commandArray
 * @param inputStruct
 */
Error DoOnCommand(CmdStruct *CmdBuf, input_vars inputStruct) {
 8001034:	b084      	sub	sp, #16
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 800103c:	f44f 6781 	mov.w	r7, #1032	; 0x408
 8001040:	446f      	add	r7, sp
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	f107 001c 	add.w	r0, r7, #28
 8001048:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	switch (CmdBuf->commandNummer) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b08      	cmp	r3, #8
 8001052:	f200 80a5 	bhi.w	80011a0 <DoOnCommand+0x16c>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <DoOnCommand+0x28>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	08001081 	.word	0x08001081
 8001060:	080010a1 	.word	0x080010a1
 8001064:	080010c1 	.word	0x080010c1
 8001068:	080010e1 	.word	0x080010e1
 800106c:	08001101 	.word	0x08001101
 8001070:	08001121 	.word	0x08001121
 8001074:	08001141 	.word	0x08001141
 8001078:	08001161 	.word	0x08001161
 800107c:	08001181 	.word	0x08001181
		case 0:
			// lijn
			RecieveCommandLijn(&CmdBuf, inputStruct);
 8001080:	1d3c      	adds	r4, r7, #4
 8001082:	4668      	mov	r0, sp
 8001084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001088:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800108c:	4619      	mov	r1, r3
 800108e:	f004 fc15 	bl	80058bc <memcpy>
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001098:	4620      	mov	r0, r4
 800109a:	f7ff fc2d 	bl	80008f8 <RecieveCommandLijn>
			break;
 800109e:	e07f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 1:
			// clearscherm
			RecieveCommandClear(&CmdBuf, inputStruct);
 80010a0:	1d3c      	adds	r4, r7, #4
 80010a2:	4668      	mov	r0, sp
 80010a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010ac:	4619      	mov	r1, r3
 80010ae:	f004 fc05 	bl	80058bc <memcpy>
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff fc93 	bl	80009e4 <RecieveCommandClear>
			break;
 80010be:	e06f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 2:
			// rechthoek
			RecieveCommandRechthoek(&CmdBuf, inputStruct);
 80010c0:	1d3c      	adds	r4, r7, #4
 80010c2:	4668      	mov	r0, sp
 80010c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010cc:	4619      	mov	r1, r3
 80010ce:	f004 fbf5 	bl	80058bc <memcpy>
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff fcbf 	bl	8000a5c <RecieveCommandRechthoek>
			break;
 80010de:	e05f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 3:
			// wacht
			RecieveCommandWacht(&CmdBuf, inputStruct);
 80010e0:	1d3c      	adds	r4, r7, #4
 80010e2:	4668      	mov	r0, sp
 80010e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010ec:	4619      	mov	r1, r3
 80010ee:	f004 fbe5 	bl	80058bc <memcpy>
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff fd71 	bl	8000be0 <RecieveCommandWacht>
			break;
 80010fe:	e04f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 4:
			// tekst
			RecieveCommandTekst(&CmdBuf, inputStruct);
 8001100:	1d3c      	adds	r4, r7, #4
 8001102:	4668      	mov	r0, sp
 8001104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001108:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800110c:	4619      	mov	r1, r3
 800110e:	f004 fbd5 	bl	80058bc <memcpy>
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001118:	4620      	mov	r0, r4
 800111a:	f7ff fd15 	bl	8000b48 <RecieveCommandTekst>
			break;
 800111e:	e03f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 5:
			// bitmap
			RecieveCommandBitmap(&CmdBuf, inputStruct);
 8001120:	1d3c      	adds	r4, r7, #4
 8001122:	4668      	mov	r0, sp
 8001124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001128:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800112c:	4619      	mov	r1, r3
 800112e:	f004 fbc5 	bl	80058bc <memcpy>
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001138:	4620      	mov	r0, r4
 800113a:	f7ff fd16 	bl	8000b6a <RecieveCommandBitmap>
			break;
 800113e:	e02f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 6:
			// cirkel
			RecieveCommandCirkel(&CmdBuf, inputStruct);
 8001140:	1d3c      	adds	r4, r7, #4
 8001142:	4668      	mov	r0, sp
 8001144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001148:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800114c:	4619      	mov	r1, r3
 800114e:	f004 fbb5 	bl	80058bc <memcpy>
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001158:	4620      	mov	r0, r4
 800115a:	f7ff fdba 	bl	8000cd2 <RecieveCommandCirkel>
			break;
 800115e:	e01f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 7:
			// figuur
			RecieveCommandFiguur(&CmdBuf, inputStruct);
 8001160:	1d3c      	adds	r4, r7, #4
 8001162:	4668      	mov	r0, sp
 8001164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001168:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800116c:	4619      	mov	r1, r3
 800116e:	f004 fba5 	bl	80058bc <memcpy>
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001178:	4620      	mov	r0, r4
 800117a:	f7ff fd99 	bl	8000cb0 <RecieveCommandFiguur>
			break;
 800117e:	e00f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 8:
			// herhaal
			RecieveCommandHerhaal(&CmdBuf, inputStruct);
 8001180:	1d3c      	adds	r4, r7, #4
 8001182:	4668      	mov	r0, sp
 8001184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001188:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800118c:	4619      	mov	r1, r3
 800118e:	f004 fb95 	bl	80058bc <memcpy>
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff fd4e 	bl	8000c3a <RecieveCommandHerhaal>
			break;
 800119e:	bf00      	nop
	}
}
 80011a0:	bf00      	nop
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011ac:	b004      	add	sp, #16
 80011ae:	4770      	bx	lr

<<<<<<< HEAD
08000864 <OutputDebug>:
 * @param message
 * @param messageLength
 * @param uartHandle
 */
void OutputDebug(char message[], size_t messageLength,
				 UART_HandleTypeDef *uartHandle) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uartHandle, message, messageLength, 10);
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	b29a      	uxth	r2, r3
 8000874:	230a      	movs	r3, #10
 8000876:	68f9      	ldr	r1, [r7, #12]
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f003 f850 	bl	800391e <HAL_UART_Transmit>
}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <MX_DMA_Init>:
=======
08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097c8 	.word	0x080097c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080097c8 	.word	0x080097c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <TransmitError>:
 *
 * @param ErrorCode
 * @return Error
 */
Error TransmitError(Error ErrorCode)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	ErrorHandle* Error = GetError(ErrorCode);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f811 	bl	80005b8 <GetError>
 8000596:	60f8      	str	r0, [r7, #12]
	printf("[%d]%s", Error->Severity, Error->Msg);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	4619      	mov	r1, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <TransmitError+0x30>)
 80005a6:	f008 f8b3 	bl	8008710 <iprintf>
	return ERR_NONE;
 80005aa:	2304      	movs	r3, #4
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	080099bc 	.word	0x080099bc

080005b8 <GetError>:
 *
 * @param ErrorCode
 * @return ErrorHandle
 */
ErrorHandle* GetError(Error ErrorCode)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	size_t SizeOfErrorList = sizeof(ErrorList)/sizeof(ErrorList[0]);
 80005c2:	2310      	movs	r3, #16
 80005c4:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < SizeOfErrorList; i++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e00e      	b.n	80005ea <GetError+0x32>
		if(ErrorList[i].ErrorCode == ErrorCode){
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <GetError+0x48>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d104      	bne.n	80005e4 <GetError+0x2c>
			return &ErrorList[i];
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <GetError+0x48>)
 80005e0:	4413      	add	r3, r2
 80005e2:	e007      	b.n	80005f4 <GetError+0x3c>
	for(size_t i = 0; i < SizeOfErrorList; i++){
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3ec      	bcc.n	80005cc <GetError+0x14>
		}
	}
	return ERR_UNKNOWN_ERR;
 80005f2:	2307      	movs	r3, #7
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	08009e4c 	.word	0x08009e4c

<<<<<<< HEAD
08000604 <SDCardInit>:
 * @brief Initializes the SD card
 *
 * @return Error
 */
Error SDCardInit()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800060a:	2201      	movs	r2, #1
 800060c:	491f      	ldr	r1, [pc, #124]	; (800068c <SDCardInit+0x88>)
 800060e:	4820      	ldr	r0, [pc, #128]	; (8000690 <SDCardInit+0x8c>)
 8000610:	f007 f928 	bl	8007864 <f_mount>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SDCardInit+0x90>)
 800061a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SDCardInit+0x90>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SDCardInit+0x24>
		return ERR_SDCARD_MOUNT;
 8000624:	2308      	movs	r3, #8
 8000626:	e02d      	b.n	8000684 <SDCardInit+0x80>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors, used_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	4619      	mov	r1, r3
 8000630:	4816      	ldr	r0, [pc, #88]	; (800068c <SDCardInit+0x88>)
 8000632:	f007 ff0b 	bl	800844c <f_getfree>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <SDCardInit+0x90>)
 800063c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <SDCardInit+0x90>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SDCardInit+0x46>
		return ERR_SDCARD_GETFREE;
 8000646:	2309      	movs	r3, #9
 8000648:	e01c      	b.n	8000684 <SDCardInit+0x80>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	3b02      	subs	r3, #2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	8952      	ldrh	r2, [r2, #10]
 8000654:	fb02 f303 	mul.w	r3, r2, r3
 8000658:	617b      	str	r3, [r7, #20]
	free_sectors = free_clusters * getFreeFs->csize;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	895b      	ldrh	r3, [r3, #10]
 800065e:	461a      	mov	r2, r3
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	613b      	str	r3, [r7, #16]
	used_sectors = total_sectors - free_sectors;
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	60fb      	str	r3, [r7, #12]
	printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n%10lu KiB used.\r\n", total_sectors / 2, free_sectors / 2, used_sectors / 2);
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	0859      	lsrs	r1, r3, #1
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	085a      	lsrs	r2, r3, #1
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	085b      	lsrs	r3, r3, #1
 800067c:	4806      	ldr	r0, [pc, #24]	; (8000698 <SDCardInit+0x94>)
 800067e:	f008 f847 	bl	8008710 <iprintf>
	return ERR_NONE;
 8000682:	2304      	movs	r3, #4
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08009ba0 	.word	0x08009ba0
 8000690:	200000a4 	.word	0x200000a4
 8000694:	20000508 	.word	0x20000508
 8000698:	08009ba4 	.word	0x08009ba4

0800069c <DrawBitmapFromSDCard>:
 * @param xp
 * @param yp
 * @param selector
 * @return Error
 */
Error DrawBitmapFromSDCard(uint16_t xp, uint16_t yp, bitmapKey selector) {
 800069c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a0:	b092      	sub	sp, #72	; 0x48
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4603      	mov	r3, r0
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	460b      	mov	r3, r1
 80006aa:	80bb      	strh	r3, [r7, #4]
 80006ac:	4613      	mov	r3, r2
 80006ae:	70fb      	strb	r3, [r7, #3]
 80006b0:	466b      	mov	r3, sp
 80006b2:	469a      	mov	sl, r3

	if(xp > VGA_DISPLAY_X || yp > VGA_DISPLAY_Y) {
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ba:	d802      	bhi.n	80006c2 <DrawBitmapFromSDCard+0x26>
 80006bc:	88bb      	ldrh	r3, [r7, #4]
 80006be:	2bf0      	cmp	r3, #240	; 0xf0
 80006c0:	d901      	bls.n	80006c6 <DrawBitmapFromSDCard+0x2a>
		return ERR_ARG_OOB;
 80006c2:	2302      	movs	r3, #2
 80006c4:	e141      	b.n	800094a <DrawBitmapFromSDCard+0x2ae>
	}

	if(fres != FR_OK){
 80006c6:	4ba4      	ldr	r3, [pc, #656]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <DrawBitmapFromSDCard+0x36>
		return ERR_SDCARD_UNAVAILABLE;
 80006ce:	230d      	movs	r3, #13
 80006d0:	e13b      	b.n	800094a <DrawBitmapFromSDCard+0x2ae>
	}

	//Convert asked-for bitmap to the name of the .txt file its saved in on the SD card
	char filename[20] = "";
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
	itoa(selector, filename, 10);
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	f107 0118 	add.w	r1, r7, #24
 80006ea:	220a      	movs	r2, #10
 80006ec:	4618      	mov	r0, r3
 80006ee:	f008 f805 	bl	80086fc <itoa>
	strcat(filename, ".txt");
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd6a 	bl	80001d0 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4413      	add	r3, r2
 8000706:	4a95      	ldr	r2, [pc, #596]	; (800095c <DrawBitmapFromSDCard+0x2c0>)
 8000708:	6810      	ldr	r0, [r2, #0]
 800070a:	6018      	str	r0, [r3, #0]
 800070c:	7912      	ldrb	r2, [r2, #4]
 800070e:	711a      	strb	r2, [r3, #4]
	fres = f_open(&fil, filename, FA_READ);
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	4891      	ldr	r0, [pc, #580]	; (8000960 <DrawBitmapFromSDCard+0x2c4>)
 800071a:	f007 f8e9 	bl	80078f0 <f_open>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b8d      	ldr	r3, [pc, #564]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 8000724:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000726:	4b8c      	ldr	r3, [pc, #560]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <DrawBitmapFromSDCard+0x96>
		return ERR_SDCARD_OPEN;
 800072e:	230c      	movs	r3, #12
 8000730:	e10b      	b.n	800094a <DrawBitmapFromSDCard+0x2ae>
	}


	// Setup preambleBuf to read preamble of bitmap into
	char preambleBuf[9];
	uint8_t bufLen = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	72fb      	strb	r3, [r7, #11]

	// Read preamble of bitmap file
	fres = f_read(&fil, (void*)preambleBuf, 9, (UINT*)&bufLen);
 8000736:	f107 030b 	add.w	r3, r7, #11
 800073a:	f107 010c 	add.w	r1, r7, #12
 800073e:	2209      	movs	r2, #9
 8000740:	4887      	ldr	r0, [pc, #540]	; (8000960 <DrawBitmapFromSDCard+0x2c4>)
 8000742:	f007 fa93 	bl	8007c6c <f_read>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	4b83      	ldr	r3, [pc, #524]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 800074c:	701a      	strb	r2, [r3, #0]
	if(bufLen != 0 && fres == FR_OK) {
 800074e:	7afb      	ldrb	r3, [r7, #11]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d061      	beq.n	8000818 <DrawBitmapFromSDCard+0x17c>
 8000754:	4b80      	ldr	r3, [pc, #512]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d15d      	bne.n	8000818 <DrawBitmapFromSDCard+0x17c>
		printf("Read string from '%s' contents: %s\n\r", filename, preambleBuf);
 800075c:	f107 020c 	add.w	r2, r7, #12
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	4619      	mov	r1, r3
 8000766:	487f      	ldr	r0, [pc, #508]	; (8000964 <DrawBitmapFromSDCard+0x2c8>)
 8000768:	f007 ffd2 	bl	8008710 <iprintf>
	}
	else if(preambleBuf[3] != 'x') return ERR_BITMAP_FORMAT;
	else return ERR_SDCARD_READ;

	// Parse preambleBuf
	uint16_t width = atoi(preambleBuf);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4618      	mov	r0, r3
 8000772:	f007 ff7c 	bl	800866e <atoi>
 8000776:	4603      	mov	r3, r0
 8000778:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t height = atoi(preambleBuf+4);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	3304      	adds	r3, #4
 8000782:	4618      	mov	r0, r3
 8000784:	f007 ff73 	bl	800866e <atoi>
 8000788:	4603      	mov	r3, r0
 800078a:	87fb      	strh	r3, [r7, #62]	; 0x3e

	// Setup readBuf to read data for each pixel
	uint8_t packetSize = 5; //chars (0x..,) pixeldata + comma
 800078c:	2305      	movs	r3, #5
 800078e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t readBuf[packetSize];
 8000792:	f897 603d 	ldrb.w	r6, [r7, #61]	; 0x3d
 8000796:	4633      	mov	r3, r6
 8000798:	3b01      	subs	r3, #1
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
 800079c:	b2f3      	uxtb	r3, r6
 800079e:	2200      	movs	r2, #0
 80007a0:	4698      	mov	r8, r3
 80007a2:	4691      	mov	r9, r2
 80007a4:	f04f 0200 	mov.w	r2, #0
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007b8:	b2f3      	uxtb	r3, r6
 80007ba:	2200      	movs	r2, #0
 80007bc:	461c      	mov	r4, r3
 80007be:	4615      	mov	r5, r2
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	f04f 0300 	mov.w	r3, #0
 80007c8:	00eb      	lsls	r3, r5, #3
 80007ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007ce:	00e2      	lsls	r2, r4, #3
 80007d0:	4633      	mov	r3, r6
 80007d2:	3307      	adds	r3, #7
 80007d4:	08db      	lsrs	r3, r3, #3
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	ebad 0d03 	sub.w	sp, sp, r3
 80007dc:	466b      	mov	r3, sp
 80007de:	3300      	adds	r3, #0
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34

	// Check if bitmap will be written off-screen
	uint16_t limitY = (yp+height)<VGA_DISPLAY_Y?(yp+height):VGA_DISPLAY_Y;
 80007e2:	88ba      	ldrh	r2, [r7, #4]
 80007e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80007e6:	4413      	add	r3, r2
 80007e8:	2bf0      	cmp	r3, #240	; 0xf0
 80007ea:	bfa8      	it	ge
 80007ec:	23f0      	movge	r3, #240	; 0xf0
 80007ee:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t limitX = (xp+width)<VGA_DISPLAY_X?(xp+width):VGA_DISPLAY_X;
 80007f0:	88fa      	ldrh	r2, [r7, #6]
 80007f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80007f6:	4413      	add	r3, r2
 80007f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80007fc:	bfa8      	it	ge
 80007fe:	f44f 73a0 	movge.w	r3, #320	; 0x140
 8000802:	863b      	strh	r3, [r7, #48]	; 0x30

	uint16_t pixelOverflow = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	pFil = &fil;
 800080a:	4b57      	ldr	r3, [pc, #348]	; (8000968 <DrawBitmapFromSDCard+0x2cc>)
 800080c:	4a54      	ldr	r2, [pc, #336]	; (8000960 <DrawBitmapFromSDCard+0x2c4>)
 800080e:	601a      	str	r2, [r3, #0]

	// Loop over every coordinte of where the bitmap has to be drawn, read the pixel's colour and write to framebuffer
	for(uint16_t y = yp; y < limitY; y++)
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000816:	e084      	b.n	8000922 <DrawBitmapFromSDCard+0x286>
	else if(preambleBuf[3] != 'x') return ERR_BITMAP_FORMAT;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	2b78      	cmp	r3, #120	; 0x78
 800081c:	d001      	beq.n	8000822 <DrawBitmapFromSDCard+0x186>
 800081e:	230e      	movs	r3, #14
 8000820:	e093      	b.n	800094a <DrawBitmapFromSDCard+0x2ae>
	else return ERR_SDCARD_READ;
 8000822:	230a      	movs	r3, #10
 8000824:	e091      	b.n	800094a <DrawBitmapFromSDCard+0x2ae>
	{
		for(uint16_t x = xp; x < limitX; x++)
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800082c:	e03f      	b.n	80008ae <DrawBitmapFromSDCard+0x212>
		{
			fres = f_read(&fil, (void*)readBuf, packetSize, (UINT*)&bufLen);
 800082e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000832:	f107 030b 	add.w	r3, r7, #11
 8000836:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000838:	4849      	ldr	r0, [pc, #292]	; (8000960 <DrawBitmapFromSDCard+0x2c4>)
 800083a:	f007 fa17 	bl	8007c6c <f_read>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b45      	ldr	r3, [pc, #276]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 8000844:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) {
 8000846:	4b44      	ldr	r3, [pc, #272]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <DrawBitmapFromSDCard+0x1b6>
				return ERR_SDCARD_READ;
 800084e:	230a      	movs	r3, #10
 8000850:	e07b      	b.n	800094a <DrawBitmapFromSDCard+0x2ae>
			}
			readBuf[strlen((const char*)readBuf)-1] = '\0';
 8000852:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000854:	f7ff fcbc 	bl	80001d0 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	3b01      	subs	r3, #1
 800085c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800085e:	2100      	movs	r1, #0
 8000860:	54d1      	strb	r1, [r2, r3]
			uint8_t pixelColor = (uint8_t)strtol((const char*)readBuf, NULL, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000868:	f007 ffec 	bl	8008844 <strtol>
 800086c:	4603      	mov	r3, r0
 800086e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			memset(readBuf ,0, sizeof(readBuf));
 8000872:	4633      	mov	r3, r6
 8000874:	461a      	mov	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800087a:	f007 ff41 	bl	8008700 <memset>
			VGA_RAM1[(y * (VGA_DISPLAY_X + 1)) + x] = pixelColor;
 800087e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	441a      	add	r2, r3
 800088c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000890:	4413      	add	r3, r2
 8000892:	4936      	ldr	r1, [pc, #216]	; (800096c <DrawBitmapFromSDCard+0x2d0>)
 8000894:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000898:	54ca      	strb	r2, [r1, r3]
			++pixelOverflow;
 800089a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800089e:	3301      	adds	r3, #1
 80008a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		for(uint16_t x = xp; x < limitX; x++)
 80008a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80008a8:	3301      	adds	r3, #1
 80008aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80008ae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80008b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d3ba      	bcc.n	800082e <DrawBitmapFromSDCard+0x192>
		}
		// If x is off-screen, offset read/write pointer with remaining pixels on line
		if(((xp + width) > (VGA_DISPLAY_X)) && ((pixelOverflow + width) > (VGA_DISPLAY_X))) {
 80008b8:	88fa      	ldrh	r2, [r7, #6]
 80008ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80008be:	4413      	add	r3, r2
 80008c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008c4:	dd25      	ble.n	8000912 <DrawBitmapFromSDCard+0x276>
 80008c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80008ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80008ce:	4413      	add	r3, r2
 80008d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008d4:	dd1d      	ble.n	8000912 <DrawBitmapFromSDCard+0x276>
			fres = f_lseek(pFil, f_tell(pFil) + (packetSize * (xp + width - VGA_DISPLAY_X)));
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <DrawBitmapFromSDCard+0x2cc>)
 80008d8:	681c      	ldr	r4, [r3, #0]
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <DrawBitmapFromSDCard+0x2cc>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80008e4:	88f8      	ldrh	r0, [r7, #6]
 80008e6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80008ea:	4401      	add	r1, r0
 80008ec:	f5a1 71a0 	sub.w	r1, r1, #320	; 0x140
 80008f0:	fb01 f202 	mul.w	r2, r1, r2
 80008f4:	4413      	add	r3, r2
 80008f6:	4619      	mov	r1, r3
 80008f8:	4620      	mov	r0, r4
 80008fa:	f007 fb9e 	bl	800803a <f_lseek>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 8000904:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK) {
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <DrawBitmapFromSDCard+0x276>
				return ERR_SDCARD_LSEEK;
 800090e:	2310      	movs	r3, #16
 8000910:	e01b      	b.n	800094a <DrawBitmapFromSDCard+0x2ae>
			}
		}
		pixelOverflow = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	for(uint16_t y = yp; y < limitY; y++)
 8000918:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800091c:	3301      	adds	r3, #1
 800091e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000922:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000926:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000928:	429a      	cmp	r2, r3
 800092a:	f4ff af7c 	bcc.w	8000826 <DrawBitmapFromSDCard+0x18a>
	}

	fres = f_close(&fil);
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <DrawBitmapFromSDCard+0x2c4>)
 8000930:	f007 fb59 	bl	8007fe6 <f_close>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 800093a:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) {
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <DrawBitmapFromSDCard+0x2bc>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <DrawBitmapFromSDCard+0x2ac>
		return ERR_SDCARD_CLOSE;
 8000944:	230f      	movs	r3, #15
 8000946:	e000      	b.n	800094a <DrawBitmapFromSDCard+0x2ae>
	}
	return ERR_NONE;
 8000948:	2304      	movs	r3, #4
 800094a:	46d5      	mov	sp, sl
}
 800094c:	4618      	mov	r0, r3
 800094e:	3748      	adds	r7, #72	; 0x48
 8000950:	46bd      	mov	sp, r7
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	bf00      	nop
 8000958:	20000508 	.word	0x20000508
 800095c:	08009bfc 	.word	0x08009bfc
 8000960:	200002d4 	.word	0x200002d4
 8000964:	08009c04 	.word	0x08009c04
 8000968:	20000504 	.word	0x20000504
 800096c:	20000a98 	.word	0x20000a98

08000970 <MX_DMA_Init>:
=======
080005f4 <MX_DMA_Init>:
>>>>>>> master
>>>>>>> master
=======
080011b0 <MX_DMA_Init>:
>>>>>>> Feature_Parser2

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_DMA_Init+0x3c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <MX_DMA_Init+0x3c>)
 8000980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_DMA_Init+0x3c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
=======
<<<<<<< HEAD
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_DMA_Init+0x3c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
=======
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_DMA_Init+0x3c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <MX_DMA_Init+0x3c>)
 8000604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_DMA_Init+0x3c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x3c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
>>>>>>> Feature_Parser2

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
<<<<<<< HEAD
<<<<<<< HEAD
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2044      	movs	r0, #68	; 0x44
 8000998:	f000 ffe3 	bl	8001962 <HAL_NVIC_SetPriority>
=======
<<<<<<< HEAD
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2044      	movs	r0, #68	; 0x44
 80008b0:	f000 fe3b 	bl	800152a <HAL_NVIC_SetPriority>
=======
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2044      	movs	r0, #68	; 0x44
 80011d8:	f001 f9e5 	bl	80025a6 <HAL_NVIC_SetPriority>
>>>>>>> Feature_Parser2
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011dc:	2044      	movs	r0, #68	; 0x44
 80011de:	f001 f9fe 	bl	80025de <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

<<<<<<< HEAD
080008c8 <MX_GPIO_Init>:
=======
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2044      	movs	r0, #68	; 0x44
 800061c:	f000 ff23 	bl	8001466 <HAL_NVIC_SetPriority>
>>>>>>> master
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800099c:	2044      	movs	r0, #68	; 0x44
 800099e:	f000 fffc 	bl	800199a <HAL_NVIC_EnableIRQ>

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

<<<<<<< HEAD
080009b0 <MX_GPIO_Init>:
=======
08000634 <MX_GPIO_Init>:
>>>>>>> master
>>>>>>> master
=======
080011f0 <MX_GPIO_Init>:
>>>>>>> Feature_Parser2
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
=======
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <MX_GPIO_Init+0xe4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a31      	ldr	r2, [pc, #196]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a2a      	ldr	r2, [pc, #168]	; (80012d4 <MX_GPIO_Init+0xe4>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_GPIO_Init+0xe4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
<<<<<<< HEAD
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000954:	4816      	ldr	r0, [pc, #88]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000956:	f001 fb4d 	bl	8001ff4 <HAL_GPIO_WritePin>
=======
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
>>>>>>> master

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <MX_GPIO_Init+0x108>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a3a      	ldr	r2, [pc, #232]	; (8000ab8 <MX_GPIO_Init+0x108>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <MX_GPIO_Init+0x108>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <MX_GPIO_Init+0x108>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <MX_GPIO_Init+0x108>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <MX_GPIO_Init+0x108>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_GPIO_Init+0x108>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a2c      	ldr	r2, [pc, #176]	; (8000ab8 <MX_GPIO_Init+0x108>)
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_GPIO_Init+0x108>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_GPIO_Init+0x108>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0x108>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_GPIO_Init+0x108>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4820      	ldr	r0, [pc, #128]	; (8000abc <MX_GPIO_Init+0x10c>)
 8000a3c:	f001 fcf6 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
<<<<<<< HEAD
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000a46:	481e      	ldr	r0, [pc, #120]	; (8000ac0 <MX_GPIO_Init+0x110>)
 8000a48:	f001 fcf0 	bl	800242c <HAL_GPIO_WritePin>
=======
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80006c0:	4816      	ldr	r0, [pc, #88]	; (800071c <MX_GPIO_Init+0xe8>)
 80006c2:	f001 fc35 	bl	8001f30 <HAL_GPIO_WritePin>
>>>>>>> master
>>>>>>> master
=======
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <MX_GPIO_Init+0xe8>)
 800127e:	f001 fef7 	bl	8003070 <HAL_GPIO_WritePin>
>>>>>>> Feature_Parser2
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
<<<<<<< HEAD
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a52:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0x114>)
 8000a54:	f001 fcea 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_GPIO_Init+0x10c>)
 8000a70:	f001 fb40 	bl	80020f4 <HAL_GPIO_Init>
=======
<<<<<<< HEAD
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_GPIO_Init+0xec>)
 8000962:	f001 fb47 	bl	8001ff4 <HAL_GPIO_WritePin>
=======
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006cc:	4814      	ldr	r0, [pc, #80]	; (8000720 <MX_GPIO_Init+0xec>)
 80006ce:	f001 fc2f 	bl	8001f30 <HAL_GPIO_WritePin>
>>>>>>> master
>>>>>>> master
=======
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001288:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_GPIO_Init+0xec>)
 800128a:	f001 fef1 	bl	8003070 <HAL_GPIO_WritePin>
>>>>>>> Feature_Parser2

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
<<<<<<< HEAD
<<<<<<< HEAD
 8000a74:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000a78:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8000966:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800096a:	617b      	str	r3, [r7, #20]
=======
 800128e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001292:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <MX_GPIO_Init+0xe8>)
 80012a8:	f001 fd46 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0xec>)
 80012c6:	f001 fd37 	bl	8002d38 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020400 	.word	0x40020400

<<<<<<< HEAD
080009b8 <main>:
=======
 80006d2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80006d6:	617b      	str	r3, [r7, #20]
>>>>>>> master
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_GPIO_Init+0x110>)
 8000a8e:	f001 fb31 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_GPIO_Init+0x114>)
 8000aac:	f001 fb22 	bl	80020f4 <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40020400 	.word	0x40020400

<<<<<<< HEAD
08000ac8 <main>:
=======
08000724 <main>:
>>>>>>> master
>>>>>>> master
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 80009be:	f44f 6783 	mov.w	r7, #1048	; 0x418
 80009c2:	446f      	add	r7, sp
=======
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
  /* USER CODE END 1 */
=======
080012e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	f5ad 6db0 	sub.w	sp, sp, #1408	; 0x580
 80012e6:	f44f 6784 	mov.w	r7, #1056	; 0x420
 80012ea:	446f      	add	r7, sp
>>>>>>> Feature_Parser2

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
<<<<<<< HEAD
<<<<<<< HEAD
 8000ace:	f000 fdfb 	bl	80016c8 <HAL_Init>
=======
<<<<<<< HEAD
 80009c4:	f000 fc64 	bl	8001290 <HAL_Init>

=======
 800072a:	f000 fd4f 	bl	80011cc <HAL_Init>
>>>>>>> master
>>>>>>> master
  /* USER CODE BEGIN Init */
  command commandBuf = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
 80009d6:	615a      	str	r2, [r3, #20]
=======
 80012ec:	f001 f80e 	bl	800230c <HAL_Init>
  CmdStruct arg_struct;
>>>>>>> Feature_Parser2

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
<<<<<<< HEAD
 8000ad2:	f000 f85d 	bl	8000b90 <SystemClock_Config>
=======
<<<<<<< HEAD
 80009d8:	f000 f854 	bl	8000a84 <SystemClock_Config>
=======
 800072e:	f000 f84f 	bl	80007d0 <SystemClock_Config>
>>>>>>> master
>>>>>>> master
=======
 80012f0:	f000 f8f2 	bl	80014d8 <SystemClock_Config>
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
<<<<<<< HEAD
 8000ad6:	f7ff ff6b 	bl	80009b0 <MX_GPIO_Init>
=======
<<<<<<< HEAD
 80009dc:	f7ff ff74 	bl	80008c8 <MX_GPIO_Init>
=======
 80012f4:	f7ff ff7c 	bl	80011f0 <MX_GPIO_Init>
>>>>>>> Feature_Parser2
  MX_DMA_Init();
 80012f8:	f7ff ff5a 	bl	80011b0 <MX_DMA_Init>
  MX_TIM1_Init();
 80012fc:	f000 fa94 	bl	8001828 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001300:	f000 fae2 	bl	80018c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001304:	f000 fbf8 	bl	8001af8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

<<<<<<< HEAD
  UB_VGA_Screen_Init(); // Init VGA-Screen
 80009f0:	f000 fbfc 	bl	80011ec <UB_VGA_Screen_Init>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	e008      	b.n	8000a0c <main+0x54>
	  input.line_rx_buffer[i] = 0;
 80009fa:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <main+0xc4>)
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	4413      	add	r3, r2
 8000a00:	3301      	adds	r3, #1
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a12:	dbf2      	blt.n	80009fa <main+0x42>
=======
 8000732:	f7ff ff7f 	bl	8000634 <MX_GPIO_Init>
>>>>>>> master
  MX_DMA_Init();
 8000ada:	f7ff ff49 	bl	8000970 <MX_DMA_Init>
  MX_TIM1_Init();
 8000ade:	f000 fb49 	bl	8001174 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ae2:	f000 fb97 	bl	8001214 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ae6:	f000 fcad 	bl	8001444 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000aea:	f000 f8d5 	bl	8000c98 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000aee:	f004 fc2b 	bl	8005348 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  Error tempError = SDCardInit(); //Init SD Card
 8000af2:	f7ff fd87 	bl	8000604 <SDCardInit>
 8000af6:	4603      	mov	r3, r0
 8000af8:	70fb      	strb	r3, [r7, #3]
  if(tempError != ERR_NONE)
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d003      	beq.n	8000b08 <main+0x40>
  {
	  TransmitError(tempError);
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd3e 	bl	8000584 <TransmitError>
  }

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000b08:	f000 fd40 	bl	800158c <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 fd8f 	bl	8001630 <UB_VGA_FillScreen>

  int i;
  for(i = 0; i < LINE_BUFLEN; i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	e008      	b.n	8000b2a <main+0x62>
	  input.line_rx_buffer[i] = 0;
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <main+0xc0>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3301      	adds	r3, #1
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
<<<<<<< HEAD
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3301      	adds	r3, #1
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b30:	dbf2      	blt.n	8000b18 <main+0x50>
=======
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800076e:	dbf2      	blt.n	8000756 <main+0x32>
>>>>>>> master
>>>>>>> master
=======
  UB_VGA_Screen_Init();  // Init VGA-Screen
 8001308:	f000 ff62 	bl	80021d0 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 800130c:	2000      	movs	r0, #0
 800130e:	f000 ffb1 	bl	8002274 <UB_VGA_FillScreen>
  UB_VGA_FillScreen(VGA_COL_WHITE);
 8001312:	20ff      	movs	r0, #255	; 0xff
 8001314:	f000 ffae 	bl	8002274 <UB_VGA_FillScreen>
  int i;

  for (i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800131e:	e00b      	b.n	8001338 <main+0x58>
 8001320:	4a6b      	ldr	r2, [pc, #428]	; (80014d0 <main+0x1f0>)
 8001322:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001326:	4413      	add	r3, r2
 8001328:	3301      	adds	r3, #1
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001332:	3301      	adds	r3, #1
 8001334:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001338:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001340:	dbee      	blt.n	8001320 <main+0x40>
>>>>>>> Feature_Parser2

  //  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
<<<<<<< HEAD
<<<<<<< HEAD
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <main+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
=======
<<<<<<< HEAD
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <main+0xc4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
=======
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <main+0x1f0>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
>>>>>>> Feature_Parser2
  input.char_counter = 0;
 8001348:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <main+0x1f0>)
 800134a:	2200      	movs	r2, #0
 800134c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  input.command_execute_flag = FALSE;
<<<<<<< HEAD
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <main+0xc4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
=======
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <main+0xa0>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
>>>>>>> master
  input.char_counter = 0;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <main+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
<<<<<<< HEAD
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <main+0xc0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
=======
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <main+0xa0>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
>>>>>>> master
>>>>>>> master
=======
 8001350:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <main+0x1f0>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
>>>>>>> Feature_Parser2

  // HAl wants a memory location to store the charachter it receives from the
  // UART We will pass it an array, but we will not use it. We declare our own
  // variable in the interupt handler See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
<<<<<<< HEAD
<<<<<<< HEAD
 8000b48:	2201      	movs	r2, #1
 8000b4a:	490f      	ldr	r1, [pc, #60]	; (8000b88 <main+0xc0>)
 8000b4c:	480f      	ldr	r0, [pc, #60]	; (8000b8c <main+0xc4>)
 8000b4e:	f003 fc4d 	bl	80043ec <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 8000b52:	23ff      	movs	r3, #255	; 0xff
 8000b54:	70bb      	strb	r3, [r7, #2]
=======
<<<<<<< HEAD
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4913      	ldr	r1, [pc, #76]	; (8000a7c <main+0xc4>)
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <main+0xc8>)
 8000a30:	f003 f80e 	bl	8003a50 <HAL_UART_Receive_IT>
=======
 8000786:	2201      	movs	r2, #1
 8000788:	490e      	ldr	r1, [pc, #56]	; (80007c4 <main+0xa0>)
 800078a:	480f      	ldr	r0, [pc, #60]	; (80007c8 <main+0xa4>)
 800078c:	f003 f8fe 	bl	800398c <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 8000790:	23ff      	movs	r3, #255	; 0xff
 8000792:	70fb      	strb	r3, [r7, #3]
>>>>>>> master
>>>>>>> master

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
<<<<<<< HEAD
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <main+0xc0>)
 8000b58:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000b5c:	2bff      	cmp	r3, #255	; 0xff
 8000b5e:	d1fa      	bne.n	8000b56 <main+0x8e>
=======
<<<<<<< HEAD
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <main+0xc4>)
 8000a36:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8000a3a:	2bff      	cmp	r3, #255	; 0xff
 8000a3c:	d1fa      	bne.n	8000a34 <main+0x7c>
	  {
		  // Do some stuff
		  ParseOnKomma(input, 0, 0, 0, commandBuf);
 8000a3e:	4c0f      	ldr	r4, [pc, #60]	; (8000a7c <main+0xc4>)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000a58:	4668      	mov	r0, sp
 8000a5a:	f104 0310 	add.w	r3, r4, #16
 8000a5e:	f240 4204 	movw	r2, #1028	; 0x404
 8000a62:	4619      	mov	r1, r3
 8000a64:	f003 ffd0 	bl	8004a08 <memcpy>
 8000a68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a6c:	f7ff fd90 	bl	8000590 <ParseOnKomma>
		  input.command_execute_flag = FALSE;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <main+0xc4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	  if(input.command_execute_flag == TRUE)
 8000a78:	e7dc      	b.n	8000a34 <main+0x7c>
 8000a7a:	bf00      	nop
 8000a7c:	20000148 	.word	0x20000148
 8000a80:	2000063c 	.word	0x2000063c

08000a84 <SystemClock_Config>:
=======
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <main+0xa0>)
 8000796:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800079a:	2bff      	cmp	r3, #255	; 0xff
 800079c:	d1fa      	bne.n	8000794 <main+0x70>
>>>>>>> master
	  {
		  Error err = DrawBitmapFromSDCard(0,0,RIGHT);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2100      	movs	r1, #0
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff fd99 	bl	800069c <DrawBitmapFromSDCard>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	707b      	strb	r3, [r7, #1]
		  if(err != ERR_NONE) TransmitError(err);
 8000b6e:	787b      	ldrb	r3, [r7, #1]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d003      	beq.n	8000b7c <main+0xb4>
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fd04 	bl	8000584 <TransmitError>

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <main+0xc0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8000b84:	e7e7      	b.n	8000b56 <main+0x8e>
 8000b86:	bf00      	nop
 8000b88:	2000050c 	.word	0x2000050c
 8000b8c:	20000a58 	.word	0x20000a58

<<<<<<< HEAD
08000b90 <SystemClock_Config>:
=======
080007d0 <SystemClock_Config>:
>>>>>>> master
>>>>>>> master
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
=======
 8001358:	2201      	movs	r2, #1
 800135a:	495d      	ldr	r1, [pc, #372]	; (80014d0 <main+0x1f0>)
 800135c:	485d      	ldr	r0, [pc, #372]	; (80014d4 <main+0x1f4>)
 800135e:	f003 fb1c 	bl	800499a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (input.command_execute_flag == TRUE) {
 8001362:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <main+0x1f0>)
 8001364:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001368:	2bff      	cmp	r3, #255	; 0xff
 800136a:	d1fa      	bne.n	8001362 <main+0x82>
      // Do some stuff
      ParseOnKomma(input, 0, 0, 0, 0, 0, 0, &arg_struct);
 800136c:	4c58      	ldr	r4, [pc, #352]	; (80014d0 <main+0x1f0>)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	f8cd 341c 	str.w	r3, [sp, #1052]	; 0x41c
 8001374:	2300      	movs	r3, #0
 8001376:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 800137a:	2300      	movs	r3, #0
 800137c:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8001380:	2300      	movs	r3, #0
 8001382:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8001386:	2300      	movs	r3, #0
 8001388:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 800138c:	2300      	movs	r3, #0
 800138e:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8001392:	2300      	movs	r3, #0
 8001394:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8001398:	4668      	mov	r0, sp
 800139a:	f104 0310 	add.w	r3, r4, #16
 800139e:	f240 4204 	movw	r2, #1028	; 0x404
 80013a2:	4619      	mov	r1, r3
 80013a4:	f004 fa8a 	bl	80058bc <memcpy>
 80013a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013ac:	f7ff fca2 	bl	8000cf4 <ParseOnKomma>
      switch(arg_struct.commandNummer)
 80013b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	f200 8082 	bhi.w	80014c4 <main+0x1e4>
 80013c0:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <main+0xe8>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	080013e1 	.word	0x080013e1
 80013cc:	08001435 	.word	0x08001435
 80013d0:	08001447 	.word	0x08001447
 80013d4:	080014c5 	.word	0x080014c5
 80013d8:	080014c5 	.word	0x080014c5
 80013dc:	0800149b 	.word	0x0800149b
      {
      case 0:
    	  DrawLine(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3], arg_struct.argBuf[4], arg_struct.argBuf[5], arg_struct.argBuf[6]);
 80013e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013e4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80013e8:	88db      	ldrh	r3, [r3, #6]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013f0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80013f4:	891b      	ldrh	r3, [r3, #8]
 80013f6:	4619      	mov	r1, r3
 80013f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001400:	895b      	ldrh	r3, [r3, #10]
 8001402:	461c      	mov	r4, r3
 8001404:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001408:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	461d      	mov	r5, r3
 8001410:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001414:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001418:	89db      	ldrh	r3, [r3, #14]
 800141a:	461a      	mov	r2, r3
 800141c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001420:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001424:	8a1b      	ldrh	r3, [r3, #16]
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	9200      	str	r2, [sp, #0]
 800142a:	462b      	mov	r3, r5
 800142c:	4622      	mov	r2, r4
 800142e:	f000 fc9f 	bl	8001d70 <DrawLine>
    	  break;
 8001432:	e047      	b.n	80014c4 <main+0x1e4>
      case 1:
    	  ClearScreen(arg_struct.argBuf[1]);
 8001434:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001438:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800143c:	88db      	ldrh	r3, [r3, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fd40 	bl	8001ec4 <ClearScreen>
    	  break;
 8001444:	e03e      	b.n	80014c4 <main+0x1e4>
      case 2:
    	  DrawRectangle(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3], arg_struct.argBuf[4], arg_struct.argBuf[5], arg_struct.argBuf[6]);
 8001446:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800144a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800144e:	88db      	ldrh	r3, [r3, #6]
 8001450:	4618      	mov	r0, r3
 8001452:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001456:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800145a:	891b      	ldrh	r3, [r3, #8]
 800145c:	4619      	mov	r1, r3
 800145e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001462:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001466:	895b      	ldrh	r3, [r3, #10]
 8001468:	461c      	mov	r4, r3
 800146a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800146e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001472:	899b      	ldrh	r3, [r3, #12]
 8001474:	461d      	mov	r5, r3
 8001476:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800147a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800147e:	89db      	ldrh	r3, [r3, #14]
 8001480:	461a      	mov	r2, r3
 8001482:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001486:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800148a:	8a1b      	ldrh	r3, [r3, #16]
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	462b      	mov	r3, r5
 8001492:	4622      	mov	r2, r4
 8001494:	f000 fbd3 	bl	8001c3e <DrawRectangle>
    	  break;
 8001498:	e014      	b.n	80014c4 <main+0x1e4>
      case 5:
    	  DrawBitmap(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3]);
 800149a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800149e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80014a2:	88db      	ldrh	r3, [r3, #6]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80014aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80014ae:	891b      	ldrh	r3, [r3, #8]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80014b6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80014ba:	895b      	ldrh	r3, [r3, #10]
 80014bc:	461a      	mov	r2, r3
 80014be:	f000 fd0f 	bl	8001ee0 <DrawBitmap>
    	  break;
 80014c2:	bf00      	nop
      }
      // When finished reset the flag
      input.command_execute_flag = FALSE;
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <main+0x1f0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    if (input.command_execute_flag == TRUE) {
 80014cc:	e749      	b.n	8001362 <main+0x82>
 80014ce:	bf00      	nop
 80014d0:	20001e4c 	.word	0x20001e4c
 80014d4:	20002340 	.word	0x20002340

080014d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
 80014dc:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	2230      	movs	r2, #48	; 0x30
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 f9f6 	bl	80058d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
<<<<<<< HEAD
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
=======
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
>>>>>>> master
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	2230      	movs	r2, #48	; 0x30
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 fdae 	bl	8008700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
<<<<<<< HEAD
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
=======
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
>>>>>>> master
>>>>>>> master
=======
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
>>>>>>> Feature_Parser2

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <SystemClock_Config+0xd0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <SystemClock_Config+0xd0>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <SystemClock_Config+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
=======
<<<<<<< HEAD
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <SystemClock_Config+0xcc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a27      	ldr	r2, [pc, #156]	; (8000b50 <SystemClock_Config+0xcc>)
 8000ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <SystemClock_Config+0xcc>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <SystemClock_Config+0xd0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <SystemClock_Config+0xd0>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <SystemClock_Config+0xd0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
=======
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <SystemClock_Config+0xcc>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <SystemClock_Config+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <SystemClock_Config+0xd0>)
 800081a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <SystemClock_Config+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <SystemClock_Config+0xcc>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <SystemClock_Config+0xcc>)
 8001506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <SystemClock_Config+0xcc>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <SystemClock_Config+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <SystemClock_Config+0xd0>)
 8001522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <SystemClock_Config+0xd0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
>>>>>>> Feature_Parser2
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
<<<<<<< HEAD
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
=======
<<<<<<< HEAD
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	623b      	str	r3, [r7, #32]
=======
 8001534:	2301      	movs	r3, #1
 8001536:	623b      	str	r3, [r7, #32]
>>>>>>> Feature_Parser2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001548:	2304      	movs	r3, #4
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800154c:	23a8      	movs	r3, #168	; 0xa8
 800154e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001550:	2302      	movs	r3, #2
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001554:	2304      	movs	r3, #4
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fda1 	bl	80030a4 <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x94>
    Error_Handler();
<<<<<<< HEAD
 8000b14:	f000 f820 	bl	8000b58 <Error_Handler>
=======
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
>>>>>>> master
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c04:	23a8      	movs	r3, #168	; 0xa8
 8000c06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0320 	add.w	r3, r7, #32
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fc23 	bl	8002460 <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x94>
  {
    Error_Handler();
<<<<<<< HEAD
 8000c20:	f000 f832 	bl	8000c88 <Error_Handler>
=======
 8000860:	f000 f832 	bl	80008c8 <Error_Handler>
>>>>>>> master
>>>>>>> master
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000c24:	230f      	movs	r3, #15
 8000c26:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8000b18:	230f      	movs	r3, #15
 8000b1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
=======
 8001568:	f000 f820 	bl	80015ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800156c:	230f      	movs	r3, #15
 800156e:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
>>>>>>> Feature_Parser2
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001570:	2302      	movs	r3, #2
 8001572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001578:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800157c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2105      	movs	r1, #5
 800158a:	4618      	mov	r0, r3
 800158c:	f001 fff8 	bl	8003580 <HAL_RCC_ClockConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xc2>
    Error_Handler();
 8001596:	f000 f809 	bl	80015ac <Error_Handler>
  }
}
 800159a:	bf00      	nop
 800159c:	3750      	adds	r7, #80	; 0x50
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000

<<<<<<< HEAD
08000b58 <Error_Handler>:
=======
 8000864:	230f      	movs	r3, #15
 8000866:	60fb      	str	r3, [r7, #12]
>>>>>>> master
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2105      	movs	r1, #5
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fe7a 	bl	800293c <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c4e:	f000 f81b 	bl	8000c88 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	; 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000c6c:	1d39      	adds	r1, r7, #4
 8000c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c72:	2201      	movs	r2, #1
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <__io_putchar+0x20>)
 8000c76:	f003 fb20 	bl	80042ba <HAL_UART_Transmit>
	return ch;												//Return the character
 8000c7a:	687b      	ldr	r3, [r7, #4]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000a58 	.word	0x20000a58

<<<<<<< HEAD
08000c88 <Error_Handler>:
=======
080008c8 <Error_Handler>:
>>>>>>> master
>>>>>>> master
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
=======
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
080015ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <MX_SPI1_Init+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ccc:	2238      	movs	r2, #56	; 0x38
 8000cce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cea:	f002 f847 	bl	8002d7c <HAL_SPI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cf4:	f7ff ffc8 	bl	8000c88 <Error_Handler>
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000091c 	.word	0x2000091c
 8000d00:	40013000 	.word	0x40013000

08000d04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <HAL_SPI_MspInit+0xc0>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d149      	bne.n	8000dba <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <HAL_SPI_MspInit+0xc4>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a26      	ldr	r2, [pc, #152]	; (8000dc8 <HAL_SPI_MspInit+0xc4>)
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <HAL_SPI_MspInit+0xc4>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <HAL_SPI_MspInit+0xc4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a1f      	ldr	r2, [pc, #124]	; (8000dc8 <HAL_SPI_MspInit+0xc4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_SPI_MspInit+0xc4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_SPI_MspInit+0xc4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <HAL_SPI_MspInit+0xc4>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_SPI_MspInit+0xc4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7a:	23c0      	movs	r3, #192	; 0xc0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <HAL_SPI_MspInit+0xc8>)
 8000d96:	f001 f9ad 	bl	80020f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CS_Pin;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000daa:	2305      	movs	r3, #5
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <HAL_SPI_MspInit+0xcc>)
 8000db6:	f001 f99d 	bl	80020f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40013000 	.word	0x40013000
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <HAL_MspInit>:
=======
<<<<<<< HEAD
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <HAL_MspInit>:
=======
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <HAL_MspInit>:
>>>>>>> master
>>>>>>> master
=======
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_MspInit>:
>>>>>>> Feature_Parser2
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
=======
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
=======
<<<<<<< HEAD
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
=======
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_MspInit+0x4c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
>>>>>>> Feature_Parser2
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <NMI_Handler>:
=======
<<<<<<< HEAD
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <NMI_Handler>:
=======
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <NMI_Handler>:
>>>>>>> master
>>>>>>> master
=======
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <NMI_Handler>:
>>>>>>> Feature_Parser2
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
=======
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HardFault_Handler>:
=======
<<<<<<< HEAD
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <HardFault_Handler>:
=======
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <HardFault_Handler>:
>>>>>>> master
>>>>>>> master
=======
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HardFault_Handler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
=======
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:
=======
<<<<<<< HEAD
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:
=======
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:
>>>>>>> master
>>>>>>> master
=======
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
=======
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:
=======
<<<<<<< HEAD
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:
=======
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:
>>>>>>> master
>>>>>>> master
=======
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
=======
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:
=======
<<<<<<< HEAD
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:
=======
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:
>>>>>>> master
>>>>>>> master
=======
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
=======
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:
=======
<<<<<<< HEAD
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:
=======
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:
>>>>>>> master
>>>>>>> master
=======
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
=======
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:
=======
<<<<<<< HEAD
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:
=======
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:
>>>>>>> master
>>>>>>> master
=======
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
=======
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:
=======
<<<<<<< HEAD
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:
=======
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:
>>>>>>> master
>>>>>>> master
=======
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
=======
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:
=======
<<<<<<< HEAD
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:
=======
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:
>>>>>>> master
>>>>>>> master
=======
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
=======
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
<<<<<<< HEAD
 8000e78:	f000 fc78 	bl	800176c <HAL_IncTick>
=======
<<<<<<< HEAD
 8000c0c:	f000 fb92 	bl	8001334 <HAL_IncTick>
=======
 800097c:	f000 fc78 	bl	8001270 <HAL_IncTick>
>>>>>>> master
>>>>>>> master
=======
 8001660:	f000 fea6 	bl	80023b0 <HAL_IncTick>
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <TIM2_IRQHandler>:
=======
<<<<<<< HEAD
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <TIM2_IRQHandler>:
=======
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <TIM2_IRQHandler>:
>>>>>>> master
>>>>>>> master
=======
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <TIM2_IRQHandler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
=======
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
<<<<<<< HEAD
 8000e84:	4828      	ldr	r0, [pc, #160]	; (8000f28 <TIM2_IRQHandler+0xa8>)
 8000e86:	f002 fb67 	bl	8003558 <HAL_TIM_IRQHandler>
=======
<<<<<<< HEAD
 8000c18:	4828      	ldr	r0, [pc, #160]	; (8000cbc <TIM2_IRQHandler+0xa8>)
 8000c1a:	f001 ffcf 	bl	8002bbc <HAL_TIM_IRQHandler>
=======
 800166c:	4828      	ldr	r0, [pc, #160]	; (8001710 <TIM2_IRQHandler+0xa8>)
 800166e:	f002 fae3 	bl	8003c38 <HAL_TIM_IRQHandler>
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <TIM2_IRQHandler+0xa8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0208 	mvn.w	r2, #8
 800167a:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <TIM2_IRQHandler+0xac>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <TIM2_IRQHandler+0xac>)
 8001686:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <TIM2_IRQHandler+0xac>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001690:	d905      	bls.n	800169e <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <TIM2_IRQHandler+0xac>)
 8001694:	2200      	movs	r2, #0
 8001696:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
<<<<<<< HEAD
 8000c44:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <TIM2_IRQHandler+0xb0>)
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <TIM2_IRQHandler+0xac>)
 8000c48:	605a      	str	r2, [r3, #4]
=======
 8000988:	4828      	ldr	r0, [pc, #160]	; (8000a2c <TIM2_IRQHandler+0xa8>)
 800098a:	f002 f8b5 	bl	8002af8 <HAL_TIM_IRQHandler>
>>>>>>> master
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <TIM2_IRQHandler+0xa8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f06f 0208 	mvn.w	r2, #8
 8000e92:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000e9e:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000ea8:	d905      	bls.n	8000eb6 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
<<<<<<< HEAD
 8000eb0:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <TIM2_IRQHandler+0xb0>)
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000eb4:	605a      	str	r2, [r3, #4]
=======
 80009b4:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <TIM2_IRQHandler+0xb0>)
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <TIM2_IRQHandler+0xac>)
 80009b8:	605a      	str	r2, [r3, #4]
>>>>>>> master
>>>>>>> master
=======
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <TIM2_IRQHandler+0xb0>)
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <TIM2_IRQHandler+0xac>)
 800169c:	605a      	str	r2, [r3, #4]
>>>>>>> Feature_Parser2
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
<<<<<<< HEAD
<<<<<<< HEAD
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d802      	bhi.n	8000ec4 <TIM2_IRQHandler+0x44>
 8000ebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec2:	e001      	b.n	8000ec8 <TIM2_IRQHandler+0x48>
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <TIM2_IRQHandler+0xb4>)
 8000eca:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	2b23      	cmp	r3, #35	; 0x23
 8000ed2:	d927      	bls.n	8000f24 <TIM2_IRQHandler+0xa4>
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	f240 2202 	movw	r2, #514	; 0x202
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d821      	bhi.n	8000f24 <TIM2_IRQHandler+0xa4>
=======
<<<<<<< HEAD
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <TIM2_IRQHandler+0xac>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d802      	bhi.n	8000c58 <TIM2_IRQHandler+0x44>
 8000c52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c56:	e001      	b.n	8000c5c <TIM2_IRQHandler+0x48>
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <TIM2_IRQHandler+0xb4>)
 8000c5e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <TIM2_IRQHandler+0xac>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	2b23      	cmp	r3, #35	; 0x23
 8000c66:	d927      	bls.n	8000cb8 <TIM2_IRQHandler+0xa4>
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <TIM2_IRQHandler+0xac>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	f240 2202 	movw	r2, #514	; 0x202
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d821      	bhi.n	8000cb8 <TIM2_IRQHandler+0xa4>
=======
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <TIM2_IRQHandler+0xac>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d802      	bhi.n	80009c8 <TIM2_IRQHandler+0x44>
 80009c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009c6:	e001      	b.n	80009cc <TIM2_IRQHandler+0x48>
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <TIM2_IRQHandler+0xb4>)
 80009ce:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <TIM2_IRQHandler+0xac>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	2b23      	cmp	r3, #35	; 0x23
 80009d6:	d927      	bls.n	8000a28 <TIM2_IRQHandler+0xa4>
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <TIM2_IRQHandler+0xac>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	f240 2202 	movw	r2, #514	; 0x202
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d821      	bhi.n	8000a28 <TIM2_IRQHandler+0xa4>
>>>>>>> master
>>>>>>> master
=======
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d802      	bhi.n	80016ac <TIM2_IRQHandler+0x44>
 80016a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016aa:	e001      	b.n	80016b0 <TIM2_IRQHandler+0x48>
 80016ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <TIM2_IRQHandler+0xb4>)
 80016b2:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	2b23      	cmp	r3, #35	; 0x23
 80016ba:	d927      	bls.n	800170c <TIM2_IRQHandler+0xa4>
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	f240 2202 	movw	r2, #514	; 0x202
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d821      	bhi.n	800170c <TIM2_IRQHandler+0xa4>
>>>>>>> Feature_Parser2
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
<<<<<<< HEAD
<<<<<<< HEAD
 8000ee0:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <TIM2_IRQHandler+0xb8>)
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 8000c74:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <TIM2_IRQHandler+0xb8>)
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <TIM2_IRQHandler+0xac>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	6013      	str	r3, [r2, #0]
=======
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <TIM2_IRQHandler+0xb8>)
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	6013      	str	r3, [r2, #0]
>>>>>>> Feature_Parser2
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80016d0:	4a13      	ldr	r2, [pc, #76]	; (8001720 <TIM2_IRQHandler+0xb8>)
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <TIM2_IRQHandler+0xbc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a11      	ldr	r2, [pc, #68]	; (8001724 <TIM2_IRQHandler+0xbc>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <TIM2_IRQHandler+0xc0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <TIM2_IRQHandler+0xc0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <TIM2_IRQHandler+0xac>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001708:	4a02      	ldr	r2, [pc, #8]	; (8001714 <TIM2_IRQHandler+0xac>)
 800170a:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200022a0 	.word	0x200022a0
 8001714:	20015070 	.word	0x20015070
 8001718:	20002380 	.word	0x20002380
 800171c:	40020400 	.word	0x40020400
 8001720:	40026488 	.word	0x40026488
 8001724:	40010000 	.word	0x40010000
 8001728:	200022e0 	.word	0x200022e0

<<<<<<< HEAD
08000cd8 <USART2_IRQHandler>:
=======
 80009e4:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <TIM2_IRQHandler+0xb8>)
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <TIM2_IRQHandler+0xac>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	6013      	str	r3, [r2, #0]
>>>>>>> master
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <TIM2_IRQHandler+0xb8>)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <TIM2_IRQHandler+0xbc>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <TIM2_IRQHandler+0xbc>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <TIM2_IRQHandler+0xc0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <TIM2_IRQHandler+0xc0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000f20:	4a02      	ldr	r2, [pc, #8]	; (8000f2c <TIM2_IRQHandler+0xac>)
 8000f22:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200009b8 	.word	0x200009b8
 8000f2c:	20013788 	.word	0x20013788
 8000f30:	20000a98 	.word	0x20000a98
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40026488 	.word	0x40026488
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	200009f8 	.word	0x200009f8

<<<<<<< HEAD
08000f44 <USART2_IRQHandler>:
=======
08000a48 <USART2_IRQHandler>:
>>>>>>> master
>>>>>>> master
=======
0800172c <USART2_IRQHandler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
=======
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
<<<<<<< HEAD
<<<<<<< HEAD
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <USART2_IRQHandler+0x70>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b0a      	cmp	r3, #10
 8000f54:	d026      	beq.n	8000fa4 <USART2_IRQHandler+0x60>
=======
<<<<<<< HEAD
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <USART2_IRQHandler+0x70>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d026      	beq.n	8000d38 <USART2_IRQHandler+0x60>
=======
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <USART2_IRQHandler+0x70>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b0a      	cmp	r3, #10
 8000a58:	d026      	beq.n	8000aa8 <USART2_IRQHandler+0x60>
>>>>>>> master
>>>>>>> master
=======
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <USART2_IRQHandler+0x70>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b0a      	cmp	r3, #10
 800173c:	d026      	beq.n	800178c <USART2_IRQHandler+0x60>
>>>>>>> Feature_Parser2
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
<<<<<<< HEAD
<<<<<<< HEAD
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b0d      	cmp	r3, #13
 8000f5a:	d002      	beq.n	8000f62 <USART2_IRQHandler+0x1e>
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8000f60:	d10e      	bne.n	8000f80 <USART2_IRQHandler+0x3c>
=======
<<<<<<< HEAD
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b0d      	cmp	r3, #13
 8000cee:	d002      	beq.n	8000cf6 <USART2_IRQHandler+0x1e>
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8000cf4:	d10e      	bne.n	8000d14 <USART2_IRQHandler+0x3c>
=======
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b0d      	cmp	r3, #13
 8001742:	d002      	beq.n	800174a <USART2_IRQHandler+0x1e>
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b2e      	cmp	r3, #46	; 0x2e
 8001748:	d10e      	bne.n	8001768 <USART2_IRQHandler+0x3c>
>>>>>>> Feature_Parser2
		{
			input.command_execute_flag = TRUE;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <USART2_IRQHandler+0x74>)
 800174c:	22ff      	movs	r2, #255	; 0xff
 800174e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			// Store the message length for processing
			input.msglen = input.char_counter;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001754:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001758:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <USART2_IRQHandler+0x74>)
 800175a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
<<<<<<< HEAD
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <USART2_IRQHandler+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 8000d12:	e011      	b.n	8000d38 <USART2_IRQHandler+0x60>
=======
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b0d      	cmp	r3, #13
 8000a5e:	d002      	beq.n	8000a66 <USART2_IRQHandler+0x1e>
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b2e      	cmp	r3, #46	; 0x2e
 8000a64:	d10e      	bne.n	8000a84 <USART2_IRQHandler+0x3c>
>>>>>>> master
		{
			input.command_execute_flag = TRUE;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <USART2_IRQHandler+0x74>)
 8000f64:	22ff      	movs	r2, #255	; 0xff
 8000f66:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <USART2_IRQHandler+0x74>)
 8000f6c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <USART2_IRQHandler+0x74>)
 8000f72:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
<<<<<<< HEAD
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <USART2_IRQHandler+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000f7e:	e011      	b.n	8000fa4 <USART2_IRQHandler+0x60>
=======
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <USART2_IRQHandler+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000a82:	e011      	b.n	8000aa8 <USART2_IRQHandler+0x60>
>>>>>>> master
>>>>>>> master
=======
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 8001766:	e011      	b.n	800178c <USART2_IRQHandler+0x60>
>>>>>>> Feature_Parser2
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <USART2_IRQHandler+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
=======
<<<<<<< HEAD
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <USART2_IRQHandler+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
=======
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <USART2_IRQHandler+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
>>>>>>> Feature_Parser2
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001772:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001778:	4413      	add	r3, r2
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
<<<<<<< HEAD
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <USART2_IRQHandler+0x74>)
 8000d2c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <USART2_IRQHandler+0x74>)
 8000d34:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
=======
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <USART2_IRQHandler+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
>>>>>>> master
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <USART2_IRQHandler+0x74>)
 8000f8a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <USART2_IRQHandler+0x74>)
 8000f90:	4413      	add	r3, r2
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
<<<<<<< HEAD
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <USART2_IRQHandler+0x74>)
 8000f98:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <USART2_IRQHandler+0x74>)
 8000fa0:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
=======
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <USART2_IRQHandler+0x74>)
 8000a9c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <USART2_IRQHandler+0x74>)
 8000aa4:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
>>>>>>> master
>>>>>>> master
=======
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001780:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001784:	3301      	adds	r3, #1
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001788:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
>>>>>>> Feature_Parser2
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< HEAD
<<<<<<< HEAD
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <USART2_IRQHandler+0x78>)
 8000fa6:	f003 fa77 	bl	8004498 <HAL_UART_IRQHandler>
=======
<<<<<<< HEAD
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <USART2_IRQHandler+0x78>)
 8000d3a:	f002 fedf 	bl	8003afc <HAL_UART_IRQHandler>
=======
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <USART2_IRQHandler+0x78>)
 8000aaa:	f002 ffc5 	bl	8003a38 <HAL_UART_IRQHandler>
>>>>>>> master
>>>>>>> master
=======
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <USART2_IRQHandler+0x78>)
 800178e:	f003 f959 	bl	8004a44 <HAL_UART_IRQHandler>
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	2000050c 	.word	0x2000050c
 8000fbc:	20000a58 	.word	0x20000a58

08000fc0 <DMA2_Stream5_IRQHandler>:
=======
<<<<<<< HEAD
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	20000148 	.word	0x20000148
 8000d50:	2000063c 	.word	0x2000063c

08000d54 <DMA2_Stream5_IRQHandler>:
=======
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	200000c4 	.word	0x200000c4
 8000ac0:	200005b8 	.word	0x200005b8

08000ac4 <DMA2_Stream5_IRQHandler>:
>>>>>>> master
>>>>>>> master
=======
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40004400 	.word	0x40004400
 80017a0:	20001e4c 	.word	0x20001e4c
 80017a4:	20002340 	.word	0x20002340

080017a8 <DMA2_Stream5_IRQHandler>:
>>>>>>> Feature_Parser2

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
=======
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
>>>>>>> master
>>>>>>> master
=======
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
<<<<<<< HEAD
<<<<<<< HEAD
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <DMA2_Stream5_IRQHandler+0x48>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a1a      	ldr	r2, [r3, #32]
 8000fca:	f241 1311 	movw	r3, #4369	; 0x1111
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <DMA2_Stream5_IRQHandler+0x34>
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <DMA2_Stream5_IRQHandler+0x48>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6a1a      	ldr	r2, [r3, #32]
 8000fda:	f240 4344 	movw	r3, #1092	; 0x444
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d107      	bne.n	8000ff4 <DMA2_Stream5_IRQHandler+0x34>
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <DMA2_Stream5_IRQHandler+0x48>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <DMA2_Stream5_IRQHandler+0x48>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <DMA2_Stream5_IRQHandler+0x48>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a1a      	ldr	r2, [r3, #32]
 8000d5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10f      	bne.n	8000d88 <DMA2_Stream5_IRQHandler+0x34>
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <DMA2_Stream5_IRQHandler+0x48>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6a1a      	ldr	r2, [r3, #32]
 8000d6e:	f240 4344 	movw	r3, #1092	; 0x444
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d107      	bne.n	8000d88 <DMA2_Stream5_IRQHandler+0x34>
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <DMA2_Stream5_IRQHandler+0x48>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <DMA2_Stream5_IRQHandler+0x48>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
=======
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <DMA2_Stream5_IRQHandler+0x48>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6a1a      	ldr	r2, [r3, #32]
 8000ace:	f241 1311 	movw	r3, #4369	; 0x1111
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10f      	bne.n	8000af8 <DMA2_Stream5_IRQHandler+0x34>
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <DMA2_Stream5_IRQHandler+0x48>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6a1a      	ldr	r2, [r3, #32]
 8000ade:	f240 4344 	movw	r3, #1092	; 0x444
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d107      	bne.n	8000af8 <DMA2_Stream5_IRQHandler+0x34>
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <DMA2_Stream5_IRQHandler+0x48>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <DMA2_Stream5_IRQHandler+0x48>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0201 	bic.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <DMA2_Stream5_IRQHandler+0x48>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a1a      	ldr	r2, [r3, #32]
 80017b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10f      	bne.n	80017dc <DMA2_Stream5_IRQHandler+0x34>
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <DMA2_Stream5_IRQHandler+0x48>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6a1a      	ldr	r2, [r3, #32]
 80017c2:	f240 4344 	movw	r3, #1092	; 0x444
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <DMA2_Stream5_IRQHandler+0x34>
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <DMA2_Stream5_IRQHandler+0x48>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <DMA2_Stream5_IRQHandler+0x48>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
<<<<<<< HEAD
<<<<<<< HEAD
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <DMA2_Stream5_IRQHandler+0x4c>)
 8000ff6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <DMA2_Stream5_IRQHandler+0x50>)
 8000ffe:	f000 fe0f 	bl	8001c20 <HAL_DMA_IRQHandler>
=======
<<<<<<< HEAD
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <DMA2_Stream5_IRQHandler+0x4c>)
 8000d8a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <DMA2_Stream5_IRQHandler+0x50>)
 8000d92:	f000 fd29 	bl	80017e8 <HAL_DMA_IRQHandler>
=======
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <DMA2_Stream5_IRQHandler+0x4c>)
 8000afa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000afe:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <DMA2_Stream5_IRQHandler+0x50>)
 8000b02:	f000 fe0f 	bl	8001724 <HAL_DMA_IRQHandler>
>>>>>>> master
>>>>>>> master
=======
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <DMA2_Stream5_IRQHandler+0x4c>)
 80017de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80017e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <DMA2_Stream5_IRQHandler+0x50>)
 80017e6:	f001 f83d 	bl	8002864 <HAL_DMA_IRQHandler>
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000978 	.word	0x20000978
 800100c:	40021000 	.word	0x40021000
 8001010:	200009f8 	.word	0x200009f8
=======
<<<<<<< HEAD
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000055c 	.word	0x2000055c
 8000da0:	40021000 	.word	0x40021000
 8000da4:	200005dc 	.word	0x200005dc

08000da8 <SystemInit>:
=======
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200004d8 	.word	0x200004d8
 8000b10:	40021000 	.word	0x40021000
 8000b14:	20000558 	.word	0x20000558
>>>>>>> master

08001014 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e00a      	b.n	800103c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001026:	f3af 8000 	nop.w
 800102a:	4601      	mov	r1, r0
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf0      	blt.n	8001026 <_read+0x12>
	}

return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e009      	b.n	8001074 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fdfb 	bl	8000c64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf1      	blt.n	8001060 <_write+0x12>
	}
	return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_close>:

int _close(int file)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
	return -1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ae:	605a      	str	r2, [r3, #4]
	return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_isatty>:

int _isatty(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	return 1;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_sbrk+0x50>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x16>
		heap_end = &end;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <_sbrk+0x50>)
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <_sbrk+0x54>)
 8001104:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <_sbrk+0x50>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <_sbrk+0x50>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	466a      	mov	r2, sp
 8001116:	4293      	cmp	r3, r2
 8001118:	d907      	bls.n	800112a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800111a:	f007 faad 	bl	8008678 <__errno>
 800111e:	4603      	mov	r3, r0
 8001120:	220c      	movs	r2, #12
 8001122:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	e006      	b.n	8001138 <_sbrk+0x48>
	}

	heap_end += incr;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <_sbrk+0x50>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a03      	ldr	r2, [pc, #12]	; (8001140 <_sbrk+0x50>)
 8001134:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000974 	.word	0x20000974
 8001144:	200137f0 	.word	0x200137f0

<<<<<<< HEAD
08001148 <SystemInit>:
=======
08000c4c <SystemInit>:
>>>>>>> master
>>>>>>> master
=======
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20002260 	.word	0x20002260
 80017f4:	40021000 	.word	0x40021000
 80017f8:	200022e0 	.word	0x200022e0

080017fc <SystemInit>:
>>>>>>> Feature_Parser2
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <SystemInit+0x28>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <SystemInit+0x28>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
<<<<<<< HEAD
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <SystemInit+0x28>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <SystemInit+0x28>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <SystemInit+0x28>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <SystemInit+0x28>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> master
>>>>>>> master
=======
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <SystemInit+0x28>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	4a07      	ldr	r2, [pc, #28]	; (8001824 <SystemInit+0x28>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Feature_Parser2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< HEAD
<<<<<<< HEAD
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SystemInit+0x28>)
 800115e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001162:	609a      	str	r2, [r3, #8]
=======
<<<<<<< HEAD
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SystemInit+0x28>)
 8000dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc2:	609a      	str	r2, [r3, #8]
=======
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SystemInit+0x28>)
 8001812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001816:	609a      	str	r2, [r3, #8]
>>>>>>> Feature_Parser2
#endif
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
08000dd4 <MX_TIM1_Init>:
=======
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SystemInit+0x28>)
 8000c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c66:	609a      	str	r2, [r3, #8]
>>>>>>> master
#endif
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
08001174 <MX_TIM1_Init>:
=======
08000c78 <MX_TIM1_Init>:
>>>>>>> master
>>>>>>> master
=======
08001828 <MX_TIM1_Init>:
>>>>>>> Feature_Parser2
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
=======
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <MX_TIM1_Init+0x9c>)
 8001848:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM1_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001858:	220b      	movs	r2, #11
 800185a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM1_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_TIM1_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001870:	f002 f8a6 	bl	80039c0 <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800187a:	f7ff fe97 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_TIM1_Init+0x98>)
 800188c:	f002 fba2 	bl	8003fd4 <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001896:	f7ff fe89 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_TIM1_Init+0x98>)
 80018a8:	f002 ff9a 	bl	80047e0 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80018b2:	f7ff fe7b 	bl	80015ac <Error_Handler>
  }

}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20002260 	.word	0x20002260
 80018c4:	40010000 	.word	0x40010000

080018c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <MX_TIM2_Init+0xcc>)
 80018ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <MX_TIM2_Init+0xcc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <MX_TIM2_Init+0xcc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001900:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001904:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MX_TIM2_Init+0xcc>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001912:	4820      	ldr	r0, [pc, #128]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001914:	f002 f8a3 	bl	8003a5e <HAL_TIM_PWM_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800191e:	f7ff fe45 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	4619      	mov	r1, r3
 8001930:	4818      	ldr	r0, [pc, #96]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001932:	f002 ff55 	bl	80047e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800193c:	f7ff fe36 	bl	80015ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001940:	2360      	movs	r3, #96	; 0x60
 8001942:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001944:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001948:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800194a:	2302      	movs	r3, #2
 800194c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2208      	movs	r2, #8
 8001956:	4619      	mov	r1, r3
 8001958:	480e      	ldr	r0, [pc, #56]	; (8001994 <MX_TIM2_Init+0xcc>)
 800195a:	f002 fa75 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001964:	f7ff fe22 	bl	80015ac <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001968:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800196c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	220c      	movs	r2, #12
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001976:	f002 fa67 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001980:	f7ff fe14 	bl	80015ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001986:	f000 f87f 	bl	8001a88 <HAL_TIM_MspPostInit>

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200022a0 	.word	0x200022a0

08001998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
<<<<<<< HEAD
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <HAL_TIM_Base_MspInit+0x94>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d13c      	bne.n	8000fd0 <HAL_TIM_Base_MspInit+0x8c>
=======
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
>>>>>>> master
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_TIM1_Init+0x98>)
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <MX_TIM1_Init+0x9c>)
 8001194:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_TIM1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_TIM1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_TIM1_Init+0x98>)
 80011a4:	220b      	movs	r2, #11
 80011a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_TIM1_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_TIM1_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_TIM1_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ba:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_TIM1_Init+0x98>)
 80011bc:	f002 f890 	bl	80032e0 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80011c6:	f7ff fd5f 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_TIM1_Init+0x98>)
 80011d8:	f002 fb8c 	bl	80038f4 <HAL_TIM_ConfigClockSource>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80011e2:	f7ff fd51 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <MX_TIM1_Init+0x98>)
 80011f4:	f002 ff84 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80011fe:	f7ff fd43 	bl	8000c88 <Error_Handler>
  }

}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000978 	.word	0x20000978
 8001210:	40010000 	.word	0x40010000

08001214 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
 8001232:	615a      	str	r2, [r3, #20]
 8001234:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <MX_TIM2_Init+0xcc>)
 8001238:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <MX_TIM2_Init+0xcc>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <MX_TIM2_Init+0xcc>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <MX_TIM2_Init+0xcc>)
 800124c:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001250:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <MX_TIM2_Init+0xcc>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_TIM2_Init+0xcc>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800125e:	4820      	ldr	r0, [pc, #128]	; (80012e0 <MX_TIM2_Init+0xcc>)
 8001260:	f002 f88d 	bl	800337e <HAL_TIM_PWM_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800126a:	f7ff fd0d 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	4619      	mov	r1, r3
 800127c:	4818      	ldr	r0, [pc, #96]	; (80012e0 <MX_TIM2_Init+0xcc>)
 800127e:	f002 ff3f 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001288:	f7ff fcfe 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128c:	2360      	movs	r3, #96	; 0x60
 800128e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001290:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001294:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001296:	2302      	movs	r3, #2
 8001298:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2208      	movs	r2, #8
 80012a2:	4619      	mov	r1, r3
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_TIM2_Init+0xcc>)
 80012a6:	f002 fa5f 	bl	8003768 <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012b0:	f7ff fcea 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80012b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	220c      	movs	r2, #12
 80012be:	4619      	mov	r1, r3
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <MX_TIM2_Init+0xcc>)
 80012c2:	f002 fa51 	bl	8003768 <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80012cc:	f7ff fcdc 	bl	8000c88 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <MX_TIM2_Init+0xcc>)
 80012d2:	f000 f87f 	bl	80013d4 <HAL_TIM_MspPostInit>

}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200009b8 	.word	0x200009b8

080012e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
<<<<<<< HEAD
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a21      	ldr	r2, [pc, #132]	; (8001378 <HAL_TIM_Base_MspInit+0x94>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d13c      	bne.n	8001370 <HAL_TIM_Base_MspInit+0x8c>
=======
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <HAL_TIM_Base_MspInit+0x94>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d13c      	bne.n	8000e74 <HAL_TIM_Base_MspInit+0x8c>
>>>>>>> master
>>>>>>> master
=======
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <HAL_TIM_Base_MspInit+0x94>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d13c      	bne.n	8001a24 <HAL_TIM_Base_MspInit+0x8c>
>>>>>>> Feature_Parser2
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_TIM_Base_MspInit+0x98>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a1f      	ldr	r2, [pc, #124]	; (800137c <HAL_TIM_Base_MspInit+0x98>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_TIM_Base_MspInit+0x98>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
=======
<<<<<<< HEAD
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_TIM_Base_MspInit+0x98>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_TIM_Base_MspInit+0x98>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_TIM_Base_MspInit+0x98>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
=======
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_TIM_Base_MspInit+0x98>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <HAL_TIM_Base_MspInit+0x98>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_TIM_Base_MspInit+0x98>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
>>>>>>> master
>>>>>>> master
=======
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_TIM_Base_MspInit+0x98>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <HAL_TIM_Base_MspInit+0x98>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_TIM_Base_MspInit+0x98>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Feature_Parser2

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
<<<<<<< HEAD
<<<<<<< HEAD
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <HAL_TIM_Base_MspInit+0xa0>)
 8001316:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_TIM_Base_MspInit+0x9c>)
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8000f76:	601a      	str	r2, [r3, #0]
=======
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_TIM_Base_MspInit+0xa0>)
 80019ca:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019ce:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80019d2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019d6:	2240      	movs	r2, #64	; 0x40
 80019d8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a00:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001a08:	480a      	ldr	r0, [pc, #40]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 8001a0a:	f000 fe03 	bl	8002614 <HAL_DMA_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001a14:	f7ff fdca 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
<<<<<<< HEAD
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_TIM_Base_MspInit+0x9c>)
 8000fc8:	621a      	str	r2, [r3, #32]
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <HAL_TIM_Base_MspInit+0x9c>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_TIM_Base_MspInit+0x9c>)
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <HAL_TIM_Base_MspInit+0xa0>)
 8000e1a:	601a      	str	r2, [r3, #0]
>>>>>>> master
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 800131a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800131e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001322:	2240      	movs	r2, #64	; 0x40
 8001324:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 800132e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001332:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001348:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800134c:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001356:	f000 fb3b 	bl	80019d0 <HAL_DMA_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001360:	f7ff fc92 	bl	8000c88 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
<<<<<<< HEAD
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001368:	621a      	str	r2, [r3, #32]
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_TIM_Base_MspInit+0x9c>)
 8000e6c:	621a      	str	r2, [r3, #32]
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_TIM_Base_MspInit+0x9c>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> master
>>>>>>> master
=======
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 8001a1c:	621a      	str	r2, [r3, #32]
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> Feature_Parser2

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40010000 	.word	0x40010000
 800137c:	40023800 	.word	0x40023800
 8001380:	200009f8 	.word	0x200009f8
 8001384:	40026488 	.word	0x40026488
=======
<<<<<<< HEAD
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	200005dc 	.word	0x200005dc
 8000fe4:	40026488 	.word	0x40026488
=======
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	200022e0 	.word	0x200022e0
 8001a38:	40026488 	.word	0x40026488
>>>>>>> Feature_Parser2

08001a3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
<<<<<<< HEAD
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff8:	d115      	bne.n	8001026 <HAL_TIM_PWM_MspInit+0x3e>
=======
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	40023800 	.word	0x40023800
 8000e84:	20000558 	.word	0x20000558
 8000e88:	40026488 	.word	0x40026488
>>>>>>> master

08001388 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
<<<<<<< HEAD
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001398:	d115      	bne.n	80013c6 <HAL_TIM_PWM_MspInit+0x3e>
=======
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9c:	d115      	bne.n	8000eca <HAL_TIM_PWM_MspInit+0x3e>
>>>>>>> master
>>>>>>> master
=======
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4c:	d115      	bne.n	8001a7a <HAL_TIM_PWM_MspInit+0x3e>
>>>>>>> Feature_Parser2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_TIM_PWM_MspInit+0x48>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_TIM_PWM_MspInit+0x48>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_TIM_PWM_MspInit+0x48>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
=======
<<<<<<< HEAD
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_TIM_PWM_MspInit+0x48>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <HAL_TIM_PWM_MspInit+0x48>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_TIM_PWM_MspInit+0x48>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
=======
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_TIM_PWM_MspInit+0x48>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_TIM_PWM_MspInit+0x48>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_TIM_PWM_MspInit+0x48>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Feature_Parser2

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f000 fd99 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
<<<<<<< HEAD
 8001020:	201c      	movs	r0, #28
 8001022:	f000 fa9e 	bl	8001562 <HAL_NVIC_EnableIRQ>
=======
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x48>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x48>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x48>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> master

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	201c      	movs	r0, #28
 80013bc:	f000 fad1 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
<<<<<<< HEAD
 80013c0:	201c      	movs	r0, #28
 80013c2:	f000 faea 	bl	800199a <HAL_NVIC_EnableIRQ>
=======
 8000ec4:	201c      	movs	r0, #28
 8000ec6:	f000 faea 	bl	800149e <HAL_NVIC_EnableIRQ>
>>>>>>> master
>>>>>>> master
=======
 8001a74:	201c      	movs	r0, #28
 8001a76:	f000 fdb2 	bl	80025de <HAL_NVIC_EnableIRQ>
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
=======
<<<<<<< HEAD
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
=======
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
>>>>>>> Feature_Parser2

08001a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
<<<<<<< HEAD
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001054:	d11e      	bne.n	8001094 <HAL_TIM_MspPostInit+0x60>
=======
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
>>>>>>> master

080013d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
<<<<<<< HEAD
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f4:	d11e      	bne.n	8001434 <HAL_TIM_MspPostInit+0x60>
=======
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef8:	d11e      	bne.n	8000f38 <HAL_TIM_MspPostInit+0x60>
>>>>>>> master
>>>>>>> master
=======
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa8:	d11e      	bne.n	8001ae8 <HAL_TIM_MspPostInit+0x60>
>>>>>>> Feature_Parser2
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_TIM_MspPostInit+0x68>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_TIM_MspPostInit+0x68>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_TIM_MspPostInit+0x68>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
=======
<<<<<<< HEAD
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_TIM_MspPostInit+0x68>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_TIM_MspPostInit+0x68>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_TIM_MspPostInit+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
=======
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_TIM_MspPostInit+0x68>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <HAL_TIM_MspPostInit+0x68>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_TIM_MspPostInit+0x68>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
>>>>>>> master
>>>>>>> master
=======
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Feature_Parser2
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
<<<<<<< HEAD
<<<<<<< HEAD
 8001412:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001416:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8001072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001076:	60fb      	str	r3, [r7, #12]
=======
 8001ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aca:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4619      	mov	r1, r3
 800108e:	4804      	ldr	r0, [pc, #16]	; (80010a0 <HAL_TIM_MspPostInit+0x6c>)
 8001090:	f000 fe14 	bl	8001cbc <HAL_GPIO_Init>
=======
 8000f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1a:	60fb      	str	r3, [r7, #12]
>>>>>>> master
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	4804      	ldr	r0, [pc, #16]	; (8001440 <HAL_TIM_MspPostInit+0x6c>)
 8001430:	f000 fe60 	bl	80020f4 <HAL_GPIO_Init>
=======
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <HAL_TIM_MspPostInit+0x6c>)
 8000f34:	f000 fe60 	bl	8001bf8 <HAL_GPIO_Init>
>>>>>>> master
>>>>>>> master
=======
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4804      	ldr	r0, [pc, #16]	; (8001af4 <HAL_TIM_MspPostInit+0x6c>)
 8001ae4:	f001 f928 	bl	8002d38 <HAL_GPIO_Init>
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
<<<<<<< HEAD
<<<<<<< HEAD
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020400 	.word	0x40020400

08001444 <MX_USART2_UART_Init>:
=======
<<<<<<< HEAD
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400

080010a4 <MX_USART2_UART_Init>:
=======
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020400 	.word	0x40020400

08000f48 <MX_USART2_UART_Init>:
>>>>>>> master
>>>>>>> master
=======
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020400 	.word	0x40020400

08001af8 <MX_USART2_UART_Init>:
>>>>>>> Feature_Parser2
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
=======
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2

  huart2.Instance = USART2;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_USART2_UART_Init+0x50>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b30:	f002 fee6 	bl	8004900 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b3a:	f7ff fd37 	bl	80015ac <Error_Handler>
  }

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20002340 	.word	0x20002340
 8001b48:	40004400 	.word	0x40004400

08001b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
<<<<<<< HEAD
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1d      	ldr	r2, [pc, #116]	; (800118c <HAL_UART_MspInit+0x94>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d133      	bne.n	8001182 <HAL_UART_MspInit+0x8a>
=======
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
>>>>>>> master

  huart2.Instance = USART2;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <MX_USART2_UART_Init+0x50>)
 800144c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_USART2_UART_Init+0x4c>)
 800147c:	f002 fed0 	bl	8004220 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001486:	f7ff fbff 	bl	8000c88 <Error_Handler>
  }

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000a58 	.word	0x20000a58
 8001494:	40004400 	.word	0x40004400

08001498 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
<<<<<<< HEAD
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_UART_MspInit+0x94>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d133      	bne.n	8001522 <HAL_UART_MspInit+0x8a>
=======
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <HAL_UART_MspInit+0x94>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d133      	bne.n	8001026 <HAL_UART_MspInit+0x8a>
>>>>>>> master
>>>>>>> master
=======
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_UART_MspInit+0x94>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d133      	bne.n	8001bd6 <HAL_UART_MspInit+0x8a>
>>>>>>> Feature_Parser2
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <HAL_UART_MspInit+0x98>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <HAL_UART_MspInit+0x98>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_UART_MspInit+0x98>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_UART_MspInit+0x98>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_UART_MspInit+0x98>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_UART_MspInit+0x98>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
=======
<<<<<<< HEAD
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_UART_MspInit+0x98>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_UART_MspInit+0x98>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_UART_MspInit+0x98>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_UART_MspInit+0x98>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a14      	ldr	r2, [pc, #80]	; (8001190 <HAL_UART_MspInit+0x98>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_UART_MspInit+0x98>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
=======
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a14      	ldr	r2, [pc, #80]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_UART_MspInit+0x98>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> master
>>>>>>> master
=======
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Feature_Parser2
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< HEAD
<<<<<<< HEAD
 80014f2:	230c      	movs	r3, #12
 80014f4:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8001152:	230c      	movs	r3, #12
 8001154:	617b      	str	r3, [r7, #20]
=======
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_UART_MspInit+0x9c>)
 8001bc2:	f001 f8b9 	bl	8002d38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2026      	movs	r0, #38	; 0x26
 8001bcc:	f000 fceb 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
<<<<<<< HEAD
 800117c:	2026      	movs	r0, #38	; 0x26
 800117e:	f000 f9f0 	bl	8001562 <HAL_NVIC_EnableIRQ>
=======
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	617b      	str	r3, [r7, #20]
>>>>>>> master
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001502:	2307      	movs	r3, #7
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <HAL_UART_MspInit+0x9c>)
 800150e:	f000 fdf1 	bl	80020f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2026      	movs	r0, #38	; 0x26
 8001518:	f000 fa23 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
<<<<<<< HEAD
 800151c:	2026      	movs	r0, #38	; 0x26
 800151e:	f000 fa3c 	bl	800199a <HAL_NVIC_EnableIRQ>
=======
 8001020:	2026      	movs	r0, #38	; 0x26
 8001022:	f000 fa3c 	bl	800149e <HAL_NVIC_EnableIRQ>
>>>>>>> master
>>>>>>> master
=======
 8001bd0:	2026      	movs	r0, #38	; 0x26
 8001bd2:	f000 fd04 	bl	80025de <HAL_NVIC_EnableIRQ>
>>>>>>> Feature_Parser2
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40004400 	.word	0x40004400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000

08001538 <Reset_Handler>:
=======
<<<<<<< HEAD
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40004400 	.word	0x40004400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <Reset_Handler>:
=======
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40004400 	.word	0x40004400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <Reset_Handler>:
>>>>>>> master
>>>>>>> master
=======
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <Reset_Handler>:
>>>>>>> Feature_Parser2

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
<<<<<<< HEAD
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001570 <LoopFillZerobss+0x14>
=======
<<<<<<< HEAD
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopFillZerobss+0x14>
=======
 8001bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c24 <LoopFillZerobss+0x14>
>>>>>>> Feature_Parser2

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bf2:	e003      	b.n	8001bfc <LoopCopyDataInit>

08001bf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bfa:	3104      	adds	r1, #4

08001bfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c04:	d3f6      	bcc.n	8001bf4 <CopyDataInit>
  ldr  r2, =_sbss
 8001c06:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c08:	e002      	b.n	8001c10 <LoopFillZerobss>

08001c0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c0c:	f842 3b04 	str.w	r3, [r2], #4

08001c10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c14:	d3f9      	bcc.n	8001c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c16:	f7ff fdf1 	bl	80017fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f003 fe2b 	bl	8005874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1e:	f7ff fb5f 	bl	80012e0 <main>
  bx  lr    
 8001c22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c28:	08005d58 	.word	0x08005d58
  ldr  r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c30:	20001e30 	.word	0x20001e30
  ldr  r2, =_sbss
 8001c34:	20001e30 	.word	0x20001e30
  ldr  r3, = _ebss
 8001c38:	20015080 	.word	0x20015080

<<<<<<< HEAD
080011e8 <ADC_IRQHandler>:
=======
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopFillZerobss+0x14>
>>>>>>> master

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800153c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800153e:	e003      	b.n	8001548 <LoopCopyDataInit>

08001540 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001542:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001544:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001546:	3104      	adds	r1, #4

08001548 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800154c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800154e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001550:	d3f6      	bcc.n	8001540 <CopyDataInit>
  ldr  r2, =_sbss
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001554:	e002      	b.n	800155c <LoopFillZerobss>

08001556 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001556:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001558:	f842 3b04 	str.w	r3, [r2], #4

0800155c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800155e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001560:	d3f9      	bcc.n	8001556 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001562:	f7ff fdf1 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001566:	f007 f88d 	bl	8008684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff faad 	bl	8000ac8 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001574:	0800a13c 	.word	0x0800a13c
  ldr  r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800157c:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001580:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001584:	200137f0 	.word	0x200137f0

<<<<<<< HEAD
08001588 <ADC_IRQHandler>:
=======
0800108c <ADC_IRQHandler>:
>>>>>>> master
>>>>>>> master
=======
08001c3c <ADC_IRQHandler>:
>>>>>>> Feature_Parser2
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
<<<<<<< HEAD
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>
	...

0800158c <UB_VGA_Screen_Init>:
=======
<<<<<<< HEAD
 80011e8:	e7fe      	b.n	80011e8 <ADC_IRQHandler>
	...
=======
 8001c3c:	e7fe      	b.n	8001c3c <ADC_IRQHandler>
>>>>>>> Feature_Parser2

08001c3e <DrawRectangle>:
 * @param color
 * @param filled
 * @return
 */
int DrawRectangle(uint8_t xp, uint8_t yp, uint8_t Width, uint8_t Heigth,
		uint8_t color, uint8_t filled) {
 8001c3e:	b590      	push	{r4, r7, lr}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4604      	mov	r4, r0
 8001c46:	4608      	mov	r0, r1
 8001c48:	4611      	mov	r1, r2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4623      	mov	r3, r4
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	4603      	mov	r3, r0
 8001c52:	71bb      	strb	r3, [r7, #6]
 8001c54:	460b      	mov	r3, r1
 8001c56:	717b      	strb	r3, [r7, #5]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	713b      	strb	r3, [r7, #4]
	if (filled == 0) {
 8001c5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d120      	bne.n	8001ca6 <DrawRectangle+0x68>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e017      	b.n	8001c9a <DrawRectangle+0x5c>
			for (uint8_t x = xp; x < xp + Width; x++) {
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	73bb      	strb	r3, [r7, #14]
 8001c6e:	e00b      	b.n	8001c88 <DrawRectangle+0x4a>
				UB_VGA_SetPixel(x, y, color);
 8001c70:	7bbb      	ldrb	r3, [r7, #14]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	b291      	uxth	r1, r2
 8001c78:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fb1d 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = xp; x < xp + Width; x++) {
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	3301      	adds	r3, #1
 8001c86:	73bb      	strb	r3, [r7, #14]
 8001c88:	7bba      	ldrb	r2, [r7, #14]
 8001c8a:	79f9      	ldrb	r1, [r7, #7]
 8001c8c:	797b      	ldrb	r3, [r7, #5]
 8001c8e:	440b      	add	r3, r1
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbed      	blt.n	8001c70 <DrawRectangle+0x32>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	3301      	adds	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	79b9      	ldrb	r1, [r7, #6]
 8001c9e:	793b      	ldrb	r3, [r7, #4]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbe1      	blt.n	8001c6a <DrawRectangle+0x2c>
			}
		}
	}
	//rectangle not filled, only lines
	if (filled == 1) {
 8001ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d15b      	bne.n	8001d66 <DrawRectangle+0x128>
		//top line
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	737b      	strb	r3, [r7, #13]
 8001cb2:	e00b      	b.n	8001ccc <DrawRectangle+0x8e>
			UB_VGA_SetPixel(x, yp, color);
 8001cb4:	7b7b      	ldrb	r3, [r7, #13]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	79ba      	ldrb	r2, [r7, #6]
 8001cba:	b291      	uxth	r1, r2
 8001cbc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fafb 	bl	80022bc <UB_VGA_SetPixel>
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001cc6:	7b7b      	ldrb	r3, [r7, #13]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	737b      	strb	r3, [r7, #13]
 8001ccc:	7b7a      	ldrb	r2, [r7, #13]
 8001cce:	79f9      	ldrb	r1, [r7, #7]
 8001cd0:	797b      	ldrb	r3, [r7, #5]
 8001cd2:	440b      	add	r3, r1
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbed      	blt.n	8001cb4 <DrawRectangle+0x76>
		}
		//bottom line
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	733b      	strb	r3, [r7, #12]
 8001cdc:	e00f      	b.n	8001cfe <DrawRectangle+0xc0>
			UB_VGA_SetPixel(x, yp + Heigth, color);
 8001cde:	7b3b      	ldrb	r3, [r7, #12]
 8001ce0:	b298      	uxth	r0, r3
 8001ce2:	79bb      	ldrb	r3, [r7, #6]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	793b      	ldrb	r3, [r7, #4]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f000 fae2 	bl	80022bc <UB_VGA_SetPixel>
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001cf8:	7b3b      	ldrb	r3, [r7, #12]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	733b      	strb	r3, [r7, #12]
 8001cfe:	7b3a      	ldrb	r2, [r7, #12]
 8001d00:	79f9      	ldrb	r1, [r7, #7]
 8001d02:	797b      	ldrb	r3, [r7, #5]
 8001d04:	440b      	add	r3, r1
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbe9      	blt.n	8001cde <DrawRectangle+0xa0>
		}

<<<<<<< HEAD
08001090 <UB_VGA_Screen_Init>:
>>>>>>> master
>>>>>>> master
=======
		//Left vertical line
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	72fb      	strb	r3, [r7, #11]
 8001d0e:	e00b      	b.n	8001d28 <DrawRectangle+0xea>
			UB_VGA_SetPixel(xp, y, color);
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	7afa      	ldrb	r2, [r7, #11]
 8001d16:	b291      	uxth	r1, r2
 8001d18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 facd 	bl	80022bc <UB_VGA_SetPixel>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	3301      	adds	r3, #1
 8001d26:	72fb      	strb	r3, [r7, #11]
 8001d28:	7afa      	ldrb	r2, [r7, #11]
 8001d2a:	79b9      	ldrb	r1, [r7, #6]
 8001d2c:	793b      	ldrb	r3, [r7, #4]
 8001d2e:	440b      	add	r3, r1
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbed      	blt.n	8001d10 <DrawRectangle+0xd2>

		}
		//Right vertical line
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	72bb      	strb	r3, [r7, #10]
 8001d38:	e00f      	b.n	8001d5a <DrawRectangle+0x11c>
			UB_VGA_SetPixel(xp + Width, y, color);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	797b      	ldrb	r3, [r7, #5]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	7aba      	ldrb	r2, [r7, #10]
 8001d48:	b291      	uxth	r1, r2
 8001d4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fab4 	bl	80022bc <UB_VGA_SetPixel>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001d54:	7abb      	ldrb	r3, [r7, #10]
 8001d56:	3301      	adds	r3, #1
 8001d58:	72bb      	strb	r3, [r7, #10]
 8001d5a:	7aba      	ldrb	r2, [r7, #10]
 8001d5c:	79b9      	ldrb	r1, [r7, #6]
 8001d5e:	793b      	ldrb	r3, [r7, #4]
 8001d60:	440b      	add	r3, r1
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbe9      	blt.n	8001d3a <DrawRectangle+0xfc>
		}
	}
}
 8001d66:	bf00      	nop
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd90      	pop	{r4, r7, pc}

08001d70 <DrawLine>:
 * @param color
 * @param thickness
 * @return
 */
int DrawLine(uint8_t xp1, uint8_t yp1, uint8_t xp2, uint8_t yp2, uint8_t color,
		uint8_t thickness) {
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b08d      	sub	sp, #52	; 0x34
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	4603      	mov	r3, r0
 8001d84:	71bb      	strb	r3, [r7, #6]
 8001d86:	460b      	mov	r3, r1
 8001d88:	717b      	strb	r3, [r7, #5]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	713b      	strb	r3, [r7, #4]
	int dx = xp2 - xp1;
 8001d8e:	797a      	ldrb	r2, [r7, #5]
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	61fb      	str	r3, [r7, #28]
	int dy = yp2 - yp1;
 8001d96:	793a      	ldrb	r2, [r7, #4]
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	61bb      	str	r3, [r7, #24]

	// calculate steps required for generating pixels
	int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001da4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bfb8      	it	lt
 8001dae:	425b      	neglt	r3, r3
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bfb8      	it	lt
 8001db4:	4613      	movlt	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

	// calculate increment in x & y for each steps
	float Xinc = dx / (float) steps;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd0:	edc7 7a04 	vstr	s15, [r7, #16]
	float Yinc = dy / (float) steps;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dec:	edc7 7a03 	vstr	s15, [r7, #12]

	// Put pixel for each step
	for (int j = 0 - abs(thickness / 2); j <= abs(thickness / 2); j++) {
 8001df0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	425b      	negs	r3, r3
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfc:	e053      	b.n	8001ea6 <DrawLine+0x136>
		float X = xp1 + 0.5;
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb3d 	bl	8000480 <__aeabi_i2d>
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <DrawLine+0x150>)
 8001e0c:	f7fe f9ec 	bl	80001e8 <__adddf3>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe fb9c 	bl	8000554 <__aeabi_d2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
		float Y = yp1 + j + 0.5;
 8001e20:	79ba      	ldrb	r2, [r7, #6]
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	4413      	add	r3, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb2a 	bl	8000480 <__aeabi_i2d>
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <DrawLine+0x150>)
 8001e32:	f7fe f9d9 	bl	80001e8 <__adddf3>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fb89 	bl	8000554 <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i <= steps; i++) {
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	e025      	b.n	8001e98 <DrawLine+0x128>
			UB_VGA_SetPixel(X, Y, color);
 8001e4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e54:	ee17 3a90 	vmov	r3, s15
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e62:	ee17 2a90 	vmov	r2, s15
 8001e66:	b291      	uxth	r1, r2
 8001e68:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fa25 	bl	80022bc <UB_VGA_SetPixel>
			X += Xinc; // increment in x at each step
 8001e72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e76:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			Y += Yinc;
 8001e82:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (int i = 0; i <= steps; i++) {
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	3301      	adds	r3, #1
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	6a3a      	ldr	r2, [r7, #32]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	ddd5      	ble.n	8001e4c <DrawLine+0xdc>
	for (int j = 0 - abs(thickness / 2); j <= abs(thickness / 2); j++) {
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	dda3      	ble.n	8001dfe <DrawLine+0x8e>
		}
	}
}
 8001eb6:	bf00      	nop
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3734      	adds	r7, #52	; 0x34
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	3fe00000 	.word	0x3fe00000

08001ec4 <ClearScreen>:
 * @brief Clears the screen in the specified color
 *
 * @param color
 * @return
 */
int ClearScreen(uint8_t color) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f9cf 	bl	8002274 <UB_VGA_FillScreen>
}
 8001ed6:	bf00      	nop
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <DrawBitmap>:
 * @param xp
 * @param yp
 * @param selection
 * @return
 */
int DrawBitmap(uint8_t selector, uint8_t xp, uint8_t yp) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	460b      	mov	r3, r1
 8001eec:	71bb      	strb	r3, [r7, #6]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	717b      	strb	r3, [r7, #5]
	uint8_t color;

	if (selector == LEFT) //Left
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d136      	bne.n	8001f66 <DrawBitmap+0x86>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001ef8:	2300      	movs	r3, #0
 8001efa:	75fb      	strb	r3, [r7, #23]
 8001efc:	e030      	b.n	8001f60 <DrawBitmap+0x80>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	75bb      	strb	r3, [r7, #22]
 8001f02:	e027      	b.n	8001f54 <DrawBitmap+0x74>
				if (arrowLeft[y][x] != 0b10010000) {
 8001f04:	7dfa      	ldrb	r2, [r7, #23]
 8001f06:	7dbb      	ldrb	r3, [r7, #22]
 8001f08:	4993      	ldr	r1, [pc, #588]	; (8002158 <DrawBitmap+0x278>)
 8001f0a:	2032      	movs	r0, #50	; 0x32
 8001f0c:	fb00 f202 	mul.w	r2, r0, r2
 8001f10:	440a      	add	r2, r1
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b90      	cmp	r3, #144	; 0x90
 8001f18:	d019      	beq.n	8001f4e <DrawBitmap+0x6e>
					color = arrowLeft[y][x];
 8001f1a:	7dfa      	ldrb	r2, [r7, #23]
 8001f1c:	7dbb      	ldrb	r3, [r7, #22]
 8001f1e:	498e      	ldr	r1, [pc, #568]	; (8002158 <DrawBitmap+0x278>)
 8001f20:	2032      	movs	r0, #50	; 0x32
 8001f22:	fb00 f202 	mul.w	r2, r0, r2
 8001f26:	440a      	add	r2, r1
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + x, yp + y, color);
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	7dbb      	ldrb	r3, [r7, #22]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b298      	uxth	r0, r3
 8001f3a:	797b      	ldrb	r3, [r7, #5]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	7afa      	ldrb	r2, [r7, #11]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f000 f9b7 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001f4e:	7dbb      	ldrb	r3, [r7, #22]
 8001f50:	3301      	adds	r3, #1
 8001f52:	75bb      	strb	r3, [r7, #22]
 8001f54:	7dbb      	ldrb	r3, [r7, #22]
 8001f56:	2b31      	cmp	r3, #49	; 0x31
 8001f58:	d9d4      	bls.n	8001f04 <DrawBitmap+0x24>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	75fb      	strb	r3, [r7, #23]
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b31      	cmp	r3, #49	; 0x31
 8001f64:	d9cb      	bls.n	8001efe <DrawBitmap+0x1e>
				}
			}
		}
	}

	if (selector == RIGHT) //Right
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d13a      	bne.n	8001fe2 <DrawBitmap+0x102>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	757b      	strb	r3, [r7, #21]
 8001f70:	e034      	b.n	8001fdc <DrawBitmap+0xfc>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	753b      	strb	r3, [r7, #20]
 8001f76:	e02b      	b.n	8001fd0 <DrawBitmap+0xf0>
				if (arrowLeft[y][x] != 0b10010000) {
 8001f78:	7d7a      	ldrb	r2, [r7, #21]
 8001f7a:	7d3b      	ldrb	r3, [r7, #20]
 8001f7c:	4976      	ldr	r1, [pc, #472]	; (8002158 <DrawBitmap+0x278>)
 8001f7e:	2032      	movs	r0, #50	; 0x32
 8001f80:	fb00 f202 	mul.w	r2, r0, r2
 8001f84:	440a      	add	r2, r1
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b90      	cmp	r3, #144	; 0x90
 8001f8c:	d01d      	beq.n	8001fca <DrawBitmap+0xea>
					color = arrowLeft[y][x];
 8001f8e:	7d7a      	ldrb	r2, [r7, #21]
 8001f90:	7d3b      	ldrb	r3, [r7, #20]
 8001f92:	4971      	ldr	r1, [pc, #452]	; (8002158 <DrawBitmap+0x278>)
 8001f94:	2032      	movs	r0, #50	; 0x32
 8001f96:	fb00 f202 	mul.w	r2, r0, r2
 8001f9a:	440a      	add	r2, r1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + BITMAPSIZE - x, yp + BITMAPSIZE - y,
 8001fa2:	79bb      	ldrb	r3, [r7, #6]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	7d3b      	ldrb	r3, [r7, #20]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3332      	adds	r3, #50	; 0x32
 8001fb0:	b298      	uxth	r0, r3
 8001fb2:	797b      	ldrb	r3, [r7, #5]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	7d7b      	ldrb	r3, [r7, #21]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3332      	adds	r3, #50	; 0x32
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	7afa      	ldrb	r2, [r7, #11]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f000 f979 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001fca:	7d3b      	ldrb	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	753b      	strb	r3, [r7, #20]
 8001fd0:	7d3b      	ldrb	r3, [r7, #20]
 8001fd2:	2b31      	cmp	r3, #49	; 0x31
 8001fd4:	d9d0      	bls.n	8001f78 <DrawBitmap+0x98>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001fd6:	7d7b      	ldrb	r3, [r7, #21]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	757b      	strb	r3, [r7, #21]
 8001fdc:	7d7b      	ldrb	r3, [r7, #21]
 8001fde:	2b31      	cmp	r3, #49	; 0x31
 8001fe0:	d9c7      	bls.n	8001f72 <DrawBitmap+0x92>
				}
			}
		}
	}

	if (selector == UP) //Up
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d136      	bne.n	8002056 <DrawBitmap+0x176>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001fe8:	2300      	movs	r3, #0
 8001fea:	74fb      	strb	r3, [r7, #19]
 8001fec:	e030      	b.n	8002050 <DrawBitmap+0x170>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	74bb      	strb	r3, [r7, #18]
 8001ff2:	e027      	b.n	8002044 <DrawBitmap+0x164>
				if (arrowLeft[x][y] != 0b10010000) {
 8001ff4:	7cba      	ldrb	r2, [r7, #18]
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	4957      	ldr	r1, [pc, #348]	; (8002158 <DrawBitmap+0x278>)
 8001ffa:	2032      	movs	r0, #50	; 0x32
 8001ffc:	fb00 f202 	mul.w	r2, r0, r2
 8002000:	440a      	add	r2, r1
 8002002:	4413      	add	r3, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b90      	cmp	r3, #144	; 0x90
 8002008:	d019      	beq.n	800203e <DrawBitmap+0x15e>
					color = arrowLeft[x][y];
 800200a:	7cba      	ldrb	r2, [r7, #18]
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	4952      	ldr	r1, [pc, #328]	; (8002158 <DrawBitmap+0x278>)
 8002010:	2032      	movs	r0, #50	; 0x32
 8002012:	fb00 f202 	mul.w	r2, r0, r2
 8002016:	440a      	add	r2, r1
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + x, yp + y, color);
 800201e:	79bb      	ldrb	r3, [r7, #6]
 8002020:	b29a      	uxth	r2, r3
 8002022:	7cbb      	ldrb	r3, [r7, #18]
 8002024:	b29b      	uxth	r3, r3
 8002026:	4413      	add	r3, r2
 8002028:	b298      	uxth	r0, r3
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	b29a      	uxth	r2, r3
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4413      	add	r3, r2
 8002034:	b29b      	uxth	r3, r3
 8002036:	7afa      	ldrb	r2, [r7, #11]
 8002038:	4619      	mov	r1, r3
 800203a:	f000 f93f 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 800203e:	7cbb      	ldrb	r3, [r7, #18]
 8002040:	3301      	adds	r3, #1
 8002042:	74bb      	strb	r3, [r7, #18]
 8002044:	7cbb      	ldrb	r3, [r7, #18]
 8002046:	2b31      	cmp	r3, #49	; 0x31
 8002048:	d9d4      	bls.n	8001ff4 <DrawBitmap+0x114>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	3301      	adds	r3, #1
 800204e:	74fb      	strb	r3, [r7, #19]
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b31      	cmp	r3, #49	; 0x31
 8002054:	d9cb      	bls.n	8001fee <DrawBitmap+0x10e>
				}
			}
		}
	}

	if (selector == DOWN) //Down
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d13a      	bne.n	80020d2 <DrawBitmap+0x1f2>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 800205c:	2300      	movs	r3, #0
 800205e:	747b      	strb	r3, [r7, #17]
 8002060:	e034      	b.n	80020cc <DrawBitmap+0x1ec>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8002062:	2300      	movs	r3, #0
 8002064:	743b      	strb	r3, [r7, #16]
 8002066:	e02b      	b.n	80020c0 <DrawBitmap+0x1e0>
				if (arrowLeft[x][y] != 0b10010000) {
 8002068:	7c3a      	ldrb	r2, [r7, #16]
 800206a:	7c7b      	ldrb	r3, [r7, #17]
 800206c:	493a      	ldr	r1, [pc, #232]	; (8002158 <DrawBitmap+0x278>)
 800206e:	2032      	movs	r0, #50	; 0x32
 8002070:	fb00 f202 	mul.w	r2, r0, r2
 8002074:	440a      	add	r2, r1
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b90      	cmp	r3, #144	; 0x90
 800207c:	d01d      	beq.n	80020ba <DrawBitmap+0x1da>
					color = arrowLeft[x][y];
 800207e:	7c3a      	ldrb	r2, [r7, #16]
 8002080:	7c7b      	ldrb	r3, [r7, #17]
 8002082:	4935      	ldr	r1, [pc, #212]	; (8002158 <DrawBitmap+0x278>)
 8002084:	2032      	movs	r0, #50	; 0x32
 8002086:	fb00 f202 	mul.w	r2, r0, r2
 800208a:	440a      	add	r2, r1
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + BITMAPSIZE - x, yp + BITMAPSIZE - y,
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	b29a      	uxth	r2, r3
 8002096:	7c3b      	ldrb	r3, [r7, #16]
 8002098:	b29b      	uxth	r3, r3
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	b29b      	uxth	r3, r3
 800209e:	3332      	adds	r3, #50	; 0x32
 80020a0:	b298      	uxth	r0, r3
 80020a2:	797b      	ldrb	r3, [r7, #5]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	7c7b      	ldrb	r3, [r7, #17]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3332      	adds	r3, #50	; 0x32
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	7afa      	ldrb	r2, [r7, #11]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f000 f901 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 80020ba:	7c3b      	ldrb	r3, [r7, #16]
 80020bc:	3301      	adds	r3, #1
 80020be:	743b      	strb	r3, [r7, #16]
 80020c0:	7c3b      	ldrb	r3, [r7, #16]
 80020c2:	2b31      	cmp	r3, #49	; 0x31
 80020c4:	d9d0      	bls.n	8002068 <DrawBitmap+0x188>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 80020c6:	7c7b      	ldrb	r3, [r7, #17]
 80020c8:	3301      	adds	r3, #1
 80020ca:	747b      	strb	r3, [r7, #17]
 80020cc:	7c7b      	ldrb	r3, [r7, #17]
 80020ce:	2b31      	cmp	r3, #49	; 0x31
 80020d0:	d9c7      	bls.n	8002062 <DrawBitmap+0x182>
				}
			}
		}
	}

	if (selector == SMILEY) //smileyFace
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d136      	bne.n	8002146 <DrawBitmap+0x266>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e030      	b.n	8002140 <DrawBitmap+0x260>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 80020de:	2300      	movs	r3, #0
 80020e0:	73bb      	strb	r3, [r7, #14]
 80020e2:	e027      	b.n	8002134 <DrawBitmap+0x254>
				if (smiley[y][x] != 0b10010000) {
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	491c      	ldr	r1, [pc, #112]	; (800215c <DrawBitmap+0x27c>)
 80020ea:	2032      	movs	r0, #50	; 0x32
 80020ec:	fb00 f202 	mul.w	r2, r0, r2
 80020f0:	440a      	add	r2, r1
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b90      	cmp	r3, #144	; 0x90
 80020f8:	d019      	beq.n	800212e <DrawBitmap+0x24e>
					color = smiley[y][x];
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	7bbb      	ldrb	r3, [r7, #14]
 80020fe:	4917      	ldr	r1, [pc, #92]	; (800215c <DrawBitmap+0x27c>)
 8002100:	2032      	movs	r0, #50	; 0x32
 8002102:	fb00 f202 	mul.w	r2, r0, r2
 8002106:	440a      	add	r2, r1
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + x, yp + y, color);
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	b29a      	uxth	r2, r3
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4413      	add	r3, r2
 8002118:	b298      	uxth	r0, r3
 800211a:	797b      	ldrb	r3, [r7, #5]
 800211c:	b29a      	uxth	r2, r3
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	b29b      	uxth	r3, r3
 8002122:	4413      	add	r3, r2
 8002124:	b29b      	uxth	r3, r3
 8002126:	7afa      	ldrb	r2, [r7, #11]
 8002128:	4619      	mov	r1, r3
 800212a:	f000 f8c7 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 800212e:	7bbb      	ldrb	r3, [r7, #14]
 8002130:	3301      	adds	r3, #1
 8002132:	73bb      	strb	r3, [r7, #14]
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	2b31      	cmp	r3, #49	; 0x31
 8002138:	d9d4      	bls.n	80020e4 <DrawBitmap+0x204>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3301      	adds	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2b31      	cmp	r3, #49	; 0x31
 8002144:	d9cb      	bls.n	80020de <DrawBitmap+0x1fe>

				}
			}
		}
	}
	if (selector == ANGRY) //Anrgy Face
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b06      	cmp	r3, #6
 800214a:	d13a      	bne.n	80021c2 <DrawBitmap+0x2e2>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 800214c:	2300      	movs	r3, #0
 800214e:	737b      	strb	r3, [r7, #13]
 8002150:	e034      	b.n	80021bc <DrawBitmap+0x2dc>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8002152:	2300      	movs	r3, #0
 8002154:	733b      	strb	r3, [r7, #12]
 8002156:	e02b      	b.n	80021b0 <DrawBitmap+0x2d0>
 8002158:	20000078 	.word	0x20000078
 800215c:	20000a3c 	.word	0x20000a3c
				if (angry[y][x] != 0b10010000) {
 8002160:	7b7a      	ldrb	r2, [r7, #13]
 8002162:	7b3b      	ldrb	r3, [r7, #12]
 8002164:	4919      	ldr	r1, [pc, #100]	; (80021cc <DrawBitmap+0x2ec>)
 8002166:	2032      	movs	r0, #50	; 0x32
 8002168:	fb00 f202 	mul.w	r2, r0, r2
 800216c:	440a      	add	r2, r1
 800216e:	4413      	add	r3, r2
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b90      	cmp	r3, #144	; 0x90
 8002174:	d019      	beq.n	80021aa <DrawBitmap+0x2ca>
					color = angry[y][x];
 8002176:	7b7a      	ldrb	r2, [r7, #13]
 8002178:	7b3b      	ldrb	r3, [r7, #12]
 800217a:	4914      	ldr	r1, [pc, #80]	; (80021cc <DrawBitmap+0x2ec>)
 800217c:	2032      	movs	r0, #50	; 0x32
 800217e:	fb00 f202 	mul.w	r2, r0, r2
 8002182:	440a      	add	r2, r1
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + x, yp + y, color);
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	b29a      	uxth	r2, r3
 800218e:	7b3b      	ldrb	r3, [r7, #12]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4413      	add	r3, r2
 8002194:	b298      	uxth	r0, r3
 8002196:	797b      	ldrb	r3, [r7, #5]
 8002198:	b29a      	uxth	r2, r3
 800219a:	7b7b      	ldrb	r3, [r7, #13]
 800219c:	b29b      	uxth	r3, r3
 800219e:	4413      	add	r3, r2
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	7afa      	ldrb	r2, [r7, #11]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f000 f889 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 80021aa:	7b3b      	ldrb	r3, [r7, #12]
 80021ac:	3301      	adds	r3, #1
 80021ae:	733b      	strb	r3, [r7, #12]
 80021b0:	7b3b      	ldrb	r3, [r7, #12]
 80021b2:	2b31      	cmp	r3, #49	; 0x31
 80021b4:	d9d4      	bls.n	8002160 <DrawBitmap+0x280>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 80021b6:	7b7b      	ldrb	r3, [r7, #13]
 80021b8:	3301      	adds	r3, #1
 80021ba:	737b      	strb	r3, [r7, #13]
 80021bc:	7b7b      	ldrb	r3, [r7, #13]
 80021be:	2b31      	cmp	r3, #49	; 0x31
 80021c0:	d9c7      	bls.n	8002152 <DrawBitmap+0x272>

				}
			}
		}
	}
}
 80021c2:	bf00      	nop
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20001400 	.word	0x20001400

080021d0 <UB_VGA_Screen_Init>:
>>>>>>> Feature_Parser2
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
=======
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  VGA.hsync_cnt = 0;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <UB_VGA_Screen_Init+0x84>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <UB_VGA_Screen_Init+0x84>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <UB_VGA_Screen_Init+0x84>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <UB_VGA_Screen_Init+0x88>)
 80021e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ec:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80021ee:	481b      	ldr	r0, [pc, #108]	; (800225c <UB_VGA_Screen_Init+0x8c>)
 80021f0:	f001 fc11 	bl	8003a16 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80021f4:	210c      	movs	r1, #12
 80021f6:	4819      	ldr	r0, [pc, #100]	; (800225c <UB_VGA_Screen_Init+0x8c>)
 80021f8:	f001 fc5c 	bl	8003ab4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80021fc:	2108      	movs	r1, #8
 80021fe:	4817      	ldr	r0, [pc, #92]	; (800225c <UB_VGA_Screen_Init+0x8c>)
 8002200:	f001 fc96 	bl	8003b30 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <UB_VGA_Screen_Init+0x90>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <UB_VGA_Screen_Init+0x90>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002212:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <UB_VGA_Screen_Init+0x90>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <UB_VGA_Screen_Init+0x90>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8002224:	490f      	ldr	r1, [pc, #60]	; (8002264 <UB_VGA_Screen_Init+0x94>)
 8002226:	f240 1341 	movw	r3, #321	; 0x141
 800222a:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <UB_VGA_Screen_Init+0x98>)
 800222c:	480f      	ldr	r0, [pc, #60]	; (800226c <UB_VGA_Screen_Init+0x9c>)
 800222e:	f000 fa9f 	bl	8002770 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8002232:	480e      	ldr	r0, [pc, #56]	; (800226c <UB_VGA_Screen_Init+0x9c>)
 8002234:	f000 f9ee 	bl	8002614 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
<<<<<<< HEAD
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <UB_VGA_Screen_Init+0x9c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <UB_VGA_Screen_Init+0x9c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0210 	orr.w	r2, r2, #16
 8001262:	601a      	str	r2, [r3, #0]
=======
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
>>>>>>> master
  VGA.hsync_cnt = 0;
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <UB_VGA_Screen_Init+0x84>)
 8001592:	2200      	movs	r2, #0
 8001594:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <UB_VGA_Screen_Init+0x84>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <UB_VGA_Screen_Init+0x84>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <UB_VGA_Screen_Init+0x88>)
 80015a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a8:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80015aa:	481b      	ldr	r0, [pc, #108]	; (8001618 <UB_VGA_Screen_Init+0x8c>)
 80015ac:	f001 fec3 	bl	8003336 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80015b0:	210c      	movs	r1, #12
 80015b2:	4819      	ldr	r0, [pc, #100]	; (8001618 <UB_VGA_Screen_Init+0x8c>)
 80015b4:	f001 ff0e 	bl	80033d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80015b8:	2108      	movs	r1, #8
 80015ba:	4817      	ldr	r0, [pc, #92]	; (8001618 <UB_VGA_Screen_Init+0x8c>)
 80015bc:	f001 ff48 	bl	8003450 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <UB_VGA_Screen_Init+0x90>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <UB_VGA_Screen_Init+0x90>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015ce:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <UB_VGA_Screen_Init+0x90>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <UB_VGA_Screen_Init+0x90>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80015e0:	490f      	ldr	r1, [pc, #60]	; (8001620 <UB_VGA_Screen_Init+0x94>)
 80015e2:	f240 1341 	movw	r3, #321	; 0x141
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <UB_VGA_Screen_Init+0x98>)
 80015e8:	480f      	ldr	r0, [pc, #60]	; (8001628 <UB_VGA_Screen_Init+0x9c>)
 80015ea:	f000 fa9f 	bl	8001b2c <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <UB_VGA_Screen_Init+0x9c>)
 80015f0:	f000 f9ee 	bl	80019d0 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
<<<<<<< HEAD
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <UB_VGA_Screen_Init+0x9c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <UB_VGA_Screen_Init+0x9c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0210 	orr.w	r2, r2, #16
 8001602:	601a      	str	r2, [r3, #0]
=======
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <UB_VGA_Screen_Init+0x9c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <UB_VGA_Screen_Init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0210 	orr.w	r2, r2, #16
 8001106:	601a      	str	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <UB_VGA_Screen_Init+0x9c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <UB_VGA_Screen_Init+0x9c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0210 	orr.w	r2, r2, #16
 8002246:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
<<<<<<< HEAD
<<<<<<< HEAD
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <UB_VGA_Screen_Init+0xa0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a01      	ldr	r2, [pc, #4]	; (8001610 <UB_VGA_Screen_Init+0x84>)
 800160a:	6093      	str	r3, [r2, #8]
=======
<<<<<<< HEAD
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <UB_VGA_Screen_Init+0xa0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a01      	ldr	r2, [pc, #4]	; (8001270 <UB_VGA_Screen_Init+0x84>)
 800126a:	6093      	str	r3, [r2, #8]
=======
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <UB_VGA_Screen_Init+0xa0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a01      	ldr	r2, [pc, #4]	; (8002254 <UB_VGA_Screen_Init+0x84>)
 800224e:	6093      	str	r3, [r2, #8]
>>>>>>> Feature_Parser2
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20015070 	.word	0x20015070
 8002258:	40020400 	.word	0x40020400
 800225c:	200022a0 	.word	0x200022a0
 8002260:	20002260 	.word	0x20002260
 8002264:	20002380 	.word	0x20002380
 8002268:	40021015 	.word	0x40021015
 800226c:	200022e0 	.word	0x200022e0
 8002270:	40026488 	.word	0x40026488

<<<<<<< HEAD
08001290 <HAL_Init>:
=======
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <UB_VGA_Screen_Init+0xa0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a01      	ldr	r2, [pc, #4]	; (8001114 <UB_VGA_Screen_Init+0x84>)
 800110e:	6093      	str	r3, [r2, #8]
>>>>>>> master
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20013788 	.word	0x20013788
 8001614:	40020400 	.word	0x40020400
 8001618:	200009b8 	.word	0x200009b8
 800161c:	20000978 	.word	0x20000978
 8001620:	20000a98 	.word	0x20000a98
 8001624:	40021015 	.word	0x40021015
 8001628:	200009f8 	.word	0x200009f8
 800162c:	40026488 	.word	0x40026488

08001630 <UB_VGA_FillScreen>:
=======
08002274 <UB_VGA_FillScreen>:
>>>>>>> Feature_Parser2

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
<<<<<<< HEAD
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800163a:	2300      	movs	r3, #0
 800163c:	81bb      	strh	r3, [r7, #12]
 800163e:	e012      	b.n	8001666 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001640:	2300      	movs	r3, #0
 8001642:	81fb      	strh	r3, [r7, #14]
 8001644:	e008      	b.n	8001658 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	89b9      	ldrh	r1, [r7, #12]
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f813 	bl	8001678 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	3301      	adds	r3, #1
 8001656:	81fb      	strh	r3, [r7, #14]
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800165e:	d3f2      	bcc.n	8001646 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001660:	89bb      	ldrh	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	81bb      	strh	r3, [r7, #12]
 8001666:	89bb      	ldrh	r3, [r7, #12]
 8001668:	2bef      	cmp	r3, #239	; 0xef
 800166a:	d9e9      	bls.n	8001640 <UB_VGA_FillScreen+0x10>
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <UB_VGA_SetPixel>:
=======
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800227e:	2300      	movs	r3, #0
 8002280:	81bb      	strh	r3, [r7, #12]
 8002282:	e012      	b.n	80022aa <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002284:	2300      	movs	r3, #0
 8002286:	81fb      	strh	r3, [r7, #14]
 8002288:	e008      	b.n	800229c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	89b9      	ldrh	r1, [r7, #12]
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f813 	bl	80022bc <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002296:	89fb      	ldrh	r3, [r7, #14]
 8002298:	3301      	adds	r3, #1
 800229a:	81fb      	strh	r3, [r7, #14]
 800229c:	89fb      	ldrh	r3, [r7, #14]
 800229e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80022a2:	d3f2      	bcc.n	800228a <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80022a4:	89bb      	ldrh	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	81bb      	strh	r3, [r7, #12]
 80022aa:	89bb      	ldrh	r3, [r7, #12]
 80022ac:	2bef      	cmp	r3, #239	; 0xef
 80022ae:	d9e9      	bls.n	8002284 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <UB_VGA_SetPixel>:
>>>>>>> Feature_Parser2
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
<<<<<<< HEAD
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
 8001682:	460b      	mov	r3, r1
 8001684:	80bb      	strh	r3, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001690:	d301      	bcc.n	8001696 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	2bef      	cmp	r3, #239	; 0xef
 800169a:	d901      	bls.n	80016a0 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80016a0:	88ba      	ldrh	r2, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	441a      	add	r2, r3
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	4413      	add	r3, r2
 80016b0:	4904      	ldr	r1, [pc, #16]	; (80016c4 <UB_VGA_SetPixel+0x4c>)
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	54ca      	strb	r2, [r1, r3]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000a98 	.word	0x20000a98

<<<<<<< HEAD
080016c8 <HAL_Init>:
=======
080011cc <HAL_Init>:
>>>>>>> master
>>>>>>> master
=======
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
 80022c6:	460b      	mov	r3, r1
 80022c8:	80bb      	strh	r3, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80022d4:	d301      	bcc.n	80022da <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80022da:	88bb      	ldrh	r3, [r7, #4]
 80022dc:	2bef      	cmp	r3, #239	; 0xef
 80022de:	d901      	bls.n	80022e4 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80022e4:	88ba      	ldrh	r2, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	441a      	add	r2, r3
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	4413      	add	r3, r2
 80022f4:	4904      	ldr	r1, [pc, #16]	; (8002308 <UB_VGA_SetPixel+0x4c>)
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	54ca      	strb	r2, [r1, r3]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20002380 	.word	0x20002380

0800230c <HAL_Init>:
>>>>>>> Feature_Parser2
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <HAL_Init+0x40>)
 80016d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d6:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <HAL_Init+0x40>)
 800129a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129e:	6013      	str	r3, [r2, #0]
=======
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_Init+0x40>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011da:	6013      	str	r3, [r2, #0]
>>>>>>> master
>>>>>>> master
=======
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_Init+0x40>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6013      	str	r3, [r2, #0]
>>>>>>> Feature_Parser2
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_Init+0x40>)
 80016de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e2:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_Init+0x40>)
 80012a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012aa:	6013      	str	r3, [r2, #0]
=======
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_Init+0x40>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	6013      	str	r3, [r2, #0]
>>>>>>> master
>>>>>>> master
=======
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_Init+0x40>)
 8002322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002326:	6013      	str	r3, [r2, #0]
>>>>>>> Feature_Parser2
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_Init+0x40>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ee:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_Init+0x40>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	6013      	str	r3, [r2, #0]
=======
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x40>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f2:	6013      	str	r3, [r2, #0]
>>>>>>> master
>>>>>>> master
=======
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_Init+0x40>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6013      	str	r3, [r2, #0]
>>>>>>> Feature_Parser2
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
<<<<<<< HEAD
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 f92b 	bl	800194c <HAL_NVIC_SetPriorityGrouping>
=======
<<<<<<< HEAD
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 f92b 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>
=======
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f92b 	bl	8002590 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> Feature_Parser2

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 f808 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7ff f93c 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00

<<<<<<< HEAD
080012d4 <HAL_InitTick>:
=======
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f92b 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> master

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 f808 	bl	800170c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff fb6a 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00

<<<<<<< HEAD
0800170c <HAL_InitTick>:
=======
08001210 <HAL_InitTick>:
>>>>>>> master
>>>>>>> master
=======
08002350 <HAL_InitTick>:
>>>>>>> Feature_Parser2
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
=======
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x54>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f943 	bl	80025fa <HAL_SYSTICK_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
=======
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
>>>>>>> master
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x54>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x58>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f943 	bl	80019b6 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x4c>
=======
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
>>>>>>> master
>>>>>>> master
=======
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_InitTick+0x4c>
>>>>>>> Feature_Parser2
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
<<<<<<< HEAD
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x4a>
=======
<<<<<<< HEAD
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
=======
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d80a      	bhi.n	800239a <HAL_InitTick+0x4a>
>>>>>>> Feature_Parser2
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800238c:	f000 f90b 	bl	80025a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
<<<<<<< HEAD
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
=======
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
>>>>>>> master
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f000 f90b 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
<<<<<<< HEAD
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x5c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
=======
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
>>>>>>> master
>>>>>>> master
=======
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <HAL_InitTick+0x5c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
>>>>>>> Feature_Parser2
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x4c>
=======
<<<<<<< HEAD
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
=======
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x4c>
>>>>>>> Feature_Parser2
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000074 	.word	0x20000074
 80023a8:	20001dc8 	.word	0x20001dc8
 80023ac:	20001dc4 	.word	0x20001dc4

<<<<<<< HEAD
08001334 <HAL_IncTick>:
=======
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
>>>>>>> master
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000000 	.word	0x20000000
 8001764:	20000008 	.word	0x20000008
 8001768:	20000004 	.word	0x20000004

<<<<<<< HEAD
0800176c <HAL_IncTick>:
=======
08001270 <HAL_IncTick>:
>>>>>>> master
>>>>>>> master
=======
080023b0 <HAL_IncTick>:
>>>>>>> Feature_Parser2
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
=======
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  uwTick += uwTickFreq;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x20>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_IncTick+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_IncTick+0x24>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20001dc8 	.word	0x20001dc8
 80023d4:	2001507c 	.word	0x2001507c

<<<<<<< HEAD
0800135c <HAL_GetTick>:
=======
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
>>>>>>> master
  uwTick += uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000008 	.word	0x20000008
 8001790:	20013794 	.word	0x20013794

<<<<<<< HEAD
08001794 <HAL_GetTick>:
=======
08001298 <HAL_GetTick>:
>>>>>>> master
>>>>>>> master
=======
080023d8 <HAL_GetTick>:
>>>>>>> Feature_Parser2
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
=======
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	2001507c 	.word	0x2001507c

<<<<<<< HEAD
08001374 <__NVIC_SetPriorityGrouping>:
=======
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
>>>>>>> master
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20013794 	.word	0x20013794

<<<<<<< HEAD
080017ac <__NVIC_SetPriorityGrouping>:
=======
080012b0 <__NVIC_SetPriorityGrouping>:
>>>>>>> master
>>>>>>> master
=======
080023f0 <__NVIC_SetPriorityGrouping>:
>>>>>>> Feature_Parser2
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
=======
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60d3      	str	r3, [r2, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
080013bc <__NVIC_GetPriorityGrouping>:
=======
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
>>>>>>> master
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
080017f4 <__NVIC_GetPriorityGrouping>:
=======
080012f8 <__NVIC_GetPriorityGrouping>:
>>>>>>> master
>>>>>>> master
=======
08002438 <__NVIC_GetPriorityGrouping>:
>>>>>>> Feature_Parser2
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
=======
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <__NVIC_GetPriorityGrouping+0x18>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 0307 	and.w	r3, r3, #7
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
080013d8 <__NVIC_EnableIRQ>:
=======
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
>>>>>>> master
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
08001810 <__NVIC_EnableIRQ>:
=======
08001314 <__NVIC_EnableIRQ>:
>>>>>>> master
>>>>>>> master
=======
08002454 <__NVIC_EnableIRQ>:
>>>>>>> Feature_Parser2
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
=======
<<<<<<< HEAD
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
=======
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
>>>>>>> Feature_Parser2
  if ((int32_t)(IRQn) >= 0)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	2b00      	cmp	r3, #0
 8002464:	db0b      	blt.n	800247e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4907      	ldr	r1, [pc, #28]	; (800248c <__NVIC_EnableIRQ+0x38>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2001      	movs	r0, #1
 8002476:	fa00 f202 	lsl.w	r2, r0, r2
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100

<<<<<<< HEAD
08001414 <__NVIC_SetPriority>:
=======
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
>>>>>>> master
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

<<<<<<< HEAD
0800184c <__NVIC_SetPriority>:
=======
08001350 <__NVIC_SetPriority>:
>>>>>>> master
>>>>>>> master
=======
08002490 <__NVIC_SetPriority>:
>>>>>>> Feature_Parser2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
=======
<<<<<<< HEAD
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
=======
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
>>>>>>> Feature_Parser2
  if ((int32_t)(IRQn) >= 0)
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db0a      	blt.n	80024ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
>>>>>>> master
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
<<<<<<< HEAD
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> master
>>>>>>> master
=======
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	490c      	ldr	r1, [pc, #48]	; (80024dc <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Feature_Parser2
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
=======
<<<<<<< HEAD
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
=======
 80024b8:	e00a      	b.n	80024d0 <__NVIC_SetPriority+0x40>
>>>>>>> Feature_Parser2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	440b      	add	r3, r1
 80024ce:	761a      	strb	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
08001468 <NVIC_EncodePriority>:
=======
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
>>>>>>> master
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

<<<<<<< HEAD
080018a0 <NVIC_EncodePriority>:
=======
080013a4 <NVIC_EncodePriority>:
>>>>>>> master
>>>>>>> master
=======
080024e4 <NVIC_EncodePriority>:
>>>>>>> Feature_Parser2
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
=======
<<<<<<< HEAD
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
=======
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
>>>>>>> master
>>>>>>> master
=======
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	61fb      	str	r3, [r7, #28]
>>>>>>> Feature_Parser2
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
<<<<<<< HEAD
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
=======
<<<<<<< HEAD
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
=======
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f1c3 0307 	rsb	r3, r3, #7
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf28      	it	cs
 8002502:	2304      	movcs	r3, #4
 8002504:	61bb      	str	r3, [r7, #24]
>>>>>>> Feature_Parser2
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3304      	adds	r3, #4
 800250a:	2b06      	cmp	r3, #6
 800250c:	d902      	bls.n	8002514 <NVIC_EncodePriority+0x30>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3b03      	subs	r3, #3
 8002512:	e000      	b.n	8002516 <NVIC_EncodePriority+0x32>
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800252c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43d9      	mvns	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	4313      	orrs	r3, r2
         );
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

<<<<<<< HEAD
080014d0 <SysTick_Config>:
=======
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
>>>>>>> master
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

<<<<<<< HEAD
08001908 <SysTick_Config>:
=======
0800140c <SysTick_Config>:
>>>>>>> master
>>>>>>> master
=======
0800254c <SysTick_Config>:
>>>>>>> Feature_Parser2
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
=======
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255c:	d301      	bcc.n	8002562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255e:	2301      	movs	r3, #1
 8002560:	e00f      	b.n	8002582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <SysTick_Config+0x40>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256a:	210f      	movs	r1, #15
 800256c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002570:	f7ff ff8e 	bl	8002490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <SysTick_Config+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <SysTick_Config+0x40>)
 800257c:	2207      	movs	r2, #7
 800257e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	e000e010 	.word	0xe000e010

<<<<<<< HEAD
08001514 <HAL_NVIC_SetPriorityGrouping>:
=======
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
>>>>>>> master
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

<<<<<<< HEAD
0800194c <HAL_NVIC_SetPriorityGrouping>:
=======
08001450 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> master
>>>>>>> master
=======
08002590 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Feature_Parser2
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
=======
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
<<<<<<< HEAD
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
=======
<<<<<<< HEAD
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
=======
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff29 	bl	80023f0 <__NVIC_SetPriorityGrouping>
>>>>>>> Feature_Parser2
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
0800152a <HAL_NVIC_SetPriority>:
=======
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
>>>>>>> master
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001962 <HAL_NVIC_SetPriority>:
=======
08001466 <HAL_NVIC_SetPriority>:
>>>>>>> master
>>>>>>> master
=======
080025a6 <HAL_NVIC_SetPriority>:
>>>>>>> Feature_Parser2
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
<<<<<<< HEAD
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
=======
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
>>>>>>> master
>>>>>>> master
=======
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
<<<<<<< HEAD
 8001974:	f7ff ff3e 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
=======
<<<<<<< HEAD
 800153c:	f7ff ff3e 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
=======
 80025b8:	f7ff ff3e 	bl	8002438 <__NVIC_GetPriorityGrouping>
 80025bc:	6178      	str	r0, [r7, #20]
>>>>>>> Feature_Parser2
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff ff8e 	bl	80024e4 <NVIC_EncodePriority>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5d 	bl	8002490 <__NVIC_SetPriority>
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001562 <HAL_NVIC_EnableIRQ>:
=======
 8001478:	f7ff ff3e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
>>>>>>> master
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
0800199a <HAL_NVIC_EnableIRQ>:
=======
0800149e <HAL_NVIC_EnableIRQ>:
>>>>>>> master
>>>>>>> master
=======
080025de <HAL_NVIC_EnableIRQ>:
>>>>>>> Feature_Parser2
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
=======
<<<<<<< HEAD
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
=======
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
>>>>>>> master
>>>>>>> master
=======
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
>>>>>>> Feature_Parser2
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
<<<<<<< HEAD
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff31 	bl	8001810 <__NVIC_EnableIRQ>
=======
<<<<<<< HEAD
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff31 	bl	80013d8 <__NVIC_EnableIRQ>
=======
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff31 	bl	8002454 <__NVIC_EnableIRQ>
>>>>>>> Feature_Parser2
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
0800157e <HAL_SYSTICK_Config>:
=======
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff31 	bl	8001314 <__NVIC_EnableIRQ>
>>>>>>> master
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080019b6 <HAL_SYSTICK_Config>:
=======
080014ba <HAL_SYSTICK_Config>:
>>>>>>> master
>>>>>>> master
=======
080025fa <HAL_SYSTICK_Config>:
>>>>>>> Feature_Parser2
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
=======
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
   return SysTick_Config(TicksNumb);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffa2 	bl	800254c <SysTick_Config>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

<<<<<<< HEAD
08001598 <HAL_DMA_Init>:
=======
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
>>>>>>> master
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

<<<<<<< HEAD
080019d0 <HAL_DMA_Init>:
=======
080014d4 <HAL_DMA_Init>:
>>>>>>> master
>>>>>>> master
=======
08002614 <HAL_DMA_Init>:
>>>>>>> Feature_Parser2
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
=======
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  uint32_t tmp = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 80015a4:	f7ff feda 	bl	800135c <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]
=======
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
>>>>>>> master
  uint32_t tmp = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 80019dc:	f7ff feda 	bl	8001794 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]
=======
 80014e0:	f7ff feda 	bl	8001298 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]
>>>>>>> master
>>>>>>> master
=======
 8002620:	f7ff feda 	bl	80023d8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]
>>>>>>> Feature_Parser2
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e099      	b.n	8001b20 <HAL_DMA_Init+0x150>
=======
<<<<<<< HEAD
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e099      	b.n	80016e8 <HAL_DMA_Init+0x150>
=======
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e099      	b.n	8001624 <HAL_DMA_Init+0x150>
>>>>>>> master
>>>>>>> master
=======
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e099      	b.n	8002764 <HAL_DMA_Init+0x150>
>>>>>>> Feature_Parser2
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< HEAD
<<<<<<< HEAD
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
<<<<<<< HEAD
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Feature_Parser2

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002650:	e00f      	b.n	8002672 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002652:	f7ff fec1 	bl	80023d8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b05      	cmp	r3, #5
 800265e:	d908      	bls.n	8002672 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e078      	b.n	8002764 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
<<<<<<< HEAD
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1e8      	bne.n	80015d6 <HAL_DMA_Init+0x3e>
=======
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> master

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0c:	e00f      	b.n	8001a2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a0e:	f7ff fec1 	bl	8001794 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d908      	bls.n	8001a2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e078      	b.n	8001b20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
<<<<<<< HEAD
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e8      	bne.n	8001a0e <HAL_DMA_Init+0x3e>
=======
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e8      	bne.n	8001512 <HAL_DMA_Init+0x3e>
>>>>>>> master
>>>>>>> master
=======
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e8      	bne.n	8002652 <HAL_DMA_Init+0x3e>
>>>>>>> Feature_Parser2
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
<<<<<<< HEAD
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <HAL_DMA_Init+0x158>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_DMA_Init+0x158>)
 8001610:	4013      	ands	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
=======
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_DMA_Init+0x158>)
 800154c:	4013      	ands	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
>>>>>>> master
>>>>>>> master
=======
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_DMA_Init+0x158>)
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
<<<<<<< HEAD
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	431a      	orrs	r2, r3
=======
<<<<<<< HEAD
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	431a      	orrs	r2, r3
=======
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	431a      	orrs	r2, r3
>>>>>>> Feature_Parser2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800269e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d107      	bne.n	80026dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
<<<<<<< HEAD
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	4313      	orrs	r3, r2
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4313      	orrs	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
=======
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	431a      	orrs	r2, r3
>>>>>>> master
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d107      	bne.n	8001a98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
<<<<<<< HEAD
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4313      	orrs	r3, r2
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
=======
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	4313      	orrs	r3, r2
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4313      	orrs	r3, r2
 800159a:	617b      	str	r3, [r7, #20]
>>>>>>> master
>>>>>>> master
=======
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4313      	orrs	r3, r2
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
<<<<<<< HEAD
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	601a      	str	r2, [r3, #0]
=======
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0307 	bic.w	r3, r3, #7
 80026f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	2b04      	cmp	r3, #4
 8002704:	d117      	bne.n	8002736 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
<<<<<<< HEAD
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4313      	orrs	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
=======
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	601a      	str	r2, [r3, #0]
>>>>>>> master

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f023 0307 	bic.w	r3, r3, #7
 8001aae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d117      	bne.n	8001af2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
<<<<<<< HEAD
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
=======
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
>>>>>>> master
>>>>>>> master
=======
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
<<<<<<< HEAD
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00e      	beq.n	8001af2 <HAL_DMA_Init+0x122>
=======
<<<<<<< HEAD
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00e      	beq.n	80016ba <HAL_DMA_Init+0x122>
=======
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00e      	beq.n	8002736 <HAL_DMA_Init+0x122>
>>>>>>> Feature_Parser2
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fa91 	bl	8002c40 <DMA_CheckFifoParam>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
<<<<<<< HEAD
 80016b6:	2301      	movs	r3, #1
 80016b8:	e016      	b.n	80016e8 <HAL_DMA_Init+0x150>
=======
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00e      	beq.n	80015f6 <HAL_DMA_Init+0x122>
>>>>>>> master
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fa91 	bl	8001ffc <DMA_CheckFifoParam>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2240      	movs	r2, #64	; 0x40
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
<<<<<<< HEAD
 8001aee:	2301      	movs	r3, #1
 8001af0:	e016      	b.n	8001b20 <HAL_DMA_Init+0x150>
=======
 80015f2:	2301      	movs	r3, #1
 80015f4:	e016      	b.n	8001624 <HAL_DMA_Init+0x150>
>>>>>>> master
>>>>>>> master
=======
 8002732:	2301      	movs	r3, #1
 8002734:	e016      	b.n	8002764 <HAL_DMA_Init+0x150>
>>>>>>> Feature_Parser2
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
<<<<<<< HEAD
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	615a      	str	r2, [r3, #20]
=======
<<<<<<< HEAD
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	615a      	str	r2, [r3, #20]
=======
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	615a      	str	r2, [r3, #20]
>>>>>>> master
>>>>>>> master
=======
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	615a      	str	r2, [r3, #20]
>>>>>>> Feature_Parser2

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
<<<<<<< HEAD
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fa48 	bl	8001f90 <DMA_CalcBaseAndBitshift>
 8001b00:	4603      	mov	r3, r0
 8001b02:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fa48 	bl	8001b58 <DMA_CalcBaseAndBitshift>
 80016c8:	4603      	mov	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]
=======
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa48 	bl	8002bd4 <DMA_CalcBaseAndBitshift>
 8002744:	4603      	mov	r3, r0
 8002746:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	223f      	movs	r2, #63	; 0x3f
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	f010803f 	.word	0xf010803f

<<<<<<< HEAD
080016f4 <HAL_DMA_Start_IT>:
=======
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fa48 	bl	8001a94 <DMA_CalcBaseAndBitshift>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]
>>>>>>> master
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b08:	223f      	movs	r2, #63	; 0x3f
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	f010803f 	.word	0xf010803f

<<<<<<< HEAD
08001b2c <HAL_DMA_Start_IT>:
=======
08001630 <HAL_DMA_Start_IT>:
>>>>>>> master
>>>>>>> master
=======
08002770 <HAL_DMA_Start_IT>:
>>>>>>> Feature_Parser2
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
=======
<<<<<<< HEAD
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
=======
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
>>>>>>> Feature_Parser2
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
<<<<<<< HEAD
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	613b      	str	r3, [r7, #16]
=======
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	603b      	str	r3, [r7, #0]
>>>>>>> master
  HAL_StatusTypeDef status = HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
<<<<<<< HEAD
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	613b      	str	r3, [r7, #16]
=======
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	613b      	str	r3, [r7, #16]
>>>>>>> master
>>>>>>> master
=======
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	613b      	str	r3, [r7, #16]
>>>>>>> Feature_Parser2
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
<<<<<<< HEAD
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_DMA_Start_IT+0x26>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e040      	b.n	8001bd4 <HAL_DMA_Start_IT+0xa8>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
<<<<<<< HEAD
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_DMA_Start_IT+0x26>
 8001716:	2302      	movs	r3, #2
 8001718:	e040      	b.n	800179c <HAL_DMA_Start_IT+0xa8>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_DMA_Start_IT+0x26>
 8002792:	2302      	movs	r3, #2
 8002794:	e040      	b.n	8002818 <HAL_DMA_Start_IT+0xa8>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Feature_Parser2
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d12f      	bne.n	800280a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f9da 	bl	8002b78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	223f      	movs	r2, #63	; 0x3f
 80027ca:	409a      	lsls	r2, r3
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0216 	orr.w	r2, r2, #22
 80027de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
<<<<<<< HEAD
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0208 	orr.w	r2, r2, #8
 800177a:	601a      	str	r2, [r3, #0]
=======
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_DMA_Start_IT+0x26>
 8001652:	2302      	movs	r3, #2
 8001654:	e040      	b.n	80016d8 <HAL_DMA_Start_IT+0xa8>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> master
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d12f      	bne.n	8001bc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f9da 	bl	8001f34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	223f      	movs	r2, #63	; 0x3f
 8001b86:	409a      	lsls	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0216 	orr.w	r2, r2, #22
 8001b9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
<<<<<<< HEAD
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0208 	orr.w	r2, r2, #8
 8001bb2:	601a      	str	r2, [r3, #0]
=======
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0208 	orr.w	r2, r2, #8
 80016b6:	601a      	str	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0208 	orr.w	r2, r2, #8
 80027f6:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
<<<<<<< HEAD
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e005      	b.n	8001bd2 <HAL_DMA_Start_IT+0xa6>
=======
<<<<<<< HEAD
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e005      	b.n	800179a <HAL_DMA_Start_IT+0xa6>
=======
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e005      	b.n	80016d6 <HAL_DMA_Start_IT+0xa6>
>>>>>>> master
>>>>>>> master
=======
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e005      	b.n	8002816 <HAL_DMA_Start_IT+0xa6>
>>>>>>> Feature_Parser2
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
<<<<<<< HEAD
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
<<<<<<< HEAD
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Feature_Parser2
    
    /* Return error status */
    status = HAL_BUSY;
 8002812:	2302      	movs	r3, #2
 8002814:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080017a4 <HAL_DMA_Abort_IT>:
=======
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> master
    
    /* Return error status */
    status = HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001bdc <HAL_DMA_Abort_IT>:
=======
080016e0 <HAL_DMA_Abort_IT>:
>>>>>>> master
>>>>>>> master
=======
08002820 <HAL_DMA_Abort_IT>:
>>>>>>> Feature_Parser2
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
=======
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d004      	beq.n	800283e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
<<<<<<< HEAD
 80017be:	2301      	movs	r3, #1
 80017c0:	e00c      	b.n	80017dc <HAL_DMA_Abort_IT+0x38>
=======
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
>>>>>>> master
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d004      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
<<<<<<< HEAD
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00c      	b.n	8001c14 <HAL_DMA_Abort_IT+0x38>
=======
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00c      	b.n	8001718 <HAL_DMA_Abort_IT+0x38>
>>>>>>> master
>>>>>>> master
=======
 800283a:	2301      	movs	r3, #1
 800283c:	e00c      	b.n	8002858 <HAL_DMA_Abort_IT+0x38>
>>>>>>> Feature_Parser2
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
<<<<<<< HEAD
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
<<<<<<< HEAD
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2205      	movs	r2, #5
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
=======
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2205      	movs	r2, #5
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> Feature_Parser2
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

<<<<<<< HEAD
080017e8 <HAL_DMA_IRQHandler>:
=======
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2205      	movs	r2, #5
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
>>>>>>> master
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

<<<<<<< HEAD
08001c20 <HAL_DMA_IRQHandler>:
=======
08001724 <HAL_DMA_IRQHandler>:
>>>>>>> master
>>>>>>> master
=======
08002864 <HAL_DMA_IRQHandler>:
>>>>>>> Feature_Parser2
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
=======
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002870:	4b8e      	ldr	r3, [pc, #568]	; (8002aac <HAL_DMA_IRQHandler+0x248>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a8e      	ldr	r2, [pc, #568]	; (8002ab0 <HAL_DMA_IRQHandler+0x24c>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a9b      	lsrs	r3, r3, #10
 800287c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	2208      	movs	r2, #8
 8002890:	409a      	lsls	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	2208      	movs	r2, #8
 80028be:	409a      	lsls	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
<<<<<<< HEAD
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
>>>>>>> master
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c2c:	4b8e      	ldr	r3, [pc, #568]	; (8001e68 <HAL_DMA_IRQHandler+0x248>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a8e      	ldr	r2, [pc, #568]	; (8001e6c <HAL_DMA_IRQHandler+0x24c>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0a9b      	lsrs	r3, r3, #10
 8001c38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01a      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0204 	bic.w	r2, r2, #4
 8001c72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2208      	movs	r2, #8
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
<<<<<<< HEAD
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> master
>>>>>>> master
=======
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f043 0201 	orr.w	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Feature_Parser2
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	2201      	movs	r2, #1
 8001c92:	409a      	lsls	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d012      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0xa2>
=======
<<<<<<< HEAD
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	2201      	movs	r2, #1
 800185a:	409a      	lsls	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d012      	beq.n	800188a <HAL_DMA_IRQHandler+0xa2>
=======
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2201      	movs	r2, #1
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_DMA_IRQHandler+0xa2>
>>>>>>> Feature_Parser2
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
<<<<<<< HEAD
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	f043 0202 	orr.w	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	2201      	movs	r2, #1
 8001796:	409a      	lsls	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d012      	beq.n	80017c6 <HAL_DMA_IRQHandler+0xa2>
>>>>>>> master
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	2201      	movs	r2, #1
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
<<<<<<< HEAD
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	f043 0202 	orr.w	r2, r3, #2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f043 0202 	orr.w	r2, r3, #2
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> master
>>>>>>> master
=======
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	f043 0202 	orr.w	r2, r3, #2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Feature_Parser2
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d012      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0xd8>
=======
<<<<<<< HEAD
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	2204      	movs	r2, #4
 8001890:	409a      	lsls	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d012      	beq.n	80018c0 <HAL_DMA_IRQHandler+0xd8>
=======
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2204      	movs	r2, #4
 800290c:	409a      	lsls	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d012      	beq.n	800293c <HAL_DMA_IRQHandler+0xd8>
>>>>>>> Feature_Parser2
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	2204      	movs	r2, #4
 800292a:	409a      	lsls	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
<<<<<<< HEAD
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	f043 0204 	orr.w	r2, r3, #4
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2204      	movs	r2, #4
 80017cc:	409a      	lsls	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d012      	beq.n	80017fc <HAL_DMA_IRQHandler+0xd8>
>>>>>>> master
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00b      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
<<<<<<< HEAD
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	f043 0204 	orr.w	r2, r3, #4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f4:	f043 0204 	orr.w	r2, r3, #4
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> master
>>>>>>> master
=======
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f043 0204 	orr.w	r2, r3, #4
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Feature_Parser2
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d043      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
=======
<<<<<<< HEAD
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2210      	movs	r2, #16
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d043      	beq.n	8001958 <HAL_DMA_IRQHandler+0x170>
=======
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	2210      	movs	r2, #16
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d043      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Feature_Parser2
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03c      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	2210      	movs	r2, #16
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d024      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
 8001916:	e01f      	b.n	8001958 <HAL_DMA_IRQHandler+0x170>
=======
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	2210      	movs	r2, #16
 8001802:	409a      	lsls	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d043      	beq.n	8001894 <HAL_DMA_IRQHandler+0x170>
>>>>>>> master
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03c      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d018      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d108      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d024      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	4798      	blx	r3
 8001d4e:	e01f      	b.n	8001d90 <HAL_DMA_IRQHandler+0x170>
=======
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
 8001852:	e01f      	b.n	8001894 <HAL_DMA_IRQHandler+0x170>
>>>>>>> master
>>>>>>> master
=======
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
 8002992:	e01f      	b.n	80029d4 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Feature_Parser2
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01b      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
 8001d60:	e016      	b.n	8001d90 <HAL_DMA_IRQHandler+0x170>
=======
<<<<<<< HEAD
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01b      	beq.n	8001958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	4798      	blx	r3
 8001928:	e016      	b.n	8001958 <HAL_DMA_IRQHandler+0x170>
=======
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01b      	beq.n	8001894 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
 8001864:	e016      	b.n	8001894 <HAL_DMA_IRQHandler+0x170>
>>>>>>> master
>>>>>>> master
=======
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
 80029a4:	e016      	b.n	80029d4 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Feature_Parser2
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_DMA_IRQHandler+0x160>
=======
<<<<<<< HEAD
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_DMA_IRQHandler+0x160>
=======
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x160>
>>>>>>> Feature_Parser2
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0208 	bic.w	r2, r2, #8
 80029c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
=======
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <HAL_DMA_IRQHandler+0x160>
>>>>>>> master
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0208 	bic.w	r2, r2, #8
 8001d7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
<<<<<<< HEAD
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
=======
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
>>>>>>> master
>>>>>>> master
=======
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
>>>>>>> Feature_Parser2
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2220      	movs	r2, #32
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 808f 	beq.w	8001ec0 <HAL_DMA_IRQHandler+0x2a0>
=======
<<<<<<< HEAD
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	2220      	movs	r2, #32
 800195e:	409a      	lsls	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 808f 	beq.w	8001a88 <HAL_DMA_IRQHandler+0x2a0>
=======
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	2220      	movs	r2, #32
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 808f 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> Feature_Parser2
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8087 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	2220      	movs	r2, #32
 80029fc:	409a      	lsls	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d136      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0216 	bic.w	r2, r2, #22
 8002a1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <HAL_DMA_IRQHandler+0x1da>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
<<<<<<< HEAD
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0208 	bic.w	r2, r2, #8
 80019d0:	601a      	str	r2, [r3, #0]
=======
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001898:	2220      	movs	r2, #32
 800189a:	409a      	lsls	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 808f 	beq.w	80019c4 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> master
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8087 	beq.w	8001ec0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	2220      	movs	r2, #32
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b05      	cmp	r3, #5
 8001dc8:	d136      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0216 	bic.w	r2, r2, #22
 8001dd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <HAL_DMA_IRQHandler+0x1da>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
<<<<<<< HEAD
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0208 	bic.w	r2, r2, #8
 8001e08:	601a      	str	r2, [r3, #0]
=======
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0208 	bic.w	r2, r2, #8
 800190c:	601a      	str	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0208 	bic.w	r2, r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
<<<<<<< HEAD
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	223f      	movs	r2, #63	; 0x3f
 8001e10:	409a      	lsls	r2, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	609a      	str	r2, [r3, #8]
=======
<<<<<<< HEAD
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	223f      	movs	r2, #63	; 0x3f
 80019d8:	409a      	lsls	r2, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	609a      	str	r2, [r3, #8]
=======
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	223f      	movs	r2, #63	; 0x3f
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]
>>>>>>> Feature_Parser2

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d07e      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
        }
        return;
 8002a7a:	e079      	b.n	8002b70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d031      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
<<<<<<< HEAD
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
 8001a2c:	e02c      	b.n	8001a88 <HAL_DMA_IRQHandler+0x2a0>
 8001a2e:	bf00      	nop
 8001a30:	200000bc 	.word	0x200000bc
 8001a34:	1b4e81b5 	.word	0x1b4e81b5
=======
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	223f      	movs	r2, #63	; 0x3f
 8001914:	409a      	lsls	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	609a      	str	r2, [r3, #8]
>>>>>>> master

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d07e      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
        }
        return;
 8001e36:	e079      	b.n	8001f2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01d      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10d      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d031      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
<<<<<<< HEAD
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
 8001e64:	e02c      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x2a0>
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	1b4e81b5 	.word	0x1b4e81b5
=======
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4798      	blx	r3
 8001968:	e02c      	b.n	80019c4 <HAL_DMA_IRQHandler+0x2a0>
 800196a:	bf00      	nop
 800196c:	20000038 	.word	0x20000038
 8001970:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> master
>>>>>>> master
=======
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
 8002aa8:	e02c      	b.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
 8002aaa:	bf00      	nop
 8002aac:	20000074 	.word	0x20000074
 8002ab0:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> Feature_Parser2
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d023      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4798      	blx	r3
 8001e80:	e01e      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x2a0>
=======
<<<<<<< HEAD
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d023      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
 8001a48:	e01e      	b.n	8001a88 <HAL_DMA_IRQHandler+0x2a0>
=======
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001978:	2b00      	cmp	r3, #0
 800197a:	d023      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	4798      	blx	r3
 8001984:	e01e      	b.n	80019c4 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> master
>>>>>>> master
=======
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d023      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
 8002ac4:	e01e      	b.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> Feature_Parser2
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10f      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x290>
=======
<<<<<<< HEAD
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10f      	bne.n	8001a78 <HAL_DMA_IRQHandler+0x290>
=======
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10f      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x290>
>>>>>>> Feature_Parser2
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0210 	bic.w	r2, r2, #16
 8002ae2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
<<<<<<< HEAD
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
=======
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10f      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x290>
>>>>>>> master
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0210 	bic.w	r2, r2, #16
 8001e9e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
<<<<<<< HEAD
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
=======
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
>>>>>>> master
>>>>>>> master
=======
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
>>>>>>> Feature_Parser2
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
<<<<<<< HEAD
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d032      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x30e>
=======
<<<<<<< HEAD
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d032      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x30e>
=======
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d032      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
>>>>>>> Feature_Parser2
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d022      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
=======
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d032      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x30e>
>>>>>>> master
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d022      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
=======
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
<<<<<<< HEAD
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d307      	bcc.n	8001f08 <HAL_DMA_IRQHandler+0x2e8>
=======
<<<<<<< HEAD
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d307      	bcc.n	8001ad0 <HAL_DMA_IRQHandler+0x2e8>
=======
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d307      	bcc.n	8001a0c <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> master
>>>>>>> master
=======
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d307      	bcc.n	8002b4c <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> Feature_Parser2
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
<<<<<<< HEAD
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f2      	bne.n	8001eec <HAL_DMA_IRQHandler+0x2cc>
 8001f06:	e000      	b.n	8001f0a <HAL_DMA_IRQHandler+0x2ea>
=======
<<<<<<< HEAD
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f2      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x2cc>
 8001ace:	e000      	b.n	8001ad2 <HAL_DMA_IRQHandler+0x2ea>
=======
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f2      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x2cc>
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_IRQHandler+0x2ea>
>>>>>>> Feature_Parser2
          break;
 8002b4c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
 8002b6e:	e000      	b.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b70:	bf00      	nop
    }
  }
}
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001afc <DMA_SetConfig>:
=======
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f2      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x2cc>
 8001a0a:	e000      	b.n	8001a0e <HAL_DMA_IRQHandler+0x2ea>
>>>>>>> master
          break;
 8001f08:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
 8001f2a:	e000      	b.n	8001f2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f2c:	bf00      	nop
    }
  }
}
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001f34 <DMA_SetConfig>:
=======
08001a38 <DMA_SetConfig>:
>>>>>>> master
>>>>>>> master
=======
08002b78 <DMA_SetConfig>:
>>>>>>> Feature_Parser2
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
=======
<<<<<<< HEAD
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
=======
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
>>>>>>> Feature_Parser2
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d108      	bne.n	8002bb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
<<<<<<< HEAD
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	60da      	str	r2, [r3, #12]
=======
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
>>>>>>> master
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d108      	bne.n	8001f74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
<<<<<<< HEAD
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	60da      	str	r2, [r3, #12]
=======
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	60da      	str	r2, [r3, #12]
>>>>>>> master
>>>>>>> master
=======
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
>>>>>>> Feature_Parser2
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8001f72:	e007      	b.n	8001f84 <DMA_SetConfig+0x50>
=======
<<<<<<< HEAD
 8001b3a:	e007      	b.n	8001b4c <DMA_SetConfig+0x50>
=======
 8002bb6:	e007      	b.n	8002bc8 <DMA_SetConfig+0x50>
>>>>>>> Feature_Parser2
    hdma->Instance->PAR = SrcAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	60da      	str	r2, [r3, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

<<<<<<< HEAD
08001b58 <DMA_CalcBaseAndBitshift>:
=======
 8001a76:	e007      	b.n	8001a88 <DMA_SetConfig+0x50>
>>>>>>> master
    hdma->Instance->PAR = SrcAddress;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	60da      	str	r2, [r3, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

<<<<<<< HEAD
08001f90 <DMA_CalcBaseAndBitshift>:
=======
08001a94 <DMA_CalcBaseAndBitshift>:
>>>>>>> master
>>>>>>> master
=======
08002bd4 <DMA_CalcBaseAndBitshift>:
>>>>>>> Feature_Parser2
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3b10      	subs	r3, #16
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <DMA_CalcBaseAndBitshift+0x64>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	3b10      	subs	r3, #16
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <DMA_CalcBaseAndBitshift+0x64>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	60fb      	str	r3, [r7, #12]
=======
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3b10      	subs	r3, #16
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <DMA_CalcBaseAndBitshift+0x64>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
>>>>>>> master
>>>>>>> master
=======
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3b10      	subs	r3, #16
 8002be4:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <DMA_CalcBaseAndBitshift+0x64>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
<<<<<<< HEAD
 8001faa:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <DMA_CalcBaseAndBitshift+0x68>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	65da      	str	r2, [r3, #92]	; 0x5c
=======
<<<<<<< HEAD
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	65da      	str	r2, [r3, #92]	; 0x5c
=======
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <DMA_CalcBaseAndBitshift+0x68>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	; 0x5c
>>>>>>> Feature_Parser2
  
  if (stream_number > 3U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d909      	bls.n	8002c16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
<<<<<<< HEAD
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b8e:	f023 0303 	bic.w	r3, r3, #3
 8001b92:	1d1a      	adds	r2, r3, #4
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	659a      	str	r2, [r3, #88]	; 0x58
 8001b98:	e007      	b.n	8001baa <DMA_CalcBaseAndBitshift+0x52>
=======
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <DMA_CalcBaseAndBitshift+0x68>)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	65da      	str	r2, [r3, #92]	; 0x5c
>>>>>>> master
  
  if (stream_number > 3U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d909      	bls.n	8001fd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
<<<<<<< HEAD
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	1d1a      	adds	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd0:	e007      	b.n	8001fe2 <DMA_CalcBaseAndBitshift+0x52>
=======
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aca:	f023 0303 	bic.w	r3, r3, #3
 8001ace:	1d1a      	adds	r2, r3, #4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ad4:	e007      	b.n	8001ae6 <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> master
>>>>>>> master
=======
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	1d1a      	adds	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	659a      	str	r2, [r3, #88]	; 0x58
 8002c14:	e007      	b.n	8002c26 <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> Feature_Parser2
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
<<<<<<< HEAD
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6593      	str	r3, [r2, #88]	; 0x58
=======
<<<<<<< HEAD
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ba2:	f023 0303 	bic.w	r3, r3, #3
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6593      	str	r3, [r2, #88]	; 0x58
=======
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> Feature_Parser2
  }
  
  return hdma->StreamBaseAddress;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	aaaaaaab 	.word	0xaaaaaaab
 8002c3c:	08005bdc 	.word	0x08005bdc

<<<<<<< HEAD
08001bc4 <DMA_CheckFifoParam>:
=======
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ade:	f023 0303 	bic.w	r3, r3, #3
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> master
  }
  
  return hdma->StreamBaseAddress;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	aaaaaaab 	.word	0xaaaaaaab
 8001ff8:	08009ee4 	.word	0x08009ee4

<<<<<<< HEAD
08001ffc <DMA_CheckFifoParam>:
=======
08001b00 <DMA_CheckFifoParam>:
>>>>>>> master
>>>>>>> master
=======
08002c40 <DMA_CheckFifoParam>:
>>>>>>> Feature_Parser2
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
=======
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11f      	bne.n	8002c9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
<<<<<<< HEAD
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d856      	bhi.n	8001c92 <DMA_CheckFifoParam+0xce>
 8001be4:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <DMA_CheckFifoParam+0x28>)
 8001be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bea:	bf00      	nop
 8001bec:	08001bfd 	.word	0x08001bfd
 8001bf0:	08001c0f 	.word	0x08001c0f
 8001bf4:	08001bfd 	.word	0x08001bfd
 8001bf8:	08001c93 	.word	0x08001c93
=======
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
>>>>>>> master
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d11f      	bne.n	8002056 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
<<<<<<< HEAD
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d856      	bhi.n	80020ca <DMA_CheckFifoParam+0xce>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <DMA_CheckFifoParam+0x28>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	08002035 	.word	0x08002035
 8002028:	08002047 	.word	0x08002047
 800202c:	08002035 	.word	0x08002035
 8002030:	080020cb 	.word	0x080020cb
=======
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d856      	bhi.n	8001bce <DMA_CheckFifoParam+0xce>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <DMA_CheckFifoParam+0x28>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b39 	.word	0x08001b39
 8001b2c:	08001b4b 	.word	0x08001b4b
 8001b30:	08001b39 	.word	0x08001b39
 8001b34:	08001bcf 	.word	0x08001bcf
>>>>>>> master
>>>>>>> master
=======
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d856      	bhi.n	8002d0e <DMA_CheckFifoParam+0xce>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <DMA_CheckFifoParam+0x28>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c8b 	.word	0x08002c8b
 8002c70:	08002c79 	.word	0x08002c79
 8002c74:	08002d0f 	.word	0x08002d0f
>>>>>>> Feature_Parser2
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
<<<<<<< HEAD
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d046      	beq.n	80020ce <DMA_CheckFifoParam+0xd2>
=======
<<<<<<< HEAD
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d046      	beq.n	8001c96 <DMA_CheckFifoParam+0xd2>
=======
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d046      	beq.n	8002d12 <DMA_CheckFifoParam+0xd2>
>>>>>>> Feature_Parser2
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e043      	b.n	8002d12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c92:	d140      	bne.n	8002d16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
<<<<<<< HEAD
 8001c1c:	e03d      	b.n	8001c9a <DMA_CheckFifoParam+0xd6>
=======
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d046      	beq.n	8001bd2 <DMA_CheckFifoParam+0xd2>
>>>>>>> master
      {
        status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002044:	e043      	b.n	80020ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800204e:	d140      	bne.n	80020d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      }
      break;
<<<<<<< HEAD
 8002054:	e03d      	b.n	80020d2 <DMA_CheckFifoParam+0xd6>
=======
 8001b58:	e03d      	b.n	8001bd6 <DMA_CheckFifoParam+0xd6>
>>>>>>> master
>>>>>>> master
=======
 8002c98:	e03d      	b.n	8002d16 <DMA_CheckFifoParam+0xd6>
>>>>>>> Feature_Parser2
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
<<<<<<< HEAD
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800205e:	d121      	bne.n	80020a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d837      	bhi.n	80020d6 <DMA_CheckFifoParam+0xda>
 8002066:	a201      	add	r2, pc, #4	; (adr r2, 800206c <DMA_CheckFifoParam+0x70>)
 8002068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206c:	0800207d 	.word	0x0800207d
 8002070:	08002083 	.word	0x08002083
 8002074:	0800207d 	.word	0x0800207d
 8002078:	08002095 	.word	0x08002095
=======
<<<<<<< HEAD
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c26:	d121      	bne.n	8001c6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d837      	bhi.n	8001c9e <DMA_CheckFifoParam+0xda>
 8001c2e:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <DMA_CheckFifoParam+0x70>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001c45 	.word	0x08001c45
 8001c38:	08001c4b 	.word	0x08001c4b
 8001c3c:	08001c45 	.word	0x08001c45
 8001c40:	08001c5d 	.word	0x08001c5d
=======
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b62:	d121      	bne.n	8001ba8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d837      	bhi.n	8001bda <DMA_CheckFifoParam+0xda>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <DMA_CheckFifoParam+0x70>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b87 	.word	0x08001b87
 8001b78:	08001b81 	.word	0x08001b81
 8001b7c:	08001b99 	.word	0x08001b99
>>>>>>> master
>>>>>>> master
=======
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca2:	d121      	bne.n	8002ce8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d837      	bhi.n	8002d1a <DMA_CheckFifoParam+0xda>
 8002caa:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <DMA_CheckFifoParam+0x70>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cc7 	.word	0x08002cc7
 8002cb8:	08002cc1 	.word	0x08002cc1
 8002cbc:	08002cd9 	.word	0x08002cd9
>>>>>>> Feature_Parser2
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
<<<<<<< HEAD
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
=======
<<<<<<< HEAD
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
=======
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
>>>>>>> Feature_Parser2
      break;
 8002cc4:	e030      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d025      	beq.n	8002d1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd6:	e022      	b.n	8002d1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
<<<<<<< HEAD
 8001c6a:	e01c      	b.n	8001ca6 <DMA_CheckFifoParam+0xe2>
=======
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
>>>>>>> master
      break;
 8002080:	e030      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d025      	beq.n	80020da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002092:	e022      	b.n	80020da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800209c:	d11f      	bne.n	80020de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
<<<<<<< HEAD
 80020a2:	e01c      	b.n	80020de <DMA_CheckFifoParam+0xe2>
=======
 8001ba6:	e01c      	b.n	8001be2 <DMA_CheckFifoParam+0xe2>
>>>>>>> master
>>>>>>> master
=======
 8002ce6:	e01c      	b.n	8002d22 <DMA_CheckFifoParam+0xe2>
>>>>>>> Feature_Parser2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
<<<<<<< HEAD
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d903      	bls.n	80020b2 <DMA_CheckFifoParam+0xb6>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d003      	beq.n	80020b8 <DMA_CheckFifoParam+0xbc>
=======
<<<<<<< HEAD
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d903      	bls.n	8001c7a <DMA_CheckFifoParam+0xb6>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d003      	beq.n	8001c80 <DMA_CheckFifoParam+0xbc>
=======
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d903      	bls.n	8001bb6 <DMA_CheckFifoParam+0xb6>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d003      	beq.n	8001bbc <DMA_CheckFifoParam+0xbc>
>>>>>>> master
>>>>>>> master
=======
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d903      	bls.n	8002cf6 <DMA_CheckFifoParam+0xb6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <DMA_CheckFifoParam+0xbc>
>>>>>>> Feature_Parser2
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 80020b0:	e018      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
=======
<<<<<<< HEAD
 8001c78:	e018      	b.n	8001cac <DMA_CheckFifoParam+0xe8>
=======
 8002cf4:	e018      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
>>>>>>> Feature_Parser2
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfa:	e015      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e00b      	b.n	8002d26 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e00a      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e008      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e006      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e004      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e002      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
<<<<<<< HEAD
 8001caa:	bf00      	nop
=======
 8001bb4:	e018      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
>>>>>>> master
      status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
      break;
 80020b6:	e015      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00e      	beq.n	80020e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      break;
 80020c8:	e00b      	b.n	80020e2 <DMA_CheckFifoParam+0xe6>
      break;
 80020ca:	bf00      	nop
 80020cc:	e00a      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
 80020ce:	bf00      	nop
 80020d0:	e008      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
 80020d4:	e006      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
 80020d6:	bf00      	nop
 80020d8:	e004      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
 80020dc:	e002      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <DMA_CheckFifoParam+0xe8>
      break;
<<<<<<< HEAD
 80020e2:	bf00      	nop
=======
 8001be6:	bf00      	nop
>>>>>>> master
>>>>>>> master
=======
 8002d26:	bf00      	nop
>>>>>>> Feature_Parser2
    }
  } 
  
  return status; 
<<<<<<< HEAD
<<<<<<< HEAD
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
=======
<<<<<<< HEAD
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
=======
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
>>>>>>> Feature_Parser2
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

<<<<<<< HEAD
08001cbc <HAL_GPIO_Init>:
=======
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
>>>>>>> master
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop

<<<<<<< HEAD
080020f4 <HAL_GPIO_Init>:
=======
08001bf8 <HAL_GPIO_Init>:
>>>>>>> master
>>>>>>> master
=======
08002d38 <HAL_GPIO_Init>:
>>>>>>> Feature_Parser2
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
=======
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
<<<<<<< HEAD
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
=======
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
>>>>>>> master
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
<<<<<<< HEAD
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
=======
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
>>>>>>> master
>>>>>>> master
=======
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
>>>>>>> Feature_Parser2
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
<<<<<<< HEAD
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e16b      	b.n	80023e8 <HAL_GPIO_Init+0x2f4>
=======
<<<<<<< HEAD
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e16b      	b.n	8001fb0 <HAL_GPIO_Init+0x2f4>
=======
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e16b      	b.n	800302c <HAL_GPIO_Init+0x2f4>
>>>>>>> Feature_Parser2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
<<<<<<< HEAD
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	f040 815a 	bne.w	8001faa <HAL_GPIO_Init+0x2ee>
=======
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e16b      	b.n	8001eec <HAL_GPIO_Init+0x2f4>
>>>>>>> master
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
<<<<<<< HEAD
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	f040 815a 	bne.w	80023e2 <HAL_GPIO_Init+0x2ee>
=======
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 815a 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ee>
>>>>>>> master
>>>>>>> master
=======
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 815a 	bne.w	8003026 <HAL_GPIO_Init+0x2ee>
>>>>>>> Feature_Parser2
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
<<<<<<< HEAD
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00b      	beq.n	800214e <HAL_GPIO_Init+0x5a>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x5a>
=======
<<<<<<< HEAD
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d00b      	beq.n	8001d16 <HAL_GPIO_Init+0x5a>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x5a>
=======
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d00b      	beq.n	8002d92 <HAL_GPIO_Init+0x5a>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x5a>
>>>>>>> Feature_Parser2
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d86:	2b11      	cmp	r3, #17
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b12      	cmp	r3, #18
 8001d14:	d130      	bne.n	8001d78 <HAL_GPIO_Init+0xbc>
=======
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d00b      	beq.n	8001c52 <HAL_GPIO_Init+0x5a>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d007      	beq.n	8001c52 <HAL_GPIO_Init+0x5a>
>>>>>>> master
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002142:	2b11      	cmp	r3, #17
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b12      	cmp	r3, #18
 800214c:	d130      	bne.n	80021b0 <HAL_GPIO_Init+0xbc>
=======
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b12      	cmp	r3, #18
 8001c50:	d130      	bne.n	8001cb4 <HAL_GPIO_Init+0xbc>
>>>>>>> master
>>>>>>> master
=======
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d130      	bne.n	8002df4 <HAL_GPIO_Init+0xbc>
>>>>>>> Feature_Parser2
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
<<<<<<< HEAD
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
=======
<<<<<<< HEAD
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
=======
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
>>>>>>> Feature_Parser2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 0201 	and.w	r2, r3, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
<<<<<<< HEAD
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	605a      	str	r2, [r3, #4]
=======
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
>>>>>>> master
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 0201 	and.w	r2, r3, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
<<<<<<< HEAD
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	605a      	str	r2, [r3, #4]
=======
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	605a      	str	r2, [r3, #4]
>>>>>>> master
>>>>>>> master
=======
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	605a      	str	r2, [r3, #4]
>>>>>>> Feature_Parser2
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
<<<<<<< HEAD
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
=======
<<<<<<< HEAD
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
=======
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	61bb      	str	r3, [r7, #24]
>>>>>>> Feature_Parser2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0xfc>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b12      	cmp	r3, #18
 8001db6:	d123      	bne.n	8001e00 <HAL_GPIO_Init+0x144>
=======
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
>>>>>>> master
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< HEAD
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0xfc>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b12      	cmp	r3, #18
 80021ee:	d123      	bne.n	8002238 <HAL_GPIO_Init+0x144>
=======
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0xfc>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d123      	bne.n	8001d3c <HAL_GPIO_Init+0x144>
>>>>>>> master
>>>>>>> master
=======
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0xfc>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b12      	cmp	r3, #18
 8002e32:	d123      	bne.n	8002e7c <HAL_GPIO_Init+0x144>
>>>>>>> Feature_Parser2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
<<<<<<< HEAD
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fc:	61bb      	str	r3, [r7, #24]
=======
<<<<<<< HEAD
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3208      	adds	r2, #8
 8001dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc4:	61bb      	str	r3, [r7, #24]
=======
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	61bb      	str	r3, [r7, #24]
>>>>>>> Feature_Parser2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
<<<<<<< HEAD
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	08da      	lsrs	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3208      	adds	r2, #8
 8001dfa:	69b9      	ldr	r1, [r7, #24]
 8001dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	08da      	lsrs	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d00:	61bb      	str	r3, [r7, #24]
>>>>>>> master
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
<<<<<<< HEAD
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	69b9      	ldr	r1, [r7, #24]
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> master
>>>>>>> master
=======
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Feature_Parser2
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
<<<<<<< HEAD
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
=======
<<<<<<< HEAD
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61bb      	str	r3, [r7, #24]
=======
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
>>>>>>> Feature_Parser2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0203 	and.w	r2, r3, #3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
<<<<<<< HEAD
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	601a      	str	r2, [r3, #0]
=======
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
>>>>>>> master
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
<<<<<<< HEAD
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	601a      	str	r2, [r3, #0]
=======
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	601a      	str	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
<<<<<<< HEAD
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80b4 	beq.w	80023e2 <HAL_GPIO_Init+0x2ee>
=======
<<<<<<< HEAD
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80b4 	beq.w	8001faa <HAL_GPIO_Init+0x2ee>
=======
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80b4 	beq.w	8003026 <HAL_GPIO_Init+0x2ee>
>>>>>>> Feature_Parser2
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b60      	ldr	r3, [pc, #384]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	4a5f      	ldr	r2, [pc, #380]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eda:	4a5b      	ldr	r2, [pc, #364]	; (8003048 <HAL_GPIO_Init+0x310>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_GPIO_Init+0x314>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02b      	beq.n	8002f5e <HAL_GPIO_Init+0x226>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a51      	ldr	r2, [pc, #324]	; (8003050 <HAL_GPIO_Init+0x318>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d025      	beq.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a50      	ldr	r2, [pc, #320]	; (8003054 <HAL_GPIO_Init+0x31c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <HAL_GPIO_Init+0x21e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d019      	beq.n	8002f52 <HAL_GPIO_Init+0x21a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4e      	ldr	r2, [pc, #312]	; (800305c <HAL_GPIO_Init+0x324>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_GPIO_Init+0x216>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4d      	ldr	r2, [pc, #308]	; (8003060 <HAL_GPIO_Init+0x328>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4c      	ldr	r2, [pc, #304]	; (8003064 <HAL_GPIO_Init+0x32c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x20e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4b      	ldr	r2, [pc, #300]	; (8003068 <HAL_GPIO_Init+0x330>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_GPIO_Init+0x20a>
 8002f3e:	2307      	movs	r3, #7
 8002f40:	e00e      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f42:	2308      	movs	r3, #8
 8002f44:	e00c      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f46:	2306      	movs	r3, #6
 8002f48:	e00a      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	e008      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f4e:	2304      	movs	r3, #4
 8002f50:	e006      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e004      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f002 0203 	and.w	r2, r2, #3
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	4093      	lsls	r3, r2
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f70:	4935      	ldr	r1, [pc, #212]	; (8003048 <HAL_GPIO_Init+0x310>)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	3302      	adds	r3, #2
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_GPIO_Init+0x334>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa2:	4a32      	ldr	r2, [pc, #200]	; (800306c <HAL_GPIO_Init+0x334>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fa8:	4b30      	ldr	r3, [pc, #192]	; (800306c <HAL_GPIO_Init+0x334>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fcc:	4a27      	ldr	r2, [pc, #156]	; (800306c <HAL_GPIO_Init+0x334>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_GPIO_Init+0x334>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_GPIO_Init+0x334>)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_GPIO_Init+0x334>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003020:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_GPIO_Init+0x334>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3301      	adds	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	f67f ae90 	bls.w	8001cd8 <HAL_GPIO_Init+0x1c>
=======
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80b4 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ee>
>>>>>>> master
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b60      	ldr	r3, [pc, #384]	; (8002400 <HAL_GPIO_Init+0x30c>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4a5f      	ldr	r2, [pc, #380]	; (8002400 <HAL_GPIO_Init+0x30c>)
 8002284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	4b5d      	ldr	r3, [pc, #372]	; (8002400 <HAL_GPIO_Init+0x30c>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002296:	4a5b      	ldr	r2, [pc, #364]	; (8002404 <HAL_GPIO_Init+0x310>)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a52      	ldr	r2, [pc, #328]	; (8002408 <HAL_GPIO_Init+0x314>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02b      	beq.n	800231a <HAL_GPIO_Init+0x226>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a51      	ldr	r2, [pc, #324]	; (800240c <HAL_GPIO_Init+0x318>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d025      	beq.n	8002316 <HAL_GPIO_Init+0x222>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a50      	ldr	r2, [pc, #320]	; (8002410 <HAL_GPIO_Init+0x31c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <HAL_GPIO_Init+0x21e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4f      	ldr	r2, [pc, #316]	; (8002414 <HAL_GPIO_Init+0x320>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x21a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4e      	ldr	r2, [pc, #312]	; (8002418 <HAL_GPIO_Init+0x324>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x216>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4d      	ldr	r2, [pc, #308]	; (800241c <HAL_GPIO_Init+0x328>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x212>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4c      	ldr	r2, [pc, #304]	; (8002420 <HAL_GPIO_Init+0x32c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x20e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4b      	ldr	r2, [pc, #300]	; (8002424 <HAL_GPIO_Init+0x330>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x20a>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e00e      	b.n	800231c <HAL_GPIO_Init+0x228>
 80022fe:	2308      	movs	r3, #8
 8002300:	e00c      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002302:	2306      	movs	r3, #6
 8002304:	e00a      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002306:	2305      	movs	r3, #5
 8002308:	e008      	b.n	800231c <HAL_GPIO_Init+0x228>
 800230a:	2304      	movs	r3, #4
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x228>
 800230e:	2303      	movs	r3, #3
 8002310:	e004      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002312:	2302      	movs	r3, #2
 8002314:	e002      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_GPIO_Init+0x228>
 800231a:	2300      	movs	r3, #0
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	f002 0203 	and.w	r2, r2, #3
 8002322:	0092      	lsls	r2, r2, #2
 8002324:	4093      	lsls	r3, r2
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800232c:	4935      	ldr	r1, [pc, #212]	; (8002404 <HAL_GPIO_Init+0x310>)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	3302      	adds	r3, #2
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_GPIO_Init+0x334>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235e:	4a32      	ldr	r2, [pc, #200]	; (8002428 <HAL_GPIO_Init+0x334>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_GPIO_Init+0x334>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <HAL_GPIO_Init+0x334>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_GPIO_Init+0x334>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b2:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_GPIO_Init+0x334>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_GPIO_Init+0x334>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <HAL_GPIO_Init+0x334>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3301      	adds	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b0f      	cmp	r3, #15
 80023ec:	f67f ae90 	bls.w	8002110 <HAL_GPIO_Init+0x1c>
=======
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f ae90 	bls.w	8001c14 <HAL_GPIO_Init+0x1c>
>>>>>>> master
>>>>>>> master
=======
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3301      	adds	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	f67f ae90 	bls.w	8002d54 <HAL_GPIO_Init+0x1c>
>>>>>>> Feature_Parser2
      }
    }
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	40013800 	.word	0x40013800
 8002408:	40020000 	.word	0x40020000
 800240c:	40020400 	.word	0x40020400
 8002410:	40020800 	.word	0x40020800
 8002414:	40020c00 	.word	0x40020c00
 8002418:	40021000 	.word	0x40021000
 800241c:	40021400 	.word	0x40021400
 8002420:	40021800 	.word	0x40021800
 8002424:	40021c00 	.word	0x40021c00
 8002428:	40013c00 	.word	0x40013c00

0800242c <HAL_GPIO_WritePin>:
=======
<<<<<<< HEAD
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020800 	.word	0x40020800
 8001fdc:	40020c00 	.word	0x40020c00
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40021400 	.word	0x40021400
 8001fe8:	40021800 	.word	0x40021800
 8001fec:	40021c00 	.word	0x40021c00
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_WritePin>:
=======
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40021400 	.word	0x40021400
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40021c00 	.word	0x40021c00
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_WritePin>:
>>>>>>> master
>>>>>>> master
=======
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	40013800 	.word	0x40013800
 800304c:	40020000 	.word	0x40020000
 8003050:	40020400 	.word	0x40020400
 8003054:	40020800 	.word	0x40020800
 8003058:	40020c00 	.word	0x40020c00
 800305c:	40021000 	.word	0x40021000
 8003060:	40021400 	.word	0x40021400
 8003064:	40021800 	.word	0x40021800
 8003068:	40021c00 	.word	0x40021c00
 800306c:	40013c00 	.word	0x40013c00

08003070 <HAL_GPIO_WritePin>:
>>>>>>> Feature_Parser2
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
=======
<<<<<<< HEAD
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
 8002000:	4613      	mov	r3, r2
 8002002:	707b      	strb	r3, [r7, #1]
=======
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
>>>>>>> master
>>>>>>> master
=======
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
 800307c:	4613      	mov	r3, r2
 800307e:	707b      	strb	r3, [r7, #1]
>>>>>>> Feature_Parser2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
=======
<<<<<<< HEAD
 8002004:	787b      	ldrb	r3, [r7, #1]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	619a      	str	r2, [r3, #24]
=======
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
>>>>>>> master
>>>>>>> master
=======
 8003080:	787b      	ldrb	r3, [r7, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003086:	887a      	ldrh	r2, [r7, #2]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]
>>>>>>> Feature_Parser2
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
=======
<<<<<<< HEAD
 8002010:	e003      	b.n	800201a <HAL_GPIO_WritePin+0x26>
=======
 800308c:	e003      	b.n	8003096 <HAL_GPIO_WritePin+0x26>
>>>>>>> Feature_Parser2
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	619a      	str	r2, [r3, #24]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

<<<<<<< HEAD
08002028 <HAL_RCC_OscConfig>:
=======
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
>>>>>>> master
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

<<<<<<< HEAD
08002460 <HAL_RCC_OscConfig>:
=======
08001f64 <HAL_RCC_OscConfig>:
>>>>>>> master
>>>>>>> master
=======
080030a4 <HAL_RCC_OscConfig>:
>>>>>>> Feature_Parser2
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
=======
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e25e      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
=======
<<<<<<< HEAD
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e25e      	b.n	80024f8 <HAL_RCC_OscConfig+0x4d0>
=======
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e25e      	b.n	8002434 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> master
>>>>>>> master
=======
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e25e      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> Feature_Parser2
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
<<<<<<< HEAD
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d075      	beq.n	800256a <HAL_RCC_OscConfig+0x10a>
=======
<<<<<<< HEAD
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d075      	beq.n	8002132 <HAL_RCC_OscConfig+0x10a>
=======
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d075      	beq.n	800206e <HAL_RCC_OscConfig+0x10a>
>>>>>>> master
>>>>>>> master
=======
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d075      	beq.n	80031ae <HAL_RCC_OscConfig+0x10a>
>>>>>>> Feature_Parser2
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
<<<<<<< HEAD
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d00c      	beq.n	80024a4 <HAL_RCC_OscConfig+0x44>
=======
<<<<<<< HEAD
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d00c      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
=======
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x44>
>>>>>>> Feature_Parser2
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b82      	ldr	r3, [pc, #520]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b7e      	ldr	r3, [pc, #504]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05b      	beq.n	80031ac <HAL_RCC_OscConfig+0x108>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d157      	bne.n	80031ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8002080:	2301      	movs	r3, #1
 8002082:	e239      	b.n	80024f8 <HAL_RCC_OscConfig+0x4d0>
=======
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x44>
>>>>>>> master
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248a:	4b85      	ldr	r3, [pc, #532]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002492:	2b08      	cmp	r3, #8
 8002494:	d112      	bne.n	80024bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002496:	4b82      	ldr	r3, [pc, #520]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a2:	d10b      	bne.n	80024bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	4b7e      	ldr	r3, [pc, #504]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d05b      	beq.n	8002568 <HAL_RCC_OscConfig+0x108>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d157      	bne.n	8002568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80024b8:	2301      	movs	r3, #1
 80024ba:	e239      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
=======
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e239      	b.n	8002434 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> master
>>>>>>> master
=======
 80030fc:	2301      	movs	r3, #1
 80030fe:	e239      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> Feature_Parser2
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
<<<<<<< HEAD
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d106      	bne.n	80024d4 <HAL_RCC_OscConfig+0x74>
 80024c6:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a75      	ldr	r2, [pc, #468]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e01d      	b.n	8002510 <HAL_RCC_OscConfig+0xb0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x98>
 80024de:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6f      	ldr	r2, [pc, #444]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6c      	ldr	r2, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0xb0>
 80024f8:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a68      	ldr	r2, [pc, #416]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a65      	ldr	r2, [pc, #404]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x74>
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b70      	ldr	r3, [pc, #448]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6f      	ldr	r2, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6c      	ldr	r2, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 80020c0:	4b69      	ldr	r3, [pc, #420]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a68      	ldr	r2, [pc, #416]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]
=======
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x74>
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x98>
 8003122:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6f      	ldr	r2, [pc, #444]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6c      	ldr	r2, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 800313c:	4b69      	ldr	r3, [pc, #420]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a65      	ldr	r2, [pc, #404]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]
>>>>>>> Feature_Parser2

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7ff f93c 	bl	80023d8 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7ff f938 	bl	80023d8 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1fe      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 80020fa:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xc0>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
=======
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d106      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x74>
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xb0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x98>
 8001fe2:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a6f      	ldr	r2, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6c      	ldr	r2, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xb0>
 8001ffc:	4b69      	ldr	r3, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a68      	ldr	r2, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]
>>>>>>> master

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d013      	beq.n	8002540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff f93c 	bl	8001794 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff f938 	bl	8001794 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1fe      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 8002532:	4b5b      	ldr	r3, [pc, #364]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0xc0>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x10a>
=======
 8002036:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xc0>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x10a>
>>>>>>> master
>>>>>>> master
=======
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xc0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
>>>>>>> Feature_Parser2
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
<<<<<<< HEAD
 8002540:	f7ff f928 	bl	8001794 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]
=======
<<<<<<< HEAD
 8002108:	f7ff f928 	bl	800135c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]
=======
 8003184:	f7ff f928 	bl	80023d8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]
>>>>>>> Feature_Parser2

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7ff f924 	bl	80023d8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1ea      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0xe8>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8002130:	bf00      	nop
=======
 8002044:	f7ff f928 	bl	8001298 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]
>>>>>>> master

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002548:	f7ff f924 	bl	8001794 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e1ea      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	4b51      	ldr	r3, [pc, #324]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0xe8>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8002568:	bf00      	nop
=======
 800206c:	bf00      	nop
>>>>>>> master
>>>>>>> master
=======
 80031ac:	bf00      	nop
>>>>>>> Feature_Parser2
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
<<<<<<< HEAD
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d063      	beq.n	800263e <HAL_RCC_OscConfig+0x1de>
=======
<<<<<<< HEAD
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_OscConfig+0x1de>
=======
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d063      	beq.n	8002142 <HAL_RCC_OscConfig+0x1de>
>>>>>>> master
>>>>>>> master
=======
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Feature_Parser2
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
<<<<<<< HEAD
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_RCC_OscConfig+0x13a>
=======
<<<<<<< HEAD
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x13a>
=======
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x13a>
>>>>>>> Feature_Parser2
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b44      	ldr	r3, [pc, #272]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8002176:	2301      	movs	r3, #1
 8002178:	e1be      	b.n	80024f8 <HAL_RCC_OscConfig+0x4d0>
=======
 800207a:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RCC_OscConfig+0x13a>
>>>>>>> master
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800258a:	2b08      	cmp	r3, #8
 800258c:	d11c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258e:	4b44      	ldr	r3, [pc, #272]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x152>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80025ae:	2301      	movs	r3, #1
 80025b0:	e1be      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
=======
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1be      	b.n	8002434 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> master
>>>>>>> master
=======
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1be      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> Feature_Parser2
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
<<<<<<< HEAD
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	e03a      	b.n	800263e <HAL_RCC_OscConfig+0x1de>
=======
<<<<<<< HEAD
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4937      	ldr	r1, [pc, #220]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e03a      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
=======
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4937      	ldr	r1, [pc, #220]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e03a      	b.n	8002142 <HAL_RCC_OscConfig+0x1de>
>>>>>>> master
>>>>>>> master
=======
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4937      	ldr	r1, [pc, #220]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Feature_Parser2
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
<<<<<<< HEAD
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_OscConfig+0x1b2>
=======
<<<<<<< HEAD
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_OscConfig+0x1b2>
=======
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
>>>>>>> Feature_Parser2
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7ff f8dd 	bl	80023d8 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003222:	f7ff f8d9 	bl	80023d8 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e19f      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17e>
=======
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_OscConfig+0x1b2>
>>>>>>> master
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d0:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_OscConfig+0x244>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7ff f8dd 	bl	8001794 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025de:	f7ff f8d9 	bl	8001794 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e19f      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x17e>
=======
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x17e>
>>>>>>> master
>>>>>>> master
=======
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x17e>
>>>>>>> Feature_Parser2
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
<<<<<<< HEAD
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4925      	ldr	r1, [pc, #148]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x1de>
=======
<<<<<<< HEAD
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4925      	ldr	r1, [pc, #148]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
=======
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4925      	ldr	r1, [pc, #148]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x1de>
>>>>>>> master
>>>>>>> master
=======
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4925      	ldr	r1, [pc, #148]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Feature_Parser2
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x244>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_OscConfig+0x244>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
=======
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7ff f8bc 	bl	80023d8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003264:	f7ff f8b8 	bl	80023d8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e17e      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1c0>
=======
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_OscConfig+0x244>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
>>>>>>> master

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff f8bc 	bl	8001794 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002620:	f7ff f8b8 	bl	8001794 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e17e      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x1c0>
=======
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> master
>>>>>>> master
=======
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> Feature_Parser2
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
<<<<<<< HEAD
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d036      	beq.n	80026b8 <HAL_RCC_OscConfig+0x258>
=======
<<<<<<< HEAD
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d036      	beq.n	8002280 <HAL_RCC_OscConfig+0x258>
=======
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d036      	beq.n	80021bc <HAL_RCC_OscConfig+0x258>
>>>>>>> master
>>>>>>> master
=======
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d036      	beq.n	80032fc <HAL_RCC_OscConfig+0x258>
>>>>>>> Feature_Parser2
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
<<<<<<< HEAD
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <HAL_RCC_OscConfig+0x220>
=======
<<<<<<< HEAD
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCC_OscConfig+0x220>
=======
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_RCC_OscConfig+0x220>
>>>>>>> Feature_Parser2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7ff f89c 	bl	80023d8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a4:	f7ff f898 	bl	80023d8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e15e      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_OscConfig+0x240>)
 800223c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x200>
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x258>
=======
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d016      	beq.n	8002184 <HAL_RCC_OscConfig+0x220>
>>>>>>> master
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_RCC_OscConfig+0x248>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7ff f89c 	bl	8001794 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002660:	f7ff f898 	bl	8001794 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e15e      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x200>
 800267e:	e01b      	b.n	80026b8 <HAL_RCC_OscConfig+0x258>
=======
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x200>
 8002182:	e01b      	b.n	80021bc <HAL_RCC_OscConfig+0x258>
>>>>>>> master
>>>>>>> master
=======
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x200>
 80032c2:	e01b      	b.n	80032fc <HAL_RCC_OscConfig+0x258>
>>>>>>> Feature_Parser2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_OscConfig+0x248>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x248>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
=======
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7ff f885 	bl	80023d8 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e00e      	b.n	80032f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d2:	f7ff f881 	bl	80023d8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d907      	bls.n	80032f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e147      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 8002274:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ea      	bne.n	8002256 <HAL_RCC_OscConfig+0x22e>
=======
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_OscConfig+0x248>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
>>>>>>> master

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7ff f885 	bl	8001794 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	e00e      	b.n	80026ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268e:	f7ff f881 	bl	8001794 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d907      	bls.n	80026ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e147      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	42470000 	.word	0x42470000
 80026a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 80026ac:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ea      	bne.n	800268e <HAL_RCC_OscConfig+0x22e>
=======
 80021b0:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1ea      	bne.n	8002192 <HAL_RCC_OscConfig+0x22e>
>>>>>>> master
>>>>>>> master
=======
 80032f0:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ea      	bne.n	80032d2 <HAL_RCC_OscConfig+0x22e>
>>>>>>> Feature_Parser2
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
<<<<<<< HEAD
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8097 	beq.w	80027f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]
=======
<<<<<<< HEAD
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8097 	beq.w	80023bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]
=======
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8097 	beq.w	80022f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]
>>>>>>> master
>>>>>>> master
=======
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8097 	beq.w	8003438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
>>>>>>> Feature_Parser2
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
<<<<<<< HEAD
 80026ca:	4b81      	ldr	r3, [pc, #516]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10f      	bne.n	80026f6 <HAL_RCC_OscConfig+0x296>
=======
<<<<<<< HEAD
 8002292:	4b81      	ldr	r3, [pc, #516]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_RCC_OscConfig+0x296>
=======
 800330e:	4b81      	ldr	r3, [pc, #516]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x296>
>>>>>>> Feature_Parser2
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b7d      	ldr	r3, [pc, #500]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a7c      	ldr	r2, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b77      	ldr	r3, [pc, #476]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b74      	ldr	r3, [pc, #464]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7ff f841 	bl	80023d8 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7ff f83d 	bl	80023d8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e103      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x474>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x2b6>
=======
 80021ce:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <HAL_RCC_OscConfig+0x296>
>>>>>>> master
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	4b7d      	ldr	r3, [pc, #500]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a7c      	ldr	r2, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b7a      	ldr	r3, [pc, #488]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	4b77      	ldr	r3, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x474>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d118      	bne.n	8002734 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002702:	4b74      	ldr	r3, [pc, #464]	; (80028d4 <HAL_RCC_OscConfig+0x474>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a73      	ldr	r2, [pc, #460]	; (80028d4 <HAL_RCC_OscConfig+0x474>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270e:	f7ff f841 	bl	8001794 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002716:	f7ff f83d 	bl	8001794 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e103      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 8002728:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x474>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x2b6>
=======
 800222c:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_OscConfig+0x474>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x2b6>
>>>>>>> master
>>>>>>> master
=======
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2b6>
>>>>>>> Feature_Parser2
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
<<<<<<< HEAD
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x2ea>
 800273c:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a63      	ldr	r2, [pc, #396]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	e01c      	b.n	8002784 <HAL_RCC_OscConfig+0x324>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b05      	cmp	r3, #5
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x30c>
 8002752:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a5e      	ldr	r2, [pc, #376]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002758:	f043 0304 	orr.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a5b      	ldr	r2, [pc, #364]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0x324>
 800276c:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a57      	ldr	r2, [pc, #348]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
 8002778:	4b55      	ldr	r3, [pc, #340]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a54      	ldr	r2, [pc, #336]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800277e:	f023 0304 	bic.w	r3, r3, #4
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
=======
<<<<<<< HEAD
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x2ea>
 8002304:	4b64      	ldr	r3, [pc, #400]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x30c>
 800231a:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a5e      	ldr	r2, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002334:	4b58      	ldr	r3, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a57      	ldr	r2, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	4b55      	ldr	r3, [pc, #340]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
=======
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x2ea>
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x30c>
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5e      	ldr	r2, [pc, #376]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a5b      	ldr	r2, [pc, #364]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 80033b0:	4b58      	ldr	r3, [pc, #352]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a57      	ldr	r2, [pc, #348]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b55      	ldr	r3, [pc, #340]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
>>>>>>> Feature_Parser2
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7ff f802 	bl	80023d8 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe fffe 	bl	80023d8 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0c2      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ee      	beq.n	800235c <HAL_RCC_OscConfig+0x334>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x382>
=======
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x2ea>
 8002240:	4b64      	ldr	r3, [pc, #400]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	4a63      	ldr	r2, [pc, #396]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	; 0x70
 800224c:	e01c      	b.n	8002288 <HAL_RCC_OscConfig+0x324>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x30c>
 8002256:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a5e      	ldr	r2, [pc, #376]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
 8002262:	4b5c      	ldr	r3, [pc, #368]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a5b      	ldr	r2, [pc, #364]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0x324>
 8002270:	4b58      	ldr	r3, [pc, #352]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a57      	ldr	r2, [pc, #348]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
 800227c:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a54      	ldr	r2, [pc, #336]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002282:	f023 0304 	bic.w	r3, r3, #4
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
>>>>>>> master
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d015      	beq.n	80027b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7ff f802 	bl	8001794 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fffe 	bl	8001794 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0c2      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 80027aa:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ee      	beq.n	8002794 <HAL_RCC_OscConfig+0x334>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x382>
=======
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0ee      	beq.n	8002298 <HAL_RCC_OscConfig+0x334>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x382>
>>>>>>> master
>>>>>>> master
=======
 80033ee:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ee      	beq.n	80033d8 <HAL_RCC_OscConfig+0x334>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x382>
>>>>>>> Feature_Parser2
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
<<<<<<< HEAD
 80027b8:	f7fe ffec 	bl	8001794 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]
=======
<<<<<<< HEAD
 8002380:	f7fe ffec 	bl	800135c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]
=======
 80033fc:	f7fe ffec 	bl	80023d8 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]
>>>>>>> Feature_Parser2

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe ffe8 	bl	80023d8 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0ac      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ee      	bne.n	8002388 <HAL_RCC_OscConfig+0x360>
=======
 80022bc:	f7fe ffec 	bl	8001298 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]
>>>>>>> master

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c0:	f7fe ffe8 	bl	8001794 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e0ac      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 80027d6:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1ee      	bne.n	80027c0 <HAL_RCC_OscConfig+0x360>
=======
 80022da:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1ee      	bne.n	80022c4 <HAL_RCC_OscConfig+0x360>
>>>>>>> master
>>>>>>> master
=======
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_OscConfig+0x360>
>>>>>>> Feature_Parser2
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
<<<<<<< HEAD
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d105      	bne.n	80027f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e8:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	4a38      	ldr	r2, [pc, #224]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80027ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6413      	str	r3, [r2, #64]	; 0x40
=======
<<<<<<< HEAD
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	4a38      	ldr	r2, [pc, #224]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6413      	str	r3, [r2, #64]	; 0x40
=======
 80022e6:	7dfb      	ldrb	r3, [r7, #23]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a38      	ldr	r2, [pc, #224]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> master
>>>>>>> master
=======
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b39      	ldr	r3, [pc, #228]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	4a38      	ldr	r2, [pc, #224]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Feature_Parser2
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
<<<<<<< HEAD
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8098 	beq.w	800292e <HAL_RCC_OscConfig+0x4ce>
=======
<<<<<<< HEAD
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8098 	beq.w	80024f6 <HAL_RCC_OscConfig+0x4ce>
=======
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8098 	beq.w	8003572 <HAL_RCC_OscConfig+0x4ce>
>>>>>>> Feature_Parser2
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d05c      	beq.n	8003508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
<<<<<<< HEAD
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d141      	bne.n	800245e <HAL_RCC_OscConfig+0x436>
=======
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8098 	beq.w	8002432 <HAL_RCC_OscConfig+0x4ce>
>>>>>>> master
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fe:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b08      	cmp	r3, #8
 8002808:	d05c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
<<<<<<< HEAD
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d141      	bne.n	8002896 <HAL_RCC_OscConfig+0x436>
=======
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d141      	bne.n	800239a <HAL_RCC_OscConfig+0x436>
>>>>>>> master
>>>>>>> master
=======
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d141      	bne.n	80034da <HAL_RCC_OscConfig+0x436>
>>>>>>> Feature_Parser2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <HAL_RCC_OscConfig+0x478>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
=======
 8003456:	4b31      	ldr	r3, [pc, #196]	; (800351c <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe ffbc 	bl	80023d8 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe ffb8 	bl	80023d8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e07e      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 80023fa:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
=======
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCC_OscConfig+0x478>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
>>>>>>> master

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7fe ffbc 	bl	8001794 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe ffb8 	bl	8001794 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e07e      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x3c0>
=======
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> master
>>>>>>> master
=======
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Feature_Parser2
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
<<<<<<< HEAD
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	491b      	ldr	r1, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
=======
<<<<<<< HEAD
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
=======
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	019b      	lsls	r3, r3, #6
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	3b01      	subs	r3, #1
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	491b      	ldr	r1, [pc, #108]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
>>>>>>> master
>>>>>>> master
=======
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	491b      	ldr	r1, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
>>>>>>> Feature_Parser2
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_RCC_OscConfig+0x478>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]
=======
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fe ff91 	bl	80023d8 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fe ff8d 	bl	80023d8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e053      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x416>
 800245c:	e04b      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ce>
=======
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_RCC_OscConfig+0x478>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
>>>>>>> master

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe ff91 	bl	8001794 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe ff8d 	bl	8001794 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e053      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x416>
 8002894:	e04b      	b.n	800292e <HAL_RCC_OscConfig+0x4ce>
=======
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x416>
 8002398:	e04b      	b.n	8002432 <HAL_RCC_OscConfig+0x4ce>
>>>>>>> master
>>>>>>> master
=======
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x416>
 80034d8:	e04b      	b.n	8003572 <HAL_RCC_OscConfig+0x4ce>
>>>>>>> Feature_Parser2
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_RCC_OscConfig+0x478>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
=======
<<<<<<< HEAD
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
=======
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe ff7a 	bl	80023d8 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe ff76 	bl	80023d8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e03c      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x470>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
 800248a:	e034      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ce>
=======
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_RCC_OscConfig+0x478>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
>>>>>>> master

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe ff7a 	bl	8001794 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe ff76 	bl	8001794 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e03c      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x444>
 80028c2:	e034      	b.n	800292e <HAL_RCC_OscConfig+0x4ce>
=======
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x444>
 80023c6:	e034      	b.n	8002432 <HAL_RCC_OscConfig+0x4ce>
>>>>>>> master
>>>>>>> master
=======
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x444>
 8003506:	e034      	b.n	8003572 <HAL_RCC_OscConfig+0x4ce>
>>>>>>> Feature_Parser2
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
<<<<<<< HEAD
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e02f      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40007000 	.word	0x40007000
 80028d8:	42470060 	.word	0x42470060
=======
<<<<<<< HEAD
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e02f      	b.n	80024f8 <HAL_RCC_OscConfig+0x4d0>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
 80024a0:	42470060 	.word	0x42470060
=======
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e02f      	b.n	8002434 <HAL_RCC_OscConfig+0x4d0>
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40007000 	.word	0x40007000
 80023dc:	42470060 	.word	0x42470060
>>>>>>> master
>>>>>>> master
=======
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e02f      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	42470060 	.word	0x42470060
>>>>>>> Feature_Parser2
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
<<<<<<< HEAD
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_RCC_OscConfig+0x4d8>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
=======
 8003520:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	429a      	cmp	r2, r3
 8003532:	d11c      	bne.n	800356e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d115      	bne.n	800356e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800354e:	4293      	cmp	r3, r2
 8003550:	d10d      	bne.n	800356e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
<<<<<<< HEAD
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x4d0>
=======
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_RCC_OscConfig+0x4d8>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	60fb      	str	r3, [r7, #12]
>>>>>>> master
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d11c      	bne.n	800292a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d115      	bne.n	800292a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800290a:	4293      	cmp	r3, r2
 800290c:	d10d      	bne.n	800292a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
<<<<<<< HEAD
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x4d0>
=======
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> master
>>>>>>> master
=======
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> Feature_Parser2
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800292e:	2300      	movs	r3, #0
=======
<<<<<<< HEAD
 80024f6:	2300      	movs	r3, #0
=======
 8003572:	2300      	movs	r3, #0
>>>>>>> Feature_Parser2
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800

<<<<<<< HEAD
08002504 <HAL_RCC_ClockConfig>:
=======
 8002432:	2300      	movs	r3, #0
>>>>>>> master
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800

<<<<<<< HEAD
0800293c <HAL_RCC_ClockConfig>:
=======
08002440 <HAL_RCC_ClockConfig>:
>>>>>>> master
>>>>>>> master
=======
08003580 <HAL_RCC_ClockConfig>:
>>>>>>> Feature_Parser2
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
=======
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0cc      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
=======
<<<<<<< HEAD
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0cc      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0cc      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> master
>>>>>>> master
=======
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0cc      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Feature_Parser2
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
<<<<<<< HEAD
 8002950:	4b68      	ldr	r3, [pc, #416]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d90c      	bls.n	8002978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
=======
<<<<<<< HEAD
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d90c      	bls.n	8002540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b65      	ldr	r3, [pc, #404]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]
=======
 8002454:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d90c      	bls.n	800247c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 8003594:	4b68      	ldr	r3, [pc, #416]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d90c      	bls.n	80035bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b65      	ldr	r3, [pc, #404]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
>>>>>>> Feature_Parser2

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
<<<<<<< HEAD
 8002966:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0b8      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
=======
<<<<<<< HEAD
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b8      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b8      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> master
>>>>>>> master
=======
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Feature_Parser2
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
<<<<<<< HEAD
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x8a>
=======
<<<<<<< HEAD
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_ClockConfig+0x8a>
=======
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x8a>
>>>>>>> master
>>>>>>> master
=======
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Feature_Parser2
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
<<<<<<< HEAD
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x60>
=======
<<<<<<< HEAD
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x60>
=======
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x60>
>>>>>>> Feature_Parser2
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
<<<<<<< HEAD
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800257a:	6093      	str	r3, [r2, #8]
=======
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x60>
>>>>>>> master
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002990:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800299a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
<<<<<<< HEAD
 80029a8:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029b2:	6093      	str	r3, [r2, #8]
=======
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024b6:	6093      	str	r3, [r2, #8]
>>>>>>> master
>>>>>>> master
=======
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035f6:	6093      	str	r3, [r2, #8]
>>>>>>> Feature_Parser2
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
<<<<<<< HEAD
 80029b4:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	494d      	ldr	r1, [pc, #308]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
=======
<<<<<<< HEAD
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	494d      	ldr	r1, [pc, #308]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
=======
 80024b8:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494d      	ldr	r1, [pc, #308]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
>>>>>>> master
>>>>>>> master
=======
 80035f8:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
>>>>>>> Feature_Parser2
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
<<<<<<< HEAD
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d044      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x120>
=======
<<<<<<< HEAD
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d044      	beq.n	8002624 <HAL_RCC_ClockConfig+0x120>
=======
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d044      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
>>>>>>> master
>>>>>>> master
=======
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d044      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x120>
>>>>>>> Feature_Parser2
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
<<<<<<< HEAD
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_ClockConfig+0xae>
=======
<<<<<<< HEAD
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xae>
=======
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xae>
>>>>>>> Feature_Parser2
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d119      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xae>
>>>>>>> master
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d119      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80029e6:	2301      	movs	r3, #1
 80029e8:	e07f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
=======
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> master
>>>>>>> master
=======
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Feature_Parser2
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
<<<<<<< HEAD
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_ClockConfig+0xbe>
=======
<<<<<<< HEAD
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_ClockConfig+0xbe>
=======
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d003      	beq.n	800363e <HAL_RCC_ClockConfig+0xbe>
>>>>>>> Feature_Parser2
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	2b03      	cmp	r3, #3
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06f      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
=======
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_ClockConfig+0xbe>
>>>>>>> master
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8002a06:	2301      	movs	r3, #1
 8002a08:	e06f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
=======
 800250a:	2301      	movs	r3, #1
 800250c:	e06f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> master
>>>>>>> master
=======
 800364a:	2301      	movs	r3, #1
 800364c:	e06f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Feature_Parser2
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e067      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
=======
<<<<<<< HEAD
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e067      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e067      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> master
>>>>>>> master
=======
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e067      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Feature_Parser2
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
<<<<<<< HEAD
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4934      	ldr	r1, [pc, #208]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]
=======
<<<<<<< HEAD
 80025e2:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4934      	ldr	r1, [pc, #208]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]
=======
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4934      	ldr	r1, [pc, #208]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	4313      	orrs	r3, r2
 800366e:	608b      	str	r3, [r1, #8]
>>>>>>> Feature_Parser2

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fe feb2 	bl	80023d8 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	e00a      	b.n	800368e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003678:	f7fe feae 	bl	80023d8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e04f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 8002612:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 020c 	and.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1eb      	bne.n	80025fc <HAL_RCC_ClockConfig+0xf8>
=======
 800251e:	4b37      	ldr	r3, [pc, #220]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4934      	ldr	r1, [pc, #208]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
>>>>>>> master

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe feb2 	bl	8001794 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7fe feae 	bl	8001794 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e04f      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 020c 	and.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1eb      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xf8>
=======
 800254e:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> master
>>>>>>> master
=======
 800368e:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 020c 	and.w	r2, r3, #12
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1eb      	bne.n	8003678 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Feature_Parser2
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
<<<<<<< HEAD
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d20c      	bcs.n	8002a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]
=======
<<<<<<< HEAD
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d20c      	bcs.n	800264c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]
=======
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d20c      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d20c      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]
>>>>>>> Feature_Parser2

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
<<<<<<< HEAD
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e032      	b.n	8002aea <HAL_RCC_ClockConfig+0x1ae>
=======
<<<<<<< HEAD
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e032      	b.n	80026b2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e032      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> master
>>>>>>> master
=======
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Feature_Parser2
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
<<<<<<< HEAD
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4916      	ldr	r1, [pc, #88]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
=======
<<<<<<< HEAD
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4916      	ldr	r1, [pc, #88]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
=======
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4916      	ldr	r1, [pc, #88]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
>>>>>>> master
>>>>>>> master
=======
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
>>>>>>> Feature_Parser2
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
<<<<<<< HEAD
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	490e      	ldr	r1, [pc, #56]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
=======
<<<<<<< HEAD
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	490e      	ldr	r1, [pc, #56]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
=======
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
>>>>>>> master
>>>>>>> master
=======
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
>>>>>>> Feature_Parser2
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
<<<<<<< HEAD
 8002ac2:	f000 f821 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	490a      	ldr	r1, [pc, #40]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	6013      	str	r3, [r2, #0]
=======
<<<<<<< HEAD
 800268a:	f000 f821 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490a      	ldr	r1, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	6013      	str	r3, [r2, #0]
=======
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490a      	ldr	r1, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	6013      	str	r3, [r2, #0]
>>>>>>> Feature_Parser2

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fe12 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023c00 	.word	0x40023c00
 800373c:	40023800 	.word	0x40023800
 8003740:	08005bc4 	.word	0x08005bc4
 8003744:	20000074 	.word	0x20000074
 8003748:	20001dc4 	.word	0x20001dc4

<<<<<<< HEAD
080026d0 <HAL_RCC_GetSysClockFreq>:
=======
 80025c6:	f000 f821 	bl	800260c <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490a      	ldr	r1, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	6013      	str	r3, [r2, #0]
>>>>>>> master

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fe12 	bl	800170c <HAL_InitTick>

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023c00 	.word	0x40023c00
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08009ecc 	.word	0x08009ecc
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000004 	.word	0x20000004

<<<<<<< HEAD
08002b08 <HAL_RCC_GetSysClockFreq>:
=======
0800260c <HAL_RCC_GetSysClockFreq>:
>>>>>>> master
>>>>>>> master
=======
0800374c <HAL_RCC_GetSysClockFreq>:
>>>>>>> Feature_Parser2
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b094      	sub	sp, #80	; 0x50
 8002b0e:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80026d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d4:	b094      	sub	sp, #80	; 0x50
 80026d6:	af00      	add	r7, sp, #0
=======
 800374c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003750:	b094      	sub	sp, #80	; 0x50
 8003752:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
 8003758:	2300      	movs	r3, #0
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375c:	2300      	movs	r3, #0
 800375e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< HEAD
 80026e8:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d00d      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x40>
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	f200 80e1 	bhi.w	80028bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x34>
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d003      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x3a>
 8002702:	e0db      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 800260c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002610:	b094      	sub	sp, #80	; 0x50
 8002612:	af00      	add	r7, sp, #0
>>>>>>> master
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	647b      	str	r3, [r7, #68]	; 0x44
 8002b14:	2300      	movs	r3, #0
 8002b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b18:	2300      	movs	r3, #0
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< HEAD
 8002b20:	4b79      	ldr	r3, [pc, #484]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d00d      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x40>
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	f200 80e1 	bhi.w	8002cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x34>
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3a:	e0db      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 8002624:	4b79      	ldr	r3, [pc, #484]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b08      	cmp	r3, #8
 800262e:	d00d      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x40>
 8002630:	2b08      	cmp	r3, #8
 8002632:	f200 80e1 	bhi.w	80027f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x34>
 800263a:	2b04      	cmp	r3, #4
 800263c:	d003      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x3a>
 800263e:	e0db      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> master
>>>>>>> master
=======
 8003764:	4b79      	ldr	r3, [pc, #484]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b08      	cmp	r3, #8
 800376e:	d00d      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x40>
 8003770:	2b08      	cmp	r3, #8
 8003772:	f200 80e1 	bhi.w	8003938 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x34>
 800377a:	2b04      	cmp	r3, #4
 800377c:	d003      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x3a>
 800377e:	e0db      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> Feature_Parser2
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 8002b3c:	4b73      	ldr	r3, [pc, #460]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b40:	e0db      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x1f2>
=======
<<<<<<< HEAD
 8002704:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002708:	e0db      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8002640:	4b73      	ldr	r3, [pc, #460]	; (8002810 <HAL_RCC_GetSysClockFreq+0x204>)
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002644:	e0db      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> master
>>>>>>> master
=======
 8003780:	4b73      	ldr	r3, [pc, #460]	; (8003950 <HAL_RCC_GetSysClockFreq+0x204>)
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003784:	e0db      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Feature_Parser2
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 8002b42:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b46:	e0d8      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x1f2>
=======
<<<<<<< HEAD
 800270a:	4b73      	ldr	r3, [pc, #460]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800270c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800270e:	e0d8      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8002646:	4b73      	ldr	r3, [pc, #460]	; (8002814 <HAL_RCC_GetSysClockFreq+0x208>)
 8002648:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800264a:	e0d8      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> master
>>>>>>> master
=======
 8003786:	4b73      	ldr	r3, [pc, #460]	; (8003954 <HAL_RCC_GetSysClockFreq+0x208>)
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800378a:	e0d8      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Feature_Parser2
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
<<<<<<< HEAD
 8002b48:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
=======
<<<<<<< HEAD
 8002710:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
=======
 800378c:	4b6f      	ldr	r3, [pc, #444]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> Feature_Parser2
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d063      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8002726:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	2200      	movs	r2, #0
 800272e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002730:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
 800273e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002742:	4622      	mov	r2, r4
 8002744:	462b      	mov	r3, r5
 8002746:	f04f 0000 	mov.w	r0, #0
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	0159      	lsls	r1, r3, #5
 8002750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002754:	0150      	lsls	r0, r2, #5
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4621      	mov	r1, r4
 800275c:	1a51      	subs	r1, r2, r1
 800275e:	6139      	str	r1, [r7, #16]
 8002760:	4629      	mov	r1, r5
 8002762:	eb63 0301 	sbc.w	r3, r3, r1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002774:	4659      	mov	r1, fp
 8002776:	018b      	lsls	r3, r1, #6
 8002778:	4651      	mov	r1, sl
 800277a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800277e:	4651      	mov	r1, sl
 8002780:	018a      	lsls	r2, r1, #6
 8002782:	4651      	mov	r1, sl
 8002784:	ebb2 0801 	subs.w	r8, r2, r1
 8002788:	4659      	mov	r1, fp
 800278a:	eb63 0901 	sbc.w	r9, r3, r1
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800279a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800279e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027a2:	4690      	mov	r8, r2
 80027a4:	4699      	mov	r9, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	eb18 0303 	adds.w	r3, r8, r3
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	462b      	mov	r3, r5
 80027b0:	eb49 0303 	adc.w	r3, r9, r3
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027c2:	4629      	mov	r1, r5
 80027c4:	024b      	lsls	r3, r1, #9
 80027c6:	4621      	mov	r1, r4
 80027c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027cc:	4621      	mov	r1, r4
 80027ce:	024a      	lsls	r2, r1, #9
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	2200      	movs	r2, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e0:	f7fd fcfc 	bl	80001dc <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ec:	e058      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 800264c:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002654:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> master
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b52:	4b6d      	ldr	r3, [pc, #436]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d063      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	099b      	lsrs	r3, r3, #6
 8002b64:	2200      	movs	r2, #0
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30
 8002b72:	2300      	movs	r3, #0
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
 8002b76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b7a:	4622      	mov	r2, r4
 8002b7c:	462b      	mov	r3, r5
 8002b7e:	f04f 0000 	mov.w	r0, #0
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	0159      	lsls	r1, r3, #5
 8002b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b8c:	0150      	lsls	r0, r2, #5
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4621      	mov	r1, r4
 8002b94:	1a51      	subs	r1, r2, r1
 8002b96:	6139      	str	r1, [r7, #16]
 8002b98:	4629      	mov	r1, r5
 8002b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bac:	4659      	mov	r1, fp
 8002bae:	018b      	lsls	r3, r1, #6
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	018a      	lsls	r2, r1, #6
 8002bba:	4651      	mov	r1, sl
 8002bbc:	ebb2 0801 	subs.w	r8, r2, r1
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	eb63 0901 	sbc.w	r9, r3, r1
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bda:	4690      	mov	r8, r2
 8002bdc:	4699      	mov	r9, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	eb18 0303 	adds.w	r3, r8, r3
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	462b      	mov	r3, r5
 8002be8:	eb49 0303 	adc.w	r3, r9, r3
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	024b      	lsls	r3, r1, #9
 8002bfe:	4621      	mov	r1, r4
 8002c00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c04:	4621      	mov	r1, r4
 8002c06:	024a      	lsls	r2, r1, #9
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0e:	2200      	movs	r2, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c18:	f7fd fb32 	bl	8000280 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4613      	mov	r3, r2
 8002c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c24:	e058      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8002662:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	2200      	movs	r2, #0
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38
 800266c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
 8002676:	2300      	movs	r3, #0
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
 800267a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800267e:	4622      	mov	r2, r4
 8002680:	462b      	mov	r3, r5
 8002682:	f04f 0000 	mov.w	r0, #0
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	0159      	lsls	r1, r3, #5
 800268c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002690:	0150      	lsls	r0, r2, #5
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4621      	mov	r1, r4
 8002698:	1a51      	subs	r1, r2, r1
 800269a:	6139      	str	r1, [r7, #16]
 800269c:	4629      	mov	r1, r5
 800269e:	eb63 0301 	sbc.w	r3, r3, r1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b0:	4659      	mov	r1, fp
 80026b2:	018b      	lsls	r3, r1, #6
 80026b4:	4651      	mov	r1, sl
 80026b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ba:	4651      	mov	r1, sl
 80026bc:	018a      	lsls	r2, r1, #6
 80026be:	4651      	mov	r1, sl
 80026c0:	ebb2 0801 	subs.w	r8, r2, r1
 80026c4:	4659      	mov	r1, fp
 80026c6:	eb63 0901 	sbc.w	r9, r3, r1
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026de:	4690      	mov	r8, r2
 80026e0:	4699      	mov	r9, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	eb18 0303 	adds.w	r3, r8, r3
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	462b      	mov	r3, r5
 80026ec:	eb49 0303 	adc.w	r3, r9, r3
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026fe:	4629      	mov	r1, r5
 8002700:	024b      	lsls	r3, r1, #9
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002708:	4621      	mov	r1, r4
 800270a:	024a      	lsls	r2, r1, #9
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	2200      	movs	r2, #0
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
 8002716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800271c:	f7fd fda8 	bl	8000270 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002728:	e058      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> master
>>>>>>> master
=======
 80037a2:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	2200      	movs	r2, #0
 80037aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037be:	4622      	mov	r2, r4
 80037c0:	462b      	mov	r3, r5
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	0159      	lsls	r1, r3, #5
 80037cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d0:	0150      	lsls	r0, r2, #5
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4621      	mov	r1, r4
 80037d8:	1a51      	subs	r1, r2, r1
 80037da:	6139      	str	r1, [r7, #16]
 80037dc:	4629      	mov	r1, r5
 80037de:	eb63 0301 	sbc.w	r3, r3, r1
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f0:	4659      	mov	r1, fp
 80037f2:	018b      	lsls	r3, r1, #6
 80037f4:	4651      	mov	r1, sl
 80037f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037fa:	4651      	mov	r1, sl
 80037fc:	018a      	lsls	r2, r1, #6
 80037fe:	4651      	mov	r1, sl
 8003800:	ebb2 0801 	subs.w	r8, r2, r1
 8003804:	4659      	mov	r1, fp
 8003806:	eb63 0901 	sbc.w	r9, r3, r1
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800381e:	4690      	mov	r8, r2
 8003820:	4699      	mov	r9, r3
 8003822:	4623      	mov	r3, r4
 8003824:	eb18 0303 	adds.w	r3, r8, r3
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	462b      	mov	r3, r5
 800382c:	eb49 0303 	adc.w	r3, r9, r3
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800383e:	4629      	mov	r1, r5
 8003840:	024b      	lsls	r3, r1, #9
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003848:	4621      	mov	r1, r4
 800384a:	024a      	lsls	r2, r1, #9
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003852:	2200      	movs	r2, #0
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
 8003856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800385c:	f7fc feca 	bl	80005f4 <__aeabi_uldivmod>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4613      	mov	r3, r2
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003868:	e058      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> Feature_Parser2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
<<<<<<< HEAD
 8002c26:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	099b      	lsrs	r3, r3, #6
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	4611      	mov	r1, r2
 8002c32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c36:	623b      	str	r3, [r7, #32]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c40:	4642      	mov	r2, r8
 8002c42:	464b      	mov	r3, r9
 8002c44:	f04f 0000 	mov.w	r0, #0
 8002c48:	f04f 0100 	mov.w	r1, #0
 8002c4c:	0159      	lsls	r1, r3, #5
 8002c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c52:	0150      	lsls	r0, r2, #5
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4641      	mov	r1, r8
 8002c5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c5e:	4649      	mov	r1, r9
 8002c60:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c78:	ebb2 040a 	subs.w	r4, r2, sl
 8002c7c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	00eb      	lsls	r3, r5, #3
 8002c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c8e:	00e2      	lsls	r2, r4, #3
 8002c90:	4614      	mov	r4, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	4643      	mov	r3, r8
 8002c96:	18e3      	adds	r3, r4, r3
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	eb45 0303 	adc.w	r3, r5, r3
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cae:	4629      	mov	r1, r5
 8002cb0:	028b      	lsls	r3, r1, #10
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb8:	4621      	mov	r1, r4
 8002cba:	028a      	lsls	r2, r1, #10
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	61fa      	str	r2, [r7, #28]
 8002cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ccc:	f7fd fad8 	bl	8000280 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
=======
<<<<<<< HEAD
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	2200      	movs	r2, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	4611      	mov	r1, r2
 80027fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
 8002804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	f04f 0000 	mov.w	r0, #0
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	0159      	lsls	r1, r3, #5
 8002816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281a:	0150      	lsls	r0, r2, #5
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4641      	mov	r1, r8
 8002822:	ebb2 0a01 	subs.w	sl, r2, r1
 8002826:	4649      	mov	r1, r9
 8002828:	eb63 0b01 	sbc.w	fp, r3, r1
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800283c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002840:	ebb2 040a 	subs.w	r4, r2, sl
 8002844:	eb63 050b 	sbc.w	r5, r3, fp
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	00eb      	lsls	r3, r5, #3
 8002852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002856:	00e2      	lsls	r2, r4, #3
 8002858:	4614      	mov	r4, r2
 800285a:	461d      	mov	r5, r3
 800285c:	4643      	mov	r3, r8
 800285e:	18e3      	adds	r3, r4, r3
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	464b      	mov	r3, r9
 8002864:	eb45 0303 	adc.w	r3, r5, r3
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002876:	4629      	mov	r1, r5
 8002878:	028b      	lsls	r3, r1, #10
 800287a:	4621      	mov	r1, r4
 800287c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002880:	4621      	mov	r1, r4
 8002882:	028a      	lsls	r2, r1, #10
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288a:	2200      	movs	r2, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	61fa      	str	r2, [r7, #28]
 8002890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002894:	f7fd fca2 	bl	80001dc <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4613      	mov	r3, r2
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
=======
 800386a:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	2200      	movs	r2, #0
 8003872:	4618      	mov	r0, r3
 8003874:	4611      	mov	r1, r2
 8003876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	f04f 0000 	mov.w	r0, #0
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	0159      	lsls	r1, r3, #5
 8003892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003896:	0150      	lsls	r0, r2, #5
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4641      	mov	r1, r8
 800389e:	ebb2 0a01 	subs.w	sl, r2, r1
 80038a2:	4649      	mov	r1, r9
 80038a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038bc:	ebb2 040a 	subs.w	r4, r2, sl
 80038c0:	eb63 050b 	sbc.w	r5, r3, fp
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	464b      	mov	r3, r9
 80038e0:	eb45 0303 	adc.w	r3, r5, r3
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f2:	4629      	mov	r1, r5
 80038f4:	028b      	lsls	r3, r1, #10
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038fc:	4621      	mov	r1, r4
 80038fe:	028a      	lsls	r2, r1, #10
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003906:	2200      	movs	r2, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	61fa      	str	r2, [r7, #28]
 800390c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003910:	f7fc fe70 	bl	80005f4 <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
>>>>>>> Feature_Parser2
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	3301      	adds	r3, #1
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800392c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800392e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
<<<<<<< HEAD
 80028ba:	e002      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	2200      	movs	r2, #0
 8002732:	4618      	mov	r0, r3
 8002734:	4611      	mov	r1, r2
 8002736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	f04f 0000 	mov.w	r0, #0
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	0159      	lsls	r1, r3, #5
 8002752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002756:	0150      	lsls	r0, r2, #5
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4641      	mov	r1, r8
 800275e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002762:	4649      	mov	r1, r9
 8002764:	eb63 0b01 	sbc.w	fp, r3, r1
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800277c:	ebb2 040a 	subs.w	r4, r2, sl
 8002780:	eb63 050b 	sbc.w	r5, r3, fp
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	00eb      	lsls	r3, r5, #3
 800278e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002792:	00e2      	lsls	r2, r4, #3
 8002794:	4614      	mov	r4, r2
 8002796:	461d      	mov	r5, r3
 8002798:	4643      	mov	r3, r8
 800279a:	18e3      	adds	r3, r4, r3
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	464b      	mov	r3, r9
 80027a0:	eb45 0303 	adc.w	r3, r5, r3
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b2:	4629      	mov	r1, r5
 80027b4:	028b      	lsls	r3, r1, #10
 80027b6:	4621      	mov	r1, r4
 80027b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027bc:	4621      	mov	r1, r4
 80027be:	028a      	lsls	r2, r1, #10
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c6:	2200      	movs	r2, #0
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	61fa      	str	r2, [r7, #28]
 80027cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d0:	f7fd fd4e 	bl	8000270 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4613      	mov	r3, r2
 80027da:	64fb      	str	r3, [r7, #76]	; 0x4c
>>>>>>> master
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
<<<<<<< HEAD
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80027f6:	e002      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> master
>>>>>>> master
=======
 8003936:	e002      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Feature_Parser2
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002cf6:	64bb      	str	r3, [r7, #72]	; 0x48
=======
<<<<<<< HEAD
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48
=======
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetSysClockFreq+0x204>)
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48
>>>>>>> Feature_Parser2
      break;
 800393c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003940:	4618      	mov	r0, r3
 8003942:	3750      	adds	r7, #80	; 0x50
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200

<<<<<<< HEAD
080028dc <HAL_RCC_GetHCLKFreq>:
=======
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fa:	64bb      	str	r3, [r7, #72]	; 0x48
>>>>>>> master
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3750      	adds	r7, #80	; 0x50
 8002d00:	46bd      	mov	sp, r7
 8002d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	007a1200 	.word	0x007a1200

<<<<<<< HEAD
08002d14 <HAL_RCC_GetHCLKFreq>:
=======
08002818 <HAL_RCC_GetHCLKFreq>:
>>>>>>> master
>>>>>>> master
=======
08003958 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Feature_Parser2
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
=======
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  return SystemCoreClock;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCC_GetHCLKFreq+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000074 	.word	0x20000074

<<<<<<< HEAD
080028f4 <HAL_RCC_GetPCLK1Freq>:
=======
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
>>>>>>> master
  return SystemCoreClock;
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000000 	.word	0x20000000

<<<<<<< HEAD
08002d2c <HAL_RCC_GetPCLK1Freq>:
=======
08002830 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> master
>>>>>>> master
=======
08003970 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Feature_Parser2
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
=======
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003974:	f7ff fff0 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0a9b      	lsrs	r3, r3, #10
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	08005bd4 	.word	0x08005bd4

<<<<<<< HEAD
0800291c <HAL_RCC_GetPCLK2Freq>:
=======
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
>>>>>>> master
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d30:	f7ff fff0 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4903      	ldr	r1, [pc, #12]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	08009edc 	.word	0x08009edc

<<<<<<< HEAD
08002d54 <HAL_RCC_GetPCLK2Freq>:
=======
08002858 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> master
>>>>>>> master
=======
08003998 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Feature_Parser2
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
=======
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
>>>>>>> Feature_Parser2
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800399c:	f7ff ffdc 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0b5b      	lsrs	r3, r3, #13
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08005bd4 	.word	0x08005bd4

<<<<<<< HEAD
08002944 <HAL_TIM_Base_Init>:
=======
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
>>>>>>> master
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d58:	f7ff ffdc 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0b5b      	lsrs	r3, r3, #13
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08009edc 	.word	0x08009edc

<<<<<<< HEAD
08002d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e056      	b.n	8002e3c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fd ffab 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	ea42 0103 	orr.w	r1, r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	0c1b      	lsrs	r3, r3, #16
 8002e0c:	f003 0104 	and.w	r1, r3, #4
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	; 0x30
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e52:	2301      	movs	r3, #1
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x26>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e18a      	b.n	8003180 <HAL_SPI_TransmitReceive+0x33c>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e72:	f7fe fc8f 	bl	8001794 <HAL_GetTick>
 8002e76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d00f      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x70>
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e9a:	d107      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x68>
 8002ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d003      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002eb2:	e15b      	b.n	800316c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_SPI_TransmitReceive+0x82>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_SPI_TransmitReceive+0x82>
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ecc:	e14e      	b.n	800316c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d003      	beq.n	8002ee2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2205      	movs	r2, #5
 8002ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	887a      	ldrh	r2, [r7, #2]
 8002f0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d007      	beq.n	8002f36 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3e:	d178      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_SPI_TransmitReceive+0x10a>
 8002f48:	8b7b      	ldrh	r3, [r7, #26]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d166      	bne.n	800301c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	881a      	ldrh	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	1c9a      	adds	r2, r3, #2
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f72:	e053      	b.n	800301c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d11b      	bne.n	8002fba <HAL_SPI_TransmitReceive+0x176>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d016      	beq.n	8002fba <HAL_SPI_TransmitReceive+0x176>
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d113      	bne.n	8002fba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	881a      	ldrh	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	1c9a      	adds	r2, r3, #2
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d119      	bne.n	8002ffc <HAL_SPI_TransmitReceive+0x1b8>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d014      	beq.n	8002ffc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	b292      	uxth	r2, r2
 8002fde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	1c9a      	adds	r2, r3, #2
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ffc:	f7fe fbca 	bl	8001794 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003008:	429a      	cmp	r2, r3
 800300a:	d807      	bhi.n	800301c <HAL_SPI_TransmitReceive+0x1d8>
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d003      	beq.n	800301c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800301a:	e0a7      	b.n	800316c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1a6      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x130>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1a1      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x130>
 8003030:	e07c      	b.n	800312c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x1fc>
 800303a:	8b7b      	ldrh	r3, [r7, #26]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d16b      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003066:	e057      	b.n	8003118 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d11c      	bne.n	80030b0 <HAL_SPI_TransmitReceive+0x26c>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <HAL_SPI_TransmitReceive+0x26c>
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	2b01      	cmp	r3, #1
 8003084:	d114      	bne.n	80030b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d119      	bne.n	80030f2 <HAL_SPI_TransmitReceive+0x2ae>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d014      	beq.n	80030f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030ee:	2301      	movs	r3, #1
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030f2:	f7fe fb4f 	bl	8001794 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030fe:	429a      	cmp	r2, r3
 8003100:	d803      	bhi.n	800310a <HAL_SPI_TransmitReceive+0x2c6>
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d102      	bne.n	8003110 <HAL_SPI_TransmitReceive+0x2cc>
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003116:	e029      	b.n	800316c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1a2      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x224>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d19d      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f893 	bl	800325c <SPI_EndRxTxTransaction>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003148:	e010      	b.n	800316c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	e000      	b.n	800316c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800316a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800317c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003180:	4618      	mov	r0, r3
 8003182:	3730      	adds	r7, #48	; 0x30
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003198:	e04c      	b.n	8003234 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d048      	beq.n	8003234 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80031a2:	f7fe faf7 	bl	8001794 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d902      	bls.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d13d      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d0:	d111      	bne.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031da:	d004      	beq.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e4:	d107      	bne.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fe:	d10f      	bne.n	8003220 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800321e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e00f      	b.n	8003254 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	429a      	cmp	r2, r3
 8003250:	d1a3      	bne.n	800319a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <SPI_EndRxTxTransaction+0x7c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <SPI_EndRxTxTransaction+0x80>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0d5b      	lsrs	r3, r3, #21
 8003274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003286:	d112      	bne.n	80032ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ff78 	bl	8003188 <SPI_WaitFlagStateUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e00f      	b.n	80032ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d0f2      	beq.n	80032ae <SPI_EndRxTxTransaction+0x52>
 80032c8:	e000      	b.n	80032cc <SPI_EndRxTxTransaction+0x70>
        break;
 80032ca:	bf00      	nop
  }

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000
 80032dc:	165e9f81 	.word	0x165e9f81

080032e0 <HAL_TIM_Base_Init>:
=======
08002880 <HAL_TIM_Base_Init>:
>>>>>>> master
>>>>>>> master
=======
080039c0 <HAL_TIM_Base_Init>:
>>>>>>> Feature_Parser2
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
=======
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8002952:	2301      	movs	r3, #1
 8002954:	e01d      	b.n	8002992 <HAL_TIM_Base_Init+0x4e>
=======
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
>>>>>>> master
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80032ee:	2301      	movs	r3, #1
 80032f0:	e01d      	b.n	800332e <HAL_TIM_Base_Init+0x4e>
=======
 800288e:	2301      	movs	r3, #1
 8002890:	e01d      	b.n	80028ce <HAL_TIM_Base_Init+0x4e>
>>>>>>> master
>>>>>>> master
=======
 80039ce:	2301      	movs	r3, #1
 80039d0:	e01d      	b.n	8003a0e <HAL_TIM_Base_Init+0x4e>
>>>>>>> Feature_Parser2
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> master
>>>>>>> master
=======
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Feature_Parser2
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd ffec 	bl	80012e4 <HAL_TIM_Base_MspInit>
=======
<<<<<<< HEAD
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe faea 	bl	8000f44 <HAL_TIM_Base_MspInit>
=======
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fa9e 	bl	8000de8 <HAL_TIM_Base_MspInit>
>>>>>>> master
>>>>>>> master
=======
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd ffd6 	bl	8001998 <HAL_TIM_Base_MspInit>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
<<<<<<< HEAD
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Feature_Parser2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 fbde 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
0800299a <HAL_TIM_Base_Start>:
=======
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> master

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 fbde 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08003336 <HAL_TIM_Base_Start>:
=======
080028d6 <HAL_TIM_Base_Start>:
>>>>>>> master
>>>>>>> master
=======
08003a16 <HAL_TIM_Base_Start>:
>>>>>>> Feature_Parser2
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
=======
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
<<<<<<< HEAD
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Feature_Parser2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d007      	beq.n	8003a48 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
=======
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> master

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b06      	cmp	r3, #6
 8003356:	d007      	beq.n	8003368 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
=======
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
<<<<<<< HEAD
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
<<<<<<< HEAD
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Feature_Parser2

  /* Return function status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

<<<<<<< HEAD
080029e2 <HAL_TIM_PWM_Init>:
=======
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> master

  /* Return function status */
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

<<<<<<< HEAD
0800337e <HAL_TIM_PWM_Init>:
=======
0800291e <HAL_TIM_PWM_Init>:
>>>>>>> master
>>>>>>> master
=======
08003a5e <HAL_TIM_PWM_Init>:
>>>>>>> Feature_Parser2
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
=======
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80029f0:	2301      	movs	r3, #1
 80029f2:	e01d      	b.n	8002a30 <HAL_TIM_PWM_Init+0x4e>
=======
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
>>>>>>> master
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 800338c:	2301      	movs	r3, #1
 800338e:	e01d      	b.n	80033cc <HAL_TIM_PWM_Init+0x4e>
=======
 800292c:	2301      	movs	r3, #1
 800292e:	e01d      	b.n	800296c <HAL_TIM_PWM_Init+0x4e>
>>>>>>> master
>>>>>>> master
=======
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e01d      	b.n	8003aac <HAL_TIM_PWM_Init+0x4e>
>>>>>>> Feature_Parser2
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d106      	bne.n	80033aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> master
>>>>>>> master
=======
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Feature_Parser2
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7fd ffef 	bl	8001388 <HAL_TIM_PWM_MspInit>
=======
<<<<<<< HEAD
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7fe faed 	bl	8000fe8 <HAL_TIM_PWM_MspInit>
=======
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe faa1 	bl	8000e8c <HAL_TIM_PWM_MspInit>
>>>>>>> master
>>>>>>> master
=======
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd ffd9 	bl	8001a3c <HAL_TIM_PWM_MspInit>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
<<<<<<< HEAD
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Feature_Parser2

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f000 fb8f 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08002a38 <HAL_TIM_PWM_Start>:
=======
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> master

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	4619      	mov	r1, r3
 80033bc:	4610      	mov	r0, r2
 80033be:	f000 fb8f 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080033d4 <HAL_TIM_PWM_Start>:
=======
08002974 <HAL_TIM_PWM_Start>:
>>>>>>> master
>>>>>>> master
=======
08003ab4 <HAL_TIM_PWM_Start>:
>>>>>>> Feature_Parser2
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
=======
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< HEAD
<<<<<<< HEAD
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2201      	movs	r2, #1
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fe64 	bl	80040b4 <TIM_CCxChannelCmd>
=======
<<<<<<< HEAD
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2201      	movs	r2, #1
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fe64 	bl	8003718 <TIM_CCxChannelCmd>
=======
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fe64 	bl	8004794 <TIM_CCxChannelCmd>
>>>>>>> Feature_Parser2

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_TIM_PWM_Start+0x74>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_TIM_PWM_Start+0x2c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <HAL_TIM_PWM_Start+0x78>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIM_PWM_Start+0x30>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_PWM_Start+0x32>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
<<<<<<< HEAD
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	6839      	ldr	r1, [r7, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fe64 	bl	8003654 <TIM_CCxChannelCmd>
>>>>>>> master

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a15      	ldr	r2, [pc, #84]	; (8003448 <HAL_TIM_PWM_Start+0x74>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d004      	beq.n	8003400 <HAL_TIM_PWM_Start+0x2c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a14      	ldr	r2, [pc, #80]	; (800344c <HAL_TIM_PWM_Start+0x78>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <HAL_TIM_PWM_Start+0x30>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <HAL_TIM_PWM_Start+0x32>
 8003404:	2300      	movs	r3, #0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
<<<<<<< HEAD
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003418:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> master
>>>>>>> master
=======
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Feature_Parser2
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< HEAD
<<<<<<< HEAD
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	60fb      	str	r3, [r7, #12]
=======
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b06      	cmp	r3, #6
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
=======
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	60fb      	str	r3, [r7, #12]
>>>>>>> master
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d007      	beq.n	800343c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
=======
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 800343c:	2300      	movs	r3, #0
=======
<<<<<<< HEAD
 8002aa0:	2300      	movs	r3, #0
=======
 8003b1c:	2300      	movs	r3, #0
>>>>>>> Feature_Parser2
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40010400 	.word	0x40010400

<<<<<<< HEAD
08002ab4 <HAL_TIM_PWM_Start_IT>:
=======
 80029dc:	2300      	movs	r3, #0
>>>>>>> master
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003450 <HAL_TIM_PWM_Start_IT>:
=======
080029f0 <HAL_TIM_PWM_Start_IT>:
>>>>>>> master
>>>>>>> master
=======
08003b30 <HAL_TIM_PWM_Start_IT>:
>>>>>>> Feature_Parser2
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
=======
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< HEAD
<<<<<<< HEAD
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d841      	bhi.n	80034e4 <HAL_TIM_PWM_Start_IT+0x94>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <HAL_TIM_PWM_Start_IT+0x18>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	0800349d 	.word	0x0800349d
 800346c:	080034e5 	.word	0x080034e5
 8003470:	080034e5 	.word	0x080034e5
 8003474:	080034e5 	.word	0x080034e5
 8003478:	080034af 	.word	0x080034af
 800347c:	080034e5 	.word	0x080034e5
 8003480:	080034e5 	.word	0x080034e5
 8003484:	080034e5 	.word	0x080034e5
 8003488:	080034c1 	.word	0x080034c1
 800348c:	080034e5 	.word	0x080034e5
 8003490:	080034e5 	.word	0x080034e5
 8003494:	080034e5 	.word	0x080034e5
 8003498:	080034d3 	.word	0x080034d3
=======
<<<<<<< HEAD
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	d841      	bhi.n	8002b48 <HAL_TIM_PWM_Start_IT+0x94>
 8002ac4:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <HAL_TIM_PWM_Start_IT+0x18>)
 8002ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aca:	bf00      	nop
 8002acc:	08002b01 	.word	0x08002b01
 8002ad0:	08002b49 	.word	0x08002b49
 8002ad4:	08002b49 	.word	0x08002b49
 8002ad8:	08002b49 	.word	0x08002b49
 8002adc:	08002b13 	.word	0x08002b13
 8002ae0:	08002b49 	.word	0x08002b49
 8002ae4:	08002b49 	.word	0x08002b49
 8002ae8:	08002b49 	.word	0x08002b49
 8002aec:	08002b25 	.word	0x08002b25
 8002af0:	08002b49 	.word	0x08002b49
 8002af4:	08002b49 	.word	0x08002b49
 8002af8:	08002b49 	.word	0x08002b49
 8002afc:	08002b37 	.word	0x08002b37
=======
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b0c      	cmp	r3, #12
 80029fe:	d841      	bhi.n	8002a84 <HAL_TIM_PWM_Start_IT+0x94>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <HAL_TIM_PWM_Start_IT+0x18>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a3d 	.word	0x08002a3d
 8002a0c:	08002a85 	.word	0x08002a85
 8002a10:	08002a85 	.word	0x08002a85
 8002a14:	08002a85 	.word	0x08002a85
 8002a18:	08002a4f 	.word	0x08002a4f
 8002a1c:	08002a85 	.word	0x08002a85
 8002a20:	08002a85 	.word	0x08002a85
 8002a24:	08002a85 	.word	0x08002a85
 8002a28:	08002a61 	.word	0x08002a61
 8002a2c:	08002a85 	.word	0x08002a85
 8002a30:	08002a85 	.word	0x08002a85
 8002a34:	08002a85 	.word	0x08002a85
 8002a38:	08002a73 	.word	0x08002a73
>>>>>>> master
>>>>>>> master
=======
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	d841      	bhi.n	8003bc4 <HAL_TIM_PWM_Start_IT+0x94>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_TIM_PWM_Start_IT+0x18>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b7d 	.word	0x08003b7d
 8003b4c:	08003bc5 	.word	0x08003bc5
 8003b50:	08003bc5 	.word	0x08003bc5
 8003b54:	08003bc5 	.word	0x08003bc5
 8003b58:	08003b8f 	.word	0x08003b8f
 8003b5c:	08003bc5 	.word	0x08003bc5
 8003b60:	08003bc5 	.word	0x08003bc5
 8003b64:	08003bc5 	.word	0x08003bc5
 8003b68:	08003ba1 	.word	0x08003ba1
 8003b6c:	08003bc5 	.word	0x08003bc5
 8003b70:	08003bc5 	.word	0x08003bc5
 8003b74:	08003bc5 	.word	0x08003bc5
 8003b78:	08003bb3 	.word	0x08003bb3
>>>>>>> Feature_Parser2
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
<<<<<<< HEAD
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0202 	orr.w	r2, r2, #2
 80034aa:	60da      	str	r2, [r3, #12]
      break;
 80034ac:	e01b      	b.n	80034e6 <HAL_TIM_PWM_Start_IT+0x96>
=======
<<<<<<< HEAD
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0202 	orr.w	r2, r2, #2
 8002b0e:	60da      	str	r2, [r3, #12]
      break;
 8002b10:	e01b      	b.n	8002b4a <HAL_TIM_PWM_Start_IT+0x96>
=======
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0202 	orr.w	r2, r2, #2
 8002a4a:	60da      	str	r2, [r3, #12]
      break;
 8002a4c:	e01b      	b.n	8002a86 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> master
>>>>>>> master
=======
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0202 	orr.w	r2, r2, #2
 8003b8a:	60da      	str	r2, [r3, #12]
      break;
 8003b8c:	e01b      	b.n	8003bc6 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Feature_Parser2
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
<<<<<<< HEAD
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0204 	orr.w	r2, r2, #4
 80034bc:	60da      	str	r2, [r3, #12]
      break;
 80034be:	e012      	b.n	80034e6 <HAL_TIM_PWM_Start_IT+0x96>
=======
<<<<<<< HEAD
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0204 	orr.w	r2, r2, #4
 8002b20:	60da      	str	r2, [r3, #12]
      break;
 8002b22:	e012      	b.n	8002b4a <HAL_TIM_PWM_Start_IT+0x96>
=======
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0204 	orr.w	r2, r2, #4
 8002a5c:	60da      	str	r2, [r3, #12]
      break;
 8002a5e:	e012      	b.n	8002a86 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> master
>>>>>>> master
=======
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0204 	orr.w	r2, r2, #4
 8003b9c:	60da      	str	r2, [r3, #12]
      break;
 8003b9e:	e012      	b.n	8003bc6 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Feature_Parser2
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
<<<<<<< HEAD
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0208 	orr.w	r2, r2, #8
 80034ce:	60da      	str	r2, [r3, #12]
      break;
 80034d0:	e009      	b.n	80034e6 <HAL_TIM_PWM_Start_IT+0x96>
=======
<<<<<<< HEAD
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	60da      	str	r2, [r3, #12]
      break;
 8002b34:	e009      	b.n	8002b4a <HAL_TIM_PWM_Start_IT+0x96>
=======
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0208 	orr.w	r2, r2, #8
 8002a6e:	60da      	str	r2, [r3, #12]
      break;
 8002a70:	e009      	b.n	8002a86 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> master
>>>>>>> master
=======
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0208 	orr.w	r2, r2, #8
 8003bae:	60da      	str	r2, [r3, #12]
      break;
 8003bb0:	e009      	b.n	8003bc6 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Feature_Parser2
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
<<<<<<< HEAD
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0210 	orr.w	r2, r2, #16
 80034e0:	60da      	str	r2, [r3, #12]
      break;
 80034e2:	e000      	b.n	80034e6 <HAL_TIM_PWM_Start_IT+0x96>
=======
<<<<<<< HEAD
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0210 	orr.w	r2, r2, #16
 8002b44:	60da      	str	r2, [r3, #12]
      break;
 8002b46:	e000      	b.n	8002b4a <HAL_TIM_PWM_Start_IT+0x96>
=======
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0210 	orr.w	r2, r2, #16
 8002a80:	60da      	str	r2, [r3, #12]
      break;
 8002a82:	e000      	b.n	8002a86 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> master
>>>>>>> master
=======
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0210 	orr.w	r2, r2, #16
 8003bc0:	60da      	str	r2, [r3, #12]
      break;
 8003bc2:	e000      	b.n	8003bc6 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Feature_Parser2
    }

    default:
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 80034e4:	bf00      	nop
=======
<<<<<<< HEAD
 8002b48:	bf00      	nop
=======
 8002a84:	bf00      	nop
>>>>>>> master
>>>>>>> master
=======
 8003bc4:	bf00      	nop
>>>>>>> Feature_Parser2
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< HEAD
<<<<<<< HEAD
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	6839      	ldr	r1, [r7, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fde0 	bl	80040b4 <TIM_CCxChannelCmd>
=======
<<<<<<< HEAD
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	6839      	ldr	r1, [r7, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fde0 	bl	8003718 <TIM_CCxChannelCmd>
=======
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	6839      	ldr	r1, [r7, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fde0 	bl	8004794 <TIM_CCxChannelCmd>
>>>>>>> Feature_Parser2

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_TIM_PWM_Start_IT+0x100>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_TIM_PWM_Start_IT+0xb8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <HAL_TIM_PWM_Start_IT+0x104>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_TIM_PWM_Start_IT+0xbc>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_TIM_PWM_Start_IT+0xbe>
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
<<<<<<< HEAD
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fde0 	bl	8003654 <TIM_CCxChannelCmd>
>>>>>>> master

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a15      	ldr	r2, [pc, #84]	; (8003550 <HAL_TIM_PWM_Start_IT+0x100>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_TIM_PWM_Start_IT+0xb8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a14      	ldr	r2, [pc, #80]	; (8003554 <HAL_TIM_PWM_Start_IT+0x104>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_TIM_PWM_Start_IT+0xbc>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_TIM_PWM_Start_IT+0xbe>
 800350c:	2300      	movs	r3, #0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
<<<<<<< HEAD
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> master
>>>>>>> master
=======
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Feature_Parser2
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< HEAD
<<<<<<< HEAD
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
=======
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d007      	beq.n	8003c24 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
=======
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
>>>>>>> master
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b06      	cmp	r3, #6
 8003532:	d007      	beq.n	8003544 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
=======
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
>>>>>>> Feature_Parser2
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8003544:	2300      	movs	r3, #0
=======
<<<<<<< HEAD
 8002ba8:	2300      	movs	r3, #0
=======
 8003c24:	2300      	movs	r3, #0
>>>>>>> Feature_Parser2
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40010400 	.word	0x40010400

<<<<<<< HEAD
08002bbc <HAL_TIM_IRQHandler>:
=======
 8002ae4:	2300      	movs	r3, #0
>>>>>>> master
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003558 <HAL_TIM_IRQHandler>:
=======
08002af8 <HAL_TIM_IRQHandler>:
>>>>>>> master
>>>>>>> master
=======
08003c38 <HAL_TIM_IRQHandler>:
>>>>>>> Feature_Parser2
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
=======
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0202 	mvn.w	r2, #2
 8003c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
<<<<<<< HEAD
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_TIM_IRQHandler+0x4a>
=======
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
>>>>>>> master
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d122      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d11b      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0202 	mvn.w	r2, #2
 8003584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
<<<<<<< HEAD
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x4a>
=======
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> master
>>>>>>> master
=======
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> Feature_Parser2
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa82 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 80035a0:	e005      	b.n	80035ae <HAL_TIM_IRQHandler+0x56>
=======
<<<<<<< HEAD
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa82 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002c04:	e005      	b.n	8002c12 <HAL_TIM_IRQHandler+0x56>
=======
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa82 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0x56>
>>>>>>> master
>>>>>>> master
=======
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa82 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0x56>
>>>>>>> Feature_Parser2
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa74 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
=======
<<<<<<< HEAD
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa74 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
=======
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa74 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> Feature_Parser2
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fa85 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	771a      	strb	r2, [r3, #28]
=======
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa74 	bl	8003030 <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> master
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fa85 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]
=======
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
>>>>>>> master
>>>>>>> master
=======
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
>>>>>>> Feature_Parser2
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d122      	bne.n	8003608 <HAL_TIM_IRQHandler+0xb0>
=======
<<<<<<< HEAD
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d122      	bne.n	8002c6c <HAL_TIM_IRQHandler+0xb0>
=======
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d122      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
>>>>>>> Feature_Parser2
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d11b      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0204 	mvn.w	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
<<<<<<< HEAD
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_TIM_IRQHandler+0x9e>
=======
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0xb0>
>>>>>>> master
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d11b      	bne.n	8003608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0204 	mvn.w	r2, #4
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
<<<<<<< HEAD
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0x9e>
=======
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> master
>>>>>>> master
=======
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Feature_Parser2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fa58 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0xaa>
=======
<<<<<<< HEAD
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa58 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002c58:	e005      	b.n	8002c66 <HAL_TIM_IRQHandler+0xaa>
=======
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa58 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> master
>>>>>>> master
=======
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa58 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Feature_Parser2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa4a 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
=======
<<<<<<< HEAD
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fa4a 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
=======
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fa4a 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> Feature_Parser2
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fa5b 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	771a      	strb	r2, [r3, #28]
=======
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa4a 	bl	8003030 <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> master
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fa5b 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
=======
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
>>>>>>> master
>>>>>>> master
=======
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
>>>>>>> Feature_Parser2
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b08      	cmp	r3, #8
 8003614:	d122      	bne.n	800365c <HAL_TIM_IRQHandler+0x104>
=======
<<<<<<< HEAD
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x104>
=======
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
>>>>>>> Feature_Parser2
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0208 	mvn.w	r2, #8
 8003d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2204      	movs	r2, #4
 8003d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
<<<<<<< HEAD
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0xf2>
=======
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d122      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x104>
>>>>>>> master
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d11b      	bne.n	800365c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0208 	mvn.w	r2, #8
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2204      	movs	r2, #4
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
<<<<<<< HEAD
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0xf2>
=======
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0xf2>
>>>>>>> master
>>>>>>> master
=======
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0xf2>
>>>>>>> Feature_Parser2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fa2e 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xfe>
=======
<<<<<<< HEAD
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fa2e 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0xfe>
=======
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa2e 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> master
>>>>>>> master
=======
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa2e 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> Feature_Parser2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fa20 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
=======
<<<<<<< HEAD
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa20 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
=======
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa20 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> Feature_Parser2
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fa31 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
=======
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa20 	bl	8003030 <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> master
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fa31 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
=======
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
>>>>>>> master
>>>>>>> master
=======
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
>>>>>>> Feature_Parser2
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b10      	cmp	r3, #16
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x158>
=======
<<<<<<< HEAD
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d122      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x158>
=======
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
>>>>>>> Feature_Parser2
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0210 	mvn.w	r2, #16
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2208      	movs	r2, #8
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
<<<<<<< HEAD
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_TIM_IRQHandler+0x146>
=======
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d122      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x158>
>>>>>>> master
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b10      	cmp	r3, #16
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0210 	mvn.w	r2, #16
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2208      	movs	r2, #8
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
<<<<<<< HEAD
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x146>
=======
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x146>
>>>>>>> master
>>>>>>> master
=======
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x146>
>>>>>>> Feature_Parser2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fa04 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0x152>
=======
<<<<<<< HEAD
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fa04 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e005      	b.n	8002d0e <HAL_TIM_IRQHandler+0x152>
=======
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa04 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0x152>
>>>>>>> master
>>>>>>> master
=======
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fa04 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x152>
>>>>>>> Feature_Parser2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f9f6 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
=======
<<<<<<< HEAD
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f9f6 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
=======
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f9f6 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> Feature_Parser2
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fa07 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
=======
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f9f6 	bl	8003030 <HAL_TIM_OC_DelayElapsedCallback>
>>>>>>> master
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fa07 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
<<<<<<< HEAD
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
=======
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
>>>>>>> master
>>>>>>> master
=======
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
>>>>>>> Feature_Parser2
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10e      	bne.n	80036dc <HAL_TIM_IRQHandler+0x184>
=======
<<<<<<< HEAD
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10e      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x184>
=======
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
>>>>>>> Feature_Parser2
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0201 	mvn.w	r2, #1
 8002d38:	611a      	str	r2, [r3, #16]
=======
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10e      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x184>
>>>>>>> master
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0201 	mvn.w	r2, #1
 80036d4:	611a      	str	r2, [r3, #16]
=======
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0201 	mvn.w	r2, #1
 8002c74:	611a      	str	r2, [r3, #16]
>>>>>>> master
>>>>>>> master
=======
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0201 	mvn.w	r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
>>>>>>> Feature_Parser2
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9d0 	bl	8003a7c <HAL_TIM_PeriodElapsedCallback>
=======
<<<<<<< HEAD
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9d0 	bl	80030e0 <HAL_TIM_PeriodElapsedCallback>
=======
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9d0 	bl	800301c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> master
>>>>>>> master
=======
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9d0 	bl	800415c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_IRQHandler+0x1b0>
=======
<<<<<<< HEAD
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d10e      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x1b0>
=======
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
>>>>>>> Feature_Parser2
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
<<<<<<< HEAD
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d64:	611a      	str	r2, [r3, #16]
=======
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c86:	2b80      	cmp	r3, #128	; 0x80
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x1b0>
>>>>>>> master
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f4:	2b80      	cmp	r3, #128	; 0x80
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
<<<<<<< HEAD
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003700:	611a      	str	r2, [r3, #16]
=======
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ca0:	611a      	str	r2, [r3, #16]
>>>>>>> master
>>>>>>> master
=======
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de0:	611a      	str	r2, [r3, #16]
>>>>>>> Feature_Parser2
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fd82 	bl	800420c <HAL_TIMEx_BreakCallback>
=======
<<<<<<< HEAD
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fd82 	bl	8003870 <HAL_TIMEx_BreakCallback>
=======
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fd82 	bl	80037ac <HAL_TIMEx_BreakCallback>
>>>>>>> master
>>>>>>> master
=======
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fd82 	bl	80048ec <HAL_TIMEx_BreakCallback>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d10e      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1dc>
=======
<<<<<<< HEAD
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d10e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x1dc>
=======
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1dc>
>>>>>>> Feature_Parser2
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
<<<<<<< HEAD
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d90:	611a      	str	r2, [r3, #16]
=======
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b40      	cmp	r3, #64	; 0x40
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x1dc>
>>>>>>> master
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d107      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
<<<<<<< HEAD
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800372c:	611a      	str	r2, [r3, #16]
=======
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ccc:	611a      	str	r2, [r3, #16]
>>>>>>> master
>>>>>>> master
=======
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e0c:	611a      	str	r2, [r3, #16]
>>>>>>> Feature_Parser2
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9cc 	bl	8003acc <HAL_TIM_TriggerCallback>
=======
<<<<<<< HEAD
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f9cc 	bl	8003130 <HAL_TIM_TriggerCallback>
=======
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f9cc 	bl	800306c <HAL_TIM_TriggerCallback>
>>>>>>> master
>>>>>>> master
=======
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9cc 	bl	80041ac <HAL_TIM_TriggerCallback>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b20      	cmp	r3, #32
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_IRQHandler+0x208>
=======
<<<<<<< HEAD
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x208>
=======
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x208>
>>>>>>> Feature_Parser2
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
<<<<<<< HEAD
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0220 	mvn.w	r2, #32
 8002dbc:	611a      	str	r2, [r3, #16]
=======
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x208>
>>>>>>> master
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d107      	bne.n	8003760 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
<<<<<<< HEAD
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0220 	mvn.w	r2, #32
 8003758:	611a      	str	r2, [r3, #16]
=======
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0220 	mvn.w	r2, #32
 8002cf8:	611a      	str	r2, [r3, #16]
>>>>>>> master
>>>>>>> master
=======
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0220 	mvn.w	r2, #32
 8003e38:	611a      	str	r2, [r3, #16]
>>>>>>> Feature_Parser2
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fd4c 	bl	80041f8 <HAL_TIMEx_CommutCallback>
=======
<<<<<<< HEAD
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fd4c 	bl	800385c <HAL_TIMEx_CommutCallback>
=======
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fd4c 	bl	8003798 <HAL_TIMEx_CommutCallback>
>>>>>>> master
>>>>>>> master
=======
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fd4c 	bl	80048d8 <HAL_TIMEx_CommutCallback>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_PWM_ConfigChannel>:
=======
<<<<<<< HEAD
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIM_PWM_ConfigChannel>:
=======
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> master
>>>>>>> master
=======
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Feature_Parser2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
=======
<<<<<<< HEAD
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
=======
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
>>>>>>> Feature_Parser2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800377e:	2302      	movs	r3, #2
 8003780:	e0b4      	b.n	80038ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0b4      	b.n	8002f50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0b4      	b.n	8003fcc <HAL_TIM_PWM_ConfigChannel+0x184>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Feature_Parser2

  htim->State = HAL_TIM_STATE_BUSY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
<<<<<<< HEAD
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	f200 809f 	bhi.w	8002f3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002f3d 	.word	0x08002f3d
 8002e0c:	08002f3d 	.word	0x08002f3d
 8002e10:	08002f3d 	.word	0x08002f3d
 8002e14:	08002e79 	.word	0x08002e79
 8002e18:	08002f3d 	.word	0x08002f3d
 8002e1c:	08002f3d 	.word	0x08002f3d
 8002e20:	08002f3d 	.word	0x08002f3d
 8002e24:	08002ebb 	.word	0x08002ebb
 8002e28:	08002f3d 	.word	0x08002f3d
 8002e2c:	08002f3d 	.word	0x08002f3d
 8002e30:	08002f3d 	.word	0x08002f3d
 8002e34:	08002efb 	.word	0x08002efb
=======
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e0b4      	b.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> master

  htim->State = HAL_TIM_STATE_BUSY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
<<<<<<< HEAD
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b0c      	cmp	r3, #12
 8003796:	f200 809f 	bhi.w	80038d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037d5 	.word	0x080037d5
 80037a4:	080038d9 	.word	0x080038d9
 80037a8:	080038d9 	.word	0x080038d9
 80037ac:	080038d9 	.word	0x080038d9
 80037b0:	08003815 	.word	0x08003815
 80037b4:	080038d9 	.word	0x080038d9
 80037b8:	080038d9 	.word	0x080038d9
 80037bc:	080038d9 	.word	0x080038d9
 80037c0:	08003857 	.word	0x08003857
 80037c4:	080038d9 	.word	0x080038d9
 80037c8:	080038d9 	.word	0x080038d9
 80037cc:	080038d9 	.word	0x080038d9
 80037d0:	08003897 	.word	0x08003897
=======
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	f200 809f 	bhi.w	8002e78 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d75 	.word	0x08002d75
 8002d44:	08002e79 	.word	0x08002e79
 8002d48:	08002e79 	.word	0x08002e79
 8002d4c:	08002e79 	.word	0x08002e79
 8002d50:	08002db5 	.word	0x08002db5
 8002d54:	08002e79 	.word	0x08002e79
 8002d58:	08002e79 	.word	0x08002e79
 8002d5c:	08002e79 	.word	0x08002e79
 8002d60:	08002df7 	.word	0x08002df7
 8002d64:	08002e79 	.word	0x08002e79
 8002d68:	08002e79 	.word	0x08002e79
 8002d6c:	08002e79 	.word	0x08002e79
 8002d70:	08002e37 	.word	0x08002e37
>>>>>>> master
>>>>>>> master
=======
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b0c      	cmp	r3, #12
 8003e76:	f200 809f 	bhi.w	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003eb5 	.word	0x08003eb5
 8003e84:	08003fb9 	.word	0x08003fb9
 8003e88:	08003fb9 	.word	0x08003fb9
 8003e8c:	08003fb9 	.word	0x08003fb9
 8003e90:	08003ef5 	.word	0x08003ef5
 8003e94:	08003fb9 	.word	0x08003fb9
 8003e98:	08003fb9 	.word	0x08003fb9
 8003e9c:	08003fb9 	.word	0x08003fb9
 8003ea0:	08003f37 	.word	0x08003f37
 8003ea4:	08003fb9 	.word	0x08003fb9
 8003ea8:	08003fb9 	.word	0x08003fb9
 8003eac:	08003fb9 	.word	0x08003fb9
 8003eb0:	08003f77 	.word	0x08003f77
>>>>>>> Feature_Parser2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
<<<<<<< HEAD
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fa20 	bl	8003c20 <TIM_OC1_SetConfig>
=======
<<<<<<< HEAD
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fa20 	bl	8003284 <TIM_OC1_SetConfig>
=======
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fa20 	bl	8004300 <TIM_OC1_SetConfig>
>>>>>>> Feature_Parser2

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0208 	orr.w	r2, r2, #8
 8003ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0204 	bic.w	r2, r2, #4
 8003ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6999      	ldr	r1, [r3, #24]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	619a      	str	r2, [r3, #24]
      break;
<<<<<<< HEAD
 8002e76:	e062      	b.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fa20 	bl	80031c0 <TIM_OC1_SetConfig>
>>>>>>> master

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0208 	orr.w	r2, r2, #8
 80037ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0204 	bic.w	r2, r2, #4
 80037fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	619a      	str	r2, [r3, #24]
      break;
<<<<<<< HEAD
 8003812:	e062      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002db2:	e062      	b.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> master
>>>>>>> master
=======
 8003ef2:	e062      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Feature_Parser2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
<<<<<<< HEAD
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fa70 	bl	8003d00 <TIM_OC2_SetConfig>
=======
<<<<<<< HEAD
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fa70 	bl	8003364 <TIM_OC2_SetConfig>
=======
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fa70 	bl	80043e0 <TIM_OC2_SetConfig>
>>>>>>> Feature_Parser2

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6999      	ldr	r1, [r3, #24]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	021a      	lsls	r2, r3, #8
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	619a      	str	r2, [r3, #24]
      break;
<<<<<<< HEAD
 8002eb8:	e041      	b.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fa70 	bl	80032a0 <TIM_OC2_SetConfig>
>>>>>>> master

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800382e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6999      	ldr	r1, [r3, #24]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	021a      	lsls	r2, r3, #8
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	619a      	str	r2, [r3, #24]
      break;
<<<<<<< HEAD
 8003854:	e041      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002df4:	e041      	b.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> master
>>>>>>> master
=======
 8003f34:	e041      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Feature_Parser2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
<<<<<<< HEAD
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fac5 	bl	8003dec <TIM_OC3_SetConfig>
=======
<<<<<<< HEAD
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fac5 	bl	8003450 <TIM_OC3_SetConfig>
=======
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fac5 	bl	80044cc <TIM_OC3_SetConfig>
>>>>>>> Feature_Parser2

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0208 	orr.w	r2, r2, #8
 8003f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0204 	bic.w	r2, r2, #4
 8003f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69d9      	ldr	r1, [r3, #28]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	61da      	str	r2, [r3, #28]
      break;
<<<<<<< HEAD
 8002ef8:	e021      	b.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fac5 	bl	800338c <TIM_OC3_SetConfig>
>>>>>>> master

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0208 	orr.w	r2, r2, #8
 8003870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0204 	bic.w	r2, r2, #4
 8003880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69d9      	ldr	r1, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	61da      	str	r2, [r3, #28]
      break;
<<<<<<< HEAD
 8003894:	e021      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002e34:	e021      	b.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> master
>>>>>>> master
=======
 8003f74:	e021      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Feature_Parser2
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
<<<<<<< HEAD
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fb19 	bl	8003ed4 <TIM_OC4_SetConfig>
=======
<<<<<<< HEAD
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fb19 	bl	8003538 <TIM_OC4_SetConfig>
=======
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fb19 	bl	80045b4 <TIM_OC4_SetConfig>
>>>>>>> Feature_Parser2

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69d9      	ldr	r1, [r3, #28]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	021a      	lsls	r2, r3, #8
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	61da      	str	r2, [r3, #28]
      break;
<<<<<<< HEAD
 8002f3a:	e000      	b.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fb19 	bl	8003474 <TIM_OC4_SetConfig>
>>>>>>> master

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69d9      	ldr	r1, [r3, #28]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	021a      	lsls	r2, r3, #8
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	61da      	str	r2, [r3, #28]
      break;
<<<<<<< HEAD
 80038d6:	e000      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002e76:	e000      	b.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> master
>>>>>>> master
=======
 8003fb6:	e000      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Feature_Parser2
    }

    default:
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 80038d8:	bf00      	nop
=======
<<<<<<< HEAD
 8002f3c:	bf00      	nop
=======
 8003fb8:	bf00      	nop
>>>>>>> Feature_Parser2
  }

  htim->State = HAL_TIM_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08002f58 <HAL_TIM_ConfigClockSource>:
=======
 8002e78:	bf00      	nop
>>>>>>> master
  }

  htim->State = HAL_TIM_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080038f4 <HAL_TIM_ConfigClockSource>:
=======
08002e94 <HAL_TIM_ConfigClockSource>:
>>>>>>> master
>>>>>>> master
=======
08003fd4 <HAL_TIM_ConfigClockSource>:
>>>>>>> Feature_Parser2
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
=======
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIM_ConfigClockSource+0x18>
 8003908:	2302      	movs	r3, #2
 800390a:	e0b3      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x180>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
<<<<<<< HEAD
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_TIM_ConfigClockSource+0x18>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e0b3      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x180>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_ConfigClockSource+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e0b3      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x180>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> master
>>>>>>> master
=======
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIM_ConfigClockSource+0x18>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e0b3      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x180>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Feature_Parser2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
<<<<<<< HEAD
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	60fb      	str	r3, [r7, #12]
=======
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800400a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004012:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
<<<<<<< HEAD
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d03e      	beq.n	8003028 <HAL_TIM_ConfigClockSource+0xd0>
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	f200 8087 	bhi.w	80030c0 <HAL_TIM_ConfigClockSource+0x168>
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb6:	f000 8085 	beq.w	80030c4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	d87f      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x168>
 8002fc0:	2b70      	cmp	r3, #112	; 0x70
 8002fc2:	d01a      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0xa2>
 8002fc4:	2b70      	cmp	r3, #112	; 0x70
 8002fc6:	d87b      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x168>
 8002fc8:	2b60      	cmp	r3, #96	; 0x60
 8002fca:	d050      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x116>
 8002fcc:	2b60      	cmp	r3, #96	; 0x60
 8002fce:	d877      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x168>
 8002fd0:	2b50      	cmp	r3, #80	; 0x50
 8002fd2:	d03c      	beq.n	800304e <HAL_TIM_ConfigClockSource+0xf6>
 8002fd4:	2b50      	cmp	r3, #80	; 0x50
 8002fd6:	d873      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x168>
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d058      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x136>
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d86f      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x168>
 8002fe0:	2b30      	cmp	r3, #48	; 0x30
 8002fe2:	d064      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x156>
 8002fe4:	2b30      	cmp	r3, #48	; 0x30
 8002fe6:	d86b      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x168>
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d060      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x156>
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d867      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x168>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05c      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x156>
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d05a      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x156>
=======
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60fb      	str	r3, [r7, #12]
>>>>>>> master
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800392a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003932:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
<<<<<<< HEAD
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003944:	d03e      	beq.n	80039c4 <HAL_TIM_ConfigClockSource+0xd0>
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394a:	f200 8087 	bhi.w	8003a5c <HAL_TIM_ConfigClockSource+0x168>
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	f000 8085 	beq.w	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	d87f      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x168>
 800395c:	2b70      	cmp	r3, #112	; 0x70
 800395e:	d01a      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0xa2>
 8003960:	2b70      	cmp	r3, #112	; 0x70
 8003962:	d87b      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x168>
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d050      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x116>
 8003968:	2b60      	cmp	r3, #96	; 0x60
 800396a:	d877      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x168>
 800396c:	2b50      	cmp	r3, #80	; 0x50
 800396e:	d03c      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0xf6>
 8003970:	2b50      	cmp	r3, #80	; 0x50
 8003972:	d873      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x168>
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d058      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x136>
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d86f      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x168>
 800397c:	2b30      	cmp	r3, #48	; 0x30
 800397e:	d064      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x156>
 8003980:	2b30      	cmp	r3, #48	; 0x30
 8003982:	d86b      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x168>
 8003984:	2b20      	cmp	r3, #32
 8003986:	d060      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x156>
 8003988:	2b20      	cmp	r3, #32
 800398a:	d867      	bhi.n	8003a5c <HAL_TIM_ConfigClockSource+0x168>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d05c      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x156>
 8003990:	2b10      	cmp	r3, #16
 8003992:	d05a      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x156>
=======
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee4:	d03e      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0xd0>
 8002ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eea:	f200 8087 	bhi.w	8002ffc <HAL_TIM_ConfigClockSource+0x168>
 8002eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef2:	f000 8085 	beq.w	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efa:	d87f      	bhi.n	8002ffc <HAL_TIM_ConfigClockSource+0x168>
 8002efc:	2b70      	cmp	r3, #112	; 0x70
 8002efe:	d01a      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0xa2>
 8002f00:	2b70      	cmp	r3, #112	; 0x70
 8002f02:	d87b      	bhi.n	8002ffc <HAL_TIM_ConfigClockSource+0x168>
 8002f04:	2b60      	cmp	r3, #96	; 0x60
 8002f06:	d050      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x116>
 8002f08:	2b60      	cmp	r3, #96	; 0x60
 8002f0a:	d877      	bhi.n	8002ffc <HAL_TIM_ConfigClockSource+0x168>
 8002f0c:	2b50      	cmp	r3, #80	; 0x50
 8002f0e:	d03c      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0xf6>
 8002f10:	2b50      	cmp	r3, #80	; 0x50
 8002f12:	d873      	bhi.n	8002ffc <HAL_TIM_ConfigClockSource+0x168>
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d058      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x136>
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d86f      	bhi.n	8002ffc <HAL_TIM_ConfigClockSource+0x168>
 8002f1c:	2b30      	cmp	r3, #48	; 0x30
 8002f1e:	d064      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0x156>
 8002f20:	2b30      	cmp	r3, #48	; 0x30
 8002f22:	d86b      	bhi.n	8002ffc <HAL_TIM_ConfigClockSource+0x168>
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d060      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0x156>
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d867      	bhi.n	8002ffc <HAL_TIM_ConfigClockSource+0x168>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d05c      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0x156>
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d05a      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> master
>>>>>>> master
=======
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004024:	d03e      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0xd0>
 8004026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402a:	f200 8087 	bhi.w	800413c <HAL_TIM_ConfigClockSource+0x168>
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004032:	f000 8085 	beq.w	8004140 <HAL_TIM_ConfigClockSource+0x16c>
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403a:	d87f      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 800403c:	2b70      	cmp	r3, #112	; 0x70
 800403e:	d01a      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0xa2>
 8004040:	2b70      	cmp	r3, #112	; 0x70
 8004042:	d87b      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 8004044:	2b60      	cmp	r3, #96	; 0x60
 8004046:	d050      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x116>
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d877      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 800404c:	2b50      	cmp	r3, #80	; 0x50
 800404e:	d03c      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0xf6>
 8004050:	2b50      	cmp	r3, #80	; 0x50
 8004052:	d873      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d058      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x136>
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d86f      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 800405c:	2b30      	cmp	r3, #48	; 0x30
 800405e:	d064      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x156>
 8004060:	2b30      	cmp	r3, #48	; 0x30
 8004062:	d86b      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 8004064:	2b20      	cmp	r3, #32
 8004066:	d060      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x156>
 8004068:	2b20      	cmp	r3, #32
 800406a:	d867      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05c      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x156>
 8004070:	2b10      	cmp	r3, #16
 8004072:	d05a      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> Feature_Parser2
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
<<<<<<< HEAD
<<<<<<< HEAD
 8003994:	e062      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x168>
=======
<<<<<<< HEAD
 8002ff8:	e062      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x168>
=======
 8004074:	e062      	b.n	800413c <HAL_TIM_ConfigClockSource+0x168>
>>>>>>> Feature_Parser2
      TIM_ETR_SetConfig(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f000 fb65 	bl	8004754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004098:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	609a      	str	r2, [r3, #8]
      break;
 80040a2:	e04e      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f000 fb4e 	bl	8004754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c6:	609a      	str	r2, [r3, #8]
      break;
 80040c8:	e03b      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 fac2 	bl	8004660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2150      	movs	r1, #80	; 0x50
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fb1b 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 80040e8:	e02b      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 fae1 	bl	80046be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2160      	movs	r1, #96	; 0x60
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fb0b 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 8004108:	e01b      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	461a      	mov	r2, r3
 8004118:	f000 faa2 	bl	8004660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2140      	movs	r1, #64	; 0x40
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fafb 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 8004128:	e00b      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f000 faf2 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 800413a:	e002      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004140:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080030e0 <HAL_TIM_PeriodElapsedCallback>:
=======
 8002f34:	e062      	b.n	8002ffc <HAL_TIM_ConfigClockSource+0x168>
>>>>>>> master
      TIM_ETR_SetConfig(htim->Instance,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6899      	ldr	r1, [r3, #8]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f000 fb65 	bl	8004074 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	609a      	str	r2, [r3, #8]
      break;
 80039c2:	e04e      	b.n	8003a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6899      	ldr	r1, [r3, #8]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f000 fb4e 	bl	8004074 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e6:	609a      	str	r2, [r3, #8]
      break;
 80039e8:	e03b      	b.n	8003a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f000 fac2 	bl	8003f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2150      	movs	r1, #80	; 0x50
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fb1b 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003a08:	e02b      	b.n	8003a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f000 fae1 	bl	8003fde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2160      	movs	r1, #96	; 0x60
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fb0b 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003a28:	e01b      	b.n	8003a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f000 faa2 	bl	8003f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fafb 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003a48:	e00b      	b.n	8003a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f000 faf2 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003a5a:	e002      	b.n	8003a62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a5c:	bf00      	nop
 8003a5e:	e000      	b.n	8003a62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08003a7c <HAL_TIM_PeriodElapsedCallback>:
=======
0800301c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> master
>>>>>>> master
=======
0800415c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Feature_Parser2
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
=======
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIM_OC_DelayElapsedCallback>:
=======
<<<<<<< HEAD
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> master
>>>>>>> master
=======
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Feature_Parser2
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
=======
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_IC_CaptureCallback>:
=======
<<<<<<< HEAD
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_TIM_IC_CaptureCallback>:
=======
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> master
>>>>>>> master
=======
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Feature_Parser2
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
=======
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
<<<<<<< HEAD
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> master
>>>>>>> master
=======
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Feature_Parser2
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
=======
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_TriggerCallback>:
=======
<<<<<<< HEAD
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_TIM_TriggerCallback>:
=======
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_TIM_TriggerCallback>:
>>>>>>> master
>>>>>>> master
=======
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_TriggerCallback>:
>>>>>>> Feature_Parser2
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
=======
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_Base_SetConfig>:
=======
<<<<<<< HEAD
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <TIM_Base_SetConfig>:
=======
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <TIM_Base_SetConfig>:
>>>>>>> master
>>>>>>> master
=======
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <TIM_Base_SetConfig>:
>>>>>>> Feature_Parser2
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
=======
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a40      	ldr	r2, [pc, #256]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d00f      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a3d      	ldr	r2, [pc, #244]	; (80042d8 <TIM_Base_SetConfig+0x118>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00b      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a3c      	ldr	r2, [pc, #240]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a3b      	ldr	r2, [pc, #236]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a3a      	ldr	r2, [pc, #232]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2f      	ldr	r2, [pc, #188]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d02b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d027      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <TIM_Base_SetConfig+0x118>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d023      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2b      	ldr	r2, [pc, #172]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01f      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d017      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <TIM_Base_SetConfig+0x128>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <TIM_Base_SetConfig+0x12c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00f      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <TIM_Base_SetConfig+0x130>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <TIM_Base_SetConfig+0x134>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d007      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <TIM_Base_SetConfig+0x138>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d003      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a23      	ldr	r2, [pc, #140]	; (80042fc <TIM_Base_SetConfig+0x13c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d108      	bne.n	8004284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
<<<<<<< HEAD
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
=======
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
>>>>>>> master
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a40      	ldr	r2, [pc, #256]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <TIM_Base_SetConfig+0x11c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <TIM_Base_SetConfig+0x120>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d027      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2c      	ldr	r2, [pc, #176]	; (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d023      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <TIM_Base_SetConfig+0x11c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01f      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2a      	ldr	r2, [pc, #168]	; (8003c00 <TIM_Base_SetConfig+0x120>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d017      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a28      	ldr	r2, [pc, #160]	; (8003c08 <TIM_Base_SetConfig+0x128>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a26      	ldr	r2, [pc, #152]	; (8003c10 <TIM_Base_SetConfig+0x130>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <TIM_Base_SetConfig+0x134>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <TIM_Base_SetConfig+0x138>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <TIM_Base_SetConfig+0x13c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d108      	bne.n	8003ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
<<<<<<< HEAD
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
=======
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
>>>>>>> master
>>>>>>> master
=======
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
<<<<<<< HEAD
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
=======
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2

  TIMx->CR1 = tmpcr1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0xf8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d103      	bne.n	80042c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
<<<<<<< HEAD
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
>>>>>>> master

  TIMx->CR1 = tmpcr1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
<<<<<<< HEAD
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> master
>>>>>>> master
=======
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Feature_Parser2
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
<<<<<<< HEAD
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	615a      	str	r2, [r3, #20]
=======
<<<<<<< HEAD
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	615a      	str	r2, [r3, #20]
=======
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	615a      	str	r2, [r3, #20]
>>>>>>> Feature_Parser2
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40000c00 	.word	0x40000c00
 80042e4:	40010400 	.word	0x40010400
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800
 80042f4:	40001800 	.word	0x40001800
 80042f8:	40001c00 	.word	0x40001c00
 80042fc:	40002000 	.word	0x40002000

<<<<<<< HEAD
08003284 <TIM_OC1_SetConfig>:
=======
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	615a      	str	r2, [r3, #20]
>>>>>>> master
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800
 8003c00:	40000c00 	.word	0x40000c00
 8003c04:	40010400 	.word	0x40010400
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800
 8003c14:	40001800 	.word	0x40001800
 8003c18:	40001c00 	.word	0x40001c00
 8003c1c:	40002000 	.word	0x40002000

<<<<<<< HEAD
08003c20 <TIM_OC1_SetConfig>:
=======
080031c0 <TIM_OC1_SetConfig>:
>>>>>>> master
>>>>>>> master
=======
08004300 <TIM_OC1_SetConfig>:
>>>>>>> Feature_Parser2
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
=======
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
<<<<<<< HEAD
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0201 	bic.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	621a      	str	r2, [r3, #32]
=======
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]
>>>>>>> Feature_Parser2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 0302 	bic.w	r3, r3, #2
 8004348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
<<<<<<< HEAD
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a20      	ldr	r2, [pc, #128]	; (800335c <TIM_OC1_SetConfig+0xd8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC1_SetConfig+0x64>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <TIM_OC1_SetConfig+0xdc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10c      	bne.n	8003302 <TIM_OC1_SetConfig+0x7e>
=======
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f023 0201 	bic.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	621a      	str	r2, [r3, #32]
>>>>>>> master

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f023 0302 	bic.w	r3, r3, #2
 8003c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
<<<<<<< HEAD
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a20      	ldr	r2, [pc, #128]	; (8003cf8 <TIM_OC1_SetConfig+0xd8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_OC1_SetConfig+0x64>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <TIM_OC1_SetConfig+0xdc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10c      	bne.n	8003c9e <TIM_OC1_SetConfig+0x7e>
=======
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a20      	ldr	r2, [pc, #128]	; (8003298 <TIM_OC1_SetConfig+0xd8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_OC1_SetConfig+0x64>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <TIM_OC1_SetConfig+0xdc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d10c      	bne.n	800323e <TIM_OC1_SetConfig+0x7e>
>>>>>>> master
>>>>>>> master
=======
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <TIM_OC1_SetConfig+0xd8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_OC1_SetConfig+0x64>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <TIM_OC1_SetConfig+0xdc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10c      	bne.n	800437e <TIM_OC1_SetConfig+0x7e>
>>>>>>> Feature_Parser2
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
<<<<<<< HEAD
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0308 	bic.w	r3, r3, #8
 8003c8a:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0308 	bic.w	r3, r3, #8
 80032ee:	617b      	str	r3, [r7, #20]
=======
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0308 	bic.w	r3, r3, #8
 800436a:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 0304 	bic.w	r3, r3, #4
 800437c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a15      	ldr	r2, [pc, #84]	; (800335c <TIM_OC1_SetConfig+0xd8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_OC1_SetConfig+0x8e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <TIM_OC1_SetConfig+0xdc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d111      	bne.n	8003336 <TIM_OC1_SetConfig+0xb2>
=======
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0308 	bic.w	r3, r3, #8
 800322a:	617b      	str	r3, [r7, #20]
>>>>>>> master
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 0304 	bic.w	r3, r3, #4
 8003c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <TIM_OC1_SetConfig+0xd8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC1_SetConfig+0x8e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <TIM_OC1_SetConfig+0xdc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d111      	bne.n	8003cd2 <TIM_OC1_SetConfig+0xb2>
=======
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a15      	ldr	r2, [pc, #84]	; (8003298 <TIM_OC1_SetConfig+0xd8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d003      	beq.n	800324e <TIM_OC1_SetConfig+0x8e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <TIM_OC1_SetConfig+0xdc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d111      	bne.n	8003272 <TIM_OC1_SetConfig+0xb2>
>>>>>>> master
>>>>>>> master
=======
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <TIM_OC1_SetConfig+0xd8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_OC1_SetConfig+0x8e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a14      	ldr	r2, [pc, #80]	; (80043dc <TIM_OC1_SetConfig+0xdc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d111      	bne.n	80043b2 <TIM_OC1_SetConfig+0xb2>
>>>>>>> Feature_Parser2
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
<<<<<<< HEAD
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	613b      	str	r3, [r7, #16]
=======
<<<<<<< HEAD
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003318:	613b      	str	r3, [r7, #16]
=======
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004394:	613b      	str	r3, [r7, #16]
>>>>>>> Feature_Parser2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800439c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
<<<<<<< HEAD
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
=======
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003254:	613b      	str	r3, [r7, #16]
>>>>>>> master
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
<<<<<<< HEAD
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
=======
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
>>>>>>> master
>>>>>>> master
=======
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
>>>>>>> Feature_Parser2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
<<<<<<< HEAD
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	605a      	str	r2, [r3, #4]
=======
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	605a      	str	r2, [r3, #4]
>>>>>>> Feature_Parser2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003364 <TIM_OC2_SetConfig>:
=======
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	605a      	str	r2, [r3, #4]
>>>>>>> master

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003d00 <TIM_OC2_SetConfig>:
=======
080032a0 <TIM_OC2_SetConfig>:
>>>>>>> master
>>>>>>> master
=======
080043e0 <TIM_OC2_SetConfig>:
>>>>>>> Feature_Parser2
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
=======
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
<<<<<<< HEAD
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f023 0210 	bic.w	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0210 	bic.w	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	621a      	str	r2, [r3, #32]
=======
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f023 0210 	bic.w	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]
>>>>>>> Feature_Parser2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0320 	bic.w	r3, r3, #32
 800442a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
<<<<<<< HEAD
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a22      	ldr	r2, [pc, #136]	; (8003448 <TIM_OC2_SetConfig+0xe4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_OC2_SetConfig+0x68>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <TIM_OC2_SetConfig+0xe8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10d      	bne.n	80033e8 <TIM_OC2_SetConfig+0x84>
=======
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f023 0210 	bic.w	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	621a      	str	r2, [r3, #32]
>>>>>>> master

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0320 	bic.w	r3, r3, #32
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
<<<<<<< HEAD
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <TIM_OC2_SetConfig+0xe4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <TIM_OC2_SetConfig+0x68>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <TIM_OC2_SetConfig+0xe8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10d      	bne.n	8003d84 <TIM_OC2_SetConfig+0x84>
=======
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a22      	ldr	r2, [pc, #136]	; (8003384 <TIM_OC2_SetConfig+0xe4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_OC2_SetConfig+0x68>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a21      	ldr	r2, [pc, #132]	; (8003388 <TIM_OC2_SetConfig+0xe8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d10d      	bne.n	8003324 <TIM_OC2_SetConfig+0x84>
>>>>>>> master
>>>>>>> master
=======
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <TIM_OC2_SetConfig+0xe4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_OC2_SetConfig+0x68>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <TIM_OC2_SetConfig+0xe8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10d      	bne.n	8004464 <TIM_OC2_SetConfig+0x84>
>>>>>>> Feature_Parser2
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
<<<<<<< HEAD
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6e:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d2:	617b      	str	r3, [r7, #20]
=======
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444e:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
<<<<<<< HEAD
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e6:	617b      	str	r3, [r7, #20]
=======
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330e:	617b      	str	r3, [r7, #20]
>>>>>>> master
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
<<<<<<< HEAD
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d82:	617b      	str	r3, [r7, #20]
=======
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003322:	617b      	str	r3, [r7, #20]
>>>>>>> master
>>>>>>> master
=======
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004462:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
<<<<<<< HEAD
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <TIM_OC2_SetConfig+0xe4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_OC2_SetConfig+0x94>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <TIM_OC2_SetConfig+0xe8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d113      	bne.n	8003dbc <TIM_OC2_SetConfig+0xbc>
=======
<<<<<<< HEAD
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <TIM_OC2_SetConfig+0xe4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC2_SetConfig+0x94>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a16      	ldr	r2, [pc, #88]	; (800344c <TIM_OC2_SetConfig+0xe8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d113      	bne.n	8003420 <TIM_OC2_SetConfig+0xbc>
=======
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a17      	ldr	r2, [pc, #92]	; (8003384 <TIM_OC2_SetConfig+0xe4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_OC2_SetConfig+0x94>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a16      	ldr	r2, [pc, #88]	; (8003388 <TIM_OC2_SetConfig+0xe8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d113      	bne.n	800335c <TIM_OC2_SetConfig+0xbc>
>>>>>>> master
>>>>>>> master
=======
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <TIM_OC2_SetConfig+0xe4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_OC2_SetConfig+0x94>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <TIM_OC2_SetConfig+0xe8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d113      	bne.n	800449c <TIM_OC2_SetConfig+0xbc>
>>>>>>> Feature_Parser2
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
<<<<<<< HEAD
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9a:	613b      	str	r3, [r7, #16]
=======
<<<<<<< HEAD
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fe:	613b      	str	r3, [r7, #16]
=======
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800447a:	613b      	str	r3, [r7, #16]
>>>>>>> Feature_Parser2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
<<<<<<< HEAD
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
=======
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800333a:	613b      	str	r3, [r7, #16]
>>>>>>> master
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
<<<<<<< HEAD
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
=======
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
>>>>>>> master
>>>>>>> master
=======
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
>>>>>>> Feature_Parser2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
<<<<<<< HEAD
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]
=======
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]
>>>>>>> Feature_Parser2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003450 <TIM_OC3_SetConfig>:
=======
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]
>>>>>>> master

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40010000 	.word	0x40010000
 8003de8:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003dec <TIM_OC3_SetConfig>:
=======
0800338c <TIM_OC3_SetConfig>:
>>>>>>> master
>>>>>>> master
=======
080044cc <TIM_OC3_SetConfig>:
>>>>>>> Feature_Parser2
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
=======
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
<<<<<<< HEAD
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]
=======
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]
>>>>>>> Feature_Parser2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
<<<<<<< HEAD
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a21      	ldr	r2, [pc, #132]	; (8003530 <TIM_OC3_SetConfig+0xe0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_OC3_SetConfig+0x66>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a20      	ldr	r2, [pc, #128]	; (8003534 <TIM_OC3_SetConfig+0xe4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10d      	bne.n	80034d2 <TIM_OC3_SetConfig+0x82>
=======
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	621a      	str	r2, [r3, #32]
>>>>>>> master

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
<<<<<<< HEAD
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <TIM_OC3_SetConfig+0xe0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_OC3_SetConfig+0x66>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <TIM_OC3_SetConfig+0xe4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10d      	bne.n	8003e6e <TIM_OC3_SetConfig+0x82>
=======
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a21      	ldr	r2, [pc, #132]	; (800346c <TIM_OC3_SetConfig+0xe0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_OC3_SetConfig+0x66>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a20      	ldr	r2, [pc, #128]	; (8003470 <TIM_OC3_SetConfig+0xe4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10d      	bne.n	800340e <TIM_OC3_SetConfig+0x82>
>>>>>>> master
>>>>>>> master
=======
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a21      	ldr	r2, [pc, #132]	; (80045ac <TIM_OC3_SetConfig+0xe0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_OC3_SetConfig+0x66>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <TIM_OC3_SetConfig+0xe4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10d      	bne.n	800454e <TIM_OC3_SetConfig+0x82>
>>>>>>> Feature_Parser2
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
<<<<<<< HEAD
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e58:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034bc:	617b      	str	r3, [r7, #20]
=======
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004538:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800454c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <TIM_OC3_SetConfig+0xe0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_OC3_SetConfig+0x92>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <TIM_OC3_SetConfig+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d113      	bne.n	800350a <TIM_OC3_SetConfig+0xba>
=======
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f8:	617b      	str	r3, [r7, #20]
>>>>>>> master
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <TIM_OC3_SetConfig+0xe0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_OC3_SetConfig+0x92>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <TIM_OC3_SetConfig+0xe4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d113      	bne.n	8003ea6 <TIM_OC3_SetConfig+0xba>
=======
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a16      	ldr	r2, [pc, #88]	; (800346c <TIM_OC3_SetConfig+0xe0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d003      	beq.n	800341e <TIM_OC3_SetConfig+0x92>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a15      	ldr	r2, [pc, #84]	; (8003470 <TIM_OC3_SetConfig+0xe4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d113      	bne.n	8003446 <TIM_OC3_SetConfig+0xba>
>>>>>>> master
>>>>>>> master
=======
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a16      	ldr	r2, [pc, #88]	; (80045ac <TIM_OC3_SetConfig+0xe0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_OC3_SetConfig+0x92>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <TIM_OC3_SetConfig+0xe4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <TIM_OC3_SetConfig+0xba>
>>>>>>> Feature_Parser2
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
<<<<<<< HEAD
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e84:	613b      	str	r3, [r7, #16]
=======
<<<<<<< HEAD
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e8:	613b      	str	r3, [r7, #16]
=======
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004564:	613b      	str	r3, [r7, #16]
>>>>>>> Feature_Parser2
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
<<<<<<< HEAD
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
=======
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003424:	613b      	str	r3, [r7, #16]
>>>>>>> master
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
<<<<<<< HEAD
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
=======
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
>>>>>>> master
>>>>>>> master
=======
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
>>>>>>> Feature_Parser2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
<<<<<<< HEAD
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	605a      	str	r2, [r3, #4]
=======
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]
>>>>>>> Feature_Parser2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40010000 	.word	0x40010000
 80045b0:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003538 <TIM_OC4_SetConfig>:
=======
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	605a      	str	r2, [r3, #4]
>>>>>>> master

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003ed4 <TIM_OC4_SetConfig>:
=======
08003474 <TIM_OC4_SetConfig>:
>>>>>>> master
>>>>>>> master
=======
080045b4 <TIM_OC4_SetConfig>:
>>>>>>> Feature_Parser2
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
=======
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
<<<<<<< HEAD
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]
=======
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]
>>>>>>> Feature_Parser2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	031b      	lsls	r3, r3, #12
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <TIM_OC4_SetConfig+0xa4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_OC4_SetConfig+0x68>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <TIM_OC4_SetConfig+0xa8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d109      	bne.n	80035b4 <TIM_OC4_SetConfig+0x7c>
=======
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	621a      	str	r2, [r3, #32]
>>>>>>> master

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <TIM_OC4_SetConfig+0xa4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_OC4_SetConfig+0x68>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a11      	ldr	r2, [pc, #68]	; (8003f7c <TIM_OC4_SetConfig+0xa8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d109      	bne.n	8003f50 <TIM_OC4_SetConfig+0x7c>
=======
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <TIM_OC4_SetConfig+0xa4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_OC4_SetConfig+0x68>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a11      	ldr	r2, [pc, #68]	; (800351c <TIM_OC4_SetConfig+0xa8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d109      	bne.n	80034f0 <TIM_OC4_SetConfig+0x7c>
>>>>>>> master
>>>>>>> master
=======
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <TIM_OC4_SetConfig+0xa4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_OC4_SetConfig+0x68>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a11      	ldr	r2, [pc, #68]	; (800465c <TIM_OC4_SetConfig+0xa8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d109      	bne.n	8004630 <TIM_OC4_SetConfig+0x7c>
>>>>>>> Feature_Parser2
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
<<<<<<< HEAD
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	019b      	lsls	r3, r3, #6
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
=======
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
>>>>>>> master
>>>>>>> master
=======
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	019b      	lsls	r3, r3, #6
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
<<<<<<< HEAD
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	605a      	str	r2, [r3, #4]
=======
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	605a      	str	r2, [r3, #4]
>>>>>>> Feature_Parser2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40010400 	.word	0x40010400

<<<<<<< HEAD
080035e4 <TIM_TI1_ConfigInputStage>:
=======
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	605a      	str	r2, [r3, #4]
>>>>>>> master

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40010400 	.word	0x40010400

<<<<<<< HEAD
08003f80 <TIM_TI1_ConfigInputStage>:
=======
08003520 <TIM_TI1_ConfigInputStage>:
>>>>>>> master
>>>>>>> master
=======
08004660 <TIM_TI1_ConfigInputStage>:
>>>>>>> Feature_Parser2
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
=======
<<<<<<< HEAD
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
=======
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
>>>>>>> Feature_Parser2
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
<<<<<<< HEAD
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	617b      	str	r3, [r7, #20]
=======
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f023 0201 	bic.w	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800468a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 030a 	bic.w	r3, r3, #10
 800469c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

<<<<<<< HEAD
08003642 <TIM_TI2_ConfigInputStage>:
=======
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	617b      	str	r3, [r7, #20]
>>>>>>> master
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f023 0201 	bic.w	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 030a 	bic.w	r3, r3, #10
 8003fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

<<<<<<< HEAD
08003fde <TIM_TI2_ConfigInputStage>:
=======
0800357e <TIM_TI2_ConfigInputStage>:
>>>>>>> master
>>>>>>> master
=======
080046be <TIM_TI2_ConfigInputStage>:
>>>>>>> Feature_Parser2
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
=======
<<<<<<< HEAD
 8003642:	b480      	push	{r7}
 8003644:	b087      	sub	sp, #28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
=======
 800357e:	b480      	push	{r7}
 8003580:	b087      	sub	sp, #28
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 80046be:	b480      	push	{r7}
 80046c0:	b087      	sub	sp, #28
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
>>>>>>> Feature_Parser2
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
<<<<<<< HEAD
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f023 0210 	bic.w	r2, r3, #16
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]
=======
<<<<<<< HEAD
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0210 	bic.w	r2, r3, #16
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
=======
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
>>>>>>> Feature_Parser2
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	031b      	lsls	r3, r3, #12
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

<<<<<<< HEAD
080036a2 <TIM_ITRx_SetConfig>:
=======
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f023 0210 	bic.w	r2, r3, #16
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]
>>>>>>> master
  tmpccmr1 = TIMx->CCMR1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	031b      	lsls	r3, r3, #12
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800401a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

<<<<<<< HEAD
0800403e <TIM_ITRx_SetConfig>:
=======
080035de <TIM_ITRx_SetConfig>:
>>>>>>> master
>>>>>>> master
=======
0800471e <TIM_ITRx_SetConfig>:
>>>>>>> Feature_Parser2
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
=======
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
<<<<<<< HEAD
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	60fb      	str	r3, [r7, #12]
=======
<<<<<<< HEAD
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60fb      	str	r3, [r7, #12]
=======
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60fb      	str	r3, [r7, #12]
>>>>>>> Feature_Parser2
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	f043 0307 	orr.w	r3, r3, #7
 8004740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

<<<<<<< HEAD
080036d8 <TIM_ETR_SetConfig>:
=======
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	60fb      	str	r3, [r7, #12]
>>>>>>> master
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	f043 0307 	orr.w	r3, r3, #7
 8004060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	609a      	str	r2, [r3, #8]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

<<<<<<< HEAD
08004074 <TIM_ETR_SetConfig>:
=======
08003614 <TIM_ETR_SetConfig>:
>>>>>>> master
>>>>>>> master
=======
08004754 <TIM_ETR_SetConfig>:
>>>>>>> Feature_Parser2
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
=======
<<<<<<< HEAD
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
=======
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
>>>>>>> Feature_Parser2
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800476e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	431a      	orrs	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4313      	orrs	r3, r2
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	609a      	str	r2, [r3, #8]
}
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

<<<<<<< HEAD
08003718 <TIM_CCxChannelCmd>:
=======
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
>>>>>>> master
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	021a      	lsls	r2, r3, #8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	431a      	orrs	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

<<<<<<< HEAD
080040b4 <TIM_CCxChannelCmd>:
=======
08003654 <TIM_CCxChannelCmd>:
>>>>>>> master
>>>>>>> master
=======
08004794 <TIM_CCxChannelCmd>:
>>>>>>> Feature_Parser2
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
=======
<<<<<<< HEAD
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
=======
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
>>>>>>> Feature_Parser2

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
<<<<<<< HEAD
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	2201      	movs	r2, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
=======
<<<<<<< HEAD
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	2201      	movs	r2, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]
=======
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2201      	movs	r2, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]
>>>>>>> Feature_Parser2

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1a      	ldr	r2, [r3, #32]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	401a      	ands	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1a      	ldr	r2, [r3, #32]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

<<<<<<< HEAD
08003764 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2201      	movs	r2, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
>>>>>>> master

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1a      	ldr	r2, [r3, #32]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	401a      	ands	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

<<<<<<< HEAD
08004100 <HAL_TIMEx_MasterConfigSynchronization>:
=======
080036a0 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> master
>>>>>>> master
=======
080047e0 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Feature_Parser2
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
=======
<<<<<<< HEAD
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
=======
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
>>>>>>> master
>>>>>>> master
=======
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
>>>>>>> Feature_Parser2
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
<<<<<<< HEAD
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e05a      	b.n	80041ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e05a      	b.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e05a      	b.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Feature_Parser2

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a21      	ldr	r2, [pc, #132]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004844:	d01d      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1d      	ldr	r2, [pc, #116]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d018      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a18      	ldr	r2, [pc, #96]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d009      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10c      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
<<<<<<< HEAD
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]
=======
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e05a      	b.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> master

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a21      	ldr	r2, [pc, #132]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d01d      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d10c      	bne.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
<<<<<<< HEAD
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	609a      	str	r2, [r3, #8]
=======
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]
>>>>>>> master
>>>>>>> master
=======
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]
>>>>>>> Feature_Parser2
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
<<<<<<< HEAD
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
<<<<<<< HEAD
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Feature_Parser2

  __HAL_UNLOCK(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40010400 	.word	0x40010400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40001800 	.word	0x40001800

<<<<<<< HEAD
0800385c <HAL_TIMEx_CommutCallback>:
=======
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> master

  __HAL_UNLOCK(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800
 80041e8:	40000c00 	.word	0x40000c00
 80041ec:	40010400 	.word	0x40010400
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40001800 	.word	0x40001800

<<<<<<< HEAD
080041f8 <HAL_TIMEx_CommutCallback>:
=======
08003798 <HAL_TIMEx_CommutCallback>:
>>>>>>> master
>>>>>>> master
=======
080048d8 <HAL_TIMEx_CommutCallback>:
>>>>>>> Feature_Parser2
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
=======
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIMEx_BreakCallback>:
=======
<<<<<<< HEAD
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIMEx_BreakCallback>:
=======
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIMEx_BreakCallback>:
>>>>>>> master
>>>>>>> master
=======
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIMEx_BreakCallback>:
>>>>>>> Feature_Parser2
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
=======
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_UART_Init>:
=======
<<<<<<< HEAD
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UART_Init>:
=======
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_Init>:
>>>>>>> master
>>>>>>> master
=======
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_UART_Init>:
>>>>>>> Feature_Parser2
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
=======
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8003892:	2301      	movs	r3, #1
 8003894:	e03f      	b.n	8003916 <HAL_UART_Init+0x92>
=======
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
>>>>>>> master
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 800422e:	2301      	movs	r3, #1
 8004230:	e03f      	b.n	80042b2 <HAL_UART_Init+0x92>
=======
 80037ce:	2301      	movs	r3, #1
 80037d0:	e03f      	b.n	8003852 <HAL_UART_Init+0x92>
>>>>>>> master
>>>>>>> master
=======
 800490e:	2301      	movs	r3, #1
 8004910:	e03f      	b.n	8004992 <HAL_UART_Init+0x92>
>>>>>>> Feature_Parser2
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
<<<<<<< HEAD
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> master
>>>>>>> master
=======
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> Feature_Parser2

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd f926 	bl	8001498 <HAL_UART_MspInit>
=======
<<<<<<< HEAD
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd fc24 	bl	80010f8 <HAL_UART_MspInit>
=======
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fbd8 	bl	8000f9c <HAL_UART_MspInit>
>>>>>>> master
>>>>>>> master
=======
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fd f910 	bl	8001b4c <HAL_UART_MspInit>
>>>>>>> Feature_Parser2
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
<<<<<<< HEAD
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	; 0x24
 8004930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> Feature_Parser2

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
<<<<<<< HEAD
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fba1 	bl	8004010 <UART_SetConfig>
=======
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	; 0x24
 80037f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> master

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
<<<<<<< HEAD
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fba1 	bl	80049ac <UART_SetConfig>
=======
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fba1 	bl	8003f4c <UART_SetConfig>
>>>>>>> master
>>>>>>> master
=======
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fabd 	bl	8004ec4 <UART_SetConfig>
>>>>>>> Feature_Parser2

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
<<<<<<< HEAD
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004278:	611a      	str	r2, [r3, #16]
=======
<<<<<<< HEAD
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038dc:	611a      	str	r2, [r3, #16]
=======
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004958:	611a      	str	r2, [r3, #16]
>>>>>>> Feature_Parser2
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
0800391e <HAL_UART_Transmit>:
=======
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003818:	611a      	str	r2, [r3, #16]
>>>>>>> master
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080042ba <HAL_UART_Transmit>:
=======
0800385a <HAL_UART_Transmit>:
>>>>>>> master
>>>>>>> master
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b088      	sub	sp, #32
 80042be:	af02      	add	r7, sp, #8
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
=======
<<<<<<< HEAD
 800391e:	b580      	push	{r7, lr}
 8003920:	b088      	sub	sp, #32
 8003922:	af02      	add	r7, sp, #8
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b20      	cmp	r3, #32
 800393c:	f040 8083 	bne.w	8003a46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_UART_Transmit+0x2e>
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e07b      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
=======
 800385a:	b580      	push	{r7, lr}
 800385c:	b088      	sub	sp, #32
 800385e:	af02      	add	r7, sp, #8
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
>>>>>>> master
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	f040 8083 	bne.w	80043e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_UART_Transmit+0x2e>
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
<<<<<<< HEAD
 80042e8:	2301      	movs	r3, #1
 80042ea:	e07b      	b.n	80043e4 <HAL_UART_Transmit+0x12a>
=======
 8003888:	2301      	movs	r3, #1
 800388a:	e07b      	b.n	8003984 <HAL_UART_Transmit+0x12a>
>>>>>>> master
>>>>>>> master
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Transmit+0x40>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e074      	b.n	80043e4 <HAL_UART_Transmit+0x12a>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
<<<<<<< HEAD
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_UART_Transmit+0x40>
 800395a:	2302      	movs	r3, #2
 800395c:	e074      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2221      	movs	r2, #33	; 0x21
 8003970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003974:	f7fd fcf2 	bl	800135c <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	88fa      	ldrh	r2, [r7, #6]
 800397e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800398e:	e042      	b.n	8003a16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	d122      	bne.n	80039ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f9c0 	bl	8003d38 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e042      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3302      	adds	r3, #2
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	e017      	b.n	8003a16 <HAL_UART_Transmit+0xf8>
=======
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_UART_Transmit+0x40>
 8003896:	2302      	movs	r3, #2
 8003898:	e074      	b.n	8003984 <HAL_UART_Transmit+0x12a>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> master

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2221      	movs	r2, #33	; 0x21
 800430c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004310:	f7fd fa40 	bl	8001794 <HAL_GetTick>
 8004314:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	88fa      	ldrh	r2, [r7, #6]
 800431a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800432a:	e042      	b.n	80043b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d122      	bne.n	800438a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2200      	movs	r2, #0
 800434c:	2180      	movs	r1, #128	; 0x80
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f9c0 	bl	80046d4 <UART_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e042      	b.n	80043e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004370:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
<<<<<<< HEAD
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3302      	adds	r3, #2
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	e017      	b.n	80043b2 <HAL_UART_Transmit+0xf8>
=======
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3302      	adds	r3, #2
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	e017      	b.n	8003952 <HAL_UART_Transmit+0xf8>
>>>>>>> master
>>>>>>> master
        }
        else
        {
          pData += 1U;
<<<<<<< HEAD
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3301      	adds	r3, #1
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	e013      	b.n	80043b2 <HAL_UART_Transmit+0xf8>
=======
<<<<<<< HEAD
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3301      	adds	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	e013      	b.n	8003a16 <HAL_UART_Transmit+0xf8>
=======
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3301      	adds	r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	e013      	b.n	8003952 <HAL_UART_Transmit+0xf8>
>>>>>>> master
>>>>>>> master
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f99d 	bl	80046d4 <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_UART_Transmit+0xea>
=======
<<<<<<< HEAD
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f99d 	bl	8003d38 <UART_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e01f      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	60ba      	str	r2, [r7, #8]
 8003a0e:	781a      	ldrb	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1b7      	bne.n	8003990 <HAL_UART_Transmit+0x72>
=======
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2200      	movs	r2, #0
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f99d 	bl	8003c74 <UART_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_UART_Transmit+0xea>
>>>>>>> master
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e01f      	b.n	80043e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	60ba      	str	r2, [r7, #8]
 80043aa:	781a      	ldrb	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
<<<<<<< HEAD
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1b7      	bne.n	800432c <HAL_UART_Transmit+0x72>
=======
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1b7      	bne.n	80038cc <HAL_UART_Transmit+0x72>
>>>>>>> master
>>>>>>> master
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2200      	movs	r2, #0
 80043c4:	2140      	movs	r1, #64	; 0x40
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f984 	bl	80046d4 <UART_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e006      	b.n	80043e4 <HAL_UART_Transmit+0x12a>
=======
<<<<<<< HEAD
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2140      	movs	r1, #64	; 0x40
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f984 	bl	8003d38 <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e006      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
=======
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2200      	movs	r2, #0
 8003964:	2140      	movs	r1, #64	; 0x40
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f984 	bl	8003c74 <UART_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e006      	b.n	8003984 <HAL_UART_Transmit+0x12a>
>>>>>>> master
>>>>>>> master
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <HAL_UART_Transmit+0x12a>
=======
<<<<<<< HEAD
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
=======
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_UART_Transmit+0x12a>
>>>>>>> master
>>>>>>> master
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80043e2:	2302      	movs	r3, #2
=======
<<<<<<< HEAD
 8003a46:	2302      	movs	r3, #2
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UART_Receive_IT>:
=======
 8003982:	2302      	movs	r3, #2
>>>>>>> master
  }
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080043ec <HAL_UART_Receive_IT>:
=======
0800398c <HAL_UART_Receive_IT>:
>>>>>>> master
>>>>>>> master
=======
0800499a <HAL_UART_Receive_IT>:
>>>>>>> Feature_Parser2
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
=======
<<<<<<< HEAD
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
=======
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	4613      	mov	r3, r2
 80049a6:	80fb      	strh	r3, [r7, #6]
>>>>>>> Feature_Parser2
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d140      	bne.n	8004a36 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_UART_Receive_IT+0x26>
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8003a76:	2301      	movs	r3, #1
 8003a78:	e039      	b.n	8003aee <HAL_UART_Receive_IT+0x9e>
=======
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
>>>>>>> master
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b20      	cmp	r3, #32
 8004404:	d140      	bne.n	8004488 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_UART_Receive_IT+0x26>
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8004412:	2301      	movs	r3, #1
 8004414:	e039      	b.n	800448a <HAL_UART_Receive_IT+0x9e>
=======
 80039b2:	2301      	movs	r3, #1
 80039b4:	e039      	b.n	8003a2a <HAL_UART_Receive_IT+0x9e>
>>>>>>> master
>>>>>>> master
=======
 80049c0:	2301      	movs	r3, #1
 80049c2:	e039      	b.n	8004a38 <HAL_UART_Receive_IT+0x9e>
>>>>>>> Feature_Parser2
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_UART_Receive_IT+0x38>
 8004420:	2302      	movs	r3, #2
 8004422:	e032      	b.n	800448a <HAL_UART_Receive_IT+0x9e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
<<<<<<< HEAD
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_UART_Receive_IT+0x38>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e032      	b.n	8003aee <HAL_UART_Receive_IT+0x9e>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Receive_IT+0x38>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e032      	b.n	8004a38 <HAL_UART_Receive_IT+0x9e>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> Feature_Parser2

    huart->pRxBuffPtr = pData;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2222      	movs	r2, #34	; 0x22
 80049f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a10:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0220 	orr.w	r2, r2, #32
 8004a30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
<<<<<<< HEAD
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <HAL_UART_Receive_IT+0x9e>
=======
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_UART_Receive_IT+0x38>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e032      	b.n	8003a2a <HAL_UART_Receive_IT+0x9e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> master

    huart->pRxBuffPtr = pData;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2222      	movs	r2, #34	; 0x22
 8004448:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004462:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0220 	orr.w	r2, r2, #32
 8004482:	60da      	str	r2, [r3, #12]

    return HAL_OK;
<<<<<<< HEAD
 8004484:	2300      	movs	r3, #0
 8004486:	e000      	b.n	800448a <HAL_UART_Receive_IT+0x9e>
=======
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <HAL_UART_Receive_IT+0x9e>
>>>>>>> master
>>>>>>> master
=======
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <HAL_UART_Receive_IT+0x9e>
>>>>>>> Feature_Parser2
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 8004488:	2302      	movs	r3, #2
=======
<<<<<<< HEAD
 8003aec:	2302      	movs	r3, #2
=======
 8004a36:	2302      	movs	r3, #2
>>>>>>> Feature_Parser2
  }
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

<<<<<<< HEAD
08003afc <HAL_UART_IRQHandler>:
=======
 8003a28:	2302      	movs	r3, #2
>>>>>>> master
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

<<<<<<< HEAD
08004498 <HAL_UART_IRQHandler>:
=======
08003a38 <HAL_UART_IRQHandler>:
>>>>>>> master
>>>>>>> master
=======
08004a44 <HAL_UART_IRQHandler>:
>>>>>>> Feature_Parser2
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
=======
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10d      	bne.n	8004a96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_UART_IRQHandler+0x52>
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f996 	bl	8004dc0 <UART_Receive_IT>
      return;
<<<<<<< HEAD
 8003b4c:	e0d0      	b.n	8003cf0 <HAL_UART_IRQHandler+0x1f4>
=======
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
>>>>>>> master
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10d      	bne.n	80044ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_UART_IRQHandler+0x52>
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9e0 	bl	80048a8 <UART_Receive_IT>
      return;
<<<<<<< HEAD
 80044e8:	e0d0      	b.n	800468c <HAL_UART_IRQHandler+0x1f4>
=======
 8003a88:	e0d0      	b.n	8003c2c <HAL_UART_IRQHandler+0x1f4>
>>>>>>> master
>>>>>>> master
=======
 8004a94:	e0d0      	b.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
>>>>>>> Feature_Parser2
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< HEAD
<<<<<<< HEAD
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80b0 	beq.w	8004652 <HAL_UART_IRQHandler+0x1ba>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_UART_IRQHandler+0x70>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80a5 	beq.w	8004652 <HAL_UART_IRQHandler+0x1ba>
=======
<<<<<<< HEAD
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80b0 	beq.w	8003cb6 <HAL_UART_IRQHandler+0x1ba>
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_UART_IRQHandler+0x70>
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a5 	beq.w	8003cb6 <HAL_UART_IRQHandler+0x1ba>
=======
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80b0 	beq.w	8004bfe <HAL_UART_IRQHandler+0x1ba>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_UART_IRQHandler+0x70>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80a5 	beq.w	8004bfe <HAL_UART_IRQHandler+0x1ba>
>>>>>>> Feature_Parser2
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x90>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
<<<<<<< HEAD
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80b0 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x1ba>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x70>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80a5 	beq.w	8003bf2 <HAL_UART_IRQHandler+0x1ba>
>>>>>>> master
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_UART_IRQHandler+0x90>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
<<<<<<< HEAD
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> master
>>>>>>> master
=======
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	f043 0201 	orr.w	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Feature_Parser2
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
<<<<<<< HEAD
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_UART_IRQHandler+0xb0>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	f043 0202 	orr.w	r2, r3, #2
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	63da      	str	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_UART_IRQHandler+0xb0>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	f043 0202 	orr.w	r2, r3, #2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xb0>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	f043 0202 	orr.w	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> master
>>>>>>> master
=======
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_UART_IRQHandler+0xb0>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	f043 0202 	orr.w	r2, r3, #2
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Feature_Parser2
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
<<<<<<< HEAD
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_UART_IRQHandler+0xd0>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	f043 0204 	orr.w	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_UART_IRQHandler+0xd0>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_UART_IRQHandler+0xd0>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	f043 0204 	orr.w	r2, r3, #4
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> master
>>>>>>> master
=======
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_UART_IRQHandler+0xd0>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	f043 0204 	orr.w	r2, r3, #4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Feature_Parser2
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< HEAD
<<<<<<< HEAD
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00f      	beq.n	8004592 <HAL_UART_IRQHandler+0xfa>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <HAL_UART_IRQHandler+0xee>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	f043 0208 	orr.w	r2, r3, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c
=======
<<<<<<< HEAD
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00f      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xfa>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <HAL_UART_IRQHandler+0xee>
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	f043 0208 	orr.w	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00f      	beq.n	8003b32 <HAL_UART_IRQHandler+0xfa>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <HAL_UART_IRQHandler+0xee>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	f043 0208 	orr.w	r2, r3, #8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> master
>>>>>>> master
=======
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00f      	beq.n	8004b3e <HAL_UART_IRQHandler+0xfa>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <HAL_UART_IRQHandler+0xee>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	f043 0208 	orr.w	r2, r3, #8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Feature_Parser2
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
<<<<<<< HEAD
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d077      	beq.n	800468a <HAL_UART_IRQHandler+0x1f2>
=======
<<<<<<< HEAD
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d077      	beq.n	8003cee <HAL_UART_IRQHandler+0x1f2>
=======
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d077      	beq.n	8004c36 <HAL_UART_IRQHandler+0x1f2>
>>>>>>> Feature_Parser2
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <HAL_UART_IRQHandler+0x11c>
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
<<<<<<< HEAD
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f97a 	bl	8003f0c <UART_Receive_IT>
=======
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d077      	beq.n	8003c2a <HAL_UART_IRQHandler+0x1f2>
>>>>>>> master
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_UART_IRQHandler+0x11c>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
<<<<<<< HEAD
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f97a 	bl	80048a8 <UART_Receive_IT>
=======
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f97a 	bl	8003e48 <UART_Receive_IT>
>>>>>>> master
>>>>>>> master
=======
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f930 	bl	8004dc0 <UART_Receive_IT>
>>>>>>> Feature_Parser2
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
<<<<<<< HEAD
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <HAL_UART_IRQHandler+0x144>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d031      	beq.n	8004640 <HAL_UART_IRQHandler+0x1a8>
=======
<<<<<<< HEAD
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	bf0c      	ite	eq
 8003c26:	2301      	moveq	r3, #1
 8003c28:	2300      	movne	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <HAL_UART_IRQHandler+0x144>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d031      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x1a8>
=======
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <HAL_UART_IRQHandler+0x144>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d031      	beq.n	8003be0 <HAL_UART_IRQHandler+0x1a8>
>>>>>>> master
>>>>>>> master
=======
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <HAL_UART_IRQHandler+0x144>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d031      	beq.n	8004bec <HAL_UART_IRQHandler+0x1a8>
>>>>>>> Feature_Parser2
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8c3 	bl	8004768 <UART_EndRxTransfer>
=======
<<<<<<< HEAD
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f8c3 	bl	8003dcc <UART_EndRxTransfer>
=======
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f879 	bl	8004c80 <UART_EndRxTransfer>
>>>>>>> Feature_Parser2

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d123      	bne.n	8004be4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695a      	ldr	r2, [r3, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004baa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
<<<<<<< HEAD
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_UART_IRQHandler+0x198>
=======
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f8c3 	bl	8003d08 <UART_EndRxTransfer>
>>>>>>> master

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d123      	bne.n	8004638 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
<<<<<<< HEAD
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_UART_IRQHandler+0x198>
=======
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x198>
>>>>>>> master
>>>>>>> master
=======
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <HAL_UART_IRQHandler+0x198>
>>>>>>> Feature_Parser2
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
<<<<<<< HEAD
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	4a21      	ldr	r2, [pc, #132]	; (8004694 <HAL_UART_IRQHandler+0x1fc>)
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
=======
<<<<<<< HEAD
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c70:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <HAL_UART_IRQHandler+0x1fc>)
 8003c72:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	4a21      	ldr	r2, [pc, #132]	; (8004c40 <HAL_UART_IRQHandler+0x1fc>)
 8004bba:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> Feature_Parser2
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fd fe2d 	bl	8002820 <HAL_DMA_Abort_IT>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d016      	beq.n	8004bfa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 8003c92:	e00e      	b.n	8003cb2 <HAL_UART_IRQHandler+0x1b6>
=======
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	4a21      	ldr	r2, [pc, #132]	; (8003c34 <HAL_UART_IRQHandler+0x1fc>)
 8003bae:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> master
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	4618      	mov	r0, r3
 8004616:	f7fd fae1 	bl	8001bdc <HAL_DMA_Abort_IT>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d016      	beq.n	800464e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800462a:	4610      	mov	r0, r2
 800462c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 800462e:	e00e      	b.n	800464e <HAL_UART_IRQHandler+0x1b6>
=======
 8003bce:	e00e      	b.n	8003bee <HAL_UART_IRQHandler+0x1b6>
>>>>>>> master
>>>>>>> master
=======
 8004bda:	e00e      	b.n	8004bfa <HAL_UART_IRQHandler+0x1b6>
>>>>>>> Feature_Parser2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f845 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004636:	e00a      	b.n	800464e <HAL_UART_IRQHandler+0x1b6>
=======
<<<<<<< HEAD
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f845 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9a:	e00a      	b.n	8003cb2 <HAL_UART_IRQHandler+0x1b6>
=======
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f845 	bl	8003c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd6:	e00a      	b.n	8003bee <HAL_UART_IRQHandler+0x1b6>
>>>>>>> master
>>>>>>> master
=======
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f845 	bl	8004c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be2:	e00a      	b.n	8004bfa <HAL_UART_IRQHandler+0x1b6>
>>>>>>> Feature_Parser2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f841 	bl	80046c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463e:	e006      	b.n	800464e <HAL_UART_IRQHandler+0x1b6>
=======
<<<<<<< HEAD
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f841 	bl	8003d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca2:	e006      	b.n	8003cb2 <HAL_UART_IRQHandler+0x1b6>
=======
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f841 	bl	8003c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bde:	e006      	b.n	8003bee <HAL_UART_IRQHandler+0x1b6>
>>>>>>> master
>>>>>>> master
=======
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f841 	bl	8004c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bea:	e006      	b.n	8004bfa <HAL_UART_IRQHandler+0x1b6>
>>>>>>> Feature_Parser2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f83d 	bl	80046c0 <HAL_UART_ErrorCallback>
=======
<<<<<<< HEAD
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f83d 	bl	8003d24 <HAL_UART_ErrorCallback>
=======
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f83d 	bl	8004c6c <HAL_UART_ErrorCallback>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004bf8:	e01d      	b.n	8004c36 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfa:	bf00      	nop
    return;
<<<<<<< HEAD
 8003cb4:	e01b      	b.n	8003cee <HAL_UART_IRQHandler+0x1f2>
=======
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f83d 	bl	8003c60 <HAL_UART_ErrorCallback>
>>>>>>> master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800464c:	e01d      	b.n	800468a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464e:	bf00      	nop
    return;
<<<<<<< HEAD
 8004650:	e01b      	b.n	800468a <HAL_UART_IRQHandler+0x1f2>
=======
 8003bf0:	e01b      	b.n	8003c2a <HAL_UART_IRQHandler+0x1f2>
>>>>>>> master
>>>>>>> master
=======
 8004bfc:	e01b      	b.n	8004c36 <HAL_UART_IRQHandler+0x1f2>
>>>>>>> Feature_Parser2
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
<<<<<<< HEAD
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_UART_IRQHandler+0x1d6>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_UART_IRQHandler+0x1d6>
=======
<<<<<<< HEAD
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x1d6>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x1d6>
=======
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
>>>>>>> Feature_Parser2
  {
    UART_Transmit_IT(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f866 	bl	8004ce4 <UART_Transmit_IT>
    return;
<<<<<<< HEAD
 8003cd0:	e00e      	b.n	8003cf0 <HAL_UART_IRQHandler+0x1f4>
=======
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_UART_IRQHandler+0x1d6>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_UART_IRQHandler+0x1d6>
>>>>>>> master
  {
    UART_Transmit_IT(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f8b0 	bl	80047cc <UART_Transmit_IT>
    return;
<<<<<<< HEAD
 800466c:	e00e      	b.n	800468c <HAL_UART_IRQHandler+0x1f4>
=======
 8003c0c:	e00e      	b.n	8003c2c <HAL_UART_IRQHandler+0x1f4>
>>>>>>> master
>>>>>>> master
=======
 8004c18:	e00e      	b.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
>>>>>>> Feature_Parser2
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
<<<<<<< HEAD
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_UART_IRQHandler+0x1f4>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <HAL_UART_IRQHandler+0x1f4>
=======
<<<<<<< HEAD
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x1f4>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x1f4>
=======
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d009      	beq.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
>>>>>>> Feature_Parser2
  {
    UART_EndTransmit_IT(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f8ae 	bl	8004d90 <UART_EndTransmit_IT>
    return;
 8004c34:	e000      	b.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004c36:	bf00      	nop
  }
}
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	08004cbd 	.word	0x08004cbd

<<<<<<< HEAD
08003cfc <HAL_UART_TxCpltCallback>:
=======
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <HAL_UART_IRQHandler+0x1f4>
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <HAL_UART_IRQHandler+0x1f4>
>>>>>>> master
  {
    UART_EndTransmit_IT(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8f8 	bl	8004878 <UART_EndTransmit_IT>
    return;
 8004688:	e000      	b.n	800468c <HAL_UART_IRQHandler+0x1f4>
    return;
 800468a:	bf00      	nop
  }
}
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	080047a5 	.word	0x080047a5

<<<<<<< HEAD
08004698 <HAL_UART_TxCpltCallback>:
=======
08003c38 <HAL_UART_TxCpltCallback>:
>>>>>>> master
>>>>>>> master
=======
08004c44 <HAL_UART_TxCpltCallback>:
>>>>>>> Feature_Parser2
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
=======
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UART_RxCpltCallback>:
=======
<<<<<<< HEAD
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UART_RxCpltCallback>:
=======
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_UART_RxCpltCallback>:
>>>>>>> master
>>>>>>> master
=======
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_UART_RxCpltCallback>:
>>>>>>> Feature_Parser2
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
=======
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_UART_ErrorCallback>:
=======
<<<<<<< HEAD
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_ErrorCallback>:
=======
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_UART_ErrorCallback>:
>>>>>>> master
>>>>>>> master
=======
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UART_ErrorCallback>:
>>>>>>> Feature_Parser2
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
=======
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <UART_WaitOnFlagUntilTimeout>:
=======
<<<<<<< HEAD
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <UART_WaitOnFlagUntilTimeout>:
=======
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> master
>>>>>>> master
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	71fb      	strb	r3, [r7, #7]
=======
<<<<<<< HEAD
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d48:	e02c      	b.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d50:	d028      	beq.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d58:	f7fd fb00 	bl	800135c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d21d      	bcs.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e00f      	b.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4013      	ands	r3, r2
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d0c3      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	71fb      	strb	r3, [r7, #7]
>>>>>>> master
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e4:	e02c      	b.n	8004740 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d028      	beq.n	8004740 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <UART_WaitOnFlagUntilTimeout+0x30>
 80046f4:	f7fd f84e 	bl	8001794 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	429a      	cmp	r2, r3
 8004702:	d21d      	bcs.n	8004740 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004712:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e00f      	b.n	8004760 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
<<<<<<< HEAD
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4013      	ands	r3, r2
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	429a      	cmp	r2, r3
 800475c:	d0c3      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d0c3      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> master
>>>>>>> master
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800475e:	2300      	movs	r3, #0
=======
<<<<<<< HEAD
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_EndRxTransfer>:
=======
 8003cfe:	2300      	movs	r3, #0
>>>>>>> master
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08004768 <UART_EndRxTransfer>:
=======
08003d08 <UART_EndRxTransfer>:
>>>>>>> master
>>>>>>> master
=======
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <UART_EndRxTransfer>:
>>>>>>> Feature_Parser2
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
=======
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

<<<<<<< HEAD
08003e08 <UART_DMAAbortOnError>:
=======
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
>>>>>>> master
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800477e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

<<<<<<< HEAD
080047a4 <UART_DMAAbortOnError>:
=======
08003d44 <UART_DMAAbortOnError>:
>>>>>>> master
>>>>>>> master
=======
08004cbc <UART_DMAAbortOnError>:
>>>>>>> Feature_Parser2
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
=======
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
<<<<<<< HEAD
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
>>>>>>> master
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
<<<<<<< HEAD
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> master
>>>>>>> master
=======
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> Feature_Parser2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7ff ff7e 	bl	80046c0 <HAL_UART_ErrorCallback>
=======
<<<<<<< HEAD
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7ff ff7e 	bl	8003d24 <HAL_UART_ErrorCallback>
=======
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff ffc8 	bl	8004c6c <HAL_UART_ErrorCallback>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08003e30 <UART_Transmit_IT>:
=======
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff ff7e 	bl	8003c60 <HAL_UART_ErrorCallback>
>>>>>>> master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080047cc <UART_Transmit_IT>:
=======
08003d6c <UART_Transmit_IT>:
>>>>>>> master
>>>>>>> master
=======
08004ce4 <UART_Transmit_IT>:
>>>>>>> Feature_Parser2
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
=======
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
<<<<<<< HEAD
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b21      	cmp	r3, #33	; 0x21
 80047de:	d144      	bne.n	800486a <UART_Transmit_IT+0x9e>
=======
<<<<<<< HEAD
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b21      	cmp	r3, #33	; 0x21
 8003e42:	d144      	bne.n	8003ece <UART_Transmit_IT+0x9e>
=======
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b21      	cmp	r3, #33	; 0x21
 8004cf6:	d144      	bne.n	8004d82 <UART_Transmit_IT+0x9e>
>>>>>>> Feature_Parser2
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	d11a      	bne.n	8004d38 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d16:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
<<<<<<< HEAD
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	1c9a      	adds	r2, r3, #2
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	621a      	str	r2, [r3, #32]
 8003e76:	e00e      	b.n	8003e96 <UART_Transmit_IT+0x66>
=======
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b21      	cmp	r3, #33	; 0x21
 8003d7e:	d144      	bne.n	8003e0a <UART_Transmit_IT+0x9e>
>>>>>>> master
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e8:	d11a      	bne.n	8004820 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
<<<<<<< HEAD
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	1c9a      	adds	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]
 8004812:	e00e      	b.n	8004832 <UART_Transmit_IT+0x66>
=======
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	1c9a      	adds	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]
 8003db2:	e00e      	b.n	8003dd2 <UART_Transmit_IT+0x66>
>>>>>>> master
>>>>>>> master
=======
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]
 8004d2a:	e00e      	b.n	8004d4a <UART_Transmit_IT+0x66>
>>>>>>> Feature_Parser2
      }
      else
      {
        huart->pTxBuffPtr += 1U;
<<<<<<< HEAD
<<<<<<< HEAD
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]
 800481e:	e008      	b.n	8004832 <UART_Transmit_IT+0x66>
=======
<<<<<<< HEAD
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	621a      	str	r2, [r3, #32]
 8003e82:	e008      	b.n	8003e96 <UART_Transmit_IT+0x66>
=======
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	621a      	str	r2, [r3, #32]
 8003dbe:	e008      	b.n	8003dd2 <UART_Transmit_IT+0x66>
>>>>>>> master
>>>>>>> master
=======
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	621a      	str	r2, [r3, #32]
 8004d36:	e008      	b.n	8004d4a <UART_Transmit_IT+0x66>
>>>>>>> Feature_Parser2
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
<<<<<<< HEAD
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	1c59      	adds	r1, r3, #1
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6211      	str	r1, [r2, #32]
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
=======
<<<<<<< HEAD
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	1c59      	adds	r1, r3, #1
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6211      	str	r1, [r2, #32]
 8003e8e:	781a      	ldrb	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	605a      	str	r2, [r3, #4]
=======
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	1c59      	adds	r1, r3, #1
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6211      	str	r1, [r2, #32]
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	605a      	str	r2, [r3, #4]
>>>>>>> Feature_Parser2
    }

    if (--huart->TxXferCount == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4619      	mov	r1, r3
 8004d58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
<<<<<<< HEAD
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <UART_Transmit_IT+0xa0>
=======
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6211      	str	r1, [r2, #32]
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
>>>>>>> master
    }

    if (--huart->TxXferCount == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4619      	mov	r1, r3
 8004840:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10f      	bne.n	8004866 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004854:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004864:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
<<<<<<< HEAD
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <UART_Transmit_IT+0xa0>
=======
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <UART_Transmit_IT+0xa0>
>>>>>>> master
>>>>>>> master
=======
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e000      	b.n	8004d84 <UART_Transmit_IT+0xa0>
>>>>>>> Feature_Parser2
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 800486a:	2302      	movs	r3, #2
=======
<<<<<<< HEAD
 8003ece:	2302      	movs	r3, #2
=======
 8004d82:	2302      	movs	r3, #2
>>>>>>> Feature_Parser2
  }
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

<<<<<<< HEAD
08003edc <UART_EndTransmit_IT>:
=======
 8003e0a:	2302      	movs	r3, #2
>>>>>>> master
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

<<<<<<< HEAD
08004878 <UART_EndTransmit_IT>:
=======
08003e18 <UART_EndTransmit_IT>:
>>>>>>> master
>>>>>>> master
=======
08004d90 <UART_EndTransmit_IT>:
>>>>>>> Feature_Parser2
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
=======
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
>>>>>>> master
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> master
>>>>>>> master
=======
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> Feature_Parser2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fefd 	bl	8004698 <HAL_UART_TxCpltCallback>
=======
<<<<<<< HEAD
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff fefd 	bl	8003cfc <HAL_UART_TxCpltCallback>
=======
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff47 	bl	8004c44 <HAL_UART_TxCpltCallback>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08003f0c <UART_Receive_IT>:
=======
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fefd 	bl	8003c38 <HAL_UART_TxCpltCallback>
>>>>>>> master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080048a8 <UART_Receive_IT>:
=======
08003e48 <UART_Receive_IT>:
>>>>>>> master
>>>>>>> master
=======
08004dc0 <UART_Receive_IT>:
>>>>>>> Feature_Parser2
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
=======
<<<<<<< HEAD
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
=======
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
>>>>>>> master
>>>>>>> master
=======
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
>>>>>>> Feature_Parser2
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
<<<<<<< HEAD
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b22      	cmp	r3, #34	; 0x22
 80048ba:	d171      	bne.n	80049a0 <UART_Receive_IT+0xf8>
=======
<<<<<<< HEAD
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b22      	cmp	r3, #34	; 0x22
 8003f1e:	d171      	bne.n	8004004 <UART_Receive_IT+0xf8>
=======
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b22      	cmp	r3, #34	; 0x22
 8004dd2:	d171      	bne.n	8004eb8 <UART_Receive_IT+0xf8>
>>>>>>> Feature_Parser2
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ddc:	d123      	bne.n	8004e26 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10e      	bne.n	8004e0a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
<<<<<<< HEAD
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	1c9a      	adds	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
 8003f54:	e029      	b.n	8003faa <UART_Receive_IT+0x9e>
=======
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b22      	cmp	r3, #34	; 0x22
 8003e5a:	d171      	bne.n	8003f40 <UART_Receive_IT+0xf8>
>>>>>>> master
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c4:	d123      	bne.n	800490e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10e      	bne.n	80048f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
<<<<<<< HEAD
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	1c9a      	adds	r2, r3, #2
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
 80048f0:	e029      	b.n	8004946 <UART_Receive_IT+0x9e>
=======
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	1c9a      	adds	r2, r3, #2
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e90:	e029      	b.n	8003ee6 <UART_Receive_IT+0x9e>
>>>>>>> master
>>>>>>> master
=======
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28
 8004e08:	e029      	b.n	8004e5e <UART_Receive_IT+0x9e>
>>>>>>> Feature_Parser2
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
<<<<<<< HEAD
<<<<<<< HEAD
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
 800490c:	e01b      	b.n	8004946 <UART_Receive_IT+0x9e>
=======
<<<<<<< HEAD
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f70:	e01b      	b.n	8003faa <UART_Receive_IT+0x9e>
=======
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8003eac:	e01b      	b.n	8003ee6 <UART_Receive_IT+0x9e>
>>>>>>> master
>>>>>>> master
=======
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
 8004e24:	e01b      	b.n	8004e5e <UART_Receive_IT+0x9e>
>>>>>>> Feature_Parser2
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
<<<<<<< HEAD
<<<<<<< HEAD
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6858      	ldr	r0, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	1c59      	adds	r1, r3, #1
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6291      	str	r1, [r2, #40]	; 0x28
 8004926:	b2c2      	uxtb	r2, r0
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e00c      	b.n	8004946 <UART_Receive_IT+0x9e>
=======
<<<<<<< HEAD
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6858      	ldr	r0, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	1c59      	adds	r1, r3, #1
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6291      	str	r1, [r2, #40]	; 0x28
 8003f8a:	b2c2      	uxtb	r2, r0
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e00c      	b.n	8003faa <UART_Receive_IT+0x9e>
=======
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6858      	ldr	r0, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	1c59      	adds	r1, r3, #1
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6291      	str	r1, [r2, #40]	; 0x28
 8003ec6:	b2c2      	uxtb	r2, r0
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e00c      	b.n	8003ee6 <UART_Receive_IT+0x9e>
>>>>>>> master
>>>>>>> master
=======
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6858      	ldr	r0, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	1c59      	adds	r1, r3, #1
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6291      	str	r1, [r2, #40]	; 0x28
 8004e3e:	b2c2      	uxtb	r2, r0
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e00c      	b.n	8004e5e <UART_Receive_IT+0x9e>
>>>>>>> Feature_Parser2
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
<<<<<<< HEAD
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	1c58      	adds	r0, r3, #1
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	6288      	str	r0, [r1, #40]	; 0x28
 800493e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
=======
<<<<<<< HEAD
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	1c58      	adds	r0, r3, #1
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	6288      	str	r0, [r1, #40]	; 0x28
 8003fa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]
=======
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	1c58      	adds	r0, r3, #1
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	6288      	str	r0, [r1, #40]	; 0x28
 8003ede:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]
>>>>>>> master
>>>>>>> master
=======
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	1c58      	adds	r0, r3, #1
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	6288      	str	r0, [r1, #40]	; 0x28
 8004e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
>>>>>>> Feature_Parser2
      }
    }

    if (--huart->RxXferCount == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29b      	uxth	r3, r3
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4619      	mov	r1, r3
 8004954:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004956:	2b00      	cmp	r3, #0
 8004958:	d120      	bne.n	800499c <UART_Receive_IT+0xf4>
=======
<<<<<<< HEAD
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d120      	bne.n	8004000 <UART_Receive_IT+0xf4>
=======
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d120      	bne.n	8004eb4 <UART_Receive_IT+0xf4>
>>>>>>> Feature_Parser2
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0220 	bic.w	r2, r2, #32
 8004e80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d120      	bne.n	8003f3c <UART_Receive_IT+0xf4>
>>>>>>> master
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0220 	bic.w	r2, r2, #32
 8004968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004978:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> master
>>>>>>> master
=======
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> Feature_Parser2
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fe8a 	bl	80046ac <HAL_UART_RxCpltCallback>
=======
<<<<<<< HEAD
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fe8a 	bl	8003d10 <HAL_UART_RxCpltCallback>
=======
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fed4 	bl	8004c58 <HAL_UART_RxCpltCallback>
>>>>>>> Feature_Parser2
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e002      	b.n	8004eba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
<<<<<<< HEAD
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <UART_Receive_IT+0xfa>
=======
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fe8a 	bl	8003c4c <HAL_UART_RxCpltCallback>
>>>>>>> master
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e002      	b.n	80049a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
<<<<<<< HEAD
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <UART_Receive_IT+0xfa>
=======
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <UART_Receive_IT+0xfa>
>>>>>>> master
>>>>>>> master
=======
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <UART_Receive_IT+0xfa>
>>>>>>> Feature_Parser2
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 80049a0:	2302      	movs	r3, #2
=======
<<<<<<< HEAD
 8004004:	2302      	movs	r3, #2
=======
 8004eb8:	2302      	movs	r3, #2
>>>>>>> Feature_Parser2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

<<<<<<< HEAD
08004010 <UART_SetConfig>:
=======
 8003f40:	2302      	movs	r3, #2
>>>>>>> master
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

<<<<<<< HEAD
080049ac <UART_SetConfig>:
=======
08003f4c <UART_SetConfig>:
>>>>>>> master
>>>>>>> master
=======
08004ec4 <UART_SetConfig>:
>>>>>>> Feature_Parser2
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80049ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b0:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
=======
<<<<<<< HEAD
 8004010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004014:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004018:	af00      	add	r7, sp, #0
 800401a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
=======
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
>>>>>>> master
>>>>>>> master
=======
 8004ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
>>>>>>> Feature_Parser2
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
<<<<<<< HEAD
 80049ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ca:	68d9      	ldr	r1, [r3, #12]
 80049cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	ea40 0301 	orr.w	r3, r0, r1
 80049d6:	6113      	str	r3, [r2, #16]
=======
<<<<<<< HEAD
 800401e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800402a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800402e:	68d9      	ldr	r1, [r3, #12]
 8004030:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	ea40 0301 	orr.w	r3, r0, r1
 800403a:	6113      	str	r3, [r2, #16]
=======
 8003f5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f6a:	68d9      	ldr	r1, [r3, #12]
 8003f6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	ea40 0301 	orr.w	r3, r0, r1
 8003f76:	6113      	str	r3, [r2, #16]
>>>>>>> master
>>>>>>> master
=======
 8004ed2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ede:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ee2:	68d9      	ldr	r1, [r3, #12]
 8004ee4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	ea40 0301 	orr.w	r3, r0, r1
 8004eee:	6113      	str	r3, [r2, #16]
>>>>>>> Feature_Parser2
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
<<<<<<< HEAD
 80049d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80049fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a06:	f021 010c 	bic.w	r1, r1, #12
 8004a0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004a14:	430b      	orrs	r3, r1
 8004a16:	60d3      	str	r3, [r2, #12]
=======
<<<<<<< HEAD
 800403c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	431a      	orrs	r2, r3
 800404a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	431a      	orrs	r2, r3
 8004052:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800405e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800406a:	f021 010c 	bic.w	r1, r1, #12
 800406e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004078:	430b      	orrs	r3, r1
 800407a:	60d3      	str	r3, [r2, #12]
=======
 8003f78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003f9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fa6:	f021 010c 	bic.w	r1, r1, #12
 8003faa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	60d3      	str	r3, [r2, #12]
>>>>>>> master
>>>>>>> master
=======
 8004ef0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004f12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f1e:	f021 010c 	bic.w	r1, r1, #12
 8004f22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	60d3      	str	r3, [r2, #12]
>>>>>>> Feature_Parser2
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
<<<<<<< HEAD
 8004a18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a28:	6999      	ldr	r1, [r3, #24]
 8004a2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	ea40 0301 	orr.w	r3, r0, r1
 8004a34:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a40:	f040 824a 	bne.w	8004ed8 <UART_SetConfig+0x52c>
=======
<<<<<<< HEAD
 800407c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004088:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800408c:	6999      	ldr	r1, [r3, #24]
 800408e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	ea40 0301 	orr.w	r3, r0, r1
 8004098:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a4:	f040 824a 	bne.w	800453c <UART_SetConfig+0x52c>
=======
 8003fb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fc8:	6999      	ldr	r1, [r3, #24]
 8003fca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	ea40 0301 	orr.w	r3, r0, r1
 8003fd4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe0:	f040 824a 	bne.w	8004478 <UART_SetConfig+0x52c>
>>>>>>> master
>>>>>>> master
=======
 8004f30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	ea40 0301 	orr.w	r3, r0, r1
 8004f4c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f58:	f040 824a 	bne.w	80053f0 <UART_SetConfig+0x52c>
>>>>>>> Feature_Parser2
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
<<<<<<< HEAD
 8004a44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b96      	ldr	r3, [pc, #600]	; (8004ca4 <UART_SetConfig+0x2f8>)
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d006      	beq.n	8004a5e <UART_SetConfig+0xb2>
 8004a50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b94      	ldr	r3, [pc, #592]	; (8004ca8 <UART_SetConfig+0x2fc>)
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	f040 8129 	bne.w	8004cb0 <UART_SetConfig+0x304>
=======
<<<<<<< HEAD
 80040a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b96      	ldr	r3, [pc, #600]	; (8004308 <UART_SetConfig+0x2f8>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d006      	beq.n	80040c2 <UART_SetConfig+0xb2>
 80040b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b94      	ldr	r3, [pc, #592]	; (800430c <UART_SetConfig+0x2fc>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	f040 8129 	bne.w	8004314 <UART_SetConfig+0x304>
=======
 8004f5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b96      	ldr	r3, [pc, #600]	; (80051bc <UART_SetConfig+0x2f8>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d006      	beq.n	8004f76 <UART_SetConfig+0xb2>
 8004f68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4b94      	ldr	r3, [pc, #592]	; (80051c0 <UART_SetConfig+0x2fc>)
 8004f70:	429a      	cmp	r2, r3
 8004f72:	f040 8129 	bne.w	80051c8 <UART_SetConfig+0x304>
>>>>>>> Feature_Parser2
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f76:	f7fe fd0f 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 8004f7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 80040ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80040d4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80040d8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80040dc:	4622      	mov	r2, r4
 80040de:	462b      	mov	r3, r5
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80040e6:	415b      	adcs	r3, r3
 80040e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80040ec:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80040f0:	4621      	mov	r1, r4
 80040f2:	1851      	adds	r1, r2, r1
 80040f4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80040f8:	4629      	mov	r1, r5
 80040fa:	414b      	adcs	r3, r1
 80040fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800410c:	4649      	mov	r1, r9
 800410e:	00cb      	lsls	r3, r1, #3
 8004110:	4641      	mov	r1, r8
 8004112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004116:	4641      	mov	r1, r8
 8004118:	00ca      	lsls	r2, r1, #3
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	4603      	mov	r3, r0
 8004120:	4622      	mov	r2, r4
 8004122:	189b      	adds	r3, r3, r2
 8004124:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004128:	462b      	mov	r3, r5
 800412a:	460a      	mov	r2, r1
 800412c:	eb42 0303 	adc.w	r3, r2, r3
 8004130:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004134:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004140:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004144:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004148:	460b      	mov	r3, r1
 800414a:	18db      	adds	r3, r3, r3
 800414c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004150:	4613      	mov	r3, r2
 8004152:	eb42 0303 	adc.w	r3, r2, r3
 8004156:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800415a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800415e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004162:	f7fc f83b 	bl	80001dc <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4b69      	ldr	r3, [pc, #420]	; (8004310 <UART_SetConfig+0x300>)
 800416c:	fba3 2302 	umull	r2, r3, r3, r2
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	011c      	lsls	r4, r3, #4
 8004174:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800417e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004182:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004186:	4642      	mov	r2, r8
 8004188:	464b      	mov	r3, r9
 800418a:	1891      	adds	r1, r2, r2
 800418c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004190:	415b      	adcs	r3, r3
 8004192:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004196:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800419a:	4641      	mov	r1, r8
 800419c:	1851      	adds	r1, r2, r1
 800419e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80041a2:	4649      	mov	r1, r9
 80041a4:	414b      	adcs	r3, r1
 80041a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80041b6:	4659      	mov	r1, fp
 80041b8:	00cb      	lsls	r3, r1, #3
 80041ba:	4651      	mov	r1, sl
 80041bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c0:	4651      	mov	r1, sl
 80041c2:	00ca      	lsls	r2, r1, #3
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	4603      	mov	r3, r0
 80041ca:	4642      	mov	r2, r8
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80041d2:	464b      	mov	r3, r9
 80041d4:	460a      	mov	r2, r1
 80041d6:	eb42 0303 	adc.w	r3, r2, r3
 80041da:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80041de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80041ea:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80041ee:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80041f2:	460b      	mov	r3, r1
 80041f4:	18db      	adds	r3, r3, r3
 80041f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041fa:	4613      	mov	r3, r2
 80041fc:	eb42 0303 	adc.w	r3, r2, r3
 8004200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004204:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004208:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800420c:	f7fb ffe6 	bl	80001dc <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4611      	mov	r1, r2
 8004216:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <UART_SetConfig+0x300>)
 8004218:	fba3 2301 	umull	r2, r3, r3, r1
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	2264      	movs	r2, #100	; 0x64
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	1acb      	subs	r3, r1, r3
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800422c:	4b38      	ldr	r3, [pc, #224]	; (8004310 <UART_SetConfig+0x300>)
 800422e:	fba3 2302 	umull	r2, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800423a:	441c      	add	r4, r3
 800423c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004240:	2200      	movs	r2, #0
 8004242:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004246:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800424a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800424e:	4642      	mov	r2, r8
 8004250:	464b      	mov	r3, r9
 8004252:	1891      	adds	r1, r2, r2
 8004254:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004258:	415b      	adcs	r3, r3
 800425a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800425e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004262:	4641      	mov	r1, r8
 8004264:	1851      	adds	r1, r2, r1
 8004266:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800426a:	4649      	mov	r1, r9
 800426c:	414b      	adcs	r3, r1
 800426e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800427e:	4659      	mov	r1, fp
 8004280:	00cb      	lsls	r3, r1, #3
 8004282:	4651      	mov	r1, sl
 8004284:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004288:	4651      	mov	r1, sl
 800428a:	00ca      	lsls	r2, r1, #3
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	4603      	mov	r3, r0
 8004292:	4642      	mov	r2, r8
 8004294:	189b      	adds	r3, r3, r2
 8004296:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800429a:	464b      	mov	r3, r9
 800429c:	460a      	mov	r2, r1
 800429e:	eb42 0303 	adc.w	r3, r2, r3
 80042a2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80042a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80042b2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80042b6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80042ba:	460b      	mov	r3, r1
 80042bc:	18db      	adds	r3, r3, r3
 80042be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042c2:	4613      	mov	r3, r2
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042cc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80042d0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80042d4:	f7fb ff82 	bl	80001dc <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <UART_SetConfig+0x300>)
 80042de:	fba3 1302 	umull	r1, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2164      	movs	r1, #100	; 0x64
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	3332      	adds	r3, #50	; 0x32
 80042f0:	4a07      	ldr	r2, [pc, #28]	; (8004310 <UART_SetConfig+0x300>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	f003 0207 	and.w	r2, r3, #7
 80042fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4422      	add	r2, r4
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	e349      	b.n	800499c <UART_SetConfig+0x98c>
 8004308:	40011000 	.word	0x40011000
 800430c:	40011400 	.word	0x40011400
 8004310:	51eb851f 	.word	0x51eb851f
=======
 8003fe4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b96      	ldr	r3, [pc, #600]	; (8004244 <UART_SetConfig+0x2f8>)
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d006      	beq.n	8003ffe <UART_SetConfig+0xb2>
 8003ff0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b94      	ldr	r3, [pc, #592]	; (8004248 <UART_SetConfig+0x2fc>)
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	f040 8129 	bne.w	8004250 <UART_SetConfig+0x304>
>>>>>>> master
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a5e:	f7fe f979 	bl	8002d54 <HAL_RCC_GetPCLK2Freq>
 8004a62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8004a66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004a70:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004a74:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004a78:	4622      	mov	r2, r4
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004a82:	415b      	adcs	r3, r3
 8004a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a88:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	1851      	adds	r1, r2, r1
 8004a90:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004a94:	4629      	mov	r1, r5
 8004a96:	414b      	adcs	r3, r1
 8004a98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	00cb      	lsls	r3, r1, #3
 8004aac:	4641      	mov	r1, r8
 8004aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	00ca      	lsls	r2, r1, #3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	4622      	mov	r2, r4
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	460a      	mov	r2, r1
 8004ac8:	eb42 0303 	adc.w	r3, r2, r3
 8004acc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004ad0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004adc:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004ae0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	18db      	adds	r3, r3, r3
 8004ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aec:	4613      	mov	r3, r2
 8004aee:	eb42 0303 	adc.w	r3, r2, r3
 8004af2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004af6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004afa:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004afe:	f7fb fbbf 	bl	8000280 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4b69      	ldr	r3, [pc, #420]	; (8004cac <UART_SetConfig+0x300>)
 8004b08:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	011c      	lsls	r4, r3, #4
 8004b10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b14:	2200      	movs	r2, #0
 8004b16:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004b1a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004b1e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004b22:	4642      	mov	r2, r8
 8004b24:	464b      	mov	r3, r9
 8004b26:	1891      	adds	r1, r2, r2
 8004b28:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004b2c:	415b      	adcs	r3, r3
 8004b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b32:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004b36:	4641      	mov	r1, r8
 8004b38:	1851      	adds	r1, r2, r1
 8004b3a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004b3e:	4649      	mov	r1, r9
 8004b40:	414b      	adcs	r3, r1
 8004b42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004b52:	4659      	mov	r1, fp
 8004b54:	00cb      	lsls	r3, r1, #3
 8004b56:	4651      	mov	r1, sl
 8004b58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	00ca      	lsls	r2, r1, #3
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	4603      	mov	r3, r0
 8004b66:	4642      	mov	r2, r8
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004b6e:	464b      	mov	r3, r9
 8004b70:	460a      	mov	r2, r1
 8004b72:	eb42 0303 	adc.w	r3, r2, r3
 8004b76:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004b7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004b86:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004b8a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004b8e:	460b      	mov	r3, r1
 8004b90:	18db      	adds	r3, r3, r3
 8004b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b96:	4613      	mov	r3, r2
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ba0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004ba4:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004ba8:	f7fb fb6a 	bl	8000280 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4b3e      	ldr	r3, [pc, #248]	; (8004cac <UART_SetConfig+0x300>)
 8004bb4:	fba3 2301 	umull	r2, r3, r3, r1
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	2264      	movs	r2, #100	; 0x64
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	1acb      	subs	r3, r1, r3
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bc8:	4b38      	ldr	r3, [pc, #224]	; (8004cac <UART_SetConfig+0x300>)
 8004bca:	fba3 2302 	umull	r2, r3, r3, r2
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bd6:	441c      	add	r4, r3
 8004bd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004be2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004be6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004bea:	4642      	mov	r2, r8
 8004bec:	464b      	mov	r3, r9
 8004bee:	1891      	adds	r1, r2, r2
 8004bf0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bfa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004bfe:	4641      	mov	r1, r8
 8004c00:	1851      	adds	r1, r2, r1
 8004c02:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004c06:	4649      	mov	r1, r9
 8004c08:	414b      	adcs	r3, r1
 8004c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004c1a:	4659      	mov	r1, fp
 8004c1c:	00cb      	lsls	r3, r1, #3
 8004c1e:	4651      	mov	r1, sl
 8004c20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c24:	4651      	mov	r1, sl
 8004c26:	00ca      	lsls	r2, r1, #3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4642      	mov	r2, r8
 8004c30:	189b      	adds	r3, r3, r2
 8004c32:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004c36:	464b      	mov	r3, r9
 8004c38:	460a      	mov	r2, r1
 8004c3a:	eb42 0303 	adc.w	r3, r2, r3
 8004c3e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004c4e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004c52:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004c56:	460b      	mov	r3, r1
 8004c58:	18db      	adds	r3, r3, r3
 8004c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c5e:	4613      	mov	r3, r2
 8004c60:	eb42 0303 	adc.w	r3, r2, r3
 8004c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c68:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004c6c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004c70:	f7fb fb06 	bl	8000280 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <UART_SetConfig+0x300>)
 8004c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	2164      	movs	r1, #100	; 0x64
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	3332      	adds	r3, #50	; 0x32
 8004c8c:	4a07      	ldr	r2, [pc, #28]	; (8004cac <UART_SetConfig+0x300>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	f003 0207 	and.w	r2, r3, #7
 8004c98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4422      	add	r2, r4
 8004ca0:	609a      	str	r2, [r3, #8]
 8004ca2:	e349      	b.n	8005338 <UART_SetConfig+0x98c>
 8004ca4:	40011000 	.word	0x40011000
 8004ca8:	40011400 	.word	0x40011400
 8004cac:	51eb851f 	.word	0x51eb851f
=======
 8004006:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004010:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004014:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004018:	4622      	mov	r2, r4
 800401a:	462b      	mov	r3, r5
 800401c:	1891      	adds	r1, r2, r2
 800401e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004022:	415b      	adcs	r3, r3
 8004024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004028:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800402c:	4621      	mov	r1, r4
 800402e:	1851      	adds	r1, r2, r1
 8004030:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004034:	4629      	mov	r1, r5
 8004036:	414b      	adcs	r3, r1
 8004038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004048:	4649      	mov	r1, r9
 800404a:	00cb      	lsls	r3, r1, #3
 800404c:	4641      	mov	r1, r8
 800404e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004052:	4641      	mov	r1, r8
 8004054:	00ca      	lsls	r2, r1, #3
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	4603      	mov	r3, r0
 800405c:	4622      	mov	r2, r4
 800405e:	189b      	adds	r3, r3, r2
 8004060:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004064:	462b      	mov	r3, r5
 8004066:	460a      	mov	r2, r1
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004070:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800407c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004080:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004084:	460b      	mov	r3, r1
 8004086:	18db      	adds	r3, r3, r3
 8004088:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800408c:	4613      	mov	r3, r2
 800408e:	eb42 0303 	adc.w	r3, r2, r3
 8004092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004096:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800409a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800409e:	f7fc f8e7 	bl	8000270 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4b69      	ldr	r3, [pc, #420]	; (800424c <UART_SetConfig+0x300>)
 80040a8:	fba3 2302 	umull	r2, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	011c      	lsls	r4, r3, #4
 80040b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80040ba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80040be:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80040c2:	4642      	mov	r2, r8
 80040c4:	464b      	mov	r3, r9
 80040c6:	1891      	adds	r1, r2, r2
 80040c8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80040cc:	415b      	adcs	r3, r3
 80040ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80040d2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80040d6:	4641      	mov	r1, r8
 80040d8:	1851      	adds	r1, r2, r1
 80040da:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80040de:	4649      	mov	r1, r9
 80040e0:	414b      	adcs	r3, r1
 80040e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80040f2:	4659      	mov	r1, fp
 80040f4:	00cb      	lsls	r3, r1, #3
 80040f6:	4651      	mov	r1, sl
 80040f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fc:	4651      	mov	r1, sl
 80040fe:	00ca      	lsls	r2, r1, #3
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	4603      	mov	r3, r0
 8004106:	4642      	mov	r2, r8
 8004108:	189b      	adds	r3, r3, r2
 800410a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800410e:	464b      	mov	r3, r9
 8004110:	460a      	mov	r2, r1
 8004112:	eb42 0303 	adc.w	r3, r2, r3
 8004116:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800411a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004126:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800412a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800412e:	460b      	mov	r3, r1
 8004130:	18db      	adds	r3, r3, r3
 8004132:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004136:	4613      	mov	r3, r2
 8004138:	eb42 0303 	adc.w	r3, r2, r3
 800413c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004140:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004144:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004148:	f7fc f892 	bl	8000270 <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4611      	mov	r1, r2
 8004152:	4b3e      	ldr	r3, [pc, #248]	; (800424c <UART_SetConfig+0x300>)
 8004154:	fba3 2301 	umull	r2, r3, r3, r1
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2264      	movs	r2, #100	; 0x64
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	1acb      	subs	r3, r1, r3
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004168:	4b38      	ldr	r3, [pc, #224]	; (800424c <UART_SetConfig+0x300>)
 800416a:	fba3 2302 	umull	r2, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004176:	441c      	add	r4, r3
 8004178:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800417c:	2200      	movs	r2, #0
 800417e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004182:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004186:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800418a:	4642      	mov	r2, r8
 800418c:	464b      	mov	r3, r9
 800418e:	1891      	adds	r1, r2, r2
 8004190:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004194:	415b      	adcs	r3, r3
 8004196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800419a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800419e:	4641      	mov	r1, r8
 80041a0:	1851      	adds	r1, r2, r1
 80041a2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80041a6:	4649      	mov	r1, r9
 80041a8:	414b      	adcs	r3, r1
 80041aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80041ba:	4659      	mov	r1, fp
 80041bc:	00cb      	lsls	r3, r1, #3
 80041be:	4651      	mov	r1, sl
 80041c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c4:	4651      	mov	r1, sl
 80041c6:	00ca      	lsls	r2, r1, #3
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	4603      	mov	r3, r0
 80041ce:	4642      	mov	r2, r8
 80041d0:	189b      	adds	r3, r3, r2
 80041d2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80041d6:	464b      	mov	r3, r9
 80041d8:	460a      	mov	r2, r1
 80041da:	eb42 0303 	adc.w	r3, r2, r3
 80041de:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80041e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80041ee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80041f2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80041f6:	460b      	mov	r3, r1
 80041f8:	18db      	adds	r3, r3, r3
 80041fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041fe:	4613      	mov	r3, r2
 8004200:	eb42 0303 	adc.w	r3, r2, r3
 8004204:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004208:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800420c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004210:	f7fc f82e 	bl	8000270 <__aeabi_uldivmod>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <UART_SetConfig+0x300>)
 800421a:	fba3 1302 	umull	r1, r3, r3, r2
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2164      	movs	r1, #100	; 0x64
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	3332      	adds	r3, #50	; 0x32
 800422c:	4a07      	ldr	r2, [pc, #28]	; (800424c <UART_SetConfig+0x300>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	f003 0207 	and.w	r2, r3, #7
 8004238:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4422      	add	r2, r4
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	e349      	b.n	80048d8 <UART_SetConfig+0x98c>
 8004244:	40011000 	.word	0x40011000
 8004248:	40011400 	.word	0x40011400
 800424c:	51eb851f 	.word	0x51eb851f
>>>>>>> master
>>>>>>> master
=======
 8004f7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004f88:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004f8c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004f90:	4622      	mov	r2, r4
 8004f92:	462b      	mov	r3, r5
 8004f94:	1891      	adds	r1, r2, r2
 8004f96:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004f9a:	415b      	adcs	r3, r3
 8004f9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fa0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	1851      	adds	r1, r2, r1
 8004fa8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004fac:	4629      	mov	r1, r5
 8004fae:	414b      	adcs	r3, r1
 8004fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	00cb      	lsls	r3, r1, #3
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fca:	4641      	mov	r1, r8
 8004fcc:	00ca      	lsls	r2, r1, #3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004fdc:	462b      	mov	r3, r5
 8004fde:	460a      	mov	r2, r1
 8004fe0:	eb42 0303 	adc.w	r3, r2, r3
 8004fe4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004fe8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ff4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004ff8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	18db      	adds	r3, r3, r3
 8005000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005004:	4613      	mov	r3, r2
 8005006:	eb42 0303 	adc.w	r3, r2, r3
 800500a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800500e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8005012:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005016:	f7fb faed 	bl	80005f4 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4b69      	ldr	r3, [pc, #420]	; (80051c4 <UART_SetConfig+0x300>)
 8005020:	fba3 2302 	umull	r2, r3, r3, r2
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	011c      	lsls	r4, r3, #4
 8005028:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800502c:	2200      	movs	r2, #0
 800502e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005032:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005036:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800503a:	4642      	mov	r2, r8
 800503c:	464b      	mov	r3, r9
 800503e:	1891      	adds	r1, r2, r2
 8005040:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005044:	415b      	adcs	r3, r3
 8005046:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800504a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800504e:	4641      	mov	r1, r8
 8005050:	1851      	adds	r1, r2, r1
 8005052:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005056:	4649      	mov	r1, r9
 8005058:	414b      	adcs	r3, r1
 800505a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800506a:	4659      	mov	r1, fp
 800506c:	00cb      	lsls	r3, r1, #3
 800506e:	4651      	mov	r1, sl
 8005070:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005074:	4651      	mov	r1, sl
 8005076:	00ca      	lsls	r2, r1, #3
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	4603      	mov	r3, r0
 800507e:	4642      	mov	r2, r8
 8005080:	189b      	adds	r3, r3, r2
 8005082:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005086:	464b      	mov	r3, r9
 8005088:	460a      	mov	r2, r1
 800508a:	eb42 0303 	adc.w	r3, r2, r3
 800508e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8005092:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800509e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80050a2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80050a6:	460b      	mov	r3, r1
 80050a8:	18db      	adds	r3, r3, r3
 80050aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ae:	4613      	mov	r3, r2
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050b8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80050bc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80050c0:	f7fb fa98 	bl	80005f4 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4611      	mov	r1, r2
 80050ca:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <UART_SetConfig+0x300>)
 80050cc:	fba3 2301 	umull	r2, r3, r3, r1
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	2264      	movs	r2, #100	; 0x64
 80050d4:	fb02 f303 	mul.w	r3, r2, r3
 80050d8:	1acb      	subs	r3, r1, r3
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050e0:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <UART_SetConfig+0x300>)
 80050e2:	fba3 2302 	umull	r2, r3, r3, r2
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050ee:	441c      	add	r4, r3
 80050f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050fa:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80050fe:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8005102:	4642      	mov	r2, r8
 8005104:	464b      	mov	r3, r9
 8005106:	1891      	adds	r1, r2, r2
 8005108:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800510c:	415b      	adcs	r3, r3
 800510e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005112:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005116:	4641      	mov	r1, r8
 8005118:	1851      	adds	r1, r2, r1
 800511a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800511e:	4649      	mov	r1, r9
 8005120:	414b      	adcs	r3, r1
 8005122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8005132:	4659      	mov	r1, fp
 8005134:	00cb      	lsls	r3, r1, #3
 8005136:	4651      	mov	r1, sl
 8005138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513c:	4651      	mov	r1, sl
 800513e:	00ca      	lsls	r2, r1, #3
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	4603      	mov	r3, r0
 8005146:	4642      	mov	r2, r8
 8005148:	189b      	adds	r3, r3, r2
 800514a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800514e:	464b      	mov	r3, r9
 8005150:	460a      	mov	r2, r1
 8005152:	eb42 0303 	adc.w	r3, r2, r3
 8005156:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800515a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005166:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800516a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800516e:	460b      	mov	r3, r1
 8005170:	18db      	adds	r3, r3, r3
 8005172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005176:	4613      	mov	r3, r2
 8005178:	eb42 0303 	adc.w	r3, r2, r3
 800517c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005180:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005184:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8005188:	f7fb fa34 	bl	80005f4 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <UART_SetConfig+0x300>)
 8005192:	fba3 1302 	umull	r1, r3, r3, r2
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	2164      	movs	r1, #100	; 0x64
 800519a:	fb01 f303 	mul.w	r3, r1, r3
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	3332      	adds	r3, #50	; 0x32
 80051a4:	4a07      	ldr	r2, [pc, #28]	; (80051c4 <UART_SetConfig+0x300>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	f003 0207 	and.w	r2, r3, #7
 80051b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4422      	add	r2, r4
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	e349      	b.n	8005850 <UART_SetConfig+0x98c>
 80051bc:	40011000 	.word	0x40011000
 80051c0:	40011400 	.word	0x40011400
 80051c4:	51eb851f 	.word	0x51eb851f
>>>>>>> Feature_Parser2
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
<<<<<<< HEAD
 8004cb0:	f7fe f83c 	bl	8002d2c <HAL_RCC_GetPCLK1Freq>
 8004cb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004cc2:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004cc6:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004cca:	4622      	mov	r2, r4
 8004ccc:	462b      	mov	r3, r5
 8004cce:	1891      	adds	r1, r2, r2
 8004cd0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004cd4:	415b      	adcs	r3, r3
 8004cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cda:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004cde:	4621      	mov	r1, r4
 8004ce0:	eb12 0a01 	adds.w	sl, r2, r1
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	eb43 0b01 	adc.w	fp, r3, r1
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cfe:	4692      	mov	sl, r2
 8004d00:	469b      	mov	fp, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	eb1a 0303 	adds.w	r3, sl, r3
 8004d08:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	eb4b 0303 	adc.w	r3, fp, r3
 8004d12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004d16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004d22:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004d26:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	18db      	adds	r3, r3, r3
 8004d2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d32:	4613      	mov	r3, r2
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d3c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004d40:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004d44:	f7fb fa9c 	bl	8000280 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <UART_SetConfig+0x528>)
 8004d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	011c      	lsls	r4, r3, #4
 8004d56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004d60:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004d64:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004d68:	4642      	mov	r2, r8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	1891      	adds	r1, r2, r2
 8004d6e:	67b9      	str	r1, [r7, #120]	; 0x78
 8004d70:	415b      	adcs	r3, r3
 8004d72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d74:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004d78:	4641      	mov	r1, r8
 8004d7a:	1851      	adds	r1, r2, r1
 8004d7c:	6739      	str	r1, [r7, #112]	; 0x70
 8004d7e:	4649      	mov	r1, r9
 8004d80:	414b      	adcs	r3, r1
 8004d82:	677b      	str	r3, [r7, #116]	; 0x74
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004d90:	4659      	mov	r1, fp
 8004d92:	00cb      	lsls	r3, r1, #3
 8004d94:	4651      	mov	r1, sl
 8004d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	00ca      	lsls	r2, r1, #3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	4642      	mov	r2, r8
 8004da6:	189b      	adds	r3, r3, r2
 8004da8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004dac:	464b      	mov	r3, r9
 8004dae:	460a      	mov	r2, r1
 8004db0:	eb42 0303 	adc.w	r3, r2, r3
 8004db4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004db8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004dc4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004dc8:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004dcc:	460b      	mov	r3, r1
 8004dce:	18db      	adds	r3, r3, r3
 8004dd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dda:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004dde:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004de2:	f7fb fa4d 	bl	8000280 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <UART_SetConfig+0x528>)
 8004dee:	fba3 2301 	umull	r2, r3, r3, r1
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2264      	movs	r2, #100	; 0x64
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	1acb      	subs	r3, r1, r3
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e02:	4b34      	ldr	r3, [pc, #208]	; (8004ed4 <UART_SetConfig+0x528>)
 8004e04:	fba3 2302 	umull	r2, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e10:	441c      	add	r4, r3
 8004e12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004e1c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004e20:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004e24:	4642      	mov	r2, r8
 8004e26:	464b      	mov	r3, r9
 8004e28:	1891      	adds	r1, r2, r2
 8004e2a:	6639      	str	r1, [r7, #96]	; 0x60
 8004e2c:	415b      	adcs	r3, r3
 8004e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e30:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004e34:	4641      	mov	r1, r8
 8004e36:	1851      	adds	r1, r2, r1
 8004e38:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	414b      	adcs	r3, r1
 8004e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	00cb      	lsls	r3, r1, #3
 8004e50:	4651      	mov	r1, sl
 8004e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e56:	4651      	mov	r1, sl
 8004e58:	00ca      	lsls	r2, r1, #3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4642      	mov	r2, r8
 8004e62:	189b      	adds	r3, r3, r2
 8004e64:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004e68:	464b      	mov	r3, r9
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	eb42 0303 	adc.w	r3, r2, r3
 8004e70:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004e74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004e80:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004e84:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004e88:	460b      	mov	r3, r1
 8004e8a:	18db      	adds	r3, r3, r3
 8004e8c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e8e:	4613      	mov	r3, r2
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	657b      	str	r3, [r7, #84]	; 0x54
 8004e96:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e9a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004e9e:	f7fb f9ef 	bl	8000280 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <UART_SetConfig+0x528>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	; 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	3332      	adds	r3, #50	; 0x32
 8004eba:	4a06      	ldr	r2, [pc, #24]	; (8004ed4 <UART_SetConfig+0x528>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 0207 	and.w	r2, r3, #7
 8004ec6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4422      	add	r2, r4
 8004ece:	609a      	str	r2, [r3, #8]
=======
<<<<<<< HEAD
 8004314:	f7fe faee 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8004318:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800431c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004326:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800432a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800432e:	4622      	mov	r2, r4
 8004330:	462b      	mov	r3, r5
 8004332:	1891      	adds	r1, r2, r2
 8004334:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004338:	415b      	adcs	r3, r3
 800433a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800433e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004342:	4621      	mov	r1, r4
 8004344:	eb12 0a01 	adds.w	sl, r2, r1
 8004348:	4629      	mov	r1, r5
 800434a:	eb43 0b01 	adc.w	fp, r3, r1
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800435a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800435e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004362:	4692      	mov	sl, r2
 8004364:	469b      	mov	fp, r3
 8004366:	4623      	mov	r3, r4
 8004368:	eb1a 0303 	adds.w	r3, sl, r3
 800436c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004370:	462b      	mov	r3, r5
 8004372:	eb4b 0303 	adc.w	r3, fp, r3
 8004376:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800437a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004386:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800438a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800438e:	460b      	mov	r3, r1
 8004390:	18db      	adds	r3, r3, r3
 8004392:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004396:	4613      	mov	r3, r2
 8004398:	eb42 0303 	adc.w	r3, r2, r3
 800439c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043a0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80043a4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80043a8:	f7fb ff18 	bl	80001dc <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4b61      	ldr	r3, [pc, #388]	; (8004538 <UART_SetConfig+0x528>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011c      	lsls	r4, r3, #4
 80043ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80043c4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80043c8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	67b9      	str	r1, [r7, #120]	; 0x78
 80043d4:	415b      	adcs	r3, r3
 80043d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043d8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80043dc:	4641      	mov	r1, r8
 80043de:	1851      	adds	r1, r2, r1
 80043e0:	6739      	str	r1, [r7, #112]	; 0x70
 80043e2:	4649      	mov	r1, r9
 80043e4:	414b      	adcs	r3, r1
 80043e6:	677b      	str	r3, [r7, #116]	; 0x74
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80043f4:	4659      	mov	r1, fp
 80043f6:	00cb      	lsls	r3, r1, #3
 80043f8:	4651      	mov	r1, sl
 80043fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fe:	4651      	mov	r1, sl
 8004400:	00ca      	lsls	r2, r1, #3
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	4603      	mov	r3, r0
 8004408:	4642      	mov	r2, r8
 800440a:	189b      	adds	r3, r3, r2
 800440c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004410:	464b      	mov	r3, r9
 8004412:	460a      	mov	r2, r1
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800441c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004428:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800442c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004430:	460b      	mov	r3, r1
 8004432:	18db      	adds	r3, r3, r3
 8004434:	66bb      	str	r3, [r7, #104]	; 0x68
 8004436:	4613      	mov	r3, r2
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800443e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004442:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004446:	f7fb fec9 	bl	80001dc <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4611      	mov	r1, r2
 8004450:	4b39      	ldr	r3, [pc, #228]	; (8004538 <UART_SetConfig+0x528>)
 8004452:	fba3 2301 	umull	r2, r3, r3, r1
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2264      	movs	r2, #100	; 0x64
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	1acb      	subs	r3, r1, r3
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004466:	4b34      	ldr	r3, [pc, #208]	; (8004538 <UART_SetConfig+0x528>)
 8004468:	fba3 2302 	umull	r2, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004474:	441c      	add	r4, r3
 8004476:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800447a:	2200      	movs	r2, #0
 800447c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004480:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004484:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004488:	4642      	mov	r2, r8
 800448a:	464b      	mov	r3, r9
 800448c:	1891      	adds	r1, r2, r2
 800448e:	6639      	str	r1, [r7, #96]	; 0x60
 8004490:	415b      	adcs	r3, r3
 8004492:	667b      	str	r3, [r7, #100]	; 0x64
 8004494:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004498:	4641      	mov	r1, r8
 800449a:	1851      	adds	r1, r2, r1
 800449c:	65b9      	str	r1, [r7, #88]	; 0x58
 800449e:	4649      	mov	r1, r9
 80044a0:	414b      	adcs	r3, r1
 80044a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80044b0:	4659      	mov	r1, fp
 80044b2:	00cb      	lsls	r3, r1, #3
 80044b4:	4651      	mov	r1, sl
 80044b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ba:	4651      	mov	r1, sl
 80044bc:	00ca      	lsls	r2, r1, #3
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	4603      	mov	r3, r0
 80044c4:	4642      	mov	r2, r8
 80044c6:	189b      	adds	r3, r3, r2
 80044c8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80044cc:	464b      	mov	r3, r9
 80044ce:	460a      	mov	r2, r1
 80044d0:	eb42 0303 	adc.w	r3, r2, r3
 80044d4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80044d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80044e4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80044e8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80044ec:	460b      	mov	r3, r1
 80044ee:	18db      	adds	r3, r3, r3
 80044f0:	653b      	str	r3, [r7, #80]	; 0x50
 80044f2:	4613      	mov	r3, r2
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	657b      	str	r3, [r7, #84]	; 0x54
 80044fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044fe:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004502:	f7fb fe6b 	bl	80001dc <__aeabi_uldivmod>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <UART_SetConfig+0x528>)
 800450c:	fba3 1302 	umull	r1, r3, r3, r2
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	2164      	movs	r1, #100	; 0x64
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	3332      	adds	r3, #50	; 0x32
 800451e:	4a06      	ldr	r2, [pc, #24]	; (8004538 <UART_SetConfig+0x528>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	f003 0207 	and.w	r2, r3, #7
 800452a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4422      	add	r2, r4
 8004532:	609a      	str	r2, [r3, #8]
=======
 8004250:	f7fe faee 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004254:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004258:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800425c:	2200      	movs	r2, #0
 800425e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004262:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004266:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800426a:	4622      	mov	r2, r4
 800426c:	462b      	mov	r3, r5
 800426e:	1891      	adds	r1, r2, r2
 8004270:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004274:	415b      	adcs	r3, r3
 8004276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800427a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800427e:	4621      	mov	r1, r4
 8004280:	eb12 0a01 	adds.w	sl, r2, r1
 8004284:	4629      	mov	r1, r5
 8004286:	eb43 0b01 	adc.w	fp, r3, r1
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004296:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800429a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429e:	4692      	mov	sl, r2
 80042a0:	469b      	mov	fp, r3
 80042a2:	4623      	mov	r3, r4
 80042a4:	eb1a 0303 	adds.w	r3, sl, r3
 80042a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80042ac:	462b      	mov	r3, r5
 80042ae:	eb4b 0303 	adc.w	r3, fp, r3
 80042b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80042b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80042c2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80042c6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80042ca:	460b      	mov	r3, r1
 80042cc:	18db      	adds	r3, r3, r3
 80042ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042d2:	4613      	mov	r3, r2
 80042d4:	eb42 0303 	adc.w	r3, r2, r3
 80042d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80042e0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80042e4:	f7fb ffc4 	bl	8000270 <__aeabi_uldivmod>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4b61      	ldr	r3, [pc, #388]	; (8004474 <UART_SetConfig+0x528>)
 80042ee:	fba3 2302 	umull	r2, r3, r3, r2
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	011c      	lsls	r4, r3, #4
 80042f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004300:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004304:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004308:	4642      	mov	r2, r8
 800430a:	464b      	mov	r3, r9
 800430c:	1891      	adds	r1, r2, r2
 800430e:	67b9      	str	r1, [r7, #120]	; 0x78
 8004310:	415b      	adcs	r3, r3
 8004312:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004314:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004318:	4641      	mov	r1, r8
 800431a:	1851      	adds	r1, r2, r1
 800431c:	6739      	str	r1, [r7, #112]	; 0x70
 800431e:	4649      	mov	r1, r9
 8004320:	414b      	adcs	r3, r1
 8004322:	677b      	str	r3, [r7, #116]	; 0x74
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004330:	4659      	mov	r1, fp
 8004332:	00cb      	lsls	r3, r1, #3
 8004334:	4651      	mov	r1, sl
 8004336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800433a:	4651      	mov	r1, sl
 800433c:	00ca      	lsls	r2, r1, #3
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	4603      	mov	r3, r0
 8004344:	4642      	mov	r2, r8
 8004346:	189b      	adds	r3, r3, r2
 8004348:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800434c:	464b      	mov	r3, r9
 800434e:	460a      	mov	r2, r1
 8004350:	eb42 0303 	adc.w	r3, r2, r3
 8004354:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004358:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004364:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004368:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 800436c:	460b      	mov	r3, r1
 800436e:	18db      	adds	r3, r3, r3
 8004370:	66bb      	str	r3, [r7, #104]	; 0x68
 8004372:	4613      	mov	r3, r2
 8004374:	eb42 0303 	adc.w	r3, r2, r3
 8004378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800437a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800437e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004382:	f7fb ff75 	bl	8000270 <__aeabi_uldivmod>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4611      	mov	r1, r2
 800438c:	4b39      	ldr	r3, [pc, #228]	; (8004474 <UART_SetConfig+0x528>)
 800438e:	fba3 2301 	umull	r2, r3, r3, r1
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	2264      	movs	r2, #100	; 0x64
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	1acb      	subs	r3, r1, r3
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043a2:	4b34      	ldr	r3, [pc, #208]	; (8004474 <UART_SetConfig+0x528>)
 80043a4:	fba3 2302 	umull	r2, r3, r3, r2
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b0:	441c      	add	r4, r3
 80043b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80043bc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80043c0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	6639      	str	r1, [r7, #96]	; 0x60
 80043cc:	415b      	adcs	r3, r3
 80043ce:	667b      	str	r3, [r7, #100]	; 0x64
 80043d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004408:	464b      	mov	r3, r9
 800440a:	460a      	mov	r2, r1
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004414:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004420:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004424:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004428:	460b      	mov	r3, r1
 800442a:	18db      	adds	r3, r3, r3
 800442c:	653b      	str	r3, [r7, #80]	; 0x50
 800442e:	4613      	mov	r3, r2
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	657b      	str	r3, [r7, #84]	; 0x54
 8004436:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800443a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800443e:	f7fb ff17 	bl	8000270 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <UART_SetConfig+0x528>)
 8004448:	fba3 1302 	umull	r1, r3, r3, r2
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	2164      	movs	r1, #100	; 0x64
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	3332      	adds	r3, #50	; 0x32
 800445a:	4a06      	ldr	r2, [pc, #24]	; (8004474 <UART_SetConfig+0x528>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	f003 0207 	and.w	r2, r3, #7
 8004466:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4422      	add	r2, r4
 800446e:	609a      	str	r2, [r3, #8]
>>>>>>> master
>>>>>>> master
=======
 80051c8:	f7fe fbd2 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 80051cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80051da:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80051de:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80051e2:	4622      	mov	r2, r4
 80051e4:	462b      	mov	r3, r5
 80051e6:	1891      	adds	r1, r2, r2
 80051e8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80051ec:	415b      	adcs	r3, r3
 80051ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80051f6:	4621      	mov	r1, r4
 80051f8:	eb12 0a01 	adds.w	sl, r2, r1
 80051fc:	4629      	mov	r1, r5
 80051fe:	eb43 0b01 	adc.w	fp, r3, r1
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800520e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005212:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005216:	4692      	mov	sl, r2
 8005218:	469b      	mov	fp, r3
 800521a:	4623      	mov	r3, r4
 800521c:	eb1a 0303 	adds.w	r3, sl, r3
 8005220:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005224:	462b      	mov	r3, r5
 8005226:	eb4b 0303 	adc.w	r3, fp, r3
 800522a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800522e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800523a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800523e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8005242:	460b      	mov	r3, r1
 8005244:	18db      	adds	r3, r3, r3
 8005246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800524a:	4613      	mov	r3, r2
 800524c:	eb42 0303 	adc.w	r3, r2, r3
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005254:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005258:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800525c:	f7fb f9ca 	bl	80005f4 <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4b61      	ldr	r3, [pc, #388]	; (80053ec <UART_SetConfig+0x528>)
 8005266:	fba3 2302 	umull	r2, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	011c      	lsls	r4, r3, #4
 800526e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005272:	2200      	movs	r2, #0
 8005274:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005278:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800527c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	1891      	adds	r1, r2, r2
 8005286:	67b9      	str	r1, [r7, #120]	; 0x78
 8005288:	415b      	adcs	r3, r3
 800528a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800528c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005290:	4641      	mov	r1, r8
 8005292:	1851      	adds	r1, r2, r1
 8005294:	6739      	str	r1, [r7, #112]	; 0x70
 8005296:	4649      	mov	r1, r9
 8005298:	414b      	adcs	r3, r1
 800529a:	677b      	str	r3, [r7, #116]	; 0x74
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80052a8:	4659      	mov	r1, fp
 80052aa:	00cb      	lsls	r3, r1, #3
 80052ac:	4651      	mov	r1, sl
 80052ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b2:	4651      	mov	r1, sl
 80052b4:	00ca      	lsls	r2, r1, #3
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	4642      	mov	r2, r8
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80052c4:	464b      	mov	r3, r9
 80052c6:	460a      	mov	r2, r1
 80052c8:	eb42 0303 	adc.w	r3, r2, r3
 80052cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80052d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80052dc:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80052e0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80052e4:	460b      	mov	r3, r1
 80052e6:	18db      	adds	r3, r3, r3
 80052e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ea:	4613      	mov	r3, r2
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80052f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80052fa:	f7fb f97b 	bl	80005f4 <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4611      	mov	r1, r2
 8005304:	4b39      	ldr	r3, [pc, #228]	; (80053ec <UART_SetConfig+0x528>)
 8005306:	fba3 2301 	umull	r2, r3, r3, r1
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	2264      	movs	r2, #100	; 0x64
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	1acb      	subs	r3, r1, r3
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800531a:	4b34      	ldr	r3, [pc, #208]	; (80053ec <UART_SetConfig+0x528>)
 800531c:	fba3 2302 	umull	r2, r3, r3, r2
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005328:	441c      	add	r4, r3
 800532a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800532e:	2200      	movs	r2, #0
 8005330:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005334:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005338:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800533c:	4642      	mov	r2, r8
 800533e:	464b      	mov	r3, r9
 8005340:	1891      	adds	r1, r2, r2
 8005342:	6639      	str	r1, [r7, #96]	; 0x60
 8005344:	415b      	adcs	r3, r3
 8005346:	667b      	str	r3, [r7, #100]	; 0x64
 8005348:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800534c:	4641      	mov	r1, r8
 800534e:	1851      	adds	r1, r2, r1
 8005350:	65b9      	str	r1, [r7, #88]	; 0x58
 8005352:	4649      	mov	r1, r9
 8005354:	414b      	adcs	r3, r1
 8005356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005364:	4659      	mov	r1, fp
 8005366:	00cb      	lsls	r3, r1, #3
 8005368:	4651      	mov	r1, sl
 800536a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800536e:	4651      	mov	r1, sl
 8005370:	00ca      	lsls	r2, r1, #3
 8005372:	4610      	mov	r0, r2
 8005374:	4619      	mov	r1, r3
 8005376:	4603      	mov	r3, r0
 8005378:	4642      	mov	r2, r8
 800537a:	189b      	adds	r3, r3, r2
 800537c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005380:	464b      	mov	r3, r9
 8005382:	460a      	mov	r2, r1
 8005384:	eb42 0303 	adc.w	r3, r2, r3
 8005388:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800538c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005398:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800539c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80053a0:	460b      	mov	r3, r1
 80053a2:	18db      	adds	r3, r3, r3
 80053a4:	653b      	str	r3, [r7, #80]	; 0x50
 80053a6:	4613      	mov	r3, r2
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	657b      	str	r3, [r7, #84]	; 0x54
 80053ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053b2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80053b6:	f7fb f91d 	bl	80005f4 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <UART_SetConfig+0x528>)
 80053c0:	fba3 1302 	umull	r1, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	2164      	movs	r1, #100	; 0x64
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	3332      	adds	r3, #50	; 0x32
 80053d2:	4a06      	ldr	r2, [pc, #24]	; (80053ec <UART_SetConfig+0x528>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	f003 0207 	and.w	r2, r3, #7
 80053de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4422      	add	r2, r4
 80053e6:	609a      	str	r2, [r3, #8]
>>>>>>> Feature_Parser2
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8004ed0:	e232      	b.n	8005338 <UART_SetConfig+0x98c>
 8004ed2:	bf00      	nop
 8004ed4:	51eb851f 	.word	0x51eb851f
=======
<<<<<<< HEAD
 8004534:	e232      	b.n	800499c <UART_SetConfig+0x98c>
 8004536:	bf00      	nop
 8004538:	51eb851f 	.word	0x51eb851f
=======
 80053e8:	e232      	b.n	8005850 <UART_SetConfig+0x98c>
 80053ea:	bf00      	nop
 80053ec:	51eb851f 	.word	0x51eb851f
>>>>>>> Feature_Parser2
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b8d      	ldr	r3, [pc, #564]	; (800562c <UART_SetConfig+0x768>)
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d006      	beq.n	800540a <UART_SetConfig+0x546>
 80053fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b8b      	ldr	r3, [pc, #556]	; (8005630 <UART_SetConfig+0x76c>)
 8005404:	429a      	cmp	r2, r3
 8005406:	f040 8117 	bne.w	8005638 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800540a:	f7fe fac5 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 800540e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005412:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005416:	2200      	movs	r2, #0
 8005418:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800541c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005420:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005424:	4622      	mov	r2, r4
 8005426:	462b      	mov	r3, r5
 8005428:	1891      	adds	r1, r2, r2
 800542a:	64b9      	str	r1, [r7, #72]	; 0x48
 800542c:	415b      	adcs	r3, r3
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005434:	4621      	mov	r1, r4
 8005436:	eb12 0801 	adds.w	r8, r2, r1
 800543a:	4629      	mov	r1, r5
 800543c:	eb43 0901 	adc.w	r9, r3, r1
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800544c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005450:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005454:	4690      	mov	r8, r2
 8005456:	4699      	mov	r9, r3
 8005458:	4623      	mov	r3, r4
 800545a:	eb18 0303 	adds.w	r3, r8, r3
 800545e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005462:	462b      	mov	r3, r5
 8005464:	eb49 0303 	adc.w	r3, r9, r3
 8005468:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800546c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005478:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8005488:	4629      	mov	r1, r5
 800548a:	008b      	lsls	r3, r1, #2
 800548c:	4621      	mov	r1, r4
 800548e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005492:	4621      	mov	r1, r4
 8005494:	008a      	lsls	r2, r1, #2
 8005496:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800549a:	f7fb f8ab 	bl	80005f4 <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4b64      	ldr	r3, [pc, #400]	; (8005634 <UART_SetConfig+0x770>)
 80054a4:	fba3 2302 	umull	r2, r3, r3, r2
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	011c      	lsls	r4, r3, #4
 80054ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80054b6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80054ba:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80054be:	4642      	mov	r2, r8
 80054c0:	464b      	mov	r3, r9
 80054c2:	1891      	adds	r1, r2, r2
 80054c4:	6439      	str	r1, [r7, #64]	; 0x40
 80054c6:	415b      	adcs	r3, r3
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ce:	4641      	mov	r1, r8
 80054d0:	1851      	adds	r1, r2, r1
 80054d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80054d4:	4649      	mov	r1, r9
 80054d6:	414b      	adcs	r3, r1
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80054e6:	4659      	mov	r1, fp
 80054e8:	00cb      	lsls	r3, r1, #3
 80054ea:	4651      	mov	r1, sl
 80054ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f0:	4651      	mov	r1, sl
 80054f2:	00ca      	lsls	r2, r1, #3
 80054f4:	4610      	mov	r0, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	4603      	mov	r3, r0
 80054fa:	4642      	mov	r2, r8
 80054fc:	189b      	adds	r3, r3, r2
 80054fe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005502:	464b      	mov	r3, r9
 8005504:	460a      	mov	r2, r1
 8005506:	eb42 0303 	adc.w	r3, r2, r3
 800550a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800550e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800551a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800552a:	4649      	mov	r1, r9
 800552c:	008b      	lsls	r3, r1, #2
 800552e:	4641      	mov	r1, r8
 8005530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005534:	4641      	mov	r1, r8
 8005536:	008a      	lsls	r2, r1, #2
 8005538:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800553c:	f7fb f85a 	bl	80005f4 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4b3b      	ldr	r3, [pc, #236]	; (8005634 <UART_SetConfig+0x770>)
 8005546:	fba3 1302 	umull	r1, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	2164      	movs	r1, #100	; 0x64
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	3332      	adds	r3, #50	; 0x32
 8005558:	4a36      	ldr	r2, [pc, #216]	; (8005634 <UART_SetConfig+0x770>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005564:	441c      	add	r4, r3
 8005566:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005570:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005574:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	1891      	adds	r1, r2, r2
 800557e:	6339      	str	r1, [r7, #48]	; 0x30
 8005580:	415b      	adcs	r3, r3
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
 8005584:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005588:	4641      	mov	r1, r8
 800558a:	1851      	adds	r1, r2, r1
 800558c:	62b9      	str	r1, [r7, #40]	; 0x28
 800558e:	4649      	mov	r1, r9
 8005590:	414b      	adcs	r3, r1
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80055a0:	4659      	mov	r1, fp
 80055a2:	00cb      	lsls	r3, r1, #3
 80055a4:	4651      	mov	r1, sl
 80055a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055aa:	4651      	mov	r1, sl
 80055ac:	00ca      	lsls	r2, r1, #3
 80055ae:	4610      	mov	r0, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	4642      	mov	r2, r8
 80055b6:	189b      	adds	r3, r3, r2
 80055b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80055bc:	464b      	mov	r3, r9
 80055be:	460a      	mov	r2, r1
 80055c0:	eb42 0303 	adc.w	r3, r2, r3
 80055c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055d4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80055e4:	4649      	mov	r1, r9
 80055e6:	008b      	lsls	r3, r1, #2
 80055e8:	4641      	mov	r1, r8
 80055ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ee:	4641      	mov	r1, r8
 80055f0:	008a      	lsls	r2, r1, #2
 80055f2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80055f6:	f7fa fffd 	bl	80005f4 <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <UART_SetConfig+0x770>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	; 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	3332      	adds	r3, #50	; 0x32
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <UART_SetConfig+0x770>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4422      	add	r2, r4
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	e112      	b.n	8005850 <UART_SetConfig+0x98c>
 800562a:	bf00      	nop
 800562c:	40011000 	.word	0x40011000
 8005630:	40011400 	.word	0x40011400
 8005634:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fe f99a 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 800563c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005640:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005644:	2200      	movs	r2, #0
 8005646:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800564a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800564e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8005652:	4642      	mov	r2, r8
 8005654:	464b      	mov	r3, r9
 8005656:	1891      	adds	r1, r2, r2
 8005658:	6239      	str	r1, [r7, #32]
 800565a:	415b      	adcs	r3, r3
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
 800565e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005662:	4641      	mov	r1, r8
 8005664:	1854      	adds	r4, r2, r1
 8005666:	4649      	mov	r1, r9
 8005668:	eb43 0501 	adc.w	r5, r3, r1
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	00eb      	lsls	r3, r5, #3
 8005676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800567a:	00e2      	lsls	r2, r4, #3
 800567c:	4614      	mov	r4, r2
 800567e:	461d      	mov	r5, r3
 8005680:	4643      	mov	r3, r8
 8005682:	18e3      	adds	r3, r4, r3
 8005684:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005688:	464b      	mov	r3, r9
 800568a:	eb45 0303 	adc.w	r3, r5, r3
 800568e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005692:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800569e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80056ae:	4629      	mov	r1, r5
 80056b0:	008b      	lsls	r3, r1, #2
 80056b2:	4621      	mov	r1, r4
 80056b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b8:	4621      	mov	r1, r4
 80056ba:	008a      	lsls	r2, r1, #2
 80056bc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80056c0:	f7fa ff98 	bl	80005f4 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4b64      	ldr	r3, [pc, #400]	; (800585c <UART_SetConfig+0x998>)
 80056ca:	fba3 2302 	umull	r2, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	011c      	lsls	r4, r3, #4
 80056d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056dc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80056e0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	1891      	adds	r1, r2, r2
 80056ea:	61b9      	str	r1, [r7, #24]
 80056ec:	415b      	adcs	r3, r3
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056f4:	4641      	mov	r1, r8
 80056f6:	1851      	adds	r1, r2, r1
 80056f8:	6139      	str	r1, [r7, #16]
 80056fa:	4649      	mov	r1, r9
 80056fc:	414b      	adcs	r3, r1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800570c:	4659      	mov	r1, fp
 800570e:	00cb      	lsls	r3, r1, #3
 8005710:	4651      	mov	r1, sl
 8005712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005716:	4651      	mov	r1, sl
 8005718:	00ca      	lsls	r2, r1, #3
 800571a:	4610      	mov	r0, r2
 800571c:	4619      	mov	r1, r3
 800571e:	4603      	mov	r3, r0
 8005720:	4642      	mov	r2, r8
 8005722:	189b      	adds	r3, r3, r2
 8005724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005728:	464b      	mov	r3, r9
 800572a:	460a      	mov	r2, r1
 800572c:	eb42 0303 	adc.w	r3, r2, r3
 8005730:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005734:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005740:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8005750:	4649      	mov	r1, r9
 8005752:	008b      	lsls	r3, r1, #2
 8005754:	4641      	mov	r1, r8
 8005756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800575a:	4641      	mov	r1, r8
 800575c:	008a      	lsls	r2, r1, #2
 800575e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005762:	f7fa ff47 	bl	80005f4 <__aeabi_uldivmod>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4b3c      	ldr	r3, [pc, #240]	; (800585c <UART_SetConfig+0x998>)
 800576c:	fba3 1302 	umull	r1, r3, r3, r2
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	2164      	movs	r1, #100	; 0x64
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	3332      	adds	r3, #50	; 0x32
 800577e:	4a37      	ldr	r2, [pc, #220]	; (800585c <UART_SetConfig+0x998>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578a:	441c      	add	r4, r3
 800578c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005790:	2200      	movs	r2, #0
 8005792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005796:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800579a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800579e:	4642      	mov	r2, r8
 80057a0:	464b      	mov	r3, r9
 80057a2:	1891      	adds	r1, r2, r2
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	415b      	adcs	r3, r3
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ae:	4641      	mov	r1, r8
 80057b0:	1851      	adds	r1, r2, r1
 80057b2:	6039      	str	r1, [r7, #0]
 80057b4:	4649      	mov	r1, r9
 80057b6:	414b      	adcs	r3, r1
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057c6:	4659      	mov	r1, fp
 80057c8:	00cb      	lsls	r3, r1, #3
 80057ca:	4651      	mov	r1, sl
 80057cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d0:	4651      	mov	r1, sl
 80057d2:	00ca      	lsls	r2, r1, #3
 80057d4:	4610      	mov	r0, r2
 80057d6:	4619      	mov	r1, r3
 80057d8:	4603      	mov	r3, r0
 80057da:	4642      	mov	r2, r8
 80057dc:	189b      	adds	r3, r3, r2
 80057de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e2:	464b      	mov	r3, r9
 80057e4:	460a      	mov	r2, r1
 80057e6:	eb42 0303 	adc.w	r3, r2, r3
 80057ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800580a:	4649      	mov	r1, r9
 800580c:	008b      	lsls	r3, r1, #2
 800580e:	4641      	mov	r1, r8
 8005810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005814:	4641      	mov	r1, r8
 8005816:	008a      	lsls	r2, r1, #2
 8005818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800581c:	f7fa feea 	bl	80005f4 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4b0d      	ldr	r3, [pc, #52]	; (800585c <UART_SetConfig+0x998>)
 8005826:	fba3 1302 	umull	r1, r3, r3, r2
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	2164      	movs	r1, #100	; 0x64
 800582e:	fb01 f303 	mul.w	r3, r1, r3
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	3332      	adds	r3, #50	; 0x32
 8005838:	4a08      	ldr	r2, [pc, #32]	; (800585c <UART_SetConfig+0x998>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	f003 020f 	and.w	r2, r3, #15
 8005844:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4422      	add	r2, r4
 800584c:	609a      	str	r2, [r3, #8]
}
 800584e:	e7ff      	b.n	8005850 <UART_SetConfig+0x98c>
 8005850:	bf00      	nop
 8005852:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585c:	51eb851f 	.word	0x51eb851f

08005860 <atoi>:
 8005860:	220a      	movs	r2, #10
 8005862:	2100      	movs	r1, #0
 8005864:	f000 b8ca 	b.w	80059fc <strtol>

08005868 <__errno>:
 8005868:	4b01      	ldr	r3, [pc, #4]	; (8005870 <__errno+0x8>)
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20001dcc 	.word	0x20001dcc

08005874 <__libc_init_array>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4d0d      	ldr	r5, [pc, #52]	; (80058ac <__libc_init_array+0x38>)
 8005878:	4c0d      	ldr	r4, [pc, #52]	; (80058b0 <__libc_init_array+0x3c>)
 800587a:	1b64      	subs	r4, r4, r5
 800587c:	10a4      	asrs	r4, r4, #2
 800587e:	2600      	movs	r6, #0
 8005880:	42a6      	cmp	r6, r4
 8005882:	d109      	bne.n	8005898 <__libc_init_array+0x24>
 8005884:	4d0b      	ldr	r5, [pc, #44]	; (80058b4 <__libc_init_array+0x40>)
 8005886:	4c0c      	ldr	r4, [pc, #48]	; (80058b8 <__libc_init_array+0x44>)
 8005888:	f000 f8c2 	bl	8005a10 <_init>
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	2600      	movs	r6, #0
 8005892:	42a6      	cmp	r6, r4
 8005894:	d105      	bne.n	80058a2 <__libc_init_array+0x2e>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	f855 3b04 	ldr.w	r3, [r5], #4
 800589c:	4798      	blx	r3
 800589e:	3601      	adds	r6, #1
 80058a0:	e7ee      	b.n	8005880 <__libc_init_array+0xc>
 80058a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a6:	4798      	blx	r3
 80058a8:	3601      	adds	r6, #1
 80058aa:	e7f2      	b.n	8005892 <__libc_init_array+0x1e>
 80058ac:	08005d50 	.word	0x08005d50
 80058b0:	08005d50 	.word	0x08005d50
 80058b4:	08005d50 	.word	0x08005d50
 80058b8:	08005d54 	.word	0x08005d54

080058bc <memcpy>:
 80058bc:	440a      	add	r2, r1
 80058be:	4291      	cmp	r1, r2
 80058c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058c4:	d100      	bne.n	80058c8 <memcpy+0xc>
 80058c6:	4770      	bx	lr
 80058c8:	b510      	push	{r4, lr}
 80058ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d2:	4291      	cmp	r1, r2
 80058d4:	d1f9      	bne.n	80058ca <memcpy+0xe>
 80058d6:	bd10      	pop	{r4, pc}

080058d8 <memset>:
 80058d8:	4402      	add	r2, r0
 80058da:	4603      	mov	r3, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	d100      	bne.n	80058e2 <memset+0xa>
 80058e0:	4770      	bx	lr
 80058e2:	f803 1b01 	strb.w	r1, [r3], #1
 80058e6:	e7f9      	b.n	80058dc <memset+0x4>

080058e8 <strcpy>:
 80058e8:	4603      	mov	r3, r0
 80058ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ee:	f803 2b01 	strb.w	r2, [r3], #1
 80058f2:	2a00      	cmp	r2, #0
 80058f4:	d1f9      	bne.n	80058ea <strcpy+0x2>
 80058f6:	4770      	bx	lr

080058f8 <_strtol_l.constprop.0>:
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fe:	d001      	beq.n	8005904 <_strtol_l.constprop.0+0xc>
 8005900:	2b24      	cmp	r3, #36	; 0x24
 8005902:	d906      	bls.n	8005912 <_strtol_l.constprop.0+0x1a>
 8005904:	f7ff ffb0 	bl	8005868 <__errno>
 8005908:	2316      	movs	r3, #22
 800590a:	6003      	str	r3, [r0, #0]
 800590c:	2000      	movs	r0, #0
 800590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005912:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80059f8 <_strtol_l.constprop.0+0x100>
 8005916:	460d      	mov	r5, r1
 8005918:	462e      	mov	r6, r5
 800591a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800591e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005922:	f017 0708 	ands.w	r7, r7, #8
 8005926:	d1f7      	bne.n	8005918 <_strtol_l.constprop.0+0x20>
 8005928:	2c2d      	cmp	r4, #45	; 0x2d
 800592a:	d132      	bne.n	8005992 <_strtol_l.constprop.0+0x9a>
 800592c:	782c      	ldrb	r4, [r5, #0]
 800592e:	2701      	movs	r7, #1
 8005930:	1cb5      	adds	r5, r6, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d05b      	beq.n	80059ee <_strtol_l.constprop.0+0xf6>
 8005936:	2b10      	cmp	r3, #16
 8005938:	d109      	bne.n	800594e <_strtol_l.constprop.0+0x56>
 800593a:	2c30      	cmp	r4, #48	; 0x30
 800593c:	d107      	bne.n	800594e <_strtol_l.constprop.0+0x56>
 800593e:	782c      	ldrb	r4, [r5, #0]
 8005940:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005944:	2c58      	cmp	r4, #88	; 0x58
 8005946:	d14d      	bne.n	80059e4 <_strtol_l.constprop.0+0xec>
 8005948:	786c      	ldrb	r4, [r5, #1]
 800594a:	2310      	movs	r3, #16
 800594c:	3502      	adds	r5, #2
 800594e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005952:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005956:	f04f 0c00 	mov.w	ip, #0
 800595a:	fbb8 f9f3 	udiv	r9, r8, r3
 800595e:	4666      	mov	r6, ip
 8005960:	fb03 8a19 	mls	sl, r3, r9, r8
 8005964:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005968:	f1be 0f09 	cmp.w	lr, #9
 800596c:	d816      	bhi.n	800599c <_strtol_l.constprop.0+0xa4>
 800596e:	4674      	mov	r4, lr
 8005970:	42a3      	cmp	r3, r4
 8005972:	dd24      	ble.n	80059be <_strtol_l.constprop.0+0xc6>
 8005974:	f1bc 0f00 	cmp.w	ip, #0
 8005978:	db1e      	blt.n	80059b8 <_strtol_l.constprop.0+0xc0>
 800597a:	45b1      	cmp	r9, r6
 800597c:	d31c      	bcc.n	80059b8 <_strtol_l.constprop.0+0xc0>
 800597e:	d101      	bne.n	8005984 <_strtol_l.constprop.0+0x8c>
 8005980:	45a2      	cmp	sl, r4
 8005982:	db19      	blt.n	80059b8 <_strtol_l.constprop.0+0xc0>
 8005984:	fb06 4603 	mla	r6, r6, r3, r4
 8005988:	f04f 0c01 	mov.w	ip, #1
 800598c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005990:	e7e8      	b.n	8005964 <_strtol_l.constprop.0+0x6c>
 8005992:	2c2b      	cmp	r4, #43	; 0x2b
 8005994:	bf04      	itt	eq
 8005996:	782c      	ldrbeq	r4, [r5, #0]
 8005998:	1cb5      	addeq	r5, r6, #2
 800599a:	e7ca      	b.n	8005932 <_strtol_l.constprop.0+0x3a>
 800599c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80059a0:	f1be 0f19 	cmp.w	lr, #25
 80059a4:	d801      	bhi.n	80059aa <_strtol_l.constprop.0+0xb2>
 80059a6:	3c37      	subs	r4, #55	; 0x37
 80059a8:	e7e2      	b.n	8005970 <_strtol_l.constprop.0+0x78>
 80059aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80059ae:	f1be 0f19 	cmp.w	lr, #25
 80059b2:	d804      	bhi.n	80059be <_strtol_l.constprop.0+0xc6>
 80059b4:	3c57      	subs	r4, #87	; 0x57
 80059b6:	e7db      	b.n	8005970 <_strtol_l.constprop.0+0x78>
 80059b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80059bc:	e7e6      	b.n	800598c <_strtol_l.constprop.0+0x94>
 80059be:	f1bc 0f00 	cmp.w	ip, #0
 80059c2:	da05      	bge.n	80059d0 <_strtol_l.constprop.0+0xd8>
 80059c4:	2322      	movs	r3, #34	; 0x22
 80059c6:	6003      	str	r3, [r0, #0]
 80059c8:	4646      	mov	r6, r8
 80059ca:	b942      	cbnz	r2, 80059de <_strtol_l.constprop.0+0xe6>
 80059cc:	4630      	mov	r0, r6
 80059ce:	e79e      	b.n	800590e <_strtol_l.constprop.0+0x16>
 80059d0:	b107      	cbz	r7, 80059d4 <_strtol_l.constprop.0+0xdc>
 80059d2:	4276      	negs	r6, r6
 80059d4:	2a00      	cmp	r2, #0
 80059d6:	d0f9      	beq.n	80059cc <_strtol_l.constprop.0+0xd4>
 80059d8:	f1bc 0f00 	cmp.w	ip, #0
 80059dc:	d000      	beq.n	80059e0 <_strtol_l.constprop.0+0xe8>
 80059de:	1e69      	subs	r1, r5, #1
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	e7f3      	b.n	80059cc <_strtol_l.constprop.0+0xd4>
 80059e4:	2430      	movs	r4, #48	; 0x30
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1b1      	bne.n	800594e <_strtol_l.constprop.0+0x56>
 80059ea:	2308      	movs	r3, #8
 80059ec:	e7af      	b.n	800594e <_strtol_l.constprop.0+0x56>
 80059ee:	2c30      	cmp	r4, #48	; 0x30
 80059f0:	d0a5      	beq.n	800593e <_strtol_l.constprop.0+0x46>
 80059f2:	230a      	movs	r3, #10
 80059f4:	e7ab      	b.n	800594e <_strtol_l.constprop.0+0x56>
 80059f6:	bf00      	nop
 80059f8:	08005be5 	.word	0x08005be5

080059fc <strtol>:
 80059fc:	4613      	mov	r3, r2
 80059fe:	460a      	mov	r2, r1
 8005a00:	4601      	mov	r1, r0
 8005a02:	4802      	ldr	r0, [pc, #8]	; (8005a0c <strtol+0x10>)
 8005a04:	6800      	ldr	r0, [r0, #0]
 8005a06:	f7ff bf77 	b.w	80058f8 <_strtol_l.constprop.0>
 8005a0a:	bf00      	nop
 8005a0c:	20001dcc 	.word	0x20001dcc

<<<<<<< HEAD
08004b58 <_fini>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr
=======
 8004470:	e232      	b.n	80048d8 <UART_SetConfig+0x98c>
 8004472:	bf00      	nop
 8004474:	51eb851f 	.word	0x51eb851f
>>>>>>> master
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ed8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b8d      	ldr	r3, [pc, #564]	; (8005114 <UART_SetConfig+0x768>)
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d006      	beq.n	8004ef2 <UART_SetConfig+0x546>
 8004ee4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b8b      	ldr	r3, [pc, #556]	; (8005118 <UART_SetConfig+0x76c>)
 8004eec:	429a      	cmp	r2, r3
 8004eee:	f040 8117 	bne.w	8005120 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ef2:	f7fd ff2f 	bl	8002d54 <HAL_RCC_GetPCLK2Freq>
 8004ef6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004efa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004f04:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004f08:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	462b      	mov	r3, r5
 8004f10:	1891      	adds	r1, r2, r2
 8004f12:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f14:	415b      	adcs	r3, r3
 8004f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	eb12 0801 	adds.w	r8, r2, r1
 8004f22:	4629      	mov	r1, r5
 8004f24:	eb43 0901 	adc.w	r9, r3, r1
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f3c:	4690      	mov	r8, r2
 8004f3e:	4699      	mov	r9, r3
 8004f40:	4623      	mov	r3, r4
 8004f42:	eb18 0303 	adds.w	r3, r8, r3
 8004f46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	eb49 0303 	adc.w	r3, r9, r3
 8004f50:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004f54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004f60:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004f70:	4629      	mov	r1, r5
 8004f72:	008b      	lsls	r3, r1, #2
 8004f74:	4621      	mov	r1, r4
 8004f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	008a      	lsls	r2, r1, #2
 8004f7e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004f82:	f7fb f97d 	bl	8000280 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4b64      	ldr	r3, [pc, #400]	; (800511c <UART_SetConfig+0x770>)
 8004f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	011c      	lsls	r4, r3, #4
 8004f94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004f9e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004fa2:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	464b      	mov	r3, r9
 8004faa:	1891      	adds	r1, r2, r2
 8004fac:	6439      	str	r1, [r7, #64]	; 0x40
 8004fae:	415b      	adcs	r3, r3
 8004fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	1851      	adds	r1, r2, r1
 8004fba:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	414b      	adcs	r3, r1
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004fce:	4659      	mov	r1, fp
 8004fd0:	00cb      	lsls	r3, r1, #3
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd8:	4651      	mov	r1, sl
 8004fda:	00ca      	lsls	r2, r1, #3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	4642      	mov	r2, r8
 8004fe4:	189b      	adds	r3, r3, r2
 8004fe6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004fea:	464b      	mov	r3, r9
 8004fec:	460a      	mov	r2, r1
 8004fee:	eb42 0303 	adc.w	r3, r2, r3
 8004ff2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004ff6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005002:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8005012:	4649      	mov	r1, r9
 8005014:	008b      	lsls	r3, r1, #2
 8005016:	4641      	mov	r1, r8
 8005018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501c:	4641      	mov	r1, r8
 800501e:	008a      	lsls	r2, r1, #2
 8005020:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005024:	f7fb f92c 	bl	8000280 <__aeabi_uldivmod>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4b3b      	ldr	r3, [pc, #236]	; (800511c <UART_SetConfig+0x770>)
 800502e:	fba3 1302 	umull	r1, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2164      	movs	r1, #100	; 0x64
 8005036:	fb01 f303 	mul.w	r3, r1, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	3332      	adds	r3, #50	; 0x32
 8005040:	4a36      	ldr	r2, [pc, #216]	; (800511c <UART_SetConfig+0x770>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800504c:	441c      	add	r4, r3
 800504e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005052:	2200      	movs	r2, #0
 8005054:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005058:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800505c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	1891      	adds	r1, r2, r2
 8005066:	6339      	str	r1, [r7, #48]	; 0x30
 8005068:	415b      	adcs	r3, r3
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
 800506c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005070:	4641      	mov	r1, r8
 8005072:	1851      	adds	r1, r2, r1
 8005074:	62b9      	str	r1, [r7, #40]	; 0x28
 8005076:	4649      	mov	r1, r9
 8005078:	414b      	adcs	r3, r1
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8005088:	4659      	mov	r1, fp
 800508a:	00cb      	lsls	r3, r1, #3
 800508c:	4651      	mov	r1, sl
 800508e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005092:	4651      	mov	r1, sl
 8005094:	00ca      	lsls	r2, r1, #3
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	4603      	mov	r3, r0
 800509c:	4642      	mov	r2, r8
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050a4:	464b      	mov	r3, r9
 80050a6:	460a      	mov	r2, r1
 80050a8:	eb42 0303 	adc.w	r3, r2, r3
 80050ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80050b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050bc:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80050cc:	4649      	mov	r1, r9
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	4641      	mov	r1, r8
 80050d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d6:	4641      	mov	r1, r8
 80050d8:	008a      	lsls	r2, r1, #2
 80050da:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80050de:	f7fb f8cf 	bl	8000280 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <UART_SetConfig+0x770>)
 80050e8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	2164      	movs	r1, #100	; 0x64
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	3332      	adds	r3, #50	; 0x32
 80050fa:	4a08      	ldr	r2, [pc, #32]	; (800511c <UART_SetConfig+0x770>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	f003 020f 	and.w	r2, r3, #15
 8005106:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4422      	add	r2, r4
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	e112      	b.n	8005338 <UART_SetConfig+0x98c>
 8005112:	bf00      	nop
 8005114:	40011000 	.word	0x40011000
 8005118:	40011400 	.word	0x40011400
 800511c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005120:	f7fd fe04 	bl	8002d2c <HAL_RCC_GetPCLK1Freq>
 8005124:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005128:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800512c:	2200      	movs	r2, #0
 800512e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005132:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005136:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800513a:	4642      	mov	r2, r8
 800513c:	464b      	mov	r3, r9
 800513e:	1891      	adds	r1, r2, r2
 8005140:	6239      	str	r1, [r7, #32]
 8005142:	415b      	adcs	r3, r3
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
 8005146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800514a:	4641      	mov	r1, r8
 800514c:	1854      	adds	r4, r2, r1
 800514e:	4649      	mov	r1, r9
 8005150:	eb43 0501 	adc.w	r5, r3, r1
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	00eb      	lsls	r3, r5, #3
 800515e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005162:	00e2      	lsls	r2, r4, #3
 8005164:	4614      	mov	r4, r2
 8005166:	461d      	mov	r5, r3
 8005168:	4643      	mov	r3, r8
 800516a:	18e3      	adds	r3, r4, r3
 800516c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005170:	464b      	mov	r3, r9
 8005172:	eb45 0303 	adc.w	r3, r5, r3
 8005176:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800517a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005186:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005196:	4629      	mov	r1, r5
 8005198:	008b      	lsls	r3, r1, #2
 800519a:	4621      	mov	r1, r4
 800519c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a0:	4621      	mov	r1, r4
 80051a2:	008a      	lsls	r2, r1, #2
 80051a4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80051a8:	f7fb f86a 	bl	8000280 <__aeabi_uldivmod>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4b64      	ldr	r3, [pc, #400]	; (8005344 <UART_SetConfig+0x998>)
 80051b2:	fba3 2302 	umull	r2, r3, r3, r2
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	011c      	lsls	r4, r3, #4
 80051ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051c4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80051c8:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80051cc:	4642      	mov	r2, r8
 80051ce:	464b      	mov	r3, r9
 80051d0:	1891      	adds	r1, r2, r2
 80051d2:	61b9      	str	r1, [r7, #24]
 80051d4:	415b      	adcs	r3, r3
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051dc:	4641      	mov	r1, r8
 80051de:	1851      	adds	r1, r2, r1
 80051e0:	6139      	str	r1, [r7, #16]
 80051e2:	4649      	mov	r1, r9
 80051e4:	414b      	adcs	r3, r1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051f4:	4659      	mov	r1, fp
 80051f6:	00cb      	lsls	r3, r1, #3
 80051f8:	4651      	mov	r1, sl
 80051fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051fe:	4651      	mov	r1, sl
 8005200:	00ca      	lsls	r2, r1, #3
 8005202:	4610      	mov	r0, r2
 8005204:	4619      	mov	r1, r3
 8005206:	4603      	mov	r3, r0
 8005208:	4642      	mov	r2, r8
 800520a:	189b      	adds	r3, r3, r2
 800520c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005210:	464b      	mov	r3, r9
 8005212:	460a      	mov	r2, r1
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800521c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005228:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8005238:	4649      	mov	r1, r9
 800523a:	008b      	lsls	r3, r1, #2
 800523c:	4641      	mov	r1, r8
 800523e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005242:	4641      	mov	r1, r8
 8005244:	008a      	lsls	r2, r1, #2
 8005246:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800524a:	f7fb f819 	bl	8000280 <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4b3c      	ldr	r3, [pc, #240]	; (8005344 <UART_SetConfig+0x998>)
 8005254:	fba3 1302 	umull	r1, r3, r3, r2
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	2164      	movs	r1, #100	; 0x64
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	3332      	adds	r3, #50	; 0x32
 8005266:	4a37      	ldr	r2, [pc, #220]	; (8005344 <UART_SetConfig+0x998>)
 8005268:	fba2 2303 	umull	r2, r3, r2, r3
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005272:	441c      	add	r4, r3
 8005274:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005278:	2200      	movs	r2, #0
 800527a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800527e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005282:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005286:	4642      	mov	r2, r8
 8005288:	464b      	mov	r3, r9
 800528a:	1891      	adds	r1, r2, r2
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	415b      	adcs	r3, r3
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005296:	4641      	mov	r1, r8
 8005298:	1851      	adds	r1, r2, r1
 800529a:	6039      	str	r1, [r7, #0]
 800529c:	4649      	mov	r1, r9
 800529e:	414b      	adcs	r3, r1
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052ae:	4659      	mov	r1, fp
 80052b0:	00cb      	lsls	r3, r1, #3
 80052b2:	4651      	mov	r1, sl
 80052b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b8:	4651      	mov	r1, sl
 80052ba:	00ca      	lsls	r2, r1, #3
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	4603      	mov	r3, r0
 80052c2:	4642      	mov	r2, r8
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052ca:	464b      	mov	r3, r9
 80052cc:	460a      	mov	r2, r1
 80052ce:	eb42 0303 	adc.w	r3, r2, r3
 80052d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80052f2:	4649      	mov	r1, r9
 80052f4:	008b      	lsls	r3, r1, #2
 80052f6:	4641      	mov	r1, r8
 80052f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052fc:	4641      	mov	r1, r8
 80052fe:	008a      	lsls	r2, r1, #2
 8005300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005304:	f7fa ffbc 	bl	8000280 <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <UART_SetConfig+0x998>)
 800530e:	fba3 1302 	umull	r1, r3, r3, r2
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2164      	movs	r1, #100	; 0x64
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	3332      	adds	r3, #50	; 0x32
 8005320:	4a08      	ldr	r2, [pc, #32]	; (8005344 <UART_SetConfig+0x998>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4422      	add	r2, r4
 8005334:	609a      	str	r2, [r3, #8]
}
 8005336:	e7ff      	b.n	8005338 <UART_SetConfig+0x98c>
 8005338:	bf00      	nop
 800533a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800533e:	46bd      	mov	sp, r7
 8005340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005344:	51eb851f 	.word	0x51eb851f

08005348 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800534c:	4904      	ldr	r1, [pc, #16]	; (8005360 <MX_FATFS_Init+0x18>)
 800534e:	4805      	ldr	r0, [pc, #20]	; (8005364 <MX_FATFS_Init+0x1c>)
 8005350:	f003 f97e 	bl	8008650 <FATFS_LinkDriver>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <MX_FATFS_Init+0x20>)
 800535a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800535c:	bf00      	nop
 800535e:	bd80      	pop	{r7, pc}
 8005360:	2001379c 	.word	0x2001379c
 8005364:	2000000c 	.word	0x2000000c
 8005368:	20013798 	.word	0x20013798

0800536c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005370:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f9d9 	bl	8005740 <USER_SPI_initialize>
 800538e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fab7 	bl	8005918 <USER_SPI_status>
 80053aa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4603      	mov	r3, r0
 80053c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 80053c4:	7bf8      	ldrb	r0, [r7, #15]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	f000 faba 	bl	8005944 <USER_SPI_read>
 80053d0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80053ea:	7bf8      	ldrb	r0, [r7, #15]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	f000 fb0d 	bl	8005a10 <USER_SPI_write>
 80053f6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	603a      	str	r2, [r7, #0]
 800540a:	71fb      	strb	r3, [r7, #7]
 800540c:	460b      	mov	r3, r1
 800540e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8005410:	79b9      	ldrb	r1, [r7, #6]
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fb76 	bl	8005b08 <USER_SPI_ioctl>
 800541c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005430:	f7fc f9b0 	bl	8001794 <HAL_GetTick>
 8005434:	4603      	mov	r3, r0
 8005436:	4a04      	ldr	r2, [pc, #16]	; (8005448 <SPI_Timer_On+0x20>)
 8005438:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800543a:	4a04      	ldr	r2, [pc, #16]	; (800544c <SPI_Timer_On+0x24>)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6013      	str	r3, [r2, #0]
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	200137a4 	.word	0x200137a4
 800544c:	200137a8 	.word	0x200137a8

08005450 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005454:	f7fc f99e 	bl	8001794 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <SPI_Timer_Status+0x24>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <SPI_Timer_Status+0x28>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	bf34      	ite	cc
 8005468:	2301      	movcc	r3, #1
 800546a:	2300      	movcs	r3, #0
 800546c:	b2db      	uxtb	r3, r3
}
 800546e:	4618      	mov	r0, r3
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	200137a4 	.word	0x200137a4
 8005478:	200137a8 	.word	0x200137a8

0800547c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af02      	add	r7, sp, #8
 8005482:	4603      	mov	r3, r0
 8005484:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005486:	f107 020f 	add.w	r2, r7, #15
 800548a:	1df9      	adds	r1, r7, #7
 800548c:	2332      	movs	r3, #50	; 0x32
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	2301      	movs	r3, #1
 8005492:	4804      	ldr	r0, [pc, #16]	; (80054a4 <xchg_spi+0x28>)
 8005494:	f7fd fcd6 	bl	8002e44 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	2000091c 	.word	0x2000091c

080054a8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80054a8:	b590      	push	{r4, r7, lr}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	e00a      	b.n	80054ce <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	18d4      	adds	r4, r2, r3
 80054be:	20ff      	movs	r0, #255	; 0xff
 80054c0:	f7ff ffdc 	bl	800547c <xchg_spi>
 80054c4:	4603      	mov	r3, r0
 80054c6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3301      	adds	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d3f0      	bcc.n	80054b8 <rcvr_spi_multi+0x10>
	}
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd90      	pop	{r4, r7, pc}

080054e0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	e009      	b.n	8005504 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff ffbf 	bl	800547c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3301      	adds	r3, #1
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d3f1      	bcc.n	80054f0 <xmit_spi_multi+0x10>
	}
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800551e:	f7fc f939 	bl	8001794 <HAL_GetTick>
 8005522:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005528:	20ff      	movs	r0, #255	; 0xff
 800552a:	f7ff ffa7 	bl	800547c <xchg_spi>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2bff      	cmp	r3, #255	; 0xff
 8005536:	d007      	beq.n	8005548 <wait_ready+0x32>
 8005538:	f7fc f92c 	bl	8001794 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d8ef      	bhi.n	8005528 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2bff      	cmp	r3, #255	; 0xff
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005560:	2201      	movs	r2, #1
 8005562:	2108      	movs	r1, #8
 8005564:	4803      	ldr	r0, [pc, #12]	; (8005574 <despiselect+0x18>)
 8005566:	f7fc ff61 	bl	800242c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800556a:	20ff      	movs	r0, #255	; 0xff
 800556c:	f7ff ff86 	bl	800547c <xchg_spi>

}
 8005570:	bf00      	nop
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40020400 	.word	0x40020400

08005578 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800557c:	2200      	movs	r2, #0
 800557e:	2108      	movs	r1, #8
 8005580:	4809      	ldr	r0, [pc, #36]	; (80055a8 <spiselect+0x30>)
 8005582:	f7fc ff53 	bl	800242c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005586:	20ff      	movs	r0, #255	; 0xff
 8005588:	f7ff ff78 	bl	800547c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800558c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005590:	f7ff ffc1 	bl	8005516 <wait_ready>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <spiselect+0x26>
 800559a:	2301      	movs	r3, #1
 800559c:	e002      	b.n	80055a4 <spiselect+0x2c>

	despiselect();
 800559e:	f7ff ffdd 	bl	800555c <despiselect>
	return 0;	/* Timeout */
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40020400 	.word	0x40020400

080055ac <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80055b6:	20c8      	movs	r0, #200	; 0xc8
 80055b8:	f7ff ff36 	bl	8005428 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80055bc:	20ff      	movs	r0, #255	; 0xff
 80055be:	f7ff ff5d 	bl	800547c <xchg_spi>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2bff      	cmp	r3, #255	; 0xff
 80055ca:	d104      	bne.n	80055d6 <rcvr_datablock+0x2a>
 80055cc:	f7ff ff40 	bl	8005450 <SPI_Timer_Status>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f2      	bne.n	80055bc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2bfe      	cmp	r3, #254	; 0xfe
 80055da:	d001      	beq.n	80055e0 <rcvr_datablock+0x34>
 80055dc:	2300      	movs	r3, #0
 80055de:	e00a      	b.n	80055f6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff ff60 	bl	80054a8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80055e8:	20ff      	movs	r0, #255	; 0xff
 80055ea:	f7ff ff47 	bl	800547c <xchg_spi>
 80055ee:	20ff      	movs	r0, #255	; 0xff
 80055f0:	f7ff ff44 	bl	800547c <xchg_spi>

	return 1;						/* Function succeeded */
 80055f4:	2301      	movs	r3, #1
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	460b      	mov	r3, r1
 8005608:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800560a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800560e:	f7ff ff82 	bl	8005516 <wait_ready>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <xmit_datablock+0x1e>
 8005618:	2300      	movs	r3, #0
 800561a:	e01e      	b.n	800565a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff ff2c 	bl	800547c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	2bfd      	cmp	r3, #253	; 0xfd
 8005628:	d016      	beq.n	8005658 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800562a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff ff56 	bl	80054e0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005634:	20ff      	movs	r0, #255	; 0xff
 8005636:	f7ff ff21 	bl	800547c <xchg_spi>
 800563a:	20ff      	movs	r0, #255	; 0xff
 800563c:	f7ff ff1e 	bl	800547c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005640:	20ff      	movs	r0, #255	; 0xff
 8005642:	f7ff ff1b 	bl	800547c <xchg_spi>
 8005646:	4603      	mov	r3, r0
 8005648:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2b05      	cmp	r3, #5
 8005652:	d001      	beq.n	8005658 <xmit_datablock+0x5a>
 8005654:	2300      	movs	r3, #0
 8005656:	e000      	b.n	800565a <xmit_datablock+0x5c>
	}
	return 1;
 8005658:	2301      	movs	r3, #1
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	4603      	mov	r3, r0
 800566a:	6039      	str	r1, [r7, #0]
 800566c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800566e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005672:	2b00      	cmp	r3, #0
 8005674:	da0e      	bge.n	8005694 <send_cmd+0x32>
		cmd &= 0x7F;
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800567e:	2100      	movs	r1, #0
 8005680:	2037      	movs	r0, #55	; 0x37
 8005682:	f7ff ffee 	bl	8005662 <send_cmd>
 8005686:	4603      	mov	r3, r0
 8005688:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800568a:	7bbb      	ldrb	r3, [r7, #14]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d901      	bls.n	8005694 <send_cmd+0x32>
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	e051      	b.n	8005738 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	2b0c      	cmp	r3, #12
 8005698:	d008      	beq.n	80056ac <send_cmd+0x4a>
		despiselect();
 800569a:	f7ff ff5f 	bl	800555c <despiselect>
		if (!spiselect()) return 0xFF;
 800569e:	f7ff ff6b 	bl	8005578 <spiselect>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <send_cmd+0x4a>
 80056a8:	23ff      	movs	r3, #255	; 0xff
 80056aa:	e045      	b.n	8005738 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fee1 	bl	800547c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	0e1b      	lsrs	r3, r3, #24
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fedb 	bl	800547c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	0c1b      	lsrs	r3, r3, #16
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fed5 	bl	800547c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	0a1b      	lsrs	r3, r3, #8
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fecf 	bl	800547c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff feca 	bl	800547c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <send_cmd+0x94>
 80056f2:	2395      	movs	r3, #149	; 0x95
 80056f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d101      	bne.n	8005700 <send_cmd+0x9e>
 80056fc:	2387      	movs	r3, #135	; 0x87
 80056fe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff feba 	bl	800547c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	2b0c      	cmp	r3, #12
 800570c:	d102      	bne.n	8005714 <send_cmd+0xb2>
 800570e:	20ff      	movs	r0, #255	; 0xff
 8005710:	f7ff feb4 	bl	800547c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005714:	230a      	movs	r3, #10
 8005716:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005718:	20ff      	movs	r0, #255	; 0xff
 800571a:	f7ff feaf 	bl	800547c <xchg_spi>
 800571e:	4603      	mov	r3, r0
 8005720:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005726:	2b00      	cmp	r3, #0
 8005728:	da05      	bge.n	8005736 <send_cmd+0xd4>
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	3b01      	subs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005736:	7bbb      	ldrb	r3, [r7, #14]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <USER_SPI_initialize+0x14>
 8005750:	2301      	movs	r3, #1
 8005752:	e0d6      	b.n	8005902 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005754:	4b6d      	ldr	r3, [pc, #436]	; (800590c <USER_SPI_initialize+0x1cc>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <USER_SPI_initialize+0x2a>
 8005762:	4b6a      	ldr	r3, [pc, #424]	; (800590c <USER_SPI_initialize+0x1cc>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e0cb      	b.n	8005902 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800576a:	4b69      	ldr	r3, [pc, #420]	; (8005910 <USER_SPI_initialize+0x1d0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005774:	4b66      	ldr	r3, [pc, #408]	; (8005910 <USER_SPI_initialize+0x1d0>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800577c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800577e:	230a      	movs	r3, #10
 8005780:	73fb      	strb	r3, [r7, #15]
 8005782:	e005      	b.n	8005790 <USER_SPI_initialize+0x50>
 8005784:	20ff      	movs	r0, #255	; 0xff
 8005786:	f7ff fe79 	bl	800547c <xchg_spi>
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	3b01      	subs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f6      	bne.n	8005784 <USER_SPI_initialize+0x44>

	ty = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800579a:	2100      	movs	r1, #0
 800579c:	2000      	movs	r0, #0
 800579e:	f7ff ff60 	bl	8005662 <send_cmd>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	f040 808b 	bne.w	80058c0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80057aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057ae:	f7ff fe3b 	bl	8005428 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80057b2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80057b6:	2008      	movs	r0, #8
 80057b8:	f7ff ff53 	bl	8005662 <send_cmd>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d151      	bne.n	8005866 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
 80057c6:	e00d      	b.n	80057e4 <USER_SPI_initialize+0xa4>
 80057c8:	7bfc      	ldrb	r4, [r7, #15]
 80057ca:	20ff      	movs	r0, #255	; 0xff
 80057cc:	f7ff fe56 	bl	800547c <xchg_spi>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	f104 0310 	add.w	r3, r4, #16
 80057d8:	443b      	add	r3, r7
 80057da:	f803 2c08 	strb.w	r2, [r3, #-8]
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	3301      	adds	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d9ee      	bls.n	80057c8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80057ea:	7abb      	ldrb	r3, [r7, #10]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d167      	bne.n	80058c0 <USER_SPI_initialize+0x180>
 80057f0:	7afb      	ldrb	r3, [r7, #11]
 80057f2:	2baa      	cmp	r3, #170	; 0xaa
 80057f4:	d164      	bne.n	80058c0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80057f6:	bf00      	nop
 80057f8:	f7ff fe2a 	bl	8005450 <SPI_Timer_Status>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <USER_SPI_initialize+0xd2>
 8005802:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005806:	20a9      	movs	r0, #169	; 0xa9
 8005808:	f7ff ff2b 	bl	8005662 <send_cmd>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f2      	bne.n	80057f8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005812:	f7ff fe1d 	bl	8005450 <SPI_Timer_Status>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d051      	beq.n	80058c0 <USER_SPI_initialize+0x180>
 800581c:	2100      	movs	r1, #0
 800581e:	203a      	movs	r0, #58	; 0x3a
 8005820:	f7ff ff1f 	bl	8005662 <send_cmd>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d14a      	bne.n	80058c0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
 800582e:	e00d      	b.n	800584c <USER_SPI_initialize+0x10c>
 8005830:	7bfc      	ldrb	r4, [r7, #15]
 8005832:	20ff      	movs	r0, #255	; 0xff
 8005834:	f7ff fe22 	bl	800547c <xchg_spi>
 8005838:	4603      	mov	r3, r0
 800583a:	461a      	mov	r2, r3
 800583c:	f104 0310 	add.w	r3, r4, #16
 8005840:	443b      	add	r3, r7
 8005842:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	3301      	adds	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d9ee      	bls.n	8005830 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005852:	7a3b      	ldrb	r3, [r7, #8]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <USER_SPI_initialize+0x120>
 800585c:	230c      	movs	r3, #12
 800585e:	e000      	b.n	8005862 <USER_SPI_initialize+0x122>
 8005860:	2304      	movs	r3, #4
 8005862:	737b      	strb	r3, [r7, #13]
 8005864:	e02c      	b.n	80058c0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005866:	2100      	movs	r1, #0
 8005868:	20a9      	movs	r0, #169	; 0xa9
 800586a:	f7ff fefa 	bl	8005662 <send_cmd>
 800586e:	4603      	mov	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d804      	bhi.n	800587e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005874:	2302      	movs	r3, #2
 8005876:	737b      	strb	r3, [r7, #13]
 8005878:	23a9      	movs	r3, #169	; 0xa9
 800587a:	73bb      	strb	r3, [r7, #14]
 800587c:	e003      	b.n	8005886 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800587e:	2301      	movs	r3, #1
 8005880:	737b      	strb	r3, [r7, #13]
 8005882:	2301      	movs	r3, #1
 8005884:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005886:	bf00      	nop
 8005888:	f7ff fde2 	bl	8005450 <SPI_Timer_Status>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <USER_SPI_initialize+0x162>
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff fee3 	bl	8005662 <send_cmd>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f2      	bne.n	8005888 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80058a2:	f7ff fdd5 	bl	8005450 <SPI_Timer_Status>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <USER_SPI_initialize+0x17c>
 80058ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058b0:	2010      	movs	r0, #16
 80058b2:	f7ff fed6 	bl	8005662 <send_cmd>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <USER_SPI_initialize+0x180>
				ty = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80058c0:	4a14      	ldr	r2, [pc, #80]	; (8005914 <USER_SPI_initialize+0x1d4>)
 80058c2:	7b7b      	ldrb	r3, [r7, #13]
 80058c4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80058c6:	f7ff fe49 	bl	800555c <despiselect>

	if (ty) {			/* OK */
 80058ca:	7b7b      	ldrb	r3, [r7, #13]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d012      	beq.n	80058f6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <USER_SPI_initialize+0x1d0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <USER_SPI_initialize+0x1d0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0210 	orr.w	r2, r2, #16
 80058e2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <USER_SPI_initialize+0x1cc>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <USER_SPI_initialize+0x1cc>)
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e002      	b.n	80058fc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <USER_SPI_initialize+0x1cc>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80058fc:	4b03      	ldr	r3, [pc, #12]	; (800590c <USER_SPI_initialize+0x1cc>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	b2db      	uxtb	r3, r3
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	bd90      	pop	{r4, r7, pc}
 800590a:	bf00      	nop
 800590c:	20000020 	.word	0x20000020
 8005910:	2000091c 	.word	0x2000091c
 8005914:	200137a0 	.word	0x200137a0

08005918 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <USER_SPI_status+0x14>
 8005928:	2301      	movs	r3, #1
 800592a:	e002      	b.n	8005932 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <USER_SPI_status+0x28>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	b2db      	uxtb	r3, r3
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	20000020 	.word	0x20000020

08005944 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	4603      	mov	r3, r0
 8005952:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <USER_SPI_read+0x1c>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <USER_SPI_read+0x20>
 8005960:	2304      	movs	r3, #4
 8005962:	e04d      	b.n	8005a00 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005964:	4b28      	ldr	r3, [pc, #160]	; (8005a08 <USER_SPI_read+0xc4>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <USER_SPI_read+0x32>
 8005972:	2303      	movs	r3, #3
 8005974:	e044      	b.n	8005a00 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005976:	4b25      	ldr	r3, [pc, #148]	; (8005a0c <USER_SPI_read+0xc8>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <USER_SPI_read+0x44>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	025b      	lsls	r3, r3, #9
 8005986:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d111      	bne.n	80059b2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	2011      	movs	r0, #17
 8005992:	f7ff fe66 	bl	8005662 <send_cmd>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d129      	bne.n	80059f0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800599c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059a0:	68b8      	ldr	r0, [r7, #8]
 80059a2:	f7ff fe03 	bl	80055ac <rcvr_datablock>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d021      	beq.n	80059f0 <USER_SPI_read+0xac>
			count = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	e01e      	b.n	80059f0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	2012      	movs	r0, #18
 80059b6:	f7ff fe54 	bl	8005662 <send_cmd>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d117      	bne.n	80059f0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80059c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059c4:	68b8      	ldr	r0, [r7, #8]
 80059c6:	f7ff fdf1 	bl	80055ac <rcvr_datablock>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <USER_SPI_read+0xa2>
				buff += 512;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80059d6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	3b01      	subs	r3, #1
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ed      	bne.n	80059c0 <USER_SPI_read+0x7c>
 80059e4:	e000      	b.n	80059e8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80059e6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80059e8:	2100      	movs	r1, #0
 80059ea:	200c      	movs	r0, #12
 80059ec:	f7ff fe39 	bl	8005662 <send_cmd>
		}
	}
	despiselect();
 80059f0:	f7ff fdb4 	bl	800555c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf14      	ite	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	2300      	moveq	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000020 	.word	0x20000020
 8005a0c:	200137a0 	.word	0x200137a0

08005a10 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <USER_SPI_write+0x1c>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <USER_SPI_write+0x20>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	e063      	b.n	8005af8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005a30:	4b33      	ldr	r3, [pc, #204]	; (8005b00 <USER_SPI_write+0xf0>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <USER_SPI_write+0x32>
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e05a      	b.n	8005af8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005a42:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <USER_SPI_write+0xf0>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <USER_SPI_write+0x44>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e051      	b.n	8005af8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005a54:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <USER_SPI_write+0xf4>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <USER_SPI_write+0x56>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	025b      	lsls	r3, r3, #9
 8005a64:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d110      	bne.n	8005a8e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	2018      	movs	r0, #24
 8005a70:	f7ff fdf7 	bl	8005662 <send_cmd>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d136      	bne.n	8005ae8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005a7a:	21fe      	movs	r1, #254	; 0xfe
 8005a7c:	68b8      	ldr	r0, [r7, #8]
 8005a7e:	f7ff fdbe 	bl	80055fe <xmit_datablock>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d02f      	beq.n	8005ae8 <USER_SPI_write+0xd8>
			count = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	e02c      	b.n	8005ae8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <USER_SPI_write+0xf4>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f003 0306 	and.w	r3, r3, #6
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <USER_SPI_write+0x92>
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	2097      	movs	r0, #151	; 0x97
 8005a9e:	f7ff fde0 	bl	8005662 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	2019      	movs	r0, #25
 8005aa6:	f7ff fddc 	bl	8005662 <send_cmd>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d11b      	bne.n	8005ae8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005ab0:	21fc      	movs	r1, #252	; 0xfc
 8005ab2:	68b8      	ldr	r0, [r7, #8]
 8005ab4:	f7ff fda3 	bl	80055fe <xmit_datablock>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <USER_SPI_write+0xc4>
				buff += 512;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005ac4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1ee      	bne.n	8005ab0 <USER_SPI_write+0xa0>
 8005ad2:	e000      	b.n	8005ad6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005ad4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005ad6:	21fd      	movs	r1, #253	; 0xfd
 8005ad8:	2000      	movs	r0, #0
 8005ada:	f7ff fd90 	bl	80055fe <xmit_datablock>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <USER_SPI_write+0xd8>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005ae8:	f7ff fd38 	bl	800555c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bf14      	ite	ne
 8005af2:	2301      	movne	r3, #1
 8005af4:	2300      	moveq	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000020 	.word	0x20000020
 8005b04:	200137a0 	.word	0x200137a0

08005b08 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08c      	sub	sp, #48	; 0x30
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	603a      	str	r2, [r7, #0]
 8005b12:	71fb      	strb	r3, [r7, #7]
 8005b14:	460b      	mov	r3, r1
 8005b16:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <USER_SPI_ioctl+0x1a>
 8005b1e:	2304      	movs	r3, #4
 8005b20:	e15a      	b.n	8005dd8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005b22:	4baf      	ldr	r3, [pc, #700]	; (8005de0 <USER_SPI_ioctl+0x2d8>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <USER_SPI_ioctl+0x2c>
 8005b30:	2303      	movs	r3, #3
 8005b32:	e151      	b.n	8005dd8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005b3a:	79bb      	ldrb	r3, [r7, #6]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	f200 8136 	bhi.w	8005dae <USER_SPI_ioctl+0x2a6>
 8005b42:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <USER_SPI_ioctl+0x40>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b5d 	.word	0x08005b5d
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005daf 	.word	0x08005daf
 8005b54:	08005c1d 	.word	0x08005c1d
 8005b58:	08005d13 	.word	0x08005d13
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005b5c:	f7ff fd0c 	bl	8005578 <spiselect>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 8127 	beq.w	8005db6 <USER_SPI_ioctl+0x2ae>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005b6e:	e122      	b.n	8005db6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005b70:	2100      	movs	r1, #0
 8005b72:	2009      	movs	r0, #9
 8005b74:	f7ff fd75 	bl	8005662 <send_cmd>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 811d 	bne.w	8005dba <USER_SPI_ioctl+0x2b2>
 8005b80:	f107 030c 	add.w	r3, r7, #12
 8005b84:	2110      	movs	r1, #16
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fd10 	bl	80055ac <rcvr_datablock>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8113 	beq.w	8005dba <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005b94:	7b3b      	ldrb	r3, [r7, #12]
 8005b96:	099b      	lsrs	r3, r3, #6
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d111      	bne.n	8005bc2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005b9e:	7d7b      	ldrb	r3, [r7, #21]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	7d3b      	ldrb	r3, [r7, #20]
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	4413      	add	r3, r2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	041b      	lsls	r3, r3, #16
 8005bae:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	029a      	lsls	r2, r3, #10
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	e028      	b.n	8005c14 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005bc2:	7c7b      	ldrb	r3, [r7, #17]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	7dbb      	ldrb	r3, [r7, #22]
 8005bcc:	09db      	lsrs	r3, r3, #7
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	4413      	add	r3, r2
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	7d7b      	ldrb	r3, [r7, #21]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f003 0306 	and.w	r3, r3, #6
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	4413      	add	r3, r2
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	3302      	adds	r3, #2
 8005be6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005bea:	7d3b      	ldrb	r3, [r7, #20]
 8005bec:	099b      	lsrs	r3, r3, #6
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	7cfb      	ldrb	r3, [r7, #19]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	441a      	add	r2, r3
 8005bf8:	7cbb      	ldrb	r3, [r7, #18]
 8005bfa:	029b      	lsls	r3, r3, #10
 8005bfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c00:	4413      	add	r3, r2
 8005c02:	3301      	adds	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005c06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c0a:	3b09      	subs	r3, #9
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005c1a:	e0ce      	b.n	8005dba <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005c1c:	4b71      	ldr	r3, [pc, #452]	; (8005de4 <USER_SPI_ioctl+0x2dc>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d031      	beq.n	8005c8c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005c28:	2100      	movs	r1, #0
 8005c2a:	208d      	movs	r0, #141	; 0x8d
 8005c2c:	f7ff fd19 	bl	8005662 <send_cmd>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 80c3 	bne.w	8005dbe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005c38:	20ff      	movs	r0, #255	; 0xff
 8005c3a:	f7ff fc1f 	bl	800547c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005c3e:	f107 030c 	add.w	r3, r7, #12
 8005c42:	2110      	movs	r1, #16
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff fcb1 	bl	80055ac <rcvr_datablock>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80b6 	beq.w	8005dbe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005c52:	2330      	movs	r3, #48	; 0x30
 8005c54:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005c58:	e007      	b.n	8005c6a <USER_SPI_ioctl+0x162>
 8005c5a:	20ff      	movs	r0, #255	; 0xff
 8005c5c:	f7ff fc0e 	bl	800547c <xchg_spi>
 8005c60:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c64:	3b01      	subs	r3, #1
 8005c66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005c6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f3      	bne.n	8005c5a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005c72:	7dbb      	ldrb	r3, [r7, #22]
 8005c74:	091b      	lsrs	r3, r3, #4
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	fa03 f202 	lsl.w	r2, r3, r2
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005c8a:	e098      	b.n	8005dbe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	2009      	movs	r0, #9
 8005c90:	f7ff fce7 	bl	8005662 <send_cmd>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f040 8091 	bne.w	8005dbe <USER_SPI_ioctl+0x2b6>
 8005c9c:	f107 030c 	add.w	r3, r7, #12
 8005ca0:	2110      	movs	r1, #16
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fc82 	bl	80055ac <rcvr_datablock>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8087 	beq.w	8005dbe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005cb0:	4b4c      	ldr	r3, [pc, #304]	; (8005de4 <USER_SPI_ioctl+0x2dc>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d012      	beq.n	8005ce2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005cbc:	7dbb      	ldrb	r3, [r7, #22]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005cc4:	7dfa      	ldrb	r2, [r7, #23]
 8005cc6:	09d2      	lsrs	r2, r2, #7
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	4413      	add	r3, r2
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	7e7b      	ldrb	r3, [r7, #25]
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e013      	b.n	8005d0a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005ce2:	7dbb      	ldrb	r3, [r7, #22]
 8005ce4:	109b      	asrs	r3, r3, #2
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	3301      	adds	r3, #1
 8005cee:	7dfa      	ldrb	r2, [r7, #23]
 8005cf0:	00d2      	lsls	r2, r2, #3
 8005cf2:	f002 0218 	and.w	r2, r2, #24
 8005cf6:	7df9      	ldrb	r1, [r7, #23]
 8005cf8:	0949      	lsrs	r1, r1, #5
 8005cfa:	b2c9      	uxtb	r1, r1
 8005cfc:	440a      	add	r2, r1
 8005cfe:	3201      	adds	r2, #1
 8005d00:	fb02 f303 	mul.w	r3, r2, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005d10:	e055      	b.n	8005dbe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005d12:	4b34      	ldr	r3, [pc, #208]	; (8005de4 <USER_SPI_ioctl+0x2dc>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f003 0306 	and.w	r3, r3, #6
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d051      	beq.n	8005dc2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005d1e:	f107 020c 	add.w	r2, r7, #12
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	210b      	movs	r1, #11
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff feee 	bl	8005b08 <USER_SPI_ioctl>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d149      	bne.n	8005dc6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005d32:	7b3b      	ldrb	r3, [r7, #12]
 8005d34:	099b      	lsrs	r3, r3, #6
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <USER_SPI_ioctl+0x23e>
 8005d3c:	7dbb      	ldrb	r3, [r7, #22]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d041      	beq.n	8005dca <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	623b      	str	r3, [r7, #32]
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005d56:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <USER_SPI_ioctl+0x2dc>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d105      	bne.n	8005d6e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	025b      	lsls	r3, r3, #9
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	025b      	lsls	r3, r3, #9
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d70:	2020      	movs	r0, #32
 8005d72:	f7ff fc76 	bl	8005662 <send_cmd>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d128      	bne.n	8005dce <USER_SPI_ioctl+0x2c6>
 8005d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d7e:	2021      	movs	r0, #33	; 0x21
 8005d80:	f7ff fc6f 	bl	8005662 <send_cmd>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d121      	bne.n	8005dce <USER_SPI_ioctl+0x2c6>
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	2026      	movs	r0, #38	; 0x26
 8005d8e:	f7ff fc68 	bl	8005662 <send_cmd>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11a      	bne.n	8005dce <USER_SPI_ioctl+0x2c6>
 8005d98:	f247 5030 	movw	r0, #30000	; 0x7530
 8005d9c:	f7ff fbbb 	bl	8005516 <wait_ready>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d013      	beq.n	8005dce <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005da6:	2300      	movs	r3, #0
 8005da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005dac:	e00f      	b.n	8005dce <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005dae:	2304      	movs	r3, #4
 8005db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005db4:	e00c      	b.n	8005dd0 <USER_SPI_ioctl+0x2c8>
		break;
 8005db6:	bf00      	nop
 8005db8:	e00a      	b.n	8005dd0 <USER_SPI_ioctl+0x2c8>
		break;
 8005dba:	bf00      	nop
 8005dbc:	e008      	b.n	8005dd0 <USER_SPI_ioctl+0x2c8>
		break;
 8005dbe:	bf00      	nop
 8005dc0:	e006      	b.n	8005dd0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005dc2:	bf00      	nop
 8005dc4:	e004      	b.n	8005dd0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <USER_SPI_ioctl+0x2c8>
		break;
 8005dce:	bf00      	nop
	}

	despiselect();
 8005dd0:	f7ff fbc4 	bl	800555c <despiselect>

	return res;
 8005dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3730      	adds	r7, #48	; 0x30
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000020 	.word	0x20000020
 8005de4:	200137a0 	.word	0x200137a0

08005de8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <disk_status+0x30>)
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	79fa      	ldrb	r2, [r7, #7]
 8005e00:	4905      	ldr	r1, [pc, #20]	; (8005e18 <disk_status+0x30>)
 8005e02:	440a      	add	r2, r1
 8005e04:	7a12      	ldrb	r2, [r2, #8]
 8005e06:	4610      	mov	r0, r2
 8005e08:	4798      	blx	r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	200137d4 	.word	0x200137d4

08005e1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <disk_initialize+0x48>)
 8005e2e:	5cd3      	ldrb	r3, [r2, r3]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d111      	bne.n	8005e58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005e34:	79fb      	ldrb	r3, [r7, #7]
 8005e36:	4a0b      	ldr	r2, [pc, #44]	; (8005e64 <disk_initialize+0x48>)
 8005e38:	2101      	movs	r1, #1
 8005e3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <disk_initialize+0x48>)
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	79fa      	ldrb	r2, [r7, #7]
 8005e4a:	4906      	ldr	r1, [pc, #24]	; (8005e64 <disk_initialize+0x48>)
 8005e4c:	440a      	add	r2, r1
 8005e4e:	7a12      	ldrb	r2, [r2, #8]
 8005e50:	4610      	mov	r0, r2
 8005e52:	4798      	blx	r3
 8005e54:	4603      	mov	r3, r0
 8005e56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200137d4 	.word	0x200137d4

08005e68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ea4 <disk_read+0x3c>)
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	689c      	ldr	r4, [r3, #8]
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	4a07      	ldr	r2, [pc, #28]	; (8005ea4 <disk_read+0x3c>)
 8005e88:	4413      	add	r3, r2
 8005e8a:	7a18      	ldrb	r0, [r3, #8]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	47a0      	blx	r4
 8005e94:	4603      	mov	r3, r0
 8005e96:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd90      	pop	{r4, r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200137d4 	.word	0x200137d4

08005ea8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	607a      	str	r2, [r7, #4]
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <disk_write+0x3c>)
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68dc      	ldr	r4, [r3, #12]
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	4a07      	ldr	r2, [pc, #28]	; (8005ee4 <disk_write+0x3c>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	7a18      	ldrb	r0, [r3, #8]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	47a0      	blx	r4
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd90      	pop	{r4, r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	200137d4 	.word	0x200137d4

08005ee8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	603a      	str	r2, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <disk_ioctl+0x38>)
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	79fa      	ldrb	r2, [r7, #7]
 8005f06:	4906      	ldr	r1, [pc, #24]	; (8005f20 <disk_ioctl+0x38>)
 8005f08:	440a      	add	r2, r1
 8005f0a:	7a10      	ldrb	r0, [r2, #8]
 8005f0c:	79b9      	ldrb	r1, [r7, #6]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	4798      	blx	r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
  return res;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	200137d4 	.word	0x200137d4

08005f24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	b21a      	sxth	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	b21b      	sxth	r3, r3
 8005f40:	4313      	orrs	r3, r2
 8005f42:	b21b      	sxth	r3, r3
 8005f44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f46:	89fb      	ldrh	r3, [r7, #14]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3303      	adds	r3, #3
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	3202      	adds	r2, #2
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	3201      	adds	r2, #1
 8005f7a:	7812      	ldrb	r2, [r2, #0]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	7812      	ldrb	r2, [r2, #0]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	887a      	ldrh	r2, [r7, #2]
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	887b      	ldrh	r3, [r7, #2]
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	887a      	ldrh	r2, [r7, #2]
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	0a1b      	lsrs	r3, r3, #8
 8005fea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	0a1b      	lsrs	r3, r3, #8
 8005ffc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00d      	beq.n	800605e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	1c53      	adds	r3, r2, #1
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	6179      	str	r1, [r7, #20]
 800604e:	7812      	ldrb	r2, [r2, #0]
 8006050:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3b01      	subs	r3, #1
 8006056:	607b      	str	r3, [r7, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f1      	bne.n	8006042 <mem_cpy+0x1a>
	}
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800606a:	b480      	push	{r7}
 800606c:	b087      	sub	sp, #28
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	617a      	str	r2, [r7, #20]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3b01      	subs	r3, #1
 800608a:	607b      	str	r3, [r7, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f3      	bne.n	800607a <mem_set+0x10>
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80060a0:	b480      	push	{r7}
 80060a2:	b089      	sub	sp, #36	; 0x24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	61fa      	str	r2, [r7, #28]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	4619      	mov	r1, r3
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	61ba      	str	r2, [r7, #24]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	1acb      	subs	r3, r1, r3
 80060cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <mem_cmp+0x40>
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0eb      	beq.n	80060b8 <mem_cmp+0x18>

	return r;
 80060e0:	697b      	ldr	r3, [r7, #20]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3724      	adds	r7, #36	; 0x24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80060f8:	e002      	b.n	8006100 <chk_chr+0x12>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3301      	adds	r3, #1
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <chk_chr+0x26>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	4293      	cmp	r3, r2
 8006112:	d1f2      	bne.n	80060fa <chk_chr+0xc>
	return *str;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	781b      	ldrb	r3, [r3, #0]
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	e029      	b.n	800618c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006138:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <chk_lock+0xb4>)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	4413      	add	r3, r2
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01d      	beq.n	8006182 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006146:	4a24      	ldr	r2, [pc, #144]	; (80061d8 <chk_lock+0xb4>)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	4413      	add	r3, r2
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d116      	bne.n	8006186 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006158:	4a1f      	ldr	r2, [pc, #124]	; (80061d8 <chk_lock+0xb4>)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	4413      	add	r3, r2
 8006160:	3304      	adds	r3, #4
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006168:	429a      	cmp	r2, r3
 800616a:	d10c      	bne.n	8006186 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800616c:	4a1a      	ldr	r2, [pc, #104]	; (80061d8 <chk_lock+0xb4>)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	4413      	add	r3, r2
 8006174:	3308      	adds	r3, #8
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800617c:	429a      	cmp	r2, r3
 800617e:	d102      	bne.n	8006186 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006180:	e007      	b.n	8006192 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006182:	2301      	movs	r3, #1
 8006184:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d9d2      	bls.n	8006138 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d109      	bne.n	80061ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <chk_lock+0x80>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d101      	bne.n	80061a8 <chk_lock+0x84>
 80061a4:	2300      	movs	r3, #0
 80061a6:	e010      	b.n	80061ca <chk_lock+0xa6>
 80061a8:	2312      	movs	r3, #18
 80061aa:	e00e      	b.n	80061ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d108      	bne.n	80061c4 <chk_lock+0xa0>
 80061b2:	4a09      	ldr	r2, [pc, #36]	; (80061d8 <chk_lock+0xb4>)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	4413      	add	r3, r2
 80061ba:	330c      	adds	r3, #12
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c2:	d101      	bne.n	80061c8 <chk_lock+0xa4>
 80061c4:	2310      	movs	r3, #16
 80061c6:	e000      	b.n	80061ca <chk_lock+0xa6>
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	200137b4 	.word	0x200137b4

080061dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061e2:	2300      	movs	r3, #0
 80061e4:	607b      	str	r3, [r7, #4]
 80061e6:	e002      	b.n	80061ee <enq_lock+0x12>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3301      	adds	r3, #1
 80061ec:	607b      	str	r3, [r7, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d806      	bhi.n	8006202 <enq_lock+0x26>
 80061f4:	4a09      	ldr	r2, [pc, #36]	; (800621c <enq_lock+0x40>)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	4413      	add	r3, r2
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f2      	bne.n	80061e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b02      	cmp	r3, #2
 8006206:	bf14      	ite	ne
 8006208:	2301      	movne	r3, #1
 800620a:	2300      	moveq	r3, #0
 800620c:	b2db      	uxtb	r3, r3
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	200137b4 	.word	0x200137b4

08006220 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	e01f      	b.n	8006270 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006230:	4a41      	ldr	r2, [pc, #260]	; (8006338 <inc_lock+0x118>)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	4413      	add	r3, r2
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d113      	bne.n	800626a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006242:	4a3d      	ldr	r2, [pc, #244]	; (8006338 <inc_lock+0x118>)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	4413      	add	r3, r2
 800624a:	3304      	adds	r3, #4
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006252:	429a      	cmp	r2, r3
 8006254:	d109      	bne.n	800626a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006256:	4a38      	ldr	r2, [pc, #224]	; (8006338 <inc_lock+0x118>)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	4413      	add	r3, r2
 800625e:	3308      	adds	r3, #8
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006266:	429a      	cmp	r2, r3
 8006268:	d006      	beq.n	8006278 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3301      	adds	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d9dc      	bls.n	8006230 <inc_lock+0x10>
 8006276:	e000      	b.n	800627a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006278:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d132      	bne.n	80062e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e002      	b.n	800628c <inc_lock+0x6c>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d806      	bhi.n	80062a0 <inc_lock+0x80>
 8006292:	4a29      	ldr	r2, [pc, #164]	; (8006338 <inc_lock+0x118>)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	4413      	add	r3, r2
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f2      	bne.n	8006286 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d101      	bne.n	80062aa <inc_lock+0x8a>
 80062a6:	2300      	movs	r3, #0
 80062a8:	e040      	b.n	800632c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4922      	ldr	r1, [pc, #136]	; (8006338 <inc_lock+0x118>)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	440b      	add	r3, r1
 80062b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	491e      	ldr	r1, [pc, #120]	; (8006338 <inc_lock+0x118>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	440b      	add	r3, r1
 80062c4:	3304      	adds	r3, #4
 80062c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	695a      	ldr	r2, [r3, #20]
 80062cc:	491a      	ldr	r1, [pc, #104]	; (8006338 <inc_lock+0x118>)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	440b      	add	r3, r1
 80062d4:	3308      	adds	r3, #8
 80062d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80062d8:	4a17      	ldr	r2, [pc, #92]	; (8006338 <inc_lock+0x118>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	4413      	add	r3, r2
 80062e0:	330c      	adds	r3, #12
 80062e2:	2200      	movs	r2, #0
 80062e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d009      	beq.n	8006300 <inc_lock+0xe0>
 80062ec:	4a12      	ldr	r2, [pc, #72]	; (8006338 <inc_lock+0x118>)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	4413      	add	r3, r2
 80062f4:	330c      	adds	r3, #12
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <inc_lock+0xe0>
 80062fc:	2300      	movs	r3, #0
 80062fe:	e015      	b.n	800632c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <inc_lock+0xf8>
 8006306:	4a0c      	ldr	r2, [pc, #48]	; (8006338 <inc_lock+0x118>)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	4413      	add	r3, r2
 800630e:	330c      	adds	r3, #12
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	e001      	b.n	800631c <inc_lock+0xfc>
 8006318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800631c:	4906      	ldr	r1, [pc, #24]	; (8006338 <inc_lock+0x118>)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	440b      	add	r3, r1
 8006324:	330c      	adds	r3, #12
 8006326:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	200137b4 	.word	0x200137b4

0800633c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3b01      	subs	r3, #1
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d825      	bhi.n	800639c <dec_lock+0x60>
		n = Files[i].ctr;
 8006350:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <dec_lock+0x74>)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	4413      	add	r3, r2
 8006358:	330c      	adds	r3, #12
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800635e:	89fb      	ldrh	r3, [r7, #14]
 8006360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006364:	d101      	bne.n	800636a <dec_lock+0x2e>
 8006366:	2300      	movs	r3, #0
 8006368:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800636a:	89fb      	ldrh	r3, [r7, #14]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <dec_lock+0x3a>
 8006370:	89fb      	ldrh	r3, [r7, #14]
 8006372:	3b01      	subs	r3, #1
 8006374:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006376:	4a0e      	ldr	r2, [pc, #56]	; (80063b0 <dec_lock+0x74>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	4413      	add	r3, r2
 800637e:	330c      	adds	r3, #12
 8006380:	89fa      	ldrh	r2, [r7, #14]
 8006382:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006384:	89fb      	ldrh	r3, [r7, #14]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d105      	bne.n	8006396 <dec_lock+0x5a>
 800638a:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <dec_lock+0x74>)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	4413      	add	r3, r2
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	737b      	strb	r3, [r7, #13]
 800639a:	e001      	b.n	80063a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800639c:	2302      	movs	r3, #2
 800639e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80063a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	200137b4 	.word	0x200137b4

080063b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e010      	b.n	80063e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063c2:	4a0d      	ldr	r2, [pc, #52]	; (80063f8 <clear_lock+0x44>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	4413      	add	r3, r2
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d105      	bne.n	80063de <clear_lock+0x2a>
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <clear_lock+0x44>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	4413      	add	r3, r2
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d9eb      	bls.n	80063c2 <clear_lock+0xe>
	}
}
 80063ea:	bf00      	nop
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	200137b4 	.word	0x200137b4

080063fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	78db      	ldrb	r3, [r3, #3]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d034      	beq.n	800647a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	7858      	ldrb	r0, [r3, #1]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006420:	2301      	movs	r3, #1
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	f7ff fd40 	bl	8005ea8 <disk_write>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <sync_window+0x38>
			res = FR_DISK_ERR;
 800642e:	2301      	movs	r3, #1
 8006430:	73fb      	strb	r3, [r7, #15]
 8006432:	e022      	b.n	800647a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	1ad2      	subs	r2, r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	429a      	cmp	r2, r3
 8006448:	d217      	bcs.n	800647a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	789b      	ldrb	r3, [r3, #2]
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	e010      	b.n	8006474 <sync_window+0x78>
					wsect += fs->fsize;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4413      	add	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	7858      	ldrb	r0, [r3, #1]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006466:	2301      	movs	r3, #1
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	f7ff fd1d 	bl	8005ea8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	3b01      	subs	r3, #1
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d8eb      	bhi.n	8006452 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d01b      	beq.n	80064d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff ffad 	bl	80063fc <sync_window>
 80064a2:	4603      	mov	r3, r0
 80064a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d113      	bne.n	80064d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	7858      	ldrb	r0, [r3, #1]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064b6:	2301      	movs	r3, #1
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	f7ff fcd5 	bl	8005e68 <disk_read>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80064c4:	f04f 33ff 	mov.w	r3, #4294967295
 80064c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ff87 	bl	80063fc <sync_window>
 80064ee:	4603      	mov	r3, r0
 80064f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d158      	bne.n	80065aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d148      	bne.n	8006592 <sync_fs+0xb2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	791b      	ldrb	r3, [r3, #4]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d144      	bne.n	8006592 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3330      	adds	r3, #48	; 0x30
 800650c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006510:	2100      	movs	r1, #0
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fda9 	bl	800606a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3330      	adds	r3, #48	; 0x30
 800651c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006520:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fd38 	bl	8005f9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3330      	adds	r3, #48	; 0x30
 800652e:	4921      	ldr	r1, [pc, #132]	; (80065b4 <sync_fs+0xd4>)
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fd4d 	bl	8005fd0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3330      	adds	r3, #48	; 0x30
 800653a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800653e:	491e      	ldr	r1, [pc, #120]	; (80065b8 <sync_fs+0xd8>)
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fd45 	bl	8005fd0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3330      	adds	r3, #48	; 0x30
 800654a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f7ff fd3b 	bl	8005fd0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3330      	adds	r3, #48	; 0x30
 800655e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4619      	mov	r1, r3
 8006568:	4610      	mov	r0, r2
 800656a:	f7ff fd31 	bl	8005fd0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7858      	ldrb	r0, [r3, #1]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006586:	2301      	movs	r3, #1
 8006588:	f7ff fc8e 	bl	8005ea8 <disk_write>
			fs->fsi_flag = 0;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2200      	movs	r2, #0
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fca4 	bl	8005ee8 <disk_ioctl>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <sync_fs+0xca>
 80065a6:	2301      	movs	r3, #1
 80065a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	41615252 	.word	0x41615252
 80065b8:	61417272 	.word	0x61417272

080065bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	3b02      	subs	r3, #2
 80065ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	3b02      	subs	r3, #2
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d301      	bcc.n	80065dc <clust2sect+0x20>
 80065d8:	2300      	movs	r3, #0
 80065da:	e008      	b.n	80065ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	895b      	ldrh	r3, [r3, #10]
 80065e0:	461a      	mov	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	fb03 f202 	mul.w	r2, r3, r2
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	4413      	add	r3, r2
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b086      	sub	sp, #24
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d904      	bls.n	800661a <get_fat+0x20>
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <get_fat+0x26>
		val = 1;	/* Internal error */
 800661a:	2301      	movs	r3, #1
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e08f      	b.n	8006740 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006620:	f04f 33ff 	mov.w	r3, #4294967295
 8006624:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b03      	cmp	r3, #3
 800662c:	d062      	beq.n	80066f4 <get_fat+0xfa>
 800662e:	2b03      	cmp	r3, #3
 8006630:	dc7c      	bgt.n	800672c <get_fat+0x132>
 8006632:	2b01      	cmp	r3, #1
 8006634:	d002      	beq.n	800663c <get_fat+0x42>
 8006636:	2b02      	cmp	r3, #2
 8006638:	d042      	beq.n	80066c0 <get_fat+0xc6>
 800663a:	e077      	b.n	800672c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6a1a      	ldr	r2, [r3, #32]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	0a5b      	lsrs	r3, r3, #9
 8006652:	4413      	add	r3, r2
 8006654:	4619      	mov	r1, r3
 8006656:	6938      	ldr	r0, [r7, #16]
 8006658:	f7ff ff14 	bl	8006484 <move_window>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d167      	bne.n	8006732 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	60fa      	str	r2, [r7, #12]
 8006668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4413      	add	r3, r2
 8006670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006674:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	6a1a      	ldr	r2, [r3, #32]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	0a5b      	lsrs	r3, r3, #9
 800667e:	4413      	add	r3, r2
 8006680:	4619      	mov	r1, r3
 8006682:	6938      	ldr	r0, [r7, #16]
 8006684:	f7ff fefe 	bl	8006484 <move_window>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d153      	bne.n	8006736 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4413      	add	r3, r2
 8006698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800669c:	021b      	lsls	r3, r3, #8
 800669e:	461a      	mov	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <get_fat+0xbc>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	091b      	lsrs	r3, r3, #4
 80066b4:	e002      	b.n	80066bc <get_fat+0xc2>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066bc:	617b      	str	r3, [r7, #20]
			break;
 80066be:	e03f      	b.n	8006740 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6a1a      	ldr	r2, [r3, #32]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	4413      	add	r3, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	6938      	ldr	r0, [r7, #16]
 80066ce:	f7ff fed9 	bl	8006484 <move_window>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d130      	bne.n	800673a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80066e6:	4413      	add	r3, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fc1b 	bl	8005f24 <ld_word>
 80066ee:	4603      	mov	r3, r0
 80066f0:	617b      	str	r3, [r7, #20]
			break;
 80066f2:	e025      	b.n	8006740 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	09db      	lsrs	r3, r3, #7
 80066fc:	4413      	add	r3, r2
 80066fe:	4619      	mov	r1, r3
 8006700:	6938      	ldr	r0, [r7, #16]
 8006702:	f7ff febf 	bl	8006484 <move_window>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d118      	bne.n	800673e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800671a:	4413      	add	r3, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fc19 	bl	8005f54 <ld_dword>
 8006722:	4603      	mov	r3, r0
 8006724:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006728:	617b      	str	r3, [r7, #20]
			break;
 800672a:	e009      	b.n	8006740 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800672c:	2301      	movs	r3, #1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e006      	b.n	8006740 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006732:	bf00      	nop
 8006734:	e004      	b.n	8006740 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006736:	bf00      	nop
 8006738:	e002      	b.n	8006740 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800673a:	bf00      	nop
 800673c:	e000      	b.n	8006740 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800673e:	bf00      	nop
		}
	}

	return val;
 8006740:	697b      	ldr	r3, [r7, #20]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800674a:	b590      	push	{r4, r7, lr}
 800674c:	b089      	sub	sp, #36	; 0x24
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006756:	2302      	movs	r3, #2
 8006758:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b01      	cmp	r3, #1
 800675e:	f240 80d2 	bls.w	8006906 <put_fat+0x1bc>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	429a      	cmp	r2, r3
 800676a:	f080 80cc 	bcs.w	8006906 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b03      	cmp	r3, #3
 8006774:	f000 8096 	beq.w	80068a4 <put_fat+0x15a>
 8006778:	2b03      	cmp	r3, #3
 800677a:	f300 80cd 	bgt.w	8006918 <put_fat+0x1ce>
 800677e:	2b01      	cmp	r3, #1
 8006780:	d002      	beq.n	8006788 <put_fat+0x3e>
 8006782:	2b02      	cmp	r3, #2
 8006784:	d06e      	beq.n	8006864 <put_fat+0x11a>
 8006786:	e0c7      	b.n	8006918 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4413      	add	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1a      	ldr	r2, [r3, #32]
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	0a5b      	lsrs	r3, r3, #9
 800679e:	4413      	add	r3, r2
 80067a0:	4619      	mov	r1, r3
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7ff fe6e 	bl	8006484 <move_window>
 80067a8:	4603      	mov	r3, r0
 80067aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067ac:	7ffb      	ldrb	r3, [r7, #31]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f040 80ab 	bne.w	800690a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	1c59      	adds	r1, r3, #1
 80067be:	61b9      	str	r1, [r7, #24]
 80067c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c4:	4413      	add	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00d      	beq.n	80067ee <put_fat+0xa4>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	b25b      	sxtb	r3, r3
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	b25a      	sxtb	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	b25b      	sxtb	r3, r3
 80067e6:	4313      	orrs	r3, r2
 80067e8:	b25b      	sxtb	r3, r3
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	e001      	b.n	80067f2 <put_fat+0xa8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	0a5b      	lsrs	r3, r3, #9
 8006804:	4413      	add	r3, r2
 8006806:	4619      	mov	r1, r3
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f7ff fe3b 	bl	8006484 <move_window>
 800680e:	4603      	mov	r3, r0
 8006810:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006812:	7ffb      	ldrb	r3, [r7, #31]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d17a      	bne.n	800690e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006824:	4413      	add	r3, r2
 8006826:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <put_fat+0xf0>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	091b      	lsrs	r3, r3, #4
 8006836:	b2db      	uxtb	r3, r3
 8006838:	e00e      	b.n	8006858 <put_fat+0x10e>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	b25b      	sxtb	r3, r3
 8006840:	f023 030f 	bic.w	r3, r3, #15
 8006844:	b25a      	sxtb	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0a1b      	lsrs	r3, r3, #8
 800684a:	b25b      	sxtb	r3, r3
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	b25b      	sxtb	r3, r3
 8006852:	4313      	orrs	r3, r2
 8006854:	b25b      	sxtb	r3, r3
 8006856:	b2db      	uxtb	r3, r3
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	70da      	strb	r2, [r3, #3]
			break;
 8006862:	e059      	b.n	8006918 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	0a1b      	lsrs	r3, r3, #8
 800686c:	4413      	add	r3, r2
 800686e:	4619      	mov	r1, r3
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff fe07 	bl	8006484 <move_window>
 8006876:	4603      	mov	r3, r0
 8006878:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800687a:	7ffb      	ldrb	r3, [r7, #31]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d148      	bne.n	8006912 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800688e:	4413      	add	r3, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	b292      	uxth	r2, r2
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fb7f 	bl	8005f9a <st_word>
			fs->wflag = 1;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	70da      	strb	r2, [r3, #3]
			break;
 80068a2:	e039      	b.n	8006918 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	09db      	lsrs	r3, r3, #7
 80068ac:	4413      	add	r3, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff fde7 	bl	8006484 <move_window>
 80068b6:	4603      	mov	r3, r0
 80068b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068ba:	7ffb      	ldrb	r3, [r7, #31]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d12a      	bne.n	8006916 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80068d4:	4413      	add	r3, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fb3c 	bl	8005f54 <ld_dword>
 80068dc:	4603      	mov	r3, r0
 80068de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068e2:	4323      	orrs	r3, r4
 80068e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80068f4:	4413      	add	r3, r2
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff fb69 	bl	8005fd0 <st_dword>
			fs->wflag = 1;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	70da      	strb	r2, [r3, #3]
			break;
 8006904:	e008      	b.n	8006918 <put_fat+0x1ce>
		}
	}
 8006906:	bf00      	nop
 8006908:	e006      	b.n	8006918 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800690a:	bf00      	nop
 800690c:	e004      	b.n	8006918 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800690e:	bf00      	nop
 8006910:	e002      	b.n	8006918 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006916:	bf00      	nop
	return res;
 8006918:	7ffb      	ldrb	r3, [r7, #31]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3724      	adds	r7, #36	; 0x24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd90      	pop	{r4, r7, pc}

08006922 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b088      	sub	sp, #32
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d904      	bls.n	8006948 <remove_chain+0x26>
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	429a      	cmp	r2, r3
 8006946:	d301      	bcc.n	800694c <remove_chain+0x2a>
 8006948:	2302      	movs	r3, #2
 800694a:	e04b      	b.n	80069e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00c      	beq.n	800696c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006952:	f04f 32ff 	mov.w	r2, #4294967295
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	69b8      	ldr	r0, [r7, #24]
 800695a:	f7ff fef6 	bl	800674a <put_fat>
 800695e:	4603      	mov	r3, r0
 8006960:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006962:	7ffb      	ldrb	r3, [r7, #31]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <remove_chain+0x4a>
 8006968:	7ffb      	ldrb	r3, [r7, #31]
 800696a:	e03b      	b.n	80069e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff fe43 	bl	80065fa <get_fat>
 8006974:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d031      	beq.n	80069e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <remove_chain+0x64>
 8006982:	2302      	movs	r3, #2
 8006984:	e02e      	b.n	80069e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d101      	bne.n	8006992 <remove_chain+0x70>
 800698e:	2301      	movs	r3, #1
 8006990:	e028      	b.n	80069e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006992:	2200      	movs	r2, #0
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	69b8      	ldr	r0, [r7, #24]
 8006998:	f7ff fed7 	bl	800674a <put_fat>
 800699c:	4603      	mov	r3, r0
 800699e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80069a0:	7ffb      	ldrb	r3, [r7, #31]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <remove_chain+0x88>
 80069a6:	7ffb      	ldrb	r3, [r7, #31]
 80069a8:	e01c      	b.n	80069e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	3b02      	subs	r3, #2
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d20b      	bcs.n	80069d0 <remove_chain+0xae>
			fs->free_clst++;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	791b      	ldrb	r3, [r3, #4]
 80069c6:	f043 0301 	orr.w	r3, r3, #1
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d3c6      	bcc.n	800696c <remove_chain+0x4a>
 80069de:	e000      	b.n	80069e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80069e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3720      	adds	r7, #32
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10d      	bne.n	8006a1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <create_chain+0x2c>
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d31b      	bcc.n	8006a50 <create_chain+0x64>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	e018      	b.n	8006a50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fdea 	bl	80065fa <get_fat>
 8006a26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d801      	bhi.n	8006a32 <create_chain+0x46>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e070      	b.n	8006b14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d101      	bne.n	8006a3e <create_chain+0x52>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	e06a      	b.n	8006b14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d201      	bcs.n	8006a4c <create_chain+0x60>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	e063      	b.n	8006b14 <create_chain+0x128>
		scl = clst;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	3301      	adds	r3, #1
 8006a58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d307      	bcc.n	8006a74 <create_chain+0x88>
				ncl = 2;
 8006a64:	2302      	movs	r3, #2
 8006a66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d901      	bls.n	8006a74 <create_chain+0x88>
 8006a70:	2300      	movs	r3, #0
 8006a72:	e04f      	b.n	8006b14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff fdbf 	bl	80065fa <get_fat>
 8006a7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00e      	beq.n	8006aa2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d003      	beq.n	8006a92 <create_chain+0xa6>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d101      	bne.n	8006a96 <create_chain+0xaa>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	e03e      	b.n	8006b14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d1da      	bne.n	8006a54 <create_chain+0x68>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e038      	b.n	8006b14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006aa2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa8:	69f9      	ldr	r1, [r7, #28]
 8006aaa:	6938      	ldr	r0, [r7, #16]
 8006aac:	f7ff fe4d 	bl	800674a <put_fat>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <create_chain+0xe2>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d006      	beq.n	8006ace <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6938      	ldr	r0, [r7, #16]
 8006ac6:	f7ff fe40 	bl	800674a <put_fat>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d116      	bne.n	8006b02 <create_chain+0x116>
		fs->last_clst = ncl;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	3b02      	subs	r3, #2
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d804      	bhi.n	8006af2 <create_chain+0x106>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	1e5a      	subs	r2, r3, #1
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	791b      	ldrb	r3, [r3, #4]
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	711a      	strb	r2, [r3, #4]
 8006b00:	e007      	b.n	8006b12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d102      	bne.n	8006b0e <create_chain+0x122>
 8006b08:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0c:	e000      	b.n	8006b10 <create_chain+0x124>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006b12:	69fb      	ldr	r3, [r7, #28]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	3304      	adds	r3, #4
 8006b32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	0a5b      	lsrs	r3, r3, #9
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	8952      	ldrh	r2, [r2, #10]
 8006b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	613a      	str	r2, [r7, #16]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <clmt_clust+0x3a>
 8006b52:	2300      	movs	r3, #0
 8006b54:	e010      	b.n	8006b78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d307      	bcc.n	8006b6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b6c:	e7e9      	b.n	8006b42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006b6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	4413      	add	r3, r2
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b9a:	d204      	bcs.n	8006ba6 <dir_sdi+0x22>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <dir_sdi+0x26>
		return FR_INT_ERR;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e063      	b.n	8006c72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d106      	bne.n	8006bca <dir_sdi+0x46>
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d902      	bls.n	8006bca <dir_sdi+0x46>
		clst = fs->dirbase;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10c      	bne.n	8006bea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	8912      	ldrh	r2, [r2, #8]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d301      	bcc.n	8006be0 <dir_sdi+0x5c>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e048      	b.n	8006c72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	61da      	str	r2, [r3, #28]
 8006be8:	e029      	b.n	8006c3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	895b      	ldrh	r3, [r3, #10]
 8006bee:	025b      	lsls	r3, r3, #9
 8006bf0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006bf2:	e019      	b.n	8006c28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6979      	ldr	r1, [r7, #20]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fcfe 	bl	80065fa <get_fat>
 8006bfe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d101      	bne.n	8006c0c <dir_sdi+0x88>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e032      	b.n	8006c72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d904      	bls.n	8006c1c <dir_sdi+0x98>
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d301      	bcc.n	8006c20 <dir_sdi+0x9c>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e028      	b.n	8006c72 <dir_sdi+0xee>
			ofs -= csz;
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d2e1      	bcs.n	8006bf4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006c30:	6979      	ldr	r1, [r7, #20]
 8006c32:	6938      	ldr	r0, [r7, #16]
 8006c34:	f7ff fcc2 	bl	80065bc <clust2sect>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <dir_sdi+0xcc>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e010      	b.n	8006c72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	0a5b      	lsrs	r3, r3, #9
 8006c58:	441a      	add	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	441a      	add	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b086      	sub	sp, #24
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	3320      	adds	r3, #32
 8006c90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <dir_next+0x28>
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ca0:	d301      	bcc.n	8006ca6 <dir_next+0x2c>
 8006ca2:	2304      	movs	r3, #4
 8006ca4:	e0aa      	b.n	8006dfc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f040 8098 	bne.w	8006de2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	095b      	lsrs	r3, r3, #5
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	8912      	ldrh	r2, [r2, #8]
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	f0c0 8088 	bcc.w	8006de2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	61da      	str	r2, [r3, #28]
 8006cd8:	2304      	movs	r3, #4
 8006cda:	e08f      	b.n	8006dfc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	0a5b      	lsrs	r3, r3, #9
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	8952      	ldrh	r2, [r2, #10]
 8006ce4:	3a01      	subs	r2, #1
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d17a      	bne.n	8006de2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	f7ff fc80 	bl	80065fa <get_fat>
 8006cfa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d801      	bhi.n	8006d06 <dir_next+0x8c>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e07a      	b.n	8006dfc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d101      	bne.n	8006d12 <dir_next+0x98>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e074      	b.n	8006dfc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d358      	bcc.n	8006dce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	61da      	str	r2, [r3, #28]
 8006d28:	2304      	movs	r3, #4
 8006d2a:	e067      	b.n	8006dfc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	4619      	mov	r1, r3
 8006d34:	4610      	mov	r0, r2
 8006d36:	f7ff fe59 	bl	80069ec <create_chain>
 8006d3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <dir_next+0xcc>
 8006d42:	2307      	movs	r3, #7
 8006d44:	e05a      	b.n	8006dfc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <dir_next+0xd6>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e055      	b.n	8006dfc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d101      	bne.n	8006d5c <dir_next+0xe2>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e04f      	b.n	8006dfc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff fb4d 	bl	80063fc <sync_window>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <dir_next+0xf2>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e047      	b.n	8006dfc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3330      	adds	r3, #48	; 0x30
 8006d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d74:	2100      	movs	r1, #0
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff f977 	bl	800606a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	6979      	ldr	r1, [r7, #20]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff fc1a 	bl	80065bc <clust2sect>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d8e:	e012      	b.n	8006db6 <dir_next+0x13c>
						fs->wflag = 1;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2201      	movs	r2, #1
 8006d94:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff fb30 	bl	80063fc <sync_window>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <dir_next+0x12c>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e02a      	b.n	8006dfc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3301      	adds	r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	895b      	ldrh	r3, [r3, #10]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d3e6      	bcc.n	8006d90 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006dd4:	6979      	ldr	r1, [r7, #20]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff fbf0 	bl	80065bc <clust2sect>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df4:	441a      	add	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff feb4 	bl	8006b84 <dir_sdi>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d12b      	bne.n	8006e7e <dir_alloc+0x7a>
		n = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff fb27 	bl	8006484 <move_window>
 8006e36:	4603      	mov	r3, r0
 8006e38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d11d      	bne.n	8006e7c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2be5      	cmp	r3, #229	; 0xe5
 8006e48:	d004      	beq.n	8006e54 <dir_alloc+0x50>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d107      	bne.n	8006e64 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	3301      	adds	r3, #1
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d102      	bne.n	8006e68 <dir_alloc+0x64>
 8006e62:	e00c      	b.n	8006e7e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006e64:	2300      	movs	r3, #0
 8006e66:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006e68:	2101      	movs	r1, #1
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff ff05 	bl	8006c7a <dir_next>
 8006e70:	4603      	mov	r3, r0
 8006e72:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0d7      	beq.n	8006e2a <dir_alloc+0x26>
 8006e7a:	e000      	b.n	8006e7e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006e7c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d101      	bne.n	8006e88 <dir_alloc+0x84>
 8006e84:	2307      	movs	r3, #7
 8006e86:	75fb      	strb	r3, [r7, #23]
	return res;
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	331a      	adds	r3, #26
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff f83f 	bl	8005f24 <ld_word>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d109      	bne.n	8006ec6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	3314      	adds	r3, #20
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff f834 	bl	8005f24 <ld_word>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	331a      	adds	r3, #26
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	b292      	uxth	r2, r2
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff f857 	bl	8005f9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d109      	bne.n	8006f08 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f103 0214 	add.w	r2, r3, #20
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	0c1b      	lsrs	r3, r3, #16
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7ff f849 	bl	8005f9a <st_word>
	}
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff fe2f 	bl	8006b84 <dir_sdi>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <dir_find+0x24>
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	e03e      	b.n	8006fb2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6938      	ldr	r0, [r7, #16]
 8006f3c:	f7ff faa2 	bl	8006484 <move_window>
 8006f40:	4603      	mov	r3, r0
 8006f42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d12f      	bne.n	8006faa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <dir_find+0x4e>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	75fb      	strb	r3, [r7, #23]
 8006f5c:	e028      	b.n	8006fb0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	330b      	adds	r3, #11
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	330b      	adds	r3, #11
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <dir_find+0x86>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a18      	ldr	r0, [r3, #32]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3324      	adds	r3, #36	; 0x24
 8006f88:	220b      	movs	r2, #11
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f7ff f888 	bl	80060a0 <mem_cmp>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006f96:	2100      	movs	r1, #0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff fe6e 	bl	8006c7a <dir_next>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0c5      	beq.n	8006f34 <dir_find+0x24>
 8006fa8:	e002      	b.n	8006fb0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006fae:	bf00      	nop

	return res;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006fc8:	2101      	movs	r1, #1
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff ff1a 	bl	8006e04 <dir_alloc>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d11c      	bne.n	8007014 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	68b8      	ldr	r0, [r7, #8]
 8006fe2:	f7ff fa4f 	bl	8006484 <move_window>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d111      	bne.n	8007014 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff f836 	bl	800606a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a18      	ldr	r0, [r3, #32]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3324      	adds	r3, #36	; 0x24
 8007006:	220b      	movs	r2, #11
 8007008:	4619      	mov	r1, r3
 800700a:	f7ff f80d 	bl	8006028 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2201      	movs	r2, #1
 8007012:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3324      	adds	r3, #36	; 0x24
 8007034:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007036:	220b      	movs	r2, #11
 8007038:	2120      	movs	r1, #32
 800703a:	68b8      	ldr	r0, [r7, #8]
 800703c:	f7ff f815 	bl	800606a <mem_set>
	si = i = 0; ni = 8;
 8007040:	2300      	movs	r3, #0
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	2308      	movs	r3, #8
 800704a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	61fa      	str	r2, [r7, #28]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4413      	add	r3, r2
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800705a:	7efb      	ldrb	r3, [r7, #27]
 800705c:	2b20      	cmp	r3, #32
 800705e:	d94e      	bls.n	80070fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007060:	7efb      	ldrb	r3, [r7, #27]
 8007062:	2b2f      	cmp	r3, #47	; 0x2f
 8007064:	d006      	beq.n	8007074 <create_name+0x54>
 8007066:	7efb      	ldrb	r3, [r7, #27]
 8007068:	2b5c      	cmp	r3, #92	; 0x5c
 800706a:	d110      	bne.n	800708e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800706c:	e002      	b.n	8007074 <create_name+0x54>
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b2f      	cmp	r3, #47	; 0x2f
 800707e:	d0f6      	beq.n	800706e <create_name+0x4e>
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	4413      	add	r3, r2
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b5c      	cmp	r3, #92	; 0x5c
 800708a:	d0f0      	beq.n	800706e <create_name+0x4e>
			break;
 800708c:	e038      	b.n	8007100 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800708e:	7efb      	ldrb	r3, [r7, #27]
 8007090:	2b2e      	cmp	r3, #46	; 0x2e
 8007092:	d003      	beq.n	800709c <create_name+0x7c>
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	429a      	cmp	r2, r3
 800709a:	d30c      	bcc.n	80070b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2b0b      	cmp	r3, #11
 80070a0:	d002      	beq.n	80070a8 <create_name+0x88>
 80070a2:	7efb      	ldrb	r3, [r7, #27]
 80070a4:	2b2e      	cmp	r3, #46	; 0x2e
 80070a6:	d001      	beq.n	80070ac <create_name+0x8c>
 80070a8:	2306      	movs	r3, #6
 80070aa:	e044      	b.n	8007136 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80070ac:	2308      	movs	r3, #8
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	230b      	movs	r3, #11
 80070b2:	617b      	str	r3, [r7, #20]
			continue;
 80070b4:	e022      	b.n	80070fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80070b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	da04      	bge.n	80070c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80070be:	7efb      	ldrb	r3, [r7, #27]
 80070c0:	3b80      	subs	r3, #128	; 0x80
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <create_name+0x120>)
 80070c4:	5cd3      	ldrb	r3, [r2, r3]
 80070c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80070c8:	7efb      	ldrb	r3, [r7, #27]
 80070ca:	4619      	mov	r1, r3
 80070cc:	481d      	ldr	r0, [pc, #116]	; (8007144 <create_name+0x124>)
 80070ce:	f7ff f80e 	bl	80060ee <chk_chr>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <create_name+0xbc>
 80070d8:	2306      	movs	r3, #6
 80070da:	e02c      	b.n	8007136 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80070dc:	7efb      	ldrb	r3, [r7, #27]
 80070de:	2b60      	cmp	r3, #96	; 0x60
 80070e0:	d905      	bls.n	80070ee <create_name+0xce>
 80070e2:	7efb      	ldrb	r3, [r7, #27]
 80070e4:	2b7a      	cmp	r3, #122	; 0x7a
 80070e6:	d802      	bhi.n	80070ee <create_name+0xce>
 80070e8:	7efb      	ldrb	r3, [r7, #27]
 80070ea:	3b20      	subs	r3, #32
 80070ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	613a      	str	r2, [r7, #16]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	4413      	add	r3, r2
 80070f8:	7efa      	ldrb	r2, [r7, #27]
 80070fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80070fc:	e7a6      	b.n	800704c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80070fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	441a      	add	r2, r3
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <create_name+0xf4>
 8007110:	2306      	movs	r3, #6
 8007112:	e010      	b.n	8007136 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	2be5      	cmp	r3, #229	; 0xe5
 800711a:	d102      	bne.n	8007122 <create_name+0x102>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2205      	movs	r2, #5
 8007120:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007122:	7efb      	ldrb	r3, [r7, #27]
 8007124:	2b20      	cmp	r3, #32
 8007126:	d801      	bhi.n	800712c <create_name+0x10c>
 8007128:	2204      	movs	r2, #4
 800712a:	e000      	b.n	800712e <create_name+0x10e>
 800712c:	2200      	movs	r2, #0
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	330b      	adds	r3, #11
 8007132:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007134:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	08009eec 	.word	0x08009eec
 8007144:	08009e08 	.word	0x08009e08

08007148 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800715c:	e002      	b.n	8007164 <follow_path+0x1c>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b2f      	cmp	r3, #47	; 0x2f
 800716a:	d0f8      	beq.n	800715e <follow_path+0x16>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b5c      	cmp	r3, #92	; 0x5c
 8007172:	d0f4      	beq.n	800715e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2200      	movs	r2, #0
 8007178:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b1f      	cmp	r3, #31
 8007180:	d80a      	bhi.n	8007198 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2280      	movs	r2, #128	; 0x80
 8007186:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800718a:	2100      	movs	r1, #0
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fcf9 	bl	8006b84 <dir_sdi>
 8007192:	4603      	mov	r3, r0
 8007194:	75fb      	strb	r3, [r7, #23]
 8007196:	e043      	b.n	8007220 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007198:	463b      	mov	r3, r7
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ff3f 	bl	8007020 <create_name>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d134      	bne.n	8007216 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff feaf 	bl	8006f10 <dir_find>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80071bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d127      	bne.n	800721a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d122      	bne.n	800721a <follow_path+0xd2>
 80071d4:	2305      	movs	r3, #5
 80071d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80071d8:	e01f      	b.n	800721a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071da:	7afb      	ldrb	r3, [r7, #11]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d11c      	bne.n	800721e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	799b      	ldrb	r3, [r3, #6]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80071f0:	2305      	movs	r3, #5
 80071f2:	75fb      	strb	r3, [r7, #23]
 80071f4:	e014      	b.n	8007220 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007204:	4413      	add	r3, r2
 8007206:	4619      	mov	r1, r3
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff fe42 	bl	8006e92 <ld_clust>
 800720e:	4602      	mov	r2, r0
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007214:	e7c0      	b.n	8007198 <follow_path+0x50>
			if (res != FR_OK) break;
 8007216:	bf00      	nop
 8007218:	e002      	b.n	8007220 <follow_path+0xd8>
				break;
 800721a:	bf00      	nop
 800721c:	e000      	b.n	8007220 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800721e:	bf00      	nop
			}
		}
	}

	return res;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800722a:	b480      	push	{r7}
 800722c:	b087      	sub	sp, #28
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007232:	f04f 33ff 	mov.w	r3, #4294967295
 8007236:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d031      	beq.n	80072a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e002      	b.n	800724e <get_ldnumber+0x24>
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	3301      	adds	r3, #1
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b20      	cmp	r3, #32
 8007254:	d903      	bls.n	800725e <get_ldnumber+0x34>
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b3a      	cmp	r3, #58	; 0x3a
 800725c:	d1f4      	bne.n	8007248 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b3a      	cmp	r3, #58	; 0x3a
 8007264:	d11c      	bne.n	80072a0 <get_ldnumber+0x76>
			tp = *path;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	60fa      	str	r2, [r7, #12]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	3b30      	subs	r3, #48	; 0x30
 8007276:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b09      	cmp	r3, #9
 800727c:	d80e      	bhi.n	800729c <get_ldnumber+0x72>
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	429a      	cmp	r2, r3
 8007284:	d10a      	bne.n	800729c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d107      	bne.n	800729c <get_ldnumber+0x72>
					vol = (int)i;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	3301      	adds	r3, #1
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	e002      	b.n	80072a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072a0:	2300      	movs	r3, #0
 80072a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80072a4:	693b      	ldr	r3, [r7, #16]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	70da      	strb	r2, [r3, #3]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff f8d8 	bl	8006484 <move_window>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <check_fs+0x2a>
 80072da:	2304      	movs	r3, #4
 80072dc:	e038      	b.n	8007350 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3330      	adds	r3, #48	; 0x30
 80072e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe fe1c 	bl	8005f24 <ld_word>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d001      	beq.n	80072fc <check_fs+0x48>
 80072f8:	2303      	movs	r3, #3
 80072fa:	e029      	b.n	8007350 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007302:	2be9      	cmp	r3, #233	; 0xe9
 8007304:	d009      	beq.n	800731a <check_fs+0x66>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800730c:	2beb      	cmp	r3, #235	; 0xeb
 800730e:	d11e      	bne.n	800734e <check_fs+0x9a>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007316:	2b90      	cmp	r3, #144	; 0x90
 8007318:	d119      	bne.n	800734e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3330      	adds	r3, #48	; 0x30
 800731e:	3336      	adds	r3, #54	; 0x36
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fe17 	bl	8005f54 <ld_dword>
 8007326:	4603      	mov	r3, r0
 8007328:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800732c:	4a0a      	ldr	r2, [pc, #40]	; (8007358 <check_fs+0xa4>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d101      	bne.n	8007336 <check_fs+0x82>
 8007332:	2300      	movs	r3, #0
 8007334:	e00c      	b.n	8007350 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3330      	adds	r3, #48	; 0x30
 800733a:	3352      	adds	r3, #82	; 0x52
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe fe09 	bl	8005f54 <ld_dword>
 8007342:	4603      	mov	r3, r0
 8007344:	4a05      	ldr	r2, [pc, #20]	; (800735c <check_fs+0xa8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d101      	bne.n	800734e <check_fs+0x9a>
 800734a:	2300      	movs	r3, #0
 800734c:	e000      	b.n	8007350 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800734e:	2302      	movs	r3, #2
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	00544146 	.word	0x00544146
 800735c:	33544146 	.word	0x33544146

08007360 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b096      	sub	sp, #88	; 0x58
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff ff58 	bl	800722a <get_ldnumber>
 800737a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800737c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737e:	2b00      	cmp	r3, #0
 8007380:	da01      	bge.n	8007386 <find_volume+0x26>
 8007382:	230b      	movs	r3, #11
 8007384:	e22d      	b.n	80077e2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007386:	4aa1      	ldr	r2, [pc, #644]	; (800760c <find_volume+0x2ac>)
 8007388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800738e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <find_volume+0x3a>
 8007396:	230c      	movs	r3, #12
 8007398:	e223      	b.n	80077e2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800739e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	f023 0301 	bic.w	r3, r3, #1
 80073a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01a      	beq.n	80073e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	785b      	ldrb	r3, [r3, #1]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fd17 	bl	8005de8 <disk_status>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80073c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10c      	bne.n	80073e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <find_volume+0x82>
 80073d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80073de:	230a      	movs	r3, #10
 80073e0:	e1ff      	b.n	80077e2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80073e2:	2300      	movs	r3, #0
 80073e4:	e1fd      	b.n	80077e2 <find_volume+0x482>
	}

<<<<<<< HEAD
	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80073ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe fd0f 	bl	8005e1c <disk_initialize>
 80073fe:	4603      	mov	r3, r0
 8007400:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007404:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007410:	2303      	movs	r3, #3
 8007412:	e1e6      	b.n	80077e2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <find_volume+0xca>
 800741a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007426:	230a      	movs	r3, #10
 8007428:	e1db      	b.n	80077e2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800742e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007430:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007432:	f7ff ff3f 	bl	80072b4 <check_fs>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800743c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007440:	2b02      	cmp	r3, #2
 8007442:	d149      	bne.n	80074d8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007444:	2300      	movs	r3, #0
 8007446:	643b      	str	r3, [r7, #64]	; 0x40
 8007448:	e01e      	b.n	8007488 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007458:	4413      	add	r3, r2
 800745a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	3304      	adds	r3, #4
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d006      	beq.n	8007474 <find_volume+0x114>
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	3308      	adds	r3, #8
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fd72 	bl	8005f54 <ld_dword>
 8007470:	4602      	mov	r2, r0
 8007472:	e000      	b.n	8007476 <find_volume+0x116>
 8007474:	2200      	movs	r2, #0
 8007476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	3358      	adds	r3, #88	; 0x58
 800747c:	443b      	add	r3, r7
 800747e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007484:	3301      	adds	r3, #1
 8007486:	643b      	str	r3, [r7, #64]	; 0x40
 8007488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748a:	2b03      	cmp	r3, #3
 800748c:	d9dd      	bls.n	800744a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800748e:	2300      	movs	r3, #0
 8007490:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <find_volume+0x13e>
 8007498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749a:	3b01      	subs	r3, #1
 800749c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800749e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	3358      	adds	r3, #88	; 0x58
 80074a4:	443b      	add	r3, r7
 80074a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80074aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80074ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <find_volume+0x15e>
 80074b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074b6:	f7ff fefd 	bl	80072b4 <check_fs>
 80074ba:	4603      	mov	r3, r0
 80074bc:	e000      	b.n	80074c0 <find_volume+0x160>
 80074be:	2303      	movs	r3, #3
 80074c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80074c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d905      	bls.n	80074d8 <find_volume+0x178>
 80074cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ce:	3301      	adds	r3, #1
 80074d0:	643b      	str	r3, [r7, #64]	; 0x40
 80074d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d9e2      	bls.n	800749e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80074d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074dc:	2b04      	cmp	r3, #4
 80074de:	d101      	bne.n	80074e4 <find_volume+0x184>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e17e      	b.n	80077e2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80074e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d901      	bls.n	80074f0 <find_volume+0x190>
 80074ec:	230d      	movs	r3, #13
 80074ee:	e178      	b.n	80077e2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	3330      	adds	r3, #48	; 0x30
 80074f4:	330b      	adds	r3, #11
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fd14 	bl	8005f24 <ld_word>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007502:	d001      	beq.n	8007508 <find_volume+0x1a8>
 8007504:	230d      	movs	r3, #13
 8007506:	e16c      	b.n	80077e2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750a:	3330      	adds	r3, #48	; 0x30
 800750c:	3316      	adds	r3, #22
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fd08 	bl	8005f24 <ld_word>
 8007514:	4603      	mov	r3, r0
 8007516:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <find_volume+0x1cc>
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	3330      	adds	r3, #48	; 0x30
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe fd15 	bl	8005f54 <ld_dword>
 800752a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007530:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	789b      	ldrb	r3, [r3, #2]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d005      	beq.n	8007550 <find_volume+0x1f0>
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	789b      	ldrb	r3, [r3, #2]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d001      	beq.n	8007550 <find_volume+0x1f0>
 800754c:	230d      	movs	r3, #13
 800754e:	e148      	b.n	80077e2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	789b      	ldrb	r3, [r3, #2]
 8007554:	461a      	mov	r2, r3
 8007556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007558:	fb02 f303 	mul.w	r3, r2, r3
 800755c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007564:	b29a      	uxth	r2, r3
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	895b      	ldrh	r3, [r3, #10]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <find_volume+0x224>
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	895b      	ldrh	r3, [r3, #10]
 8007576:	461a      	mov	r2, r3
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	895b      	ldrh	r3, [r3, #10]
 800757c:	3b01      	subs	r3, #1
 800757e:	4013      	ands	r3, r2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <find_volume+0x228>
 8007584:	230d      	movs	r3, #13
 8007586:	e12c      	b.n	80077e2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	3330      	adds	r3, #48	; 0x30
 800758c:	3311      	adds	r3, #17
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe fcc8 	bl	8005f24 <ld_word>
 8007594:	4603      	mov	r3, r0
 8007596:	461a      	mov	r2, r3
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	891b      	ldrh	r3, [r3, #8]
 80075a0:	f003 030f 	and.w	r3, r3, #15
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <find_volume+0x24e>
 80075aa:	230d      	movs	r3, #13
 80075ac:	e119      	b.n	80077e2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	3330      	adds	r3, #48	; 0x30
 80075b2:	3313      	adds	r3, #19
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fcb5 	bl	8005f24 <ld_word>
 80075ba:	4603      	mov	r3, r0
 80075bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80075be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d106      	bne.n	80075d2 <find_volume+0x272>
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	3330      	adds	r3, #48	; 0x30
 80075c8:	3320      	adds	r3, #32
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fcc2 	bl	8005f54 <ld_dword>
 80075d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	3330      	adds	r3, #48	; 0x30
 80075d6:	330e      	adds	r3, #14
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe fca3 	bl	8005f24 <ld_word>
 80075de:	4603      	mov	r3, r0
 80075e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80075e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <find_volume+0x28c>
 80075e8:	230d      	movs	r3, #13
 80075ea:	e0fa      	b.n	80077e2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80075ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80075ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f0:	4413      	add	r3, r2
 80075f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075f4:	8912      	ldrh	r2, [r2, #8]
 80075f6:	0912      	lsrs	r2, r2, #4
 80075f8:	b292      	uxth	r2, r2
 80075fa:	4413      	add	r3, r2
 80075fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80075fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	429a      	cmp	r2, r3
 8007604:	d204      	bcs.n	8007610 <find_volume+0x2b0>
 8007606:	230d      	movs	r3, #13
 8007608:	e0eb      	b.n	80077e2 <find_volume+0x482>
 800760a:	bf00      	nop
 800760c:	200137ac 	.word	0x200137ac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007618:	8952      	ldrh	r2, [r2, #10]
 800761a:	fbb3 f3f2 	udiv	r3, r3, r2
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <find_volume+0x2ca>
 8007626:	230d      	movs	r3, #13
 8007628:	e0db      	b.n	80077e2 <find_volume+0x482>
		fmt = FS_FAT32;
 800762a:	2303      	movs	r3, #3
 800762c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007636:	4293      	cmp	r3, r2
 8007638:	d802      	bhi.n	8007640 <find_volume+0x2e0>
 800763a:	2302      	movs	r3, #2
 800763c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007646:	4293      	cmp	r3, r2
 8007648:	d802      	bhi.n	8007650 <find_volume+0x2f0>
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	1c9a      	adds	r2, r3, #2
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800765c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800765e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007662:	441a      	add	r2, r3
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	441a      	add	r2, r3
 800766e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007670:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007672:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007676:	2b03      	cmp	r3, #3
 8007678:	d11e      	bne.n	80076b8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	3330      	adds	r3, #48	; 0x30
 800767e:	332a      	adds	r3, #42	; 0x2a
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fc4f 	bl	8005f24 <ld_word>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <find_volume+0x330>
 800768c:	230d      	movs	r3, #13
 800768e:	e0a8      	b.n	80077e2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	891b      	ldrh	r3, [r3, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <find_volume+0x33c>
 8007698:	230d      	movs	r3, #13
 800769a:	e0a2      	b.n	80077e2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	3330      	adds	r3, #48	; 0x30
 80076a0:	332c      	adds	r3, #44	; 0x2c
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fc56 	bl	8005f54 <ld_dword>
 80076a8:	4602      	mov	r2, r0
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	647b      	str	r3, [r7, #68]	; 0x44
 80076b6:	e01f      	b.n	80076f8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	891b      	ldrh	r3, [r3, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <find_volume+0x364>
 80076c0:	230d      	movs	r3, #13
 80076c2:	e08e      	b.n	80077e2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	6a1a      	ldr	r2, [r3, #32]
 80076c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ca:	441a      	add	r2, r3
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80076d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d103      	bne.n	80076e0 <find_volume+0x380>
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	e00a      	b.n	80076f6 <find_volume+0x396>
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	695a      	ldr	r2, [r3, #20]
 80076e4:	4613      	mov	r3, r2
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	4413      	add	r3, r2
 80076ea:	085a      	lsrs	r2, r3, #1
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80076f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	699a      	ldr	r2, [r3, #24]
 80076fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007702:	0a5b      	lsrs	r3, r3, #9
 8007704:	429a      	cmp	r2, r3
 8007706:	d201      	bcs.n	800770c <find_volume+0x3ac>
 8007708:	230d      	movs	r3, #13
 800770a:	e06a      	b.n	80077e2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770e:	f04f 32ff 	mov.w	r2, #4294967295
 8007712:	611a      	str	r2, [r3, #16]
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	2280      	movs	r2, #128	; 0x80
 8007720:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007722:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007726:	2b03      	cmp	r3, #3
 8007728:	d149      	bne.n	80077be <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	3330      	adds	r3, #48	; 0x30
 800772e:	3330      	adds	r3, #48	; 0x30
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe fbf7 	bl	8005f24 <ld_word>
 8007736:	4603      	mov	r3, r0
 8007738:	2b01      	cmp	r3, #1
 800773a:	d140      	bne.n	80077be <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800773c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773e:	3301      	adds	r3, #1
 8007740:	4619      	mov	r1, r3
 8007742:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007744:	f7fe fe9e 	bl	8006484 <move_window>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d137      	bne.n	80077be <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	2200      	movs	r2, #0
 8007752:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	3330      	adds	r3, #48	; 0x30
 8007758:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe fbe1 	bl	8005f24 <ld_word>
 8007762:	4603      	mov	r3, r0
 8007764:	461a      	mov	r2, r3
 8007766:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800776a:	429a      	cmp	r2, r3
 800776c:	d127      	bne.n	80077be <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	3330      	adds	r3, #48	; 0x30
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fbee 	bl	8005f54 <ld_dword>
 8007778:	4603      	mov	r3, r0
 800777a:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <find_volume+0x48c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d11e      	bne.n	80077be <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	3330      	adds	r3, #48	; 0x30
 8007784:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fbe3 	bl	8005f54 <ld_dword>
 800778e:	4603      	mov	r3, r0
 8007790:	4a17      	ldr	r2, [pc, #92]	; (80077f0 <find_volume+0x490>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d113      	bne.n	80077be <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007798:	3330      	adds	r3, #48	; 0x30
 800779a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fbd8 	bl	8005f54 <ld_dword>
 80077a4:	4602      	mov	r2, r0
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	3330      	adds	r3, #48	; 0x30
 80077ae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fbce 	bl	8005f54 <ld_dword>
 80077b8:	4602      	mov	r2, r0
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80077c4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80077c6:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <find_volume+0x494>)
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	4b09      	ldr	r3, [pc, #36]	; (80077f4 <find_volume+0x494>)
 80077d0:	801a      	strh	r2, [r3, #0]
 80077d2:	4b08      	ldr	r3, [pc, #32]	; (80077f4 <find_volume+0x494>)
 80077d4:	881a      	ldrh	r2, [r3, #0]
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80077da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077dc:	f7fe fdea 	bl	80063b4 <clear_lock>
#endif
	return FR_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3758      	adds	r7, #88	; 0x58
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	41615252 	.word	0x41615252
 80077f0:	61417272 	.word	0x61417272
 80077f4:	200137b0 	.word	0x200137b0

080077f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007802:	2309      	movs	r3, #9
 8007804:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01c      	beq.n	8007846 <validate+0x4e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d018      	beq.n	8007846 <validate+0x4e>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d013      	beq.n	8007846 <validate+0x4e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	889a      	ldrh	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	88db      	ldrh	r3, [r3, #6]
 8007828:	429a      	cmp	r2, r3
 800782a:	d10c      	bne.n	8007846 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fad8 	bl	8005de8 <disk_status>
 8007838:	4603      	mov	r3, r0
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <validate+0x4e>
			res = FR_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <validate+0x5a>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	e000      	b.n	8007854 <validate+0x5c>
 8007852:	2300      	movs	r3, #0
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	6013      	str	r3, [r2, #0]
	return res;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007876:	f107 0310 	add.w	r3, r7, #16
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff fcd5 	bl	800722a <get_ldnumber>
 8007880:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	2b00      	cmp	r3, #0
 8007886:	da01      	bge.n	800788c <f_mount+0x28>
 8007888:	230b      	movs	r3, #11
 800788a:	e02b      	b.n	80078e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800788c:	4a17      	ldr	r2, [pc, #92]	; (80078ec <f_mount+0x88>)
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007894:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800789c:	69b8      	ldr	r0, [r7, #24]
 800789e:	f7fe fd89 	bl	80063b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	490d      	ldr	r1, [pc, #52]	; (80078ec <f_mount+0x88>)
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <f_mount+0x66>
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d001      	beq.n	80078ce <f_mount+0x6a>
 80078ca:	2300      	movs	r3, #0
 80078cc:	e00a      	b.n	80078e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80078ce:	f107 010c 	add.w	r1, r7, #12
 80078d2:	f107 0308 	add.w	r3, r7, #8
 80078d6:	2200      	movs	r2, #0
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff fd41 	bl	8007360 <find_volume>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3720      	adds	r7, #32
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	200137ac 	.word	0x200137ac

080078f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b098      	sub	sp, #96	; 0x60
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	4613      	mov	r3, r2
 80078fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <f_open+0x18>
 8007904:	2309      	movs	r3, #9
 8007906:	e1ad      	b.n	8007c64 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007908:	79fb      	ldrb	r3, [r7, #7]
 800790a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800790e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007910:	79fa      	ldrb	r2, [r7, #7]
 8007912:	f107 0110 	add.w	r1, r7, #16
 8007916:	f107 0308 	add.w	r3, r7, #8
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff fd20 	bl	8007360 <find_volume>
 8007920:	4603      	mov	r3, r0
 8007922:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007926:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 8191 	bne.w	8007c52 <f_open+0x362>
		dj.obj.fs = fs;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	f107 0314 	add.w	r3, r7, #20
 800793a:	4611      	mov	r1, r2
 800793c:	4618      	mov	r0, r3
 800793e:	f7ff fc03 	bl	8007148 <follow_path>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800794c:	2b00      	cmp	r3, #0
 800794e:	d11a      	bne.n	8007986 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007950:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007954:	b25b      	sxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	da03      	bge.n	8007962 <f_open+0x72>
				res = FR_INVALID_NAME;
 800795a:	2306      	movs	r3, #6
 800795c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007960:	e011      	b.n	8007986 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	bf14      	ite	ne
 800796c:	2301      	movne	r3, #1
 800796e:	2300      	moveq	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	f107 0314 	add.w	r3, r7, #20
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fbd2 	bl	8006124 <chk_lock>
 8007980:	4603      	mov	r3, r0
 8007982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	f003 031c 	and.w	r3, r3, #28
 800798c:	2b00      	cmp	r3, #0
 800798e:	d07f      	beq.n	8007a90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800799c:	2b04      	cmp	r3, #4
 800799e:	d10e      	bne.n	80079be <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80079a0:	f7fe fc1c 	bl	80061dc <enq_lock>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d006      	beq.n	80079b8 <f_open+0xc8>
 80079aa:	f107 0314 	add.w	r3, r7, #20
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff fb03 	bl	8006fba <dir_register>
 80079b4:	4603      	mov	r3, r0
 80079b6:	e000      	b.n	80079ba <f_open+0xca>
 80079b8:	2312      	movs	r3, #18
 80079ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	f043 0308 	orr.w	r3, r3, #8
 80079c4:	71fb      	strb	r3, [r7, #7]
 80079c6:	e010      	b.n	80079ea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80079c8:	7ebb      	ldrb	r3, [r7, #26]
 80079ca:	f003 0311 	and.w	r3, r3, #17
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <f_open+0xea>
					res = FR_DENIED;
 80079d2:	2307      	movs	r3, #7
 80079d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80079d8:	e007      	b.n	80079ea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <f_open+0xfa>
 80079e4:	2308      	movs	r3, #8
 80079e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80079ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d168      	bne.n	8007ac4 <f_open+0x1d4>
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d063      	beq.n	8007ac4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80079fc:	f7fd fcb6 	bl	800536c <get_fattime>
 8007a00:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	330e      	adds	r3, #14
 8007a06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fe fae1 	bl	8005fd0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	3316      	adds	r3, #22
 8007a12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fe fadb 	bl	8005fd0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1c:	330b      	adds	r3, #11
 8007a1e:	2220      	movs	r2, #32
 8007a20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a26:	4611      	mov	r1, r2
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fa32 	bl	8006e92 <ld_clust>
 8007a2e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a34:	2200      	movs	r2, #0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fa4a 	bl	8006ed0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3e:	331c      	adds	r3, #28
 8007a40:	2100      	movs	r1, #0
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe fac4 	bl	8005fd0 <st_dword>
					fs->wflag = 1;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d037      	beq.n	8007ac4 <f_open+0x1d4>
						dw = fs->winsect;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007a5a:	f107 0314 	add.w	r3, r7, #20
 8007a5e:	2200      	movs	r2, #0
 8007a60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe ff5d 	bl	8006922 <remove_chain>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d126      	bne.n	8007ac4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fd02 	bl	8006484 <move_window>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a8a:	3a01      	subs	r2, #1
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	e019      	b.n	8007ac4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007a90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d115      	bne.n	8007ac4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007a98:	7ebb      	ldrb	r3, [r7, #26]
 8007a9a:	f003 0310 	and.w	r3, r3, #16
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <f_open+0x1ba>
					res = FR_NO_FILE;
 8007aa2:	2304      	movs	r3, #4
 8007aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007aa8:	e00c      	b.n	8007ac4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <f_open+0x1d4>
 8007ab4:	7ebb      	ldrb	r3, [r7, #26]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <f_open+0x1d4>
						res = FR_DENIED;
 8007abe:	2307      	movs	r3, #7
 8007ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d128      	bne.n	8007b1e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007adc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	f023 0301 	bic.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf14      	ite	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	2300      	moveq	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	f107 0314 	add.w	r3, r7, #20
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe fb8b 	bl	8006220 <inc_lock>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d102      	bne.n	8007b1e <f_open+0x22e>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f040 8095 	bne.w	8007c52 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff f9af 	bl	8006e92 <ld_clust>
 8007b34:	4602      	mov	r2, r0
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	331c      	adds	r3, #28
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fa08 	bl	8005f54 <ld_dword>
 8007b44:	4602      	mov	r2, r0
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	88da      	ldrh	r2, [r3, #6]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	79fa      	ldrb	r2, [r7, #7]
 8007b62:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3330      	adds	r3, #48	; 0x30
 8007b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fa72 	bl	800606a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d060      	beq.n	8007c52 <f_open+0x362>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d05c      	beq.n	8007c52 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	895b      	ldrh	r3, [r3, #10]
 8007ba4:	025b      	lsls	r3, r3, #9
 8007ba6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bb4:	e016      	b.n	8007be4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fd1d 	bl	80065fa <get_fat>
 8007bc0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d802      	bhi.n	8007bce <f_open+0x2de>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd4:	d102      	bne.n	8007bdc <f_open+0x2ec>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	657b      	str	r3, [r7, #84]	; 0x54
 8007be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d103      	bne.n	8007bf4 <f_open+0x304>
 8007bec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d8e0      	bhi.n	8007bb6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bf8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d127      	bne.n	8007c52 <f_open+0x362>
 8007c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d022      	beq.n	8007c52 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fcd3 	bl	80065bc <clust2sect>
 8007c16:	6478      	str	r0, [r7, #68]	; 0x44
 8007c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d103      	bne.n	8007c26 <f_open+0x336>
						res = FR_INT_ERR;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007c24:	e015      	b.n	8007c52 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c28:	0a5a      	lsrs	r2, r3, #9
 8007c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c2c:	441a      	add	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	7858      	ldrb	r0, [r3, #1]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a1a      	ldr	r2, [r3, #32]
 8007c40:	2301      	movs	r3, #1
 8007c42:	f7fe f911 	bl	8005e68 <disk_read>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <f_open+0x362>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007c52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <f_open+0x370>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3760      	adds	r7, #96	; 0x60
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08e      	sub	sp, #56	; 0x38
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f107 0214 	add.w	r2, r7, #20
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fdb3 	bl	80077f8 <validate>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007c98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d107      	bne.n	8007cb0 <f_read+0x44>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	7d5b      	ldrb	r3, [r3, #21]
 8007ca4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007ca8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <f_read+0x4a>
 8007cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cb4:	e115      	b.n	8007ee2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	7d1b      	ldrb	r3, [r3, #20]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <f_read+0x5a>
 8007cc2:	2307      	movs	r3, #7
 8007cc4:	e10d      	b.n	8007ee2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	f240 80fe 	bls.w	8007ed8 <f_read+0x26c>
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007ce0:	e0fa      	b.n	8007ed8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f040 80c6 	bne.w	8007e7c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	0a5b      	lsrs	r3, r3, #9
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	8952      	ldrh	r2, [r2, #10]
 8007cfa:	3a01      	subs	r2, #1
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d12f      	bne.n	8007d66 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	633b      	str	r3, [r7, #48]	; 0x30
 8007d14:	e013      	b.n	8007d3e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	4619      	mov	r1, r3
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f7fe fef9 	bl	8006b1c <clmt_clust>
 8007d2a:	6338      	str	r0, [r7, #48]	; 0x30
 8007d2c:	e007      	b.n	8007d3e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fe fc5f 	bl	80065fa <get_fat>
 8007d3c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d804      	bhi.n	8007d4e <f_read+0xe2>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2202      	movs	r2, #2
 8007d48:	755a      	strb	r2, [r3, #21]
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e0c9      	b.n	8007ee2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d54:	d104      	bne.n	8007d60 <f_read+0xf4>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	755a      	strb	r2, [r3, #21]
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0c0      	b.n	8007ee2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d64:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f7fe fc24 	bl	80065bc <clust2sect>
 8007d74:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <f_read+0x11a>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	755a      	strb	r2, [r3, #21]
 8007d82:	2302      	movs	r3, #2
 8007d84:	e0ad      	b.n	8007ee2 <f_read+0x276>
			sect += csect;
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	0a5b      	lsrs	r3, r3, #9
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d039      	beq.n	8007e0e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	4413      	add	r3, r2
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	8952      	ldrh	r2, [r2, #10]
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d905      	bls.n	8007db4 <f_read+0x148>
					cc = fs->csize - csect;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	895b      	ldrh	r3, [r3, #10]
 8007dac:	461a      	mov	r2, r3
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	7858      	ldrb	r0, [r3, #1]
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dbe:	f7fe f853 	bl	8005e68 <disk_read>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <f_read+0x166>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	755a      	strb	r2, [r3, #21]
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e087      	b.n	8007ee2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	7d1b      	ldrb	r3, [r3, #20]
 8007dd6:	b25b      	sxtb	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	da14      	bge.n	8007e06 <f_read+0x19a>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a1a      	ldr	r2, [r3, #32]
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d90d      	bls.n	8007e06 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a1a      	ldr	r2, [r3, #32]
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	025b      	lsls	r3, r3, #9
 8007df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df6:	18d0      	adds	r0, r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3330      	adds	r3, #48	; 0x30
 8007dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e00:	4619      	mov	r1, r3
 8007e02:	f7fe f911 	bl	8006028 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	025b      	lsls	r3, r3, #9
 8007e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007e0c:	e050      	b.n	8007eb0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d02e      	beq.n	8007e76 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	7d1b      	ldrb	r3, [r3, #20]
 8007e1c:	b25b      	sxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	da18      	bge.n	8007e54 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	7858      	ldrb	r0, [r3, #1]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1a      	ldr	r2, [r3, #32]
 8007e30:	2301      	movs	r3, #1
 8007e32:	f7fe f839 	bl	8005ea8 <disk_write>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <f_read+0x1da>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	755a      	strb	r2, [r3, #21]
 8007e42:	2301      	movs	r3, #1
 8007e44:	e04d      	b.n	8007ee2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	7d1b      	ldrb	r3, [r3, #20]
 8007e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	7858      	ldrb	r0, [r3, #1]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e5e:	2301      	movs	r3, #1
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	f7fe f801 	bl	8005e68 <disk_read>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <f_read+0x20a>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	755a      	strb	r2, [r3, #21]
 8007e72:	2301      	movs	r3, #1
 8007e74:	e035      	b.n	8007ee2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d901      	bls.n	8007e96 <f_read+0x22a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea4:	4413      	add	r3, r2
 8007ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eac:	f7fe f8bc 	bl	8006028 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	4413      	add	r3, r2
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	699a      	ldr	r2, [r3, #24]
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	441a      	add	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	619a      	str	r2, [r3, #24]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	441a      	add	r2, r3
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f47f af01 	bne.w	8007ce2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3738      	adds	r7, #56	; 0x38
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b086      	sub	sp, #24
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f107 0208 	add.w	r2, r7, #8
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff fc7c 	bl	80077f8 <validate>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d168      	bne.n	8007fdc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	7d1b      	ldrb	r3, [r3, #20]
 8007f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d062      	beq.n	8007fdc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7d1b      	ldrb	r3, [r3, #20]
 8007f1a:	b25b      	sxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	da15      	bge.n	8007f4c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	7858      	ldrb	r0, [r3, #1]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1a      	ldr	r2, [r3, #32]
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f7fd ffba 	bl	8005ea8 <disk_write>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <f_sync+0x54>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e04f      	b.n	8007fde <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7d1b      	ldrb	r3, [r3, #20]
 8007f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f4c:	f7fd fa0e 	bl	800536c <get_fattime>
 8007f50:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7fe fa92 	bl	8006484 <move_window>
 8007f60:	4603      	mov	r3, r0
 8007f62:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d138      	bne.n	8007fdc <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	330b      	adds	r3, #11
 8007f74:	781a      	ldrb	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	330b      	adds	r3, #11
 8007f7a:	f042 0220 	orr.w	r2, r2, #32
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68f9      	ldr	r1, [r7, #12]
 8007f8e:	f7fe ff9f 	bl	8006ed0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f103 021c 	add.w	r2, r3, #28
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	f7fe f816 	bl	8005fd0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3316      	adds	r3, #22
 8007fa8:	6939      	ldr	r1, [r7, #16]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe f810 	bl	8005fd0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3312      	adds	r3, #18
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fd ffef 	bl	8005f9a <st_word>
					fs->wflag = 1;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe fa8b 	bl	80064e0 <sync_fs>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	7d1b      	ldrb	r3, [r3, #20]
 8007fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff ff7b 	bl	8007eea <f_sync>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d118      	bne.n	8008030 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f107 0208 	add.w	r2, r7, #8
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fbf6 	bl	80077f8 <validate>
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10c      	bne.n	8008030 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe f98e 	bl	800633c <dec_lock>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b090      	sub	sp, #64	; 0x40
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f107 0208 	add.w	r2, r7, #8
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fbd3 	bl	80077f8 <validate>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008058:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800805c:	2b00      	cmp	r3, #0
 800805e:	d103      	bne.n	8008068 <f_lseek+0x2e>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7d5b      	ldrb	r3, [r3, #21]
 8008064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008068:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <f_lseek+0x3c>
 8008070:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008074:	e1e6      	b.n	8008444 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 80d1 	beq.w	8008222 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d15a      	bne.n	800813e <f_lseek+0x104>
			tbl = fp->cltbl;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	1d1a      	adds	r2, r3, #4
 8008092:	627a      	str	r2, [r7, #36]	; 0x24
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	2302      	movs	r3, #2
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d03a      	beq.n	800811e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	613b      	str	r3, [r7, #16]
 80080ac:	2300      	movs	r3, #0
 80080ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	3302      	adds	r3, #2
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080bc:	3301      	adds	r3, #1
 80080be:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe fa98 	bl	80065fa <get_fat>
 80080ca:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d804      	bhi.n	80080dc <f_lseek+0xa2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2202      	movs	r2, #2
 80080d6:	755a      	strb	r2, [r3, #21]
 80080d8:	2302      	movs	r3, #2
 80080da:	e1b3      	b.n	8008444 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d104      	bne.n	80080ee <f_lseek+0xb4>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	755a      	strb	r2, [r3, #21]
 80080ea:	2301      	movs	r3, #1
 80080ec:	e1aa      	b.n	8008444 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d0de      	beq.n	80080b6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80080f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d809      	bhi.n	8008114 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	1d1a      	adds	r2, r3, #4
 8008104:	627a      	str	r2, [r7, #36]	; 0x24
 8008106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	1d1a      	adds	r2, r3, #4
 800810e:	627a      	str	r2, [r7, #36]	; 0x24
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811a:	429a      	cmp	r2, r3
 800811c:	d3c4      	bcc.n	80080a8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008124:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	429a      	cmp	r2, r3
 800812c:	d803      	bhi.n	8008136 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	e184      	b.n	8008440 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008136:	2311      	movs	r3, #17
 8008138:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800813c:	e180      	b.n	8008440 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d902      	bls.n	800814e <f_lseek+0x114>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 8172 	beq.w	8008440 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	3b01      	subs	r3, #1
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fe fcda 	bl	8006b1c <clmt_clust>
 8008168:	4602      	mov	r2, r0
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	f7fe fa20 	bl	80065bc <clust2sect>
 800817c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d104      	bne.n	800818e <f_lseek+0x154>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	755a      	strb	r2, [r3, #21]
 800818a:	2302      	movs	r3, #2
 800818c:	e15a      	b.n	8008444 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	3b01      	subs	r3, #1
 8008192:	0a5b      	lsrs	r3, r3, #9
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	8952      	ldrh	r2, [r2, #10]
 8008198:	3a01      	subs	r2, #1
 800819a:	4013      	ands	r3, r2
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	4413      	add	r3, r2
 80081a0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 8148 	beq.w	8008440 <f_lseek+0x406>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	f000 8142 	beq.w	8008440 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7d1b      	ldrb	r3, [r3, #20]
 80081c0:	b25b      	sxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	da18      	bge.n	80081f8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	7858      	ldrb	r0, [r3, #1]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1a      	ldr	r2, [r3, #32]
 80081d4:	2301      	movs	r3, #1
 80081d6:	f7fd fe67 	bl	8005ea8 <disk_write>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d004      	beq.n	80081ea <f_lseek+0x1b0>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	755a      	strb	r2, [r3, #21]
 80081e6:	2301      	movs	r3, #1
 80081e8:	e12c      	b.n	8008444 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	7d1b      	ldrb	r3, [r3, #20]
 80081ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	7858      	ldrb	r0, [r3, #1]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008202:	2301      	movs	r3, #1
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	f7fd fe2f 	bl	8005e68 <disk_read>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <f_lseek+0x1e0>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	755a      	strb	r2, [r3, #21]
 8008216:	2301      	movs	r3, #1
 8008218:	e114      	b.n	8008444 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	621a      	str	r2, [r3, #32]
 8008220:	e10e      	b.n	8008440 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d908      	bls.n	800823e <f_lseek+0x204>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7d1b      	ldrb	r3, [r3, #20]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d102      	bne.n	800823e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	637b      	str	r3, [r7, #52]	; 0x34
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800824c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80a7 	beq.w	80083a4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	895b      	ldrh	r3, [r3, #10]
 800825a:	025b      	lsls	r3, r3, #9
 800825c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01b      	beq.n	800829c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	1e5a      	subs	r2, r3, #1
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	fbb2 f2f3 	udiv	r2, r2, r3
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	1e59      	subs	r1, r3, #1
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008278:	429a      	cmp	r2, r3
 800827a:	d30f      	bcc.n	800829c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	1e5a      	subs	r2, r3, #1
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	425b      	negs	r3, r3
 8008284:	401a      	ands	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	63bb      	str	r3, [r7, #56]	; 0x38
 800829a:	e022      	b.n	80082e2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d119      	bne.n	80082dc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2100      	movs	r1, #0
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fe fb9d 	bl	80069ec <create_chain>
 80082b2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d104      	bne.n	80082c4 <f_lseek+0x28a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2202      	movs	r2, #2
 80082be:	755a      	strb	r2, [r3, #21]
 80082c0:	2302      	movs	r3, #2
 80082c2:	e0bf      	b.n	8008444 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ca:	d104      	bne.n	80082d6 <f_lseek+0x29c>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	755a      	strb	r2, [r3, #21]
 80082d2:	2301      	movs	r3, #1
 80082d4:	e0b6      	b.n	8008444 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082da:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082e0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d05d      	beq.n	80083a4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80082e8:	e03a      	b.n	8008360 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	441a      	add	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	7d1b      	ldrb	r3, [r3, #20]
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fb6c 	bl	80069ec <create_chain>
 8008314:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	2b00      	cmp	r3, #0
 800831a:	d108      	bne.n	800832e <f_lseek+0x2f4>
							ofs = 0; break;
 800831c:	2300      	movs	r3, #0
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	e022      	b.n	8008368 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe f967 	bl	80065fa <get_fat>
 800832c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d104      	bne.n	8008340 <f_lseek+0x306>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	755a      	strb	r2, [r3, #21]
 800833c:	2301      	movs	r3, #1
 800833e:	e081      	b.n	8008444 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	2b01      	cmp	r3, #1
 8008344:	d904      	bls.n	8008350 <f_lseek+0x316>
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800834c:	429a      	cmp	r2, r3
 800834e:	d304      	bcc.n	800835a <f_lseek+0x320>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	755a      	strb	r2, [r3, #21]
 8008356:	2302      	movs	r3, #2
 8008358:	e074      	b.n	8008444 <f_lseek+0x40a>
					fp->clust = clst;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800835e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	429a      	cmp	r2, r3
 8008366:	d8c0      	bhi.n	80082ea <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	699a      	ldr	r2, [r3, #24]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	441a      	add	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837a:	2b00      	cmp	r3, #0
 800837c:	d012      	beq.n	80083a4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe f91a 	bl	80065bc <clust2sect>
 8008388:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800838a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838c:	2b00      	cmp	r3, #0
 800838e:	d104      	bne.n	800839a <f_lseek+0x360>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	755a      	strb	r2, [r3, #21]
 8008396:	2302      	movs	r3, #2
 8008398:	e054      	b.n	8008444 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	0a5b      	lsrs	r3, r3, #9
 800839e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083a0:	4413      	add	r3, r2
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699a      	ldr	r2, [r3, #24]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d90a      	bls.n	80083c6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	699a      	ldr	r2, [r3, #24]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	7d1b      	ldrb	r3, [r3, #20]
 80083bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d036      	beq.n	8008440 <f_lseek+0x406>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d8:	429a      	cmp	r2, r3
 80083da:	d031      	beq.n	8008440 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	7d1b      	ldrb	r3, [r3, #20]
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da18      	bge.n	8008418 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	7858      	ldrb	r0, [r3, #1]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a1a      	ldr	r2, [r3, #32]
 80083f4:	2301      	movs	r3, #1
 80083f6:	f7fd fd57 	bl	8005ea8 <disk_write>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <f_lseek+0x3d0>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	755a      	strb	r2, [r3, #21]
 8008406:	2301      	movs	r3, #1
 8008408:	e01c      	b.n	8008444 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	7d1b      	ldrb	r3, [r3, #20]
 800840e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008412:	b2da      	uxtb	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	7858      	ldrb	r0, [r3, #1]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008422:	2301      	movs	r3, #1
 8008424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008426:	f7fd fd1f 	bl	8005e68 <disk_read>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <f_lseek+0x400>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	755a      	strb	r2, [r3, #21]
 8008436:	2301      	movs	r3, #1
 8008438:	e004      	b.n	8008444 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800843e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008440:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008444:	4618      	mov	r0, r3
 8008446:	3740      	adds	r7, #64	; 0x40
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b092      	sub	sp, #72	; 0x48
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008458:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800845c:	f107 030c 	add.w	r3, r7, #12
 8008460:	2200      	movs	r2, #0
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe ff7c 	bl	8007360 <find_volume>
 8008468:	4603      	mov	r3, r0
 800846a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800846e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008472:	2b00      	cmp	r3, #0
 8008474:	f040 8099 	bne.w	80085aa <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	3b02      	subs	r3, #2
 8008488:	429a      	cmp	r2, r3
 800848a:	d804      	bhi.n	8008496 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	e089      	b.n	80085aa <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d128      	bne.n	80084f4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80084a2:	2302      	movs	r3, #2
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80084aa:	f107 0314 	add.w	r3, r7, #20
 80084ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe f8a2 	bl	80065fa <get_fat>
 80084b6:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084be:	d103      	bne.n	80084c8 <f_getfree+0x7c>
 80084c0:	2301      	movs	r3, #1
 80084c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80084c6:	e063      	b.n	8008590 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d103      	bne.n	80084d6 <f_getfree+0x8a>
 80084ce:	2302      	movs	r3, #2
 80084d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80084d4:	e05c      	b.n	8008590 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d102      	bne.n	80084e2 <f_getfree+0x96>
 80084dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084de:	3301      	adds	r3, #1
 80084e0:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80084e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e4:	3301      	adds	r3, #1
 80084e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d3db      	bcc.n	80084aa <f_getfree+0x5e>
 80084f2:	e04d      	b.n	8008590 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	637b      	str	r3, [r7, #52]	; 0x34
 8008504:	2300      	movs	r3, #0
 8008506:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850a:	2b00      	cmp	r3, #0
 800850c:	d113      	bne.n	8008536 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800850e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	63ba      	str	r2, [r7, #56]	; 0x38
 8008516:	4619      	mov	r1, r3
 8008518:	f7fd ffb4 	bl	8006484 <move_window>
 800851c:	4603      	mov	r3, r0
 800851e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008522:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008526:	2b00      	cmp	r3, #0
 8008528:	d131      	bne.n	800858e <f_getfree+0x142>
							p = fs->win;
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	3330      	adds	r3, #48	; 0x30
 800852e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008534:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d10f      	bne.n	800855e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800853e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008540:	f7fd fcf0 	bl	8005f24 <ld_word>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <f_getfree+0x104>
 800854a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854c:	3301      	adds	r3, #1
 800854e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	3302      	adds	r3, #2
 8008554:	633b      	str	r3, [r7, #48]	; 0x30
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	3b02      	subs	r3, #2
 800855a:	637b      	str	r3, [r7, #52]	; 0x34
 800855c:	e010      	b.n	8008580 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800855e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008560:	f7fd fcf8 	bl	8005f54 <ld_dword>
 8008564:	4603      	mov	r3, r0
 8008566:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d102      	bne.n	8008574 <f_getfree+0x128>
 800856e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008570:	3301      	adds	r3, #1
 8008572:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	3304      	adds	r3, #4
 8008578:	633b      	str	r3, [r7, #48]	; 0x30
 800857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857c:	3b04      	subs	r3, #4
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008582:	3b01      	subs	r3, #1
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1bd      	bne.n	8008508 <f_getfree+0xbc>
 800858c:	e000      	b.n	8008590 <f_getfree+0x144>
							if (res != FR_OK) break;
 800858e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008594:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800859a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	791a      	ldrb	r2, [r3, #4]
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	f042 0201 	orr.w	r2, r2, #1
 80085a6:	b2d2      	uxtb	r2, r2
 80085a8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80085aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3748      	adds	r7, #72	; 0x48
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80085ce:	4b1f      	ldr	r3, [pc, #124]	; (800864c <FATFS_LinkDriverEx+0x94>)
 80085d0:	7a5b      	ldrb	r3, [r3, #9]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d131      	bne.n	800863c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80085d8:	4b1c      	ldr	r3, [pc, #112]	; (800864c <FATFS_LinkDriverEx+0x94>)
 80085da:	7a5b      	ldrb	r3, [r3, #9]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	4b1a      	ldr	r3, [pc, #104]	; (800864c <FATFS_LinkDriverEx+0x94>)
 80085e2:	2100      	movs	r1, #0
 80085e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80085e6:	4b19      	ldr	r3, [pc, #100]	; (800864c <FATFS_LinkDriverEx+0x94>)
 80085e8:	7a5b      	ldrb	r3, [r3, #9]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	4a17      	ldr	r2, [pc, #92]	; (800864c <FATFS_LinkDriverEx+0x94>)
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80085f6:	4b15      	ldr	r3, [pc, #84]	; (800864c <FATFS_LinkDriverEx+0x94>)
 80085f8:	7a5b      	ldrb	r3, [r3, #9]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b13      	ldr	r3, [pc, #76]	; (800864c <FATFS_LinkDriverEx+0x94>)
 8008600:	4413      	add	r3, r2
 8008602:	79fa      	ldrb	r2, [r7, #7]
 8008604:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008606:	4b11      	ldr	r3, [pc, #68]	; (800864c <FATFS_LinkDriverEx+0x94>)
 8008608:	7a5b      	ldrb	r3, [r3, #9]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	b2d1      	uxtb	r1, r2
 8008610:	4a0e      	ldr	r2, [pc, #56]	; (800864c <FATFS_LinkDriverEx+0x94>)
 8008612:	7251      	strb	r1, [r2, #9]
 8008614:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008616:	7dbb      	ldrb	r3, [r7, #22]
 8008618:	3330      	adds	r3, #48	; 0x30
 800861a:	b2da      	uxtb	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	3301      	adds	r3, #1
 8008624:	223a      	movs	r2, #58	; 0x3a
 8008626:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	3302      	adds	r3, #2
 800862c:	222f      	movs	r2, #47	; 0x2f
 800862e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	3303      	adds	r3, #3
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800863c:	7dfb      	ldrb	r3, [r7, #23]
}
 800863e:	4618      	mov	r0, r3
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	200137d4 	.word	0x200137d4

08008650 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800865a:	2200      	movs	r2, #0
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff ffaa 	bl	80085b8 <FATFS_LinkDriverEx>
 8008664:	4603      	mov	r3, r0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <atoi>:
 800866e:	220a      	movs	r2, #10
 8008670:	2100      	movs	r1, #0
 8008672:	f000 b8e7 	b.w	8008844 <strtol>
	...

08008678 <__errno>:
 8008678:	4b01      	ldr	r3, [pc, #4]	; (8008680 <__errno+0x8>)
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	20000024 	.word	0x20000024

08008684 <__libc_init_array>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	4d0d      	ldr	r5, [pc, #52]	; (80086bc <__libc_init_array+0x38>)
 8008688:	4c0d      	ldr	r4, [pc, #52]	; (80086c0 <__libc_init_array+0x3c>)
 800868a:	1b64      	subs	r4, r4, r5
 800868c:	10a4      	asrs	r4, r4, #2
 800868e:	2600      	movs	r6, #0
 8008690:	42a6      	cmp	r6, r4
 8008692:	d109      	bne.n	80086a8 <__libc_init_array+0x24>
 8008694:	4d0b      	ldr	r5, [pc, #44]	; (80086c4 <__libc_init_array+0x40>)
 8008696:	4c0c      	ldr	r4, [pc, #48]	; (80086c8 <__libc_init_array+0x44>)
 8008698:	f001 f896 	bl	80097c8 <_init>
 800869c:	1b64      	subs	r4, r4, r5
 800869e:	10a4      	asrs	r4, r4, #2
 80086a0:	2600      	movs	r6, #0
 80086a2:	42a6      	cmp	r6, r4
 80086a4:	d105      	bne.n	80086b2 <__libc_init_array+0x2e>
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ac:	4798      	blx	r3
 80086ae:	3601      	adds	r6, #1
 80086b0:	e7ee      	b.n	8008690 <__libc_init_array+0xc>
 80086b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b6:	4798      	blx	r3
 80086b8:	3601      	adds	r6, #1
 80086ba:	e7f2      	b.n	80086a2 <__libc_init_array+0x1e>
 80086bc:	0800a134 	.word	0x0800a134
 80086c0:	0800a134 	.word	0x0800a134
 80086c4:	0800a134 	.word	0x0800a134
 80086c8:	0800a138 	.word	0x0800a138

080086cc <__itoa>:
 80086cc:	1e93      	subs	r3, r2, #2
 80086ce:	2b22      	cmp	r3, #34	; 0x22
 80086d0:	b510      	push	{r4, lr}
 80086d2:	460c      	mov	r4, r1
 80086d4:	d904      	bls.n	80086e0 <__itoa+0x14>
 80086d6:	2300      	movs	r3, #0
 80086d8:	700b      	strb	r3, [r1, #0]
 80086da:	461c      	mov	r4, r3
 80086dc:	4620      	mov	r0, r4
 80086de:	bd10      	pop	{r4, pc}
 80086e0:	2a0a      	cmp	r2, #10
 80086e2:	d109      	bne.n	80086f8 <__itoa+0x2c>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	da07      	bge.n	80086f8 <__itoa+0x2c>
 80086e8:	232d      	movs	r3, #45	; 0x2d
 80086ea:	700b      	strb	r3, [r1, #0]
 80086ec:	4240      	negs	r0, r0
 80086ee:	2101      	movs	r1, #1
 80086f0:	4421      	add	r1, r4
 80086f2:	f000 f8b1 	bl	8008858 <__utoa>
 80086f6:	e7f1      	b.n	80086dc <__itoa+0x10>
 80086f8:	2100      	movs	r1, #0
 80086fa:	e7f9      	b.n	80086f0 <__itoa+0x24>

080086fc <itoa>:
 80086fc:	f7ff bfe6 	b.w	80086cc <__itoa>

08008700 <memset>:
 8008700:	4402      	add	r2, r0
 8008702:	4603      	mov	r3, r0
 8008704:	4293      	cmp	r3, r2
 8008706:	d100      	bne.n	800870a <memset+0xa>
 8008708:	4770      	bx	lr
 800870a:	f803 1b01 	strb.w	r1, [r3], #1
 800870e:	e7f9      	b.n	8008704 <memset+0x4>

08008710 <iprintf>:
 8008710:	b40f      	push	{r0, r1, r2, r3}
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <iprintf+0x2c>)
 8008714:	b513      	push	{r0, r1, r4, lr}
 8008716:	681c      	ldr	r4, [r3, #0]
 8008718:	b124      	cbz	r4, 8008724 <iprintf+0x14>
 800871a:	69a3      	ldr	r3, [r4, #24]
 800871c:	b913      	cbnz	r3, 8008724 <iprintf+0x14>
 800871e:	4620      	mov	r0, r4
 8008720:	f000 f934 	bl	800898c <__sinit>
 8008724:	ab05      	add	r3, sp, #20
 8008726:	9a04      	ldr	r2, [sp, #16]
 8008728:	68a1      	ldr	r1, [r4, #8]
 800872a:	9301      	str	r3, [sp, #4]
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fa8b 	bl	8008c48 <_vfiprintf_r>
 8008732:	b002      	add	sp, #8
 8008734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008738:	b004      	add	sp, #16
 800873a:	4770      	bx	lr
 800873c:	20000024 	.word	0x20000024

08008740 <_strtol_l.constprop.0>:
 8008740:	2b01      	cmp	r3, #1
 8008742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008746:	d001      	beq.n	800874c <_strtol_l.constprop.0+0xc>
 8008748:	2b24      	cmp	r3, #36	; 0x24
 800874a:	d906      	bls.n	800875a <_strtol_l.constprop.0+0x1a>
 800874c:	f7ff ff94 	bl	8008678 <__errno>
 8008750:	2316      	movs	r3, #22
 8008752:	6003      	str	r3, [r0, #0]
 8008754:	2000      	movs	r0, #0
 8008756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008840 <_strtol_l.constprop.0+0x100>
 800875e:	460d      	mov	r5, r1
 8008760:	462e      	mov	r6, r5
 8008762:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008766:	f814 700c 	ldrb.w	r7, [r4, ip]
 800876a:	f017 0708 	ands.w	r7, r7, #8
 800876e:	d1f7      	bne.n	8008760 <_strtol_l.constprop.0+0x20>
 8008770:	2c2d      	cmp	r4, #45	; 0x2d
 8008772:	d132      	bne.n	80087da <_strtol_l.constprop.0+0x9a>
 8008774:	782c      	ldrb	r4, [r5, #0]
 8008776:	2701      	movs	r7, #1
 8008778:	1cb5      	adds	r5, r6, #2
 800877a:	2b00      	cmp	r3, #0
 800877c:	d05b      	beq.n	8008836 <_strtol_l.constprop.0+0xf6>
 800877e:	2b10      	cmp	r3, #16
 8008780:	d109      	bne.n	8008796 <_strtol_l.constprop.0+0x56>
 8008782:	2c30      	cmp	r4, #48	; 0x30
 8008784:	d107      	bne.n	8008796 <_strtol_l.constprop.0+0x56>
 8008786:	782c      	ldrb	r4, [r5, #0]
 8008788:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800878c:	2c58      	cmp	r4, #88	; 0x58
 800878e:	d14d      	bne.n	800882c <_strtol_l.constprop.0+0xec>
 8008790:	786c      	ldrb	r4, [r5, #1]
 8008792:	2310      	movs	r3, #16
 8008794:	3502      	adds	r5, #2
 8008796:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800879a:	f108 38ff 	add.w	r8, r8, #4294967295
 800879e:	f04f 0c00 	mov.w	ip, #0
 80087a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80087a6:	4666      	mov	r6, ip
 80087a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80087ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80087b0:	f1be 0f09 	cmp.w	lr, #9
 80087b4:	d816      	bhi.n	80087e4 <_strtol_l.constprop.0+0xa4>
 80087b6:	4674      	mov	r4, lr
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	dd24      	ble.n	8008806 <_strtol_l.constprop.0+0xc6>
 80087bc:	f1bc 0f00 	cmp.w	ip, #0
 80087c0:	db1e      	blt.n	8008800 <_strtol_l.constprop.0+0xc0>
 80087c2:	45b1      	cmp	r9, r6
 80087c4:	d31c      	bcc.n	8008800 <_strtol_l.constprop.0+0xc0>
 80087c6:	d101      	bne.n	80087cc <_strtol_l.constprop.0+0x8c>
 80087c8:	45a2      	cmp	sl, r4
 80087ca:	db19      	blt.n	8008800 <_strtol_l.constprop.0+0xc0>
 80087cc:	fb06 4603 	mla	r6, r6, r3, r4
 80087d0:	f04f 0c01 	mov.w	ip, #1
 80087d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087d8:	e7e8      	b.n	80087ac <_strtol_l.constprop.0+0x6c>
 80087da:	2c2b      	cmp	r4, #43	; 0x2b
 80087dc:	bf04      	itt	eq
 80087de:	782c      	ldrbeq	r4, [r5, #0]
 80087e0:	1cb5      	addeq	r5, r6, #2
 80087e2:	e7ca      	b.n	800877a <_strtol_l.constprop.0+0x3a>
 80087e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80087e8:	f1be 0f19 	cmp.w	lr, #25
 80087ec:	d801      	bhi.n	80087f2 <_strtol_l.constprop.0+0xb2>
 80087ee:	3c37      	subs	r4, #55	; 0x37
 80087f0:	e7e2      	b.n	80087b8 <_strtol_l.constprop.0+0x78>
 80087f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80087f6:	f1be 0f19 	cmp.w	lr, #25
 80087fa:	d804      	bhi.n	8008806 <_strtol_l.constprop.0+0xc6>
 80087fc:	3c57      	subs	r4, #87	; 0x57
 80087fe:	e7db      	b.n	80087b8 <_strtol_l.constprop.0+0x78>
 8008800:	f04f 3cff 	mov.w	ip, #4294967295
 8008804:	e7e6      	b.n	80087d4 <_strtol_l.constprop.0+0x94>
 8008806:	f1bc 0f00 	cmp.w	ip, #0
 800880a:	da05      	bge.n	8008818 <_strtol_l.constprop.0+0xd8>
 800880c:	2322      	movs	r3, #34	; 0x22
 800880e:	6003      	str	r3, [r0, #0]
 8008810:	4646      	mov	r6, r8
 8008812:	b942      	cbnz	r2, 8008826 <_strtol_l.constprop.0+0xe6>
 8008814:	4630      	mov	r0, r6
 8008816:	e79e      	b.n	8008756 <_strtol_l.constprop.0+0x16>
 8008818:	b107      	cbz	r7, 800881c <_strtol_l.constprop.0+0xdc>
 800881a:	4276      	negs	r6, r6
 800881c:	2a00      	cmp	r2, #0
 800881e:	d0f9      	beq.n	8008814 <_strtol_l.constprop.0+0xd4>
 8008820:	f1bc 0f00 	cmp.w	ip, #0
 8008824:	d000      	beq.n	8008828 <_strtol_l.constprop.0+0xe8>
 8008826:	1e69      	subs	r1, r5, #1
 8008828:	6011      	str	r1, [r2, #0]
 800882a:	e7f3      	b.n	8008814 <_strtol_l.constprop.0+0xd4>
 800882c:	2430      	movs	r4, #48	; 0x30
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1b1      	bne.n	8008796 <_strtol_l.constprop.0+0x56>
 8008832:	2308      	movs	r3, #8
 8008834:	e7af      	b.n	8008796 <_strtol_l.constprop.0+0x56>
 8008836:	2c30      	cmp	r4, #48	; 0x30
 8008838:	d0a5      	beq.n	8008786 <_strtol_l.constprop.0+0x46>
 800883a:	230a      	movs	r3, #10
 800883c:	e7ab      	b.n	8008796 <_strtol_l.constprop.0+0x56>
 800883e:	bf00      	nop
 8008840:	08009f96 	.word	0x08009f96

08008844 <strtol>:
 8008844:	4613      	mov	r3, r2
 8008846:	460a      	mov	r2, r1
 8008848:	4601      	mov	r1, r0
 800884a:	4802      	ldr	r0, [pc, #8]	; (8008854 <strtol+0x10>)
 800884c:	6800      	ldr	r0, [r0, #0]
 800884e:	f7ff bf77 	b.w	8008740 <_strtol_l.constprop.0>
 8008852:	bf00      	nop
 8008854:	20000024 	.word	0x20000024

08008858 <__utoa>:
 8008858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800885a:	4c1f      	ldr	r4, [pc, #124]	; (80088d8 <__utoa+0x80>)
 800885c:	b08b      	sub	sp, #44	; 0x2c
 800885e:	4605      	mov	r5, r0
 8008860:	460b      	mov	r3, r1
 8008862:	466e      	mov	r6, sp
 8008864:	f104 0c20 	add.w	ip, r4, #32
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	6861      	ldr	r1, [r4, #4]
 800886c:	4637      	mov	r7, r6
 800886e:	c703      	stmia	r7!, {r0, r1}
 8008870:	3408      	adds	r4, #8
 8008872:	4564      	cmp	r4, ip
 8008874:	463e      	mov	r6, r7
 8008876:	d1f7      	bne.n	8008868 <__utoa+0x10>
 8008878:	7921      	ldrb	r1, [r4, #4]
 800887a:	7139      	strb	r1, [r7, #4]
 800887c:	1e91      	subs	r1, r2, #2
 800887e:	6820      	ldr	r0, [r4, #0]
 8008880:	6038      	str	r0, [r7, #0]
 8008882:	2922      	cmp	r1, #34	; 0x22
 8008884:	f04f 0100 	mov.w	r1, #0
 8008888:	d904      	bls.n	8008894 <__utoa+0x3c>
 800888a:	7019      	strb	r1, [r3, #0]
 800888c:	460b      	mov	r3, r1
 800888e:	4618      	mov	r0, r3
 8008890:	b00b      	add	sp, #44	; 0x2c
 8008892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008894:	1e58      	subs	r0, r3, #1
 8008896:	4684      	mov	ip, r0
 8008898:	fbb5 f7f2 	udiv	r7, r5, r2
 800889c:	fb02 5617 	mls	r6, r2, r7, r5
 80088a0:	3628      	adds	r6, #40	; 0x28
 80088a2:	446e      	add	r6, sp
 80088a4:	460c      	mov	r4, r1
 80088a6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80088aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80088ae:	462e      	mov	r6, r5
 80088b0:	42b2      	cmp	r2, r6
 80088b2:	f101 0101 	add.w	r1, r1, #1
 80088b6:	463d      	mov	r5, r7
 80088b8:	d9ee      	bls.n	8008898 <__utoa+0x40>
 80088ba:	2200      	movs	r2, #0
 80088bc:	545a      	strb	r2, [r3, r1]
 80088be:	1919      	adds	r1, r3, r4
 80088c0:	1aa5      	subs	r5, r4, r2
 80088c2:	42aa      	cmp	r2, r5
 80088c4:	dae3      	bge.n	800888e <__utoa+0x36>
 80088c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80088ca:	780e      	ldrb	r6, [r1, #0]
 80088cc:	7006      	strb	r6, [r0, #0]
 80088ce:	3201      	adds	r2, #1
 80088d0:	f801 5901 	strb.w	r5, [r1], #-1
 80088d4:	e7f4      	b.n	80088c0 <__utoa+0x68>
 80088d6:	bf00      	nop
 80088d8:	08009f70 	.word	0x08009f70

080088dc <std>:
 80088dc:	2300      	movs	r3, #0
 80088de:	b510      	push	{r4, lr}
 80088e0:	4604      	mov	r4, r0
 80088e2:	e9c0 3300 	strd	r3, r3, [r0]
 80088e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ea:	6083      	str	r3, [r0, #8]
 80088ec:	8181      	strh	r1, [r0, #12]
 80088ee:	6643      	str	r3, [r0, #100]	; 0x64
 80088f0:	81c2      	strh	r2, [r0, #14]
 80088f2:	6183      	str	r3, [r0, #24]
 80088f4:	4619      	mov	r1, r3
 80088f6:	2208      	movs	r2, #8
 80088f8:	305c      	adds	r0, #92	; 0x5c
 80088fa:	f7ff ff01 	bl	8008700 <memset>
 80088fe:	4b05      	ldr	r3, [pc, #20]	; (8008914 <std+0x38>)
 8008900:	6263      	str	r3, [r4, #36]	; 0x24
 8008902:	4b05      	ldr	r3, [pc, #20]	; (8008918 <std+0x3c>)
 8008904:	62a3      	str	r3, [r4, #40]	; 0x28
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <std+0x40>)
 8008908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800890a:	4b05      	ldr	r3, [pc, #20]	; (8008920 <std+0x44>)
 800890c:	6224      	str	r4, [r4, #32]
 800890e:	6323      	str	r3, [r4, #48]	; 0x30
 8008910:	bd10      	pop	{r4, pc}
 8008912:	bf00      	nop
 8008914:	080091f1 	.word	0x080091f1
 8008918:	08009213 	.word	0x08009213
 800891c:	0800924b 	.word	0x0800924b
 8008920:	0800926f 	.word	0x0800926f

08008924 <_cleanup_r>:
 8008924:	4901      	ldr	r1, [pc, #4]	; (800892c <_cleanup_r+0x8>)
 8008926:	f000 b8af 	b.w	8008a88 <_fwalk_reent>
 800892a:	bf00      	nop
 800892c:	08009549 	.word	0x08009549

08008930 <__sfmoreglue>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	2268      	movs	r2, #104	; 0x68
 8008934:	1e4d      	subs	r5, r1, #1
 8008936:	4355      	muls	r5, r2
 8008938:	460e      	mov	r6, r1
 800893a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800893e:	f000 f8e5 	bl	8008b0c <_malloc_r>
 8008942:	4604      	mov	r4, r0
 8008944:	b140      	cbz	r0, 8008958 <__sfmoreglue+0x28>
 8008946:	2100      	movs	r1, #0
 8008948:	e9c0 1600 	strd	r1, r6, [r0]
 800894c:	300c      	adds	r0, #12
 800894e:	60a0      	str	r0, [r4, #8]
 8008950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008954:	f7ff fed4 	bl	8008700 <memset>
 8008958:	4620      	mov	r0, r4
 800895a:	bd70      	pop	{r4, r5, r6, pc}

0800895c <__sfp_lock_acquire>:
 800895c:	4801      	ldr	r0, [pc, #4]	; (8008964 <__sfp_lock_acquire+0x8>)
 800895e:	f000 b8b3 	b.w	8008ac8 <__retarget_lock_acquire_recursive>
 8008962:	bf00      	nop
 8008964:	200137e1 	.word	0x200137e1

08008968 <__sfp_lock_release>:
 8008968:	4801      	ldr	r0, [pc, #4]	; (8008970 <__sfp_lock_release+0x8>)
 800896a:	f000 b8ae 	b.w	8008aca <__retarget_lock_release_recursive>
 800896e:	bf00      	nop
 8008970:	200137e1 	.word	0x200137e1

08008974 <__sinit_lock_acquire>:
 8008974:	4801      	ldr	r0, [pc, #4]	; (800897c <__sinit_lock_acquire+0x8>)
 8008976:	f000 b8a7 	b.w	8008ac8 <__retarget_lock_acquire_recursive>
 800897a:	bf00      	nop
 800897c:	200137e2 	.word	0x200137e2

08008980 <__sinit_lock_release>:
 8008980:	4801      	ldr	r0, [pc, #4]	; (8008988 <__sinit_lock_release+0x8>)
 8008982:	f000 b8a2 	b.w	8008aca <__retarget_lock_release_recursive>
 8008986:	bf00      	nop
 8008988:	200137e2 	.word	0x200137e2

0800898c <__sinit>:
 800898c:	b510      	push	{r4, lr}
 800898e:	4604      	mov	r4, r0
 8008990:	f7ff fff0 	bl	8008974 <__sinit_lock_acquire>
 8008994:	69a3      	ldr	r3, [r4, #24]
 8008996:	b11b      	cbz	r3, 80089a0 <__sinit+0x14>
 8008998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800899c:	f7ff bff0 	b.w	8008980 <__sinit_lock_release>
 80089a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089a4:	6523      	str	r3, [r4, #80]	; 0x50
 80089a6:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <__sinit+0x68>)
 80089a8:	4a13      	ldr	r2, [pc, #76]	; (80089f8 <__sinit+0x6c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80089ae:	42a3      	cmp	r3, r4
 80089b0:	bf04      	itt	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	61a3      	streq	r3, [r4, #24]
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 f820 	bl	80089fc <__sfp>
 80089bc:	6060      	str	r0, [r4, #4]
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 f81c 	bl	80089fc <__sfp>
 80089c4:	60a0      	str	r0, [r4, #8]
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 f818 	bl	80089fc <__sfp>
 80089cc:	2200      	movs	r2, #0
 80089ce:	60e0      	str	r0, [r4, #12]
 80089d0:	2104      	movs	r1, #4
 80089d2:	6860      	ldr	r0, [r4, #4]
 80089d4:	f7ff ff82 	bl	80088dc <std>
 80089d8:	68a0      	ldr	r0, [r4, #8]
 80089da:	2201      	movs	r2, #1
 80089dc:	2109      	movs	r1, #9
 80089de:	f7ff ff7d 	bl	80088dc <std>
 80089e2:	68e0      	ldr	r0, [r4, #12]
 80089e4:	2202      	movs	r2, #2
 80089e6:	2112      	movs	r1, #18
 80089e8:	f7ff ff78 	bl	80088dc <std>
 80089ec:	2301      	movs	r3, #1
 80089ee:	61a3      	str	r3, [r4, #24]
 80089f0:	e7d2      	b.n	8008998 <__sinit+0xc>
 80089f2:	bf00      	nop
 80089f4:	08009f6c 	.word	0x08009f6c
 80089f8:	08008925 	.word	0x08008925

080089fc <__sfp>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	4607      	mov	r7, r0
 8008a00:	f7ff ffac 	bl	800895c <__sfp_lock_acquire>
 8008a04:	4b1e      	ldr	r3, [pc, #120]	; (8008a80 <__sfp+0x84>)
 8008a06:	681e      	ldr	r6, [r3, #0]
 8008a08:	69b3      	ldr	r3, [r6, #24]
 8008a0a:	b913      	cbnz	r3, 8008a12 <__sfp+0x16>
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff ffbd 	bl	800898c <__sinit>
 8008a12:	3648      	adds	r6, #72	; 0x48
 8008a14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	d503      	bpl.n	8008a24 <__sfp+0x28>
 8008a1c:	6833      	ldr	r3, [r6, #0]
 8008a1e:	b30b      	cbz	r3, 8008a64 <__sfp+0x68>
 8008a20:	6836      	ldr	r6, [r6, #0]
 8008a22:	e7f7      	b.n	8008a14 <__sfp+0x18>
 8008a24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a28:	b9d5      	cbnz	r5, 8008a60 <__sfp+0x64>
 8008a2a:	4b16      	ldr	r3, [pc, #88]	; (8008a84 <__sfp+0x88>)
 8008a2c:	60e3      	str	r3, [r4, #12]
 8008a2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a32:	6665      	str	r5, [r4, #100]	; 0x64
 8008a34:	f000 f847 	bl	8008ac6 <__retarget_lock_init_recursive>
 8008a38:	f7ff ff96 	bl	8008968 <__sfp_lock_release>
 8008a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a44:	6025      	str	r5, [r4, #0]
 8008a46:	61a5      	str	r5, [r4, #24]
 8008a48:	2208      	movs	r2, #8
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a50:	f7ff fe56 	bl	8008700 <memset>
 8008a54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a60:	3468      	adds	r4, #104	; 0x68
 8008a62:	e7d9      	b.n	8008a18 <__sfp+0x1c>
 8008a64:	2104      	movs	r1, #4
 8008a66:	4638      	mov	r0, r7
 8008a68:	f7ff ff62 	bl	8008930 <__sfmoreglue>
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	6030      	str	r0, [r6, #0]
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d1d5      	bne.n	8008a20 <__sfp+0x24>
 8008a74:	f7ff ff78 	bl	8008968 <__sfp_lock_release>
 8008a78:	230c      	movs	r3, #12
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	e7ee      	b.n	8008a5c <__sfp+0x60>
 8008a7e:	bf00      	nop
 8008a80:	08009f6c 	.word	0x08009f6c
 8008a84:	ffff0001 	.word	0xffff0001

08008a88 <_fwalk_reent>:
 8008a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	4688      	mov	r8, r1
 8008a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a94:	2700      	movs	r7, #0
 8008a96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a9a:	f1b9 0901 	subs.w	r9, r9, #1
 8008a9e:	d505      	bpl.n	8008aac <_fwalk_reent+0x24>
 8008aa0:	6824      	ldr	r4, [r4, #0]
 8008aa2:	2c00      	cmp	r4, #0
 8008aa4:	d1f7      	bne.n	8008a96 <_fwalk_reent+0xe>
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aac:	89ab      	ldrh	r3, [r5, #12]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d907      	bls.n	8008ac2 <_fwalk_reent+0x3a>
 8008ab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	d003      	beq.n	8008ac2 <_fwalk_reent+0x3a>
 8008aba:	4629      	mov	r1, r5
 8008abc:	4630      	mov	r0, r6
 8008abe:	47c0      	blx	r8
 8008ac0:	4307      	orrs	r7, r0
 8008ac2:	3568      	adds	r5, #104	; 0x68
 8008ac4:	e7e9      	b.n	8008a9a <_fwalk_reent+0x12>

08008ac6 <__retarget_lock_init_recursive>:
 8008ac6:	4770      	bx	lr

08008ac8 <__retarget_lock_acquire_recursive>:
 8008ac8:	4770      	bx	lr

08008aca <__retarget_lock_release_recursive>:
 8008aca:	4770      	bx	lr

08008acc <sbrk_aligned>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	4e0e      	ldr	r6, [pc, #56]	; (8008b08 <sbrk_aligned+0x3c>)
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	6831      	ldr	r1, [r6, #0]
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	b911      	cbnz	r1, 8008ade <sbrk_aligned+0x12>
 8008ad8:	f000 fb7a 	bl	80091d0 <_sbrk_r>
 8008adc:	6030      	str	r0, [r6, #0]
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f000 fb75 	bl	80091d0 <_sbrk_r>
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d00a      	beq.n	8008b00 <sbrk_aligned+0x34>
 8008aea:	1cc4      	adds	r4, r0, #3
 8008aec:	f024 0403 	bic.w	r4, r4, #3
 8008af0:	42a0      	cmp	r0, r4
 8008af2:	d007      	beq.n	8008b04 <sbrk_aligned+0x38>
 8008af4:	1a21      	subs	r1, r4, r0
 8008af6:	4628      	mov	r0, r5
 8008af8:	f000 fb6a 	bl	80091d0 <_sbrk_r>
 8008afc:	3001      	adds	r0, #1
 8008afe:	d101      	bne.n	8008b04 <sbrk_aligned+0x38>
 8008b00:	f04f 34ff 	mov.w	r4, #4294967295
 8008b04:	4620      	mov	r0, r4
 8008b06:	bd70      	pop	{r4, r5, r6, pc}
 8008b08:	200137e8 	.word	0x200137e8

08008b0c <_malloc_r>:
 8008b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b10:	1ccd      	adds	r5, r1, #3
 8008b12:	f025 0503 	bic.w	r5, r5, #3
 8008b16:	3508      	adds	r5, #8
 8008b18:	2d0c      	cmp	r5, #12
 8008b1a:	bf38      	it	cc
 8008b1c:	250c      	movcc	r5, #12
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	4607      	mov	r7, r0
 8008b22:	db01      	blt.n	8008b28 <_malloc_r+0x1c>
 8008b24:	42a9      	cmp	r1, r5
 8008b26:	d905      	bls.n	8008b34 <_malloc_r+0x28>
 8008b28:	230c      	movs	r3, #12
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	4630      	mov	r0, r6
 8008b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b34:	4e2e      	ldr	r6, [pc, #184]	; (8008bf0 <_malloc_r+0xe4>)
 8008b36:	f000 fdbb 	bl	80096b0 <__malloc_lock>
 8008b3a:	6833      	ldr	r3, [r6, #0]
 8008b3c:	461c      	mov	r4, r3
 8008b3e:	bb34      	cbnz	r4, 8008b8e <_malloc_r+0x82>
 8008b40:	4629      	mov	r1, r5
 8008b42:	4638      	mov	r0, r7
 8008b44:	f7ff ffc2 	bl	8008acc <sbrk_aligned>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	d14d      	bne.n	8008bea <_malloc_r+0xde>
 8008b4e:	6834      	ldr	r4, [r6, #0]
 8008b50:	4626      	mov	r6, r4
 8008b52:	2e00      	cmp	r6, #0
 8008b54:	d140      	bne.n	8008bd8 <_malloc_r+0xcc>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	eb04 0803 	add.w	r8, r4, r3
 8008b60:	f000 fb36 	bl	80091d0 <_sbrk_r>
 8008b64:	4580      	cmp	r8, r0
 8008b66:	d13a      	bne.n	8008bde <_malloc_r+0xd2>
 8008b68:	6821      	ldr	r1, [r4, #0]
 8008b6a:	3503      	adds	r5, #3
 8008b6c:	1a6d      	subs	r5, r5, r1
 8008b6e:	f025 0503 	bic.w	r5, r5, #3
 8008b72:	3508      	adds	r5, #8
 8008b74:	2d0c      	cmp	r5, #12
 8008b76:	bf38      	it	cc
 8008b78:	250c      	movcc	r5, #12
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f7ff ffa5 	bl	8008acc <sbrk_aligned>
 8008b82:	3001      	adds	r0, #1
 8008b84:	d02b      	beq.n	8008bde <_malloc_r+0xd2>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	442b      	add	r3, r5
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	e00e      	b.n	8008bac <_malloc_r+0xa0>
 8008b8e:	6822      	ldr	r2, [r4, #0]
 8008b90:	1b52      	subs	r2, r2, r5
 8008b92:	d41e      	bmi.n	8008bd2 <_malloc_r+0xc6>
 8008b94:	2a0b      	cmp	r2, #11
 8008b96:	d916      	bls.n	8008bc6 <_malloc_r+0xba>
 8008b98:	1961      	adds	r1, r4, r5
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	6025      	str	r5, [r4, #0]
 8008b9e:	bf18      	it	ne
 8008ba0:	6059      	strne	r1, [r3, #4]
 8008ba2:	6863      	ldr	r3, [r4, #4]
 8008ba4:	bf08      	it	eq
 8008ba6:	6031      	streq	r1, [r6, #0]
 8008ba8:	5162      	str	r2, [r4, r5]
 8008baa:	604b      	str	r3, [r1, #4]
 8008bac:	4638      	mov	r0, r7
 8008bae:	f104 060b 	add.w	r6, r4, #11
 8008bb2:	f000 fd83 	bl	80096bc <__malloc_unlock>
 8008bb6:	f026 0607 	bic.w	r6, r6, #7
 8008bba:	1d23      	adds	r3, r4, #4
 8008bbc:	1af2      	subs	r2, r6, r3
 8008bbe:	d0b6      	beq.n	8008b2e <_malloc_r+0x22>
 8008bc0:	1b9b      	subs	r3, r3, r6
 8008bc2:	50a3      	str	r3, [r4, r2]
 8008bc4:	e7b3      	b.n	8008b2e <_malloc_r+0x22>
 8008bc6:	6862      	ldr	r2, [r4, #4]
 8008bc8:	42a3      	cmp	r3, r4
 8008bca:	bf0c      	ite	eq
 8008bcc:	6032      	streq	r2, [r6, #0]
 8008bce:	605a      	strne	r2, [r3, #4]
 8008bd0:	e7ec      	b.n	8008bac <_malloc_r+0xa0>
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	6864      	ldr	r4, [r4, #4]
 8008bd6:	e7b2      	b.n	8008b3e <_malloc_r+0x32>
 8008bd8:	4634      	mov	r4, r6
 8008bda:	6876      	ldr	r6, [r6, #4]
 8008bdc:	e7b9      	b.n	8008b52 <_malloc_r+0x46>
 8008bde:	230c      	movs	r3, #12
 8008be0:	603b      	str	r3, [r7, #0]
 8008be2:	4638      	mov	r0, r7
 8008be4:	f000 fd6a 	bl	80096bc <__malloc_unlock>
 8008be8:	e7a1      	b.n	8008b2e <_malloc_r+0x22>
 8008bea:	6025      	str	r5, [r4, #0]
 8008bec:	e7de      	b.n	8008bac <_malloc_r+0xa0>
 8008bee:	bf00      	nop
 8008bf0:	200137e4 	.word	0x200137e4

08008bf4 <__sfputc_r>:
 8008bf4:	6893      	ldr	r3, [r2, #8]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	b410      	push	{r4}
 8008bfc:	6093      	str	r3, [r2, #8]
 8008bfe:	da08      	bge.n	8008c12 <__sfputc_r+0x1e>
 8008c00:	6994      	ldr	r4, [r2, #24]
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	db01      	blt.n	8008c0a <__sfputc_r+0x16>
 8008c06:	290a      	cmp	r1, #10
 8008c08:	d103      	bne.n	8008c12 <__sfputc_r+0x1e>
 8008c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c0e:	f000 bb33 	b.w	8009278 <__swbuf_r>
 8008c12:	6813      	ldr	r3, [r2, #0]
 8008c14:	1c58      	adds	r0, r3, #1
 8008c16:	6010      	str	r0, [r2, #0]
 8008c18:	7019      	strb	r1, [r3, #0]
 8008c1a:	4608      	mov	r0, r1
 8008c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <__sfputs_r>:
 8008c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c24:	4606      	mov	r6, r0
 8008c26:	460f      	mov	r7, r1
 8008c28:	4614      	mov	r4, r2
 8008c2a:	18d5      	adds	r5, r2, r3
 8008c2c:	42ac      	cmp	r4, r5
 8008c2e:	d101      	bne.n	8008c34 <__sfputs_r+0x12>
 8008c30:	2000      	movs	r0, #0
 8008c32:	e007      	b.n	8008c44 <__sfputs_r+0x22>
 8008c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c38:	463a      	mov	r2, r7
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7ff ffda 	bl	8008bf4 <__sfputc_r>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d1f3      	bne.n	8008c2c <__sfputs_r+0xa>
 8008c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c48 <_vfiprintf_r>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	460d      	mov	r5, r1
 8008c4e:	b09d      	sub	sp, #116	; 0x74
 8008c50:	4614      	mov	r4, r2
 8008c52:	4698      	mov	r8, r3
 8008c54:	4606      	mov	r6, r0
 8008c56:	b118      	cbz	r0, 8008c60 <_vfiprintf_r+0x18>
 8008c58:	6983      	ldr	r3, [r0, #24]
 8008c5a:	b90b      	cbnz	r3, 8008c60 <_vfiprintf_r+0x18>
 8008c5c:	f7ff fe96 	bl	800898c <__sinit>
 8008c60:	4b89      	ldr	r3, [pc, #548]	; (8008e88 <_vfiprintf_r+0x240>)
 8008c62:	429d      	cmp	r5, r3
 8008c64:	d11b      	bne.n	8008c9e <_vfiprintf_r+0x56>
 8008c66:	6875      	ldr	r5, [r6, #4]
 8008c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c6a:	07d9      	lsls	r1, r3, #31
 8008c6c:	d405      	bmi.n	8008c7a <_vfiprintf_r+0x32>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	059a      	lsls	r2, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_vfiprintf_r+0x32>
 8008c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c76:	f7ff ff27 	bl	8008ac8 <__retarget_lock_acquire_recursive>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	071b      	lsls	r3, r3, #28
 8008c7e:	d501      	bpl.n	8008c84 <_vfiprintf_r+0x3c>
 8008c80:	692b      	ldr	r3, [r5, #16]
 8008c82:	b9eb      	cbnz	r3, 8008cc0 <_vfiprintf_r+0x78>
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 fb5a 	bl	8009340 <__swsetup_r>
 8008c8c:	b1c0      	cbz	r0, 8008cc0 <_vfiprintf_r+0x78>
 8008c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c90:	07dc      	lsls	r4, r3, #31
 8008c92:	d50e      	bpl.n	8008cb2 <_vfiprintf_r+0x6a>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	b01d      	add	sp, #116	; 0x74
 8008c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9e:	4b7b      	ldr	r3, [pc, #492]	; (8008e8c <_vfiprintf_r+0x244>)
 8008ca0:	429d      	cmp	r5, r3
 8008ca2:	d101      	bne.n	8008ca8 <_vfiprintf_r+0x60>
 8008ca4:	68b5      	ldr	r5, [r6, #8]
 8008ca6:	e7df      	b.n	8008c68 <_vfiprintf_r+0x20>
 8008ca8:	4b79      	ldr	r3, [pc, #484]	; (8008e90 <_vfiprintf_r+0x248>)
 8008caa:	429d      	cmp	r5, r3
 8008cac:	bf08      	it	eq
 8008cae:	68f5      	ldreq	r5, [r6, #12]
 8008cb0:	e7da      	b.n	8008c68 <_vfiprintf_r+0x20>
 8008cb2:	89ab      	ldrh	r3, [r5, #12]
 8008cb4:	0598      	lsls	r0, r3, #22
 8008cb6:	d4ed      	bmi.n	8008c94 <_vfiprintf_r+0x4c>
 8008cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cba:	f7ff ff06 	bl	8008aca <__retarget_lock_release_recursive>
 8008cbe:	e7e9      	b.n	8008c94 <_vfiprintf_r+0x4c>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cce:	2330      	movs	r3, #48	; 0x30
 8008cd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e94 <_vfiprintf_r+0x24c>
 8008cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cd8:	f04f 0901 	mov.w	r9, #1
 8008cdc:	4623      	mov	r3, r4
 8008cde:	469a      	mov	sl, r3
 8008ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce4:	b10a      	cbz	r2, 8008cea <_vfiprintf_r+0xa2>
 8008ce6:	2a25      	cmp	r2, #37	; 0x25
 8008ce8:	d1f9      	bne.n	8008cde <_vfiprintf_r+0x96>
 8008cea:	ebba 0b04 	subs.w	fp, sl, r4
 8008cee:	d00b      	beq.n	8008d08 <_vfiprintf_r+0xc0>
 8008cf0:	465b      	mov	r3, fp
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff ff93 	bl	8008c22 <__sfputs_r>
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	f000 80aa 	beq.w	8008e56 <_vfiprintf_r+0x20e>
 8008d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d04:	445a      	add	r2, fp
 8008d06:	9209      	str	r2, [sp, #36]	; 0x24
 8008d08:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 80a2 	beq.w	8008e56 <_vfiprintf_r+0x20e>
 8008d12:	2300      	movs	r3, #0
 8008d14:	f04f 32ff 	mov.w	r2, #4294967295
 8008d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d1c:	f10a 0a01 	add.w	sl, sl, #1
 8008d20:	9304      	str	r3, [sp, #16]
 8008d22:	9307      	str	r3, [sp, #28]
 8008d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d28:	931a      	str	r3, [sp, #104]	; 0x68
 8008d2a:	4654      	mov	r4, sl
 8008d2c:	2205      	movs	r2, #5
 8008d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d32:	4858      	ldr	r0, [pc, #352]	; (8008e94 <_vfiprintf_r+0x24c>)
 8008d34:	f7f7 fa54 	bl	80001e0 <memchr>
 8008d38:	9a04      	ldr	r2, [sp, #16]
 8008d3a:	b9d8      	cbnz	r0, 8008d74 <_vfiprintf_r+0x12c>
 8008d3c:	06d1      	lsls	r1, r2, #27
 8008d3e:	bf44      	itt	mi
 8008d40:	2320      	movmi	r3, #32
 8008d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d46:	0713      	lsls	r3, r2, #28
 8008d48:	bf44      	itt	mi
 8008d4a:	232b      	movmi	r3, #43	; 0x2b
 8008d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d50:	f89a 3000 	ldrb.w	r3, [sl]
 8008d54:	2b2a      	cmp	r3, #42	; 0x2a
 8008d56:	d015      	beq.n	8008d84 <_vfiprintf_r+0x13c>
 8008d58:	9a07      	ldr	r2, [sp, #28]
 8008d5a:	4654      	mov	r4, sl
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	f04f 0c0a 	mov.w	ip, #10
 8008d62:	4621      	mov	r1, r4
 8008d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d68:	3b30      	subs	r3, #48	; 0x30
 8008d6a:	2b09      	cmp	r3, #9
 8008d6c:	d94e      	bls.n	8008e0c <_vfiprintf_r+0x1c4>
 8008d6e:	b1b0      	cbz	r0, 8008d9e <_vfiprintf_r+0x156>
 8008d70:	9207      	str	r2, [sp, #28]
 8008d72:	e014      	b.n	8008d9e <_vfiprintf_r+0x156>
 8008d74:	eba0 0308 	sub.w	r3, r0, r8
 8008d78:	fa09 f303 	lsl.w	r3, r9, r3
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	9304      	str	r3, [sp, #16]
 8008d80:	46a2      	mov	sl, r4
 8008d82:	e7d2      	b.n	8008d2a <_vfiprintf_r+0xe2>
 8008d84:	9b03      	ldr	r3, [sp, #12]
 8008d86:	1d19      	adds	r1, r3, #4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	9103      	str	r1, [sp, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	bfbb      	ittet	lt
 8008d90:	425b      	neglt	r3, r3
 8008d92:	f042 0202 	orrlt.w	r2, r2, #2
 8008d96:	9307      	strge	r3, [sp, #28]
 8008d98:	9307      	strlt	r3, [sp, #28]
 8008d9a:	bfb8      	it	lt
 8008d9c:	9204      	strlt	r2, [sp, #16]
 8008d9e:	7823      	ldrb	r3, [r4, #0]
 8008da0:	2b2e      	cmp	r3, #46	; 0x2e
 8008da2:	d10c      	bne.n	8008dbe <_vfiprintf_r+0x176>
 8008da4:	7863      	ldrb	r3, [r4, #1]
 8008da6:	2b2a      	cmp	r3, #42	; 0x2a
 8008da8:	d135      	bne.n	8008e16 <_vfiprintf_r+0x1ce>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	1d1a      	adds	r2, r3, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	9203      	str	r2, [sp, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bfb8      	it	lt
 8008db6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dba:	3402      	adds	r4, #2
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ea4 <_vfiprintf_r+0x25c>
 8008dc2:	7821      	ldrb	r1, [r4, #0]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	f7f7 fa0a 	bl	80001e0 <memchr>
 8008dcc:	b140      	cbz	r0, 8008de0 <_vfiprintf_r+0x198>
 8008dce:	2340      	movs	r3, #64	; 0x40
 8008dd0:	eba0 000a 	sub.w	r0, r0, sl
 8008dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8008dd8:	9b04      	ldr	r3, [sp, #16]
 8008dda:	4303      	orrs	r3, r0
 8008ddc:	3401      	adds	r4, #1
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de4:	482c      	ldr	r0, [pc, #176]	; (8008e98 <_vfiprintf_r+0x250>)
 8008de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dea:	2206      	movs	r2, #6
 8008dec:	f7f7 f9f8 	bl	80001e0 <memchr>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d03f      	beq.n	8008e74 <_vfiprintf_r+0x22c>
 8008df4:	4b29      	ldr	r3, [pc, #164]	; (8008e9c <_vfiprintf_r+0x254>)
 8008df6:	bb1b      	cbnz	r3, 8008e40 <_vfiprintf_r+0x1f8>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	3307      	adds	r3, #7
 8008dfc:	f023 0307 	bic.w	r3, r3, #7
 8008e00:	3308      	adds	r3, #8
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e06:	443b      	add	r3, r7
 8008e08:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0a:	e767      	b.n	8008cdc <_vfiprintf_r+0x94>
 8008e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e10:	460c      	mov	r4, r1
 8008e12:	2001      	movs	r0, #1
 8008e14:	e7a5      	b.n	8008d62 <_vfiprintf_r+0x11a>
 8008e16:	2300      	movs	r3, #0
 8008e18:	3401      	adds	r4, #1
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f04f 0c0a 	mov.w	ip, #10
 8008e22:	4620      	mov	r0, r4
 8008e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e28:	3a30      	subs	r2, #48	; 0x30
 8008e2a:	2a09      	cmp	r2, #9
 8008e2c:	d903      	bls.n	8008e36 <_vfiprintf_r+0x1ee>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0c5      	beq.n	8008dbe <_vfiprintf_r+0x176>
 8008e32:	9105      	str	r1, [sp, #20]
 8008e34:	e7c3      	b.n	8008dbe <_vfiprintf_r+0x176>
 8008e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e7f0      	b.n	8008e22 <_vfiprintf_r+0x1da>
 8008e40:	ab03      	add	r3, sp, #12
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	462a      	mov	r2, r5
 8008e46:	4b16      	ldr	r3, [pc, #88]	; (8008ea0 <_vfiprintf_r+0x258>)
 8008e48:	a904      	add	r1, sp, #16
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f3af 8000 	nop.w
 8008e50:	4607      	mov	r7, r0
 8008e52:	1c78      	adds	r0, r7, #1
 8008e54:	d1d6      	bne.n	8008e04 <_vfiprintf_r+0x1bc>
 8008e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e58:	07d9      	lsls	r1, r3, #31
 8008e5a:	d405      	bmi.n	8008e68 <_vfiprintf_r+0x220>
 8008e5c:	89ab      	ldrh	r3, [r5, #12]
 8008e5e:	059a      	lsls	r2, r3, #22
 8008e60:	d402      	bmi.n	8008e68 <_vfiprintf_r+0x220>
 8008e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e64:	f7ff fe31 	bl	8008aca <__retarget_lock_release_recursive>
 8008e68:	89ab      	ldrh	r3, [r5, #12]
 8008e6a:	065b      	lsls	r3, r3, #25
 8008e6c:	f53f af12 	bmi.w	8008c94 <_vfiprintf_r+0x4c>
 8008e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e72:	e711      	b.n	8008c98 <_vfiprintf_r+0x50>
 8008e74:	ab03      	add	r3, sp, #12
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	462a      	mov	r2, r5
 8008e7a:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <_vfiprintf_r+0x258>)
 8008e7c:	a904      	add	r1, sp, #16
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f000 f880 	bl	8008f84 <_printf_i>
 8008e84:	e7e4      	b.n	8008e50 <_vfiprintf_r+0x208>
 8008e86:	bf00      	nop
 8008e88:	0800a0b8 	.word	0x0800a0b8
 8008e8c:	0800a0d8 	.word	0x0800a0d8
 8008e90:	0800a098 	.word	0x0800a098
 8008e94:	0800a0f8 	.word	0x0800a0f8
 8008e98:	0800a102 	.word	0x0800a102
 8008e9c:	00000000 	.word	0x00000000
 8008ea0:	08008c23 	.word	0x08008c23
 8008ea4:	0800a0fe 	.word	0x0800a0fe

08008ea8 <_printf_common>:
 8008ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	4616      	mov	r6, r2
 8008eae:	4699      	mov	r9, r3
 8008eb0:	688a      	ldr	r2, [r1, #8]
 8008eb2:	690b      	ldr	r3, [r1, #16]
 8008eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	bfb8      	it	lt
 8008ebc:	4613      	movlt	r3, r2
 8008ebe:	6033      	str	r3, [r6, #0]
 8008ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	b10a      	cbz	r2, 8008ece <_printf_common+0x26>
 8008eca:	3301      	adds	r3, #1
 8008ecc:	6033      	str	r3, [r6, #0]
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	0699      	lsls	r1, r3, #26
 8008ed2:	bf42      	ittt	mi
 8008ed4:	6833      	ldrmi	r3, [r6, #0]
 8008ed6:	3302      	addmi	r3, #2
 8008ed8:	6033      	strmi	r3, [r6, #0]
 8008eda:	6825      	ldr	r5, [r4, #0]
 8008edc:	f015 0506 	ands.w	r5, r5, #6
 8008ee0:	d106      	bne.n	8008ef0 <_printf_common+0x48>
 8008ee2:	f104 0a19 	add.w	sl, r4, #25
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	6832      	ldr	r2, [r6, #0]
 8008eea:	1a9b      	subs	r3, r3, r2
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	dc26      	bgt.n	8008f3e <_printf_common+0x96>
 8008ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ef4:	1e13      	subs	r3, r2, #0
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	bf18      	it	ne
 8008efa:	2301      	movne	r3, #1
 8008efc:	0692      	lsls	r2, r2, #26
 8008efe:	d42b      	bmi.n	8008f58 <_printf_common+0xb0>
 8008f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f04:	4649      	mov	r1, r9
 8008f06:	4638      	mov	r0, r7
 8008f08:	47c0      	blx	r8
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d01e      	beq.n	8008f4c <_printf_common+0xa4>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	68e5      	ldr	r5, [r4, #12]
 8008f12:	6832      	ldr	r2, [r6, #0]
 8008f14:	f003 0306 	and.w	r3, r3, #6
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	bf08      	it	eq
 8008f1c:	1aad      	subeq	r5, r5, r2
 8008f1e:	68a3      	ldr	r3, [r4, #8]
 8008f20:	6922      	ldr	r2, [r4, #16]
 8008f22:	bf0c      	ite	eq
 8008f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f28:	2500      	movne	r5, #0
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	bfc4      	itt	gt
 8008f2e:	1a9b      	subgt	r3, r3, r2
 8008f30:	18ed      	addgt	r5, r5, r3
 8008f32:	2600      	movs	r6, #0
 8008f34:	341a      	adds	r4, #26
 8008f36:	42b5      	cmp	r5, r6
 8008f38:	d11a      	bne.n	8008f70 <_printf_common+0xc8>
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	e008      	b.n	8008f50 <_printf_common+0xa8>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4652      	mov	r2, sl
 8008f42:	4649      	mov	r1, r9
 8008f44:	4638      	mov	r0, r7
 8008f46:	47c0      	blx	r8
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d103      	bne.n	8008f54 <_printf_common+0xac>
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f54:	3501      	adds	r5, #1
 8008f56:	e7c6      	b.n	8008ee6 <_printf_common+0x3e>
 8008f58:	18e1      	adds	r1, r4, r3
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	2030      	movs	r0, #48	; 0x30
 8008f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f62:	4422      	add	r2, r4
 8008f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	e7c7      	b.n	8008f00 <_printf_common+0x58>
 8008f70:	2301      	movs	r3, #1
 8008f72:	4622      	mov	r2, r4
 8008f74:	4649      	mov	r1, r9
 8008f76:	4638      	mov	r0, r7
 8008f78:	47c0      	blx	r8
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d0e6      	beq.n	8008f4c <_printf_common+0xa4>
 8008f7e:	3601      	adds	r6, #1
 8008f80:	e7d9      	b.n	8008f36 <_printf_common+0x8e>
	...

08008f84 <_printf_i>:
 8008f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	7e0f      	ldrb	r7, [r1, #24]
 8008f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f8c:	2f78      	cmp	r7, #120	; 0x78
 8008f8e:	4691      	mov	r9, r2
 8008f90:	4680      	mov	r8, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	469a      	mov	sl, r3
 8008f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f9a:	d807      	bhi.n	8008fac <_printf_i+0x28>
 8008f9c:	2f62      	cmp	r7, #98	; 0x62
 8008f9e:	d80a      	bhi.n	8008fb6 <_printf_i+0x32>
 8008fa0:	2f00      	cmp	r7, #0
 8008fa2:	f000 80d8 	beq.w	8009156 <_printf_i+0x1d2>
 8008fa6:	2f58      	cmp	r7, #88	; 0x58
 8008fa8:	f000 80a3 	beq.w	80090f2 <_printf_i+0x16e>
 8008fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fb4:	e03a      	b.n	800902c <_printf_i+0xa8>
 8008fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fba:	2b15      	cmp	r3, #21
 8008fbc:	d8f6      	bhi.n	8008fac <_printf_i+0x28>
 8008fbe:	a101      	add	r1, pc, #4	; (adr r1, 8008fc4 <_printf_i+0x40>)
 8008fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fc4:	0800901d 	.word	0x0800901d
 8008fc8:	08009031 	.word	0x08009031
 8008fcc:	08008fad 	.word	0x08008fad
 8008fd0:	08008fad 	.word	0x08008fad
 8008fd4:	08008fad 	.word	0x08008fad
 8008fd8:	08008fad 	.word	0x08008fad
 8008fdc:	08009031 	.word	0x08009031
 8008fe0:	08008fad 	.word	0x08008fad
 8008fe4:	08008fad 	.word	0x08008fad
 8008fe8:	08008fad 	.word	0x08008fad
 8008fec:	08008fad 	.word	0x08008fad
 8008ff0:	0800913d 	.word	0x0800913d
 8008ff4:	08009061 	.word	0x08009061
 8008ff8:	0800911f 	.word	0x0800911f
 8008ffc:	08008fad 	.word	0x08008fad
 8009000:	08008fad 	.word	0x08008fad
 8009004:	0800915f 	.word	0x0800915f
 8009008:	08008fad 	.word	0x08008fad
 800900c:	08009061 	.word	0x08009061
 8009010:	08008fad 	.word	0x08008fad
 8009014:	08008fad 	.word	0x08008fad
 8009018:	08009127 	.word	0x08009127
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	1d1a      	adds	r2, r3, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	602a      	str	r2, [r5, #0]
 8009024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800902c:	2301      	movs	r3, #1
 800902e:	e0a3      	b.n	8009178 <_printf_i+0x1f4>
 8009030:	6820      	ldr	r0, [r4, #0]
 8009032:	6829      	ldr	r1, [r5, #0]
 8009034:	0606      	lsls	r6, r0, #24
 8009036:	f101 0304 	add.w	r3, r1, #4
 800903a:	d50a      	bpl.n	8009052 <_printf_i+0xce>
 800903c:	680e      	ldr	r6, [r1, #0]
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	2e00      	cmp	r6, #0
 8009042:	da03      	bge.n	800904c <_printf_i+0xc8>
 8009044:	232d      	movs	r3, #45	; 0x2d
 8009046:	4276      	negs	r6, r6
 8009048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800904c:	485e      	ldr	r0, [pc, #376]	; (80091c8 <_printf_i+0x244>)
 800904e:	230a      	movs	r3, #10
 8009050:	e019      	b.n	8009086 <_printf_i+0x102>
 8009052:	680e      	ldr	r6, [r1, #0]
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	f010 0f40 	tst.w	r0, #64	; 0x40
 800905a:	bf18      	it	ne
 800905c:	b236      	sxthne	r6, r6
 800905e:	e7ef      	b.n	8009040 <_printf_i+0xbc>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	6820      	ldr	r0, [r4, #0]
 8009064:	1d19      	adds	r1, r3, #4
 8009066:	6029      	str	r1, [r5, #0]
 8009068:	0601      	lsls	r1, r0, #24
 800906a:	d501      	bpl.n	8009070 <_printf_i+0xec>
 800906c:	681e      	ldr	r6, [r3, #0]
 800906e:	e002      	b.n	8009076 <_printf_i+0xf2>
 8009070:	0646      	lsls	r6, r0, #25
 8009072:	d5fb      	bpl.n	800906c <_printf_i+0xe8>
 8009074:	881e      	ldrh	r6, [r3, #0]
 8009076:	4854      	ldr	r0, [pc, #336]	; (80091c8 <_printf_i+0x244>)
 8009078:	2f6f      	cmp	r7, #111	; 0x6f
 800907a:	bf0c      	ite	eq
 800907c:	2308      	moveq	r3, #8
 800907e:	230a      	movne	r3, #10
 8009080:	2100      	movs	r1, #0
 8009082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009086:	6865      	ldr	r5, [r4, #4]
 8009088:	60a5      	str	r5, [r4, #8]
 800908a:	2d00      	cmp	r5, #0
 800908c:	bfa2      	ittt	ge
 800908e:	6821      	ldrge	r1, [r4, #0]
 8009090:	f021 0104 	bicge.w	r1, r1, #4
 8009094:	6021      	strge	r1, [r4, #0]
 8009096:	b90e      	cbnz	r6, 800909c <_printf_i+0x118>
 8009098:	2d00      	cmp	r5, #0
 800909a:	d04d      	beq.n	8009138 <_printf_i+0x1b4>
 800909c:	4615      	mov	r5, r2
 800909e:	fbb6 f1f3 	udiv	r1, r6, r3
 80090a2:	fb03 6711 	mls	r7, r3, r1, r6
 80090a6:	5dc7      	ldrb	r7, [r0, r7]
 80090a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090ac:	4637      	mov	r7, r6
 80090ae:	42bb      	cmp	r3, r7
 80090b0:	460e      	mov	r6, r1
 80090b2:	d9f4      	bls.n	800909e <_printf_i+0x11a>
 80090b4:	2b08      	cmp	r3, #8
 80090b6:	d10b      	bne.n	80090d0 <_printf_i+0x14c>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	07de      	lsls	r6, r3, #31
 80090bc:	d508      	bpl.n	80090d0 <_printf_i+0x14c>
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	6861      	ldr	r1, [r4, #4]
 80090c2:	4299      	cmp	r1, r3
 80090c4:	bfde      	ittt	le
 80090c6:	2330      	movle	r3, #48	; 0x30
 80090c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090d0:	1b52      	subs	r2, r2, r5
 80090d2:	6122      	str	r2, [r4, #16]
 80090d4:	f8cd a000 	str.w	sl, [sp]
 80090d8:	464b      	mov	r3, r9
 80090da:	aa03      	add	r2, sp, #12
 80090dc:	4621      	mov	r1, r4
 80090de:	4640      	mov	r0, r8
 80090e0:	f7ff fee2 	bl	8008ea8 <_printf_common>
 80090e4:	3001      	adds	r0, #1
 80090e6:	d14c      	bne.n	8009182 <_printf_i+0x1fe>
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ec:	b004      	add	sp, #16
 80090ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f2:	4835      	ldr	r0, [pc, #212]	; (80091c8 <_printf_i+0x244>)
 80090f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090f8:	6829      	ldr	r1, [r5, #0]
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009100:	6029      	str	r1, [r5, #0]
 8009102:	061d      	lsls	r5, r3, #24
 8009104:	d514      	bpl.n	8009130 <_printf_i+0x1ac>
 8009106:	07df      	lsls	r7, r3, #31
 8009108:	bf44      	itt	mi
 800910a:	f043 0320 	orrmi.w	r3, r3, #32
 800910e:	6023      	strmi	r3, [r4, #0]
 8009110:	b91e      	cbnz	r6, 800911a <_printf_i+0x196>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	f023 0320 	bic.w	r3, r3, #32
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	2310      	movs	r3, #16
 800911c:	e7b0      	b.n	8009080 <_printf_i+0xfc>
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	f043 0320 	orr.w	r3, r3, #32
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	2378      	movs	r3, #120	; 0x78
 8009128:	4828      	ldr	r0, [pc, #160]	; (80091cc <_printf_i+0x248>)
 800912a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800912e:	e7e3      	b.n	80090f8 <_printf_i+0x174>
 8009130:	0659      	lsls	r1, r3, #25
 8009132:	bf48      	it	mi
 8009134:	b2b6      	uxthmi	r6, r6
 8009136:	e7e6      	b.n	8009106 <_printf_i+0x182>
 8009138:	4615      	mov	r5, r2
 800913a:	e7bb      	b.n	80090b4 <_printf_i+0x130>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	6826      	ldr	r6, [r4, #0]
 8009140:	6961      	ldr	r1, [r4, #20]
 8009142:	1d18      	adds	r0, r3, #4
 8009144:	6028      	str	r0, [r5, #0]
 8009146:	0635      	lsls	r5, r6, #24
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	d501      	bpl.n	8009150 <_printf_i+0x1cc>
 800914c:	6019      	str	r1, [r3, #0]
 800914e:	e002      	b.n	8009156 <_printf_i+0x1d2>
 8009150:	0670      	lsls	r0, r6, #25
 8009152:	d5fb      	bpl.n	800914c <_printf_i+0x1c8>
 8009154:	8019      	strh	r1, [r3, #0]
 8009156:	2300      	movs	r3, #0
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	4615      	mov	r5, r2
 800915c:	e7ba      	b.n	80090d4 <_printf_i+0x150>
 800915e:	682b      	ldr	r3, [r5, #0]
 8009160:	1d1a      	adds	r2, r3, #4
 8009162:	602a      	str	r2, [r5, #0]
 8009164:	681d      	ldr	r5, [r3, #0]
 8009166:	6862      	ldr	r2, [r4, #4]
 8009168:	2100      	movs	r1, #0
 800916a:	4628      	mov	r0, r5
 800916c:	f7f7 f838 	bl	80001e0 <memchr>
 8009170:	b108      	cbz	r0, 8009176 <_printf_i+0x1f2>
 8009172:	1b40      	subs	r0, r0, r5
 8009174:	6060      	str	r0, [r4, #4]
 8009176:	6863      	ldr	r3, [r4, #4]
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	2300      	movs	r3, #0
 800917c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009180:	e7a8      	b.n	80090d4 <_printf_i+0x150>
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	462a      	mov	r2, r5
 8009186:	4649      	mov	r1, r9
 8009188:	4640      	mov	r0, r8
 800918a:	47d0      	blx	sl
 800918c:	3001      	adds	r0, #1
 800918e:	d0ab      	beq.n	80090e8 <_printf_i+0x164>
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	079b      	lsls	r3, r3, #30
 8009194:	d413      	bmi.n	80091be <_printf_i+0x23a>
 8009196:	68e0      	ldr	r0, [r4, #12]
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	4298      	cmp	r0, r3
 800919c:	bfb8      	it	lt
 800919e:	4618      	movlt	r0, r3
 80091a0:	e7a4      	b.n	80090ec <_printf_i+0x168>
 80091a2:	2301      	movs	r3, #1
 80091a4:	4632      	mov	r2, r6
 80091a6:	4649      	mov	r1, r9
 80091a8:	4640      	mov	r0, r8
 80091aa:	47d0      	blx	sl
 80091ac:	3001      	adds	r0, #1
 80091ae:	d09b      	beq.n	80090e8 <_printf_i+0x164>
 80091b0:	3501      	adds	r5, #1
 80091b2:	68e3      	ldr	r3, [r4, #12]
 80091b4:	9903      	ldr	r1, [sp, #12]
 80091b6:	1a5b      	subs	r3, r3, r1
 80091b8:	42ab      	cmp	r3, r5
 80091ba:	dcf2      	bgt.n	80091a2 <_printf_i+0x21e>
 80091bc:	e7eb      	b.n	8009196 <_printf_i+0x212>
 80091be:	2500      	movs	r5, #0
 80091c0:	f104 0619 	add.w	r6, r4, #25
 80091c4:	e7f5      	b.n	80091b2 <_printf_i+0x22e>
 80091c6:	bf00      	nop
 80091c8:	0800a109 	.word	0x0800a109
 80091cc:	0800a11a 	.word	0x0800a11a

080091d0 <_sbrk_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d06      	ldr	r5, [pc, #24]	; (80091ec <_sbrk_r+0x1c>)
 80091d4:	2300      	movs	r3, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	602b      	str	r3, [r5, #0]
 80091dc:	f7f7 ff88 	bl	80010f0 <_sbrk>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_sbrk_r+0x1a>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_sbrk_r+0x1a>
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	200137ec 	.word	0x200137ec

080091f0 <__sread>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	460c      	mov	r4, r1
 80091f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f8:	f000 fab2 	bl	8009760 <_read_r>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	bfab      	itete	ge
 8009200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009202:	89a3      	ldrhlt	r3, [r4, #12]
 8009204:	181b      	addge	r3, r3, r0
 8009206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800920a:	bfac      	ite	ge
 800920c:	6563      	strge	r3, [r4, #84]	; 0x54
 800920e:	81a3      	strhlt	r3, [r4, #12]
 8009210:	bd10      	pop	{r4, pc}

08009212 <__swrite>:
 8009212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009216:	461f      	mov	r7, r3
 8009218:	898b      	ldrh	r3, [r1, #12]
 800921a:	05db      	lsls	r3, r3, #23
 800921c:	4605      	mov	r5, r0
 800921e:	460c      	mov	r4, r1
 8009220:	4616      	mov	r6, r2
 8009222:	d505      	bpl.n	8009230 <__swrite+0x1e>
 8009224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009228:	2302      	movs	r3, #2
 800922a:	2200      	movs	r2, #0
 800922c:	f000 f9c8 	bl	80095c0 <_lseek_r>
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	4632      	mov	r2, r6
 800923e:	463b      	mov	r3, r7
 8009240:	4628      	mov	r0, r5
 8009242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009246:	f000 b869 	b.w	800931c <_write_r>

0800924a <__sseek>:
 800924a:	b510      	push	{r4, lr}
 800924c:	460c      	mov	r4, r1
 800924e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009252:	f000 f9b5 	bl	80095c0 <_lseek_r>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	bf15      	itete	ne
 800925c:	6560      	strne	r0, [r4, #84]	; 0x54
 800925e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009266:	81a3      	strheq	r3, [r4, #12]
 8009268:	bf18      	it	ne
 800926a:	81a3      	strhne	r3, [r4, #12]
 800926c:	bd10      	pop	{r4, pc}

0800926e <__sclose>:
 800926e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009272:	f000 b8d3 	b.w	800941c <_close_r>
	...

08009278 <__swbuf_r>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	460e      	mov	r6, r1
 800927c:	4614      	mov	r4, r2
 800927e:	4605      	mov	r5, r0
 8009280:	b118      	cbz	r0, 800928a <__swbuf_r+0x12>
 8009282:	6983      	ldr	r3, [r0, #24]
 8009284:	b90b      	cbnz	r3, 800928a <__swbuf_r+0x12>
 8009286:	f7ff fb81 	bl	800898c <__sinit>
 800928a:	4b21      	ldr	r3, [pc, #132]	; (8009310 <__swbuf_r+0x98>)
 800928c:	429c      	cmp	r4, r3
 800928e:	d12b      	bne.n	80092e8 <__swbuf_r+0x70>
 8009290:	686c      	ldr	r4, [r5, #4]
 8009292:	69a3      	ldr	r3, [r4, #24]
 8009294:	60a3      	str	r3, [r4, #8]
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	071a      	lsls	r2, r3, #28
 800929a:	d52f      	bpl.n	80092fc <__swbuf_r+0x84>
 800929c:	6923      	ldr	r3, [r4, #16]
 800929e:	b36b      	cbz	r3, 80092fc <__swbuf_r+0x84>
 80092a0:	6923      	ldr	r3, [r4, #16]
 80092a2:	6820      	ldr	r0, [r4, #0]
 80092a4:	1ac0      	subs	r0, r0, r3
 80092a6:	6963      	ldr	r3, [r4, #20]
 80092a8:	b2f6      	uxtb	r6, r6
 80092aa:	4283      	cmp	r3, r0
 80092ac:	4637      	mov	r7, r6
 80092ae:	dc04      	bgt.n	80092ba <__swbuf_r+0x42>
 80092b0:	4621      	mov	r1, r4
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 f948 	bl	8009548 <_fflush_r>
 80092b8:	bb30      	cbnz	r0, 8009308 <__swbuf_r+0x90>
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	3b01      	subs	r3, #1
 80092be:	60a3      	str	r3, [r4, #8]
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	6022      	str	r2, [r4, #0]
 80092c6:	701e      	strb	r6, [r3, #0]
 80092c8:	6963      	ldr	r3, [r4, #20]
 80092ca:	3001      	adds	r0, #1
 80092cc:	4283      	cmp	r3, r0
 80092ce:	d004      	beq.n	80092da <__swbuf_r+0x62>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	07db      	lsls	r3, r3, #31
 80092d4:	d506      	bpl.n	80092e4 <__swbuf_r+0x6c>
 80092d6:	2e0a      	cmp	r6, #10
 80092d8:	d104      	bne.n	80092e4 <__swbuf_r+0x6c>
 80092da:	4621      	mov	r1, r4
 80092dc:	4628      	mov	r0, r5
 80092de:	f000 f933 	bl	8009548 <_fflush_r>
 80092e2:	b988      	cbnz	r0, 8009308 <__swbuf_r+0x90>
 80092e4:	4638      	mov	r0, r7
 80092e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e8:	4b0a      	ldr	r3, [pc, #40]	; (8009314 <__swbuf_r+0x9c>)
 80092ea:	429c      	cmp	r4, r3
 80092ec:	d101      	bne.n	80092f2 <__swbuf_r+0x7a>
 80092ee:	68ac      	ldr	r4, [r5, #8]
 80092f0:	e7cf      	b.n	8009292 <__swbuf_r+0x1a>
 80092f2:	4b09      	ldr	r3, [pc, #36]	; (8009318 <__swbuf_r+0xa0>)
 80092f4:	429c      	cmp	r4, r3
 80092f6:	bf08      	it	eq
 80092f8:	68ec      	ldreq	r4, [r5, #12]
 80092fa:	e7ca      	b.n	8009292 <__swbuf_r+0x1a>
 80092fc:	4621      	mov	r1, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f81e 	bl	8009340 <__swsetup_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	d0cb      	beq.n	80092a0 <__swbuf_r+0x28>
 8009308:	f04f 37ff 	mov.w	r7, #4294967295
 800930c:	e7ea      	b.n	80092e4 <__swbuf_r+0x6c>
 800930e:	bf00      	nop
 8009310:	0800a0b8 	.word	0x0800a0b8
 8009314:	0800a0d8 	.word	0x0800a0d8
 8009318:	0800a098 	.word	0x0800a098

0800931c <_write_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d07      	ldr	r5, [pc, #28]	; (800933c <_write_r+0x20>)
 8009320:	4604      	mov	r4, r0
 8009322:	4608      	mov	r0, r1
 8009324:	4611      	mov	r1, r2
 8009326:	2200      	movs	r2, #0
 8009328:	602a      	str	r2, [r5, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	f7f7 fe8f 	bl	800104e <_write>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_write_r+0x1e>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	b103      	cbz	r3, 800933a <_write_r+0x1e>
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	200137ec 	.word	0x200137ec

08009340 <__swsetup_r>:
 8009340:	4b32      	ldr	r3, [pc, #200]	; (800940c <__swsetup_r+0xcc>)
 8009342:	b570      	push	{r4, r5, r6, lr}
 8009344:	681d      	ldr	r5, [r3, #0]
 8009346:	4606      	mov	r6, r0
 8009348:	460c      	mov	r4, r1
 800934a:	b125      	cbz	r5, 8009356 <__swsetup_r+0x16>
 800934c:	69ab      	ldr	r3, [r5, #24]
 800934e:	b913      	cbnz	r3, 8009356 <__swsetup_r+0x16>
 8009350:	4628      	mov	r0, r5
 8009352:	f7ff fb1b 	bl	800898c <__sinit>
 8009356:	4b2e      	ldr	r3, [pc, #184]	; (8009410 <__swsetup_r+0xd0>)
 8009358:	429c      	cmp	r4, r3
 800935a:	d10f      	bne.n	800937c <__swsetup_r+0x3c>
 800935c:	686c      	ldr	r4, [r5, #4]
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009364:	0719      	lsls	r1, r3, #28
 8009366:	d42c      	bmi.n	80093c2 <__swsetup_r+0x82>
 8009368:	06dd      	lsls	r5, r3, #27
 800936a:	d411      	bmi.n	8009390 <__swsetup_r+0x50>
 800936c:	2309      	movs	r3, #9
 800936e:	6033      	str	r3, [r6, #0]
 8009370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	f04f 30ff 	mov.w	r0, #4294967295
 800937a:	e03e      	b.n	80093fa <__swsetup_r+0xba>
 800937c:	4b25      	ldr	r3, [pc, #148]	; (8009414 <__swsetup_r+0xd4>)
 800937e:	429c      	cmp	r4, r3
 8009380:	d101      	bne.n	8009386 <__swsetup_r+0x46>
 8009382:	68ac      	ldr	r4, [r5, #8]
 8009384:	e7eb      	b.n	800935e <__swsetup_r+0x1e>
 8009386:	4b24      	ldr	r3, [pc, #144]	; (8009418 <__swsetup_r+0xd8>)
 8009388:	429c      	cmp	r4, r3
 800938a:	bf08      	it	eq
 800938c:	68ec      	ldreq	r4, [r5, #12]
 800938e:	e7e6      	b.n	800935e <__swsetup_r+0x1e>
 8009390:	0758      	lsls	r0, r3, #29
 8009392:	d512      	bpl.n	80093ba <__swsetup_r+0x7a>
 8009394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009396:	b141      	cbz	r1, 80093aa <__swsetup_r+0x6a>
 8009398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800939c:	4299      	cmp	r1, r3
 800939e:	d002      	beq.n	80093a6 <__swsetup_r+0x66>
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 f991 	bl	80096c8 <_free_r>
 80093a6:	2300      	movs	r3, #0
 80093a8:	6363      	str	r3, [r4, #52]	; 0x34
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093b0:	81a3      	strh	r3, [r4, #12]
 80093b2:	2300      	movs	r3, #0
 80093b4:	6063      	str	r3, [r4, #4]
 80093b6:	6923      	ldr	r3, [r4, #16]
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	f043 0308 	orr.w	r3, r3, #8
 80093c0:	81a3      	strh	r3, [r4, #12]
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	b94b      	cbnz	r3, 80093da <__swsetup_r+0x9a>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093d0:	d003      	beq.n	80093da <__swsetup_r+0x9a>
 80093d2:	4621      	mov	r1, r4
 80093d4:	4630      	mov	r0, r6
 80093d6:	f000 f92b 	bl	8009630 <__smakebuf_r>
 80093da:	89a0      	ldrh	r0, [r4, #12]
 80093dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093e0:	f010 0301 	ands.w	r3, r0, #1
 80093e4:	d00a      	beq.n	80093fc <__swsetup_r+0xbc>
 80093e6:	2300      	movs	r3, #0
 80093e8:	60a3      	str	r3, [r4, #8]
 80093ea:	6963      	ldr	r3, [r4, #20]
 80093ec:	425b      	negs	r3, r3
 80093ee:	61a3      	str	r3, [r4, #24]
 80093f0:	6923      	ldr	r3, [r4, #16]
 80093f2:	b943      	cbnz	r3, 8009406 <__swsetup_r+0xc6>
 80093f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093f8:	d1ba      	bne.n	8009370 <__swsetup_r+0x30>
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	0781      	lsls	r1, r0, #30
 80093fe:	bf58      	it	pl
 8009400:	6963      	ldrpl	r3, [r4, #20]
 8009402:	60a3      	str	r3, [r4, #8]
 8009404:	e7f4      	b.n	80093f0 <__swsetup_r+0xb0>
 8009406:	2000      	movs	r0, #0
 8009408:	e7f7      	b.n	80093fa <__swsetup_r+0xba>
 800940a:	bf00      	nop
 800940c:	20000024 	.word	0x20000024
 8009410:	0800a0b8 	.word	0x0800a0b8
 8009414:	0800a0d8 	.word	0x0800a0d8
 8009418:	0800a098 	.word	0x0800a098

0800941c <_close_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4d06      	ldr	r5, [pc, #24]	; (8009438 <_close_r+0x1c>)
 8009420:	2300      	movs	r3, #0
 8009422:	4604      	mov	r4, r0
 8009424:	4608      	mov	r0, r1
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	f7f7 fe2d 	bl	8001086 <_close>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_close_r+0x1a>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	b103      	cbz	r3, 8009436 <_close_r+0x1a>
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	200137ec 	.word	0x200137ec

0800943c <__sflush_r>:
 800943c:	898a      	ldrh	r2, [r1, #12]
 800943e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009442:	4605      	mov	r5, r0
 8009444:	0710      	lsls	r0, r2, #28
 8009446:	460c      	mov	r4, r1
 8009448:	d458      	bmi.n	80094fc <__sflush_r+0xc0>
 800944a:	684b      	ldr	r3, [r1, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	dc05      	bgt.n	800945c <__sflush_r+0x20>
 8009450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	dc02      	bgt.n	800945c <__sflush_r+0x20>
 8009456:	2000      	movs	r0, #0
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800945e:	2e00      	cmp	r6, #0
 8009460:	d0f9      	beq.n	8009456 <__sflush_r+0x1a>
 8009462:	2300      	movs	r3, #0
 8009464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009468:	682f      	ldr	r7, [r5, #0]
 800946a:	602b      	str	r3, [r5, #0]
 800946c:	d032      	beq.n	80094d4 <__sflush_r+0x98>
 800946e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	075a      	lsls	r2, r3, #29
 8009474:	d505      	bpl.n	8009482 <__sflush_r+0x46>
 8009476:	6863      	ldr	r3, [r4, #4]
 8009478:	1ac0      	subs	r0, r0, r3
 800947a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800947c:	b10b      	cbz	r3, 8009482 <__sflush_r+0x46>
 800947e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009480:	1ac0      	subs	r0, r0, r3
 8009482:	2300      	movs	r3, #0
 8009484:	4602      	mov	r2, r0
 8009486:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009488:	6a21      	ldr	r1, [r4, #32]
 800948a:	4628      	mov	r0, r5
 800948c:	47b0      	blx	r6
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	d106      	bne.n	80094a2 <__sflush_r+0x66>
 8009494:	6829      	ldr	r1, [r5, #0]
 8009496:	291d      	cmp	r1, #29
 8009498:	d82c      	bhi.n	80094f4 <__sflush_r+0xb8>
 800949a:	4a2a      	ldr	r2, [pc, #168]	; (8009544 <__sflush_r+0x108>)
 800949c:	40ca      	lsrs	r2, r1
 800949e:	07d6      	lsls	r6, r2, #31
 80094a0:	d528      	bpl.n	80094f4 <__sflush_r+0xb8>
 80094a2:	2200      	movs	r2, #0
 80094a4:	6062      	str	r2, [r4, #4]
 80094a6:	04d9      	lsls	r1, r3, #19
 80094a8:	6922      	ldr	r2, [r4, #16]
 80094aa:	6022      	str	r2, [r4, #0]
 80094ac:	d504      	bpl.n	80094b8 <__sflush_r+0x7c>
 80094ae:	1c42      	adds	r2, r0, #1
 80094b0:	d101      	bne.n	80094b6 <__sflush_r+0x7a>
 80094b2:	682b      	ldr	r3, [r5, #0]
 80094b4:	b903      	cbnz	r3, 80094b8 <__sflush_r+0x7c>
 80094b6:	6560      	str	r0, [r4, #84]	; 0x54
 80094b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ba:	602f      	str	r7, [r5, #0]
 80094bc:	2900      	cmp	r1, #0
 80094be:	d0ca      	beq.n	8009456 <__sflush_r+0x1a>
 80094c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094c4:	4299      	cmp	r1, r3
 80094c6:	d002      	beq.n	80094ce <__sflush_r+0x92>
 80094c8:	4628      	mov	r0, r5
 80094ca:	f000 f8fd 	bl	80096c8 <_free_r>
 80094ce:	2000      	movs	r0, #0
 80094d0:	6360      	str	r0, [r4, #52]	; 0x34
 80094d2:	e7c1      	b.n	8009458 <__sflush_r+0x1c>
 80094d4:	6a21      	ldr	r1, [r4, #32]
 80094d6:	2301      	movs	r3, #1
 80094d8:	4628      	mov	r0, r5
 80094da:	47b0      	blx	r6
 80094dc:	1c41      	adds	r1, r0, #1
 80094de:	d1c7      	bne.n	8009470 <__sflush_r+0x34>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0c4      	beq.n	8009470 <__sflush_r+0x34>
 80094e6:	2b1d      	cmp	r3, #29
 80094e8:	d001      	beq.n	80094ee <__sflush_r+0xb2>
 80094ea:	2b16      	cmp	r3, #22
 80094ec:	d101      	bne.n	80094f2 <__sflush_r+0xb6>
 80094ee:	602f      	str	r7, [r5, #0]
 80094f0:	e7b1      	b.n	8009456 <__sflush_r+0x1a>
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	e7ad      	b.n	8009458 <__sflush_r+0x1c>
 80094fc:	690f      	ldr	r7, [r1, #16]
 80094fe:	2f00      	cmp	r7, #0
 8009500:	d0a9      	beq.n	8009456 <__sflush_r+0x1a>
 8009502:	0793      	lsls	r3, r2, #30
 8009504:	680e      	ldr	r6, [r1, #0]
 8009506:	bf08      	it	eq
 8009508:	694b      	ldreq	r3, [r1, #20]
 800950a:	600f      	str	r7, [r1, #0]
 800950c:	bf18      	it	ne
 800950e:	2300      	movne	r3, #0
 8009510:	eba6 0807 	sub.w	r8, r6, r7
 8009514:	608b      	str	r3, [r1, #8]
 8009516:	f1b8 0f00 	cmp.w	r8, #0
 800951a:	dd9c      	ble.n	8009456 <__sflush_r+0x1a>
 800951c:	6a21      	ldr	r1, [r4, #32]
 800951e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009520:	4643      	mov	r3, r8
 8009522:	463a      	mov	r2, r7
 8009524:	4628      	mov	r0, r5
 8009526:	47b0      	blx	r6
 8009528:	2800      	cmp	r0, #0
 800952a:	dc06      	bgt.n	800953a <__sflush_r+0xfe>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	f04f 30ff 	mov.w	r0, #4294967295
 8009538:	e78e      	b.n	8009458 <__sflush_r+0x1c>
 800953a:	4407      	add	r7, r0
 800953c:	eba8 0800 	sub.w	r8, r8, r0
 8009540:	e7e9      	b.n	8009516 <__sflush_r+0xda>
 8009542:	bf00      	nop
 8009544:	20400001 	.word	0x20400001

08009548 <_fflush_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	690b      	ldr	r3, [r1, #16]
 800954c:	4605      	mov	r5, r0
 800954e:	460c      	mov	r4, r1
 8009550:	b913      	cbnz	r3, 8009558 <_fflush_r+0x10>
 8009552:	2500      	movs	r5, #0
 8009554:	4628      	mov	r0, r5
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	b118      	cbz	r0, 8009562 <_fflush_r+0x1a>
 800955a:	6983      	ldr	r3, [r0, #24]
 800955c:	b90b      	cbnz	r3, 8009562 <_fflush_r+0x1a>
 800955e:	f7ff fa15 	bl	800898c <__sinit>
 8009562:	4b14      	ldr	r3, [pc, #80]	; (80095b4 <_fflush_r+0x6c>)
 8009564:	429c      	cmp	r4, r3
 8009566:	d11b      	bne.n	80095a0 <_fflush_r+0x58>
 8009568:	686c      	ldr	r4, [r5, #4]
 800956a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0ef      	beq.n	8009552 <_fflush_r+0xa>
 8009572:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009574:	07d0      	lsls	r0, r2, #31
 8009576:	d404      	bmi.n	8009582 <_fflush_r+0x3a>
 8009578:	0599      	lsls	r1, r3, #22
 800957a:	d402      	bmi.n	8009582 <_fflush_r+0x3a>
 800957c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800957e:	f7ff faa3 	bl	8008ac8 <__retarget_lock_acquire_recursive>
 8009582:	4628      	mov	r0, r5
 8009584:	4621      	mov	r1, r4
 8009586:	f7ff ff59 	bl	800943c <__sflush_r>
 800958a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800958c:	07da      	lsls	r2, r3, #31
 800958e:	4605      	mov	r5, r0
 8009590:	d4e0      	bmi.n	8009554 <_fflush_r+0xc>
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	059b      	lsls	r3, r3, #22
 8009596:	d4dd      	bmi.n	8009554 <_fflush_r+0xc>
 8009598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959a:	f7ff fa96 	bl	8008aca <__retarget_lock_release_recursive>
 800959e:	e7d9      	b.n	8009554 <_fflush_r+0xc>
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <_fflush_r+0x70>)
 80095a2:	429c      	cmp	r4, r3
 80095a4:	d101      	bne.n	80095aa <_fflush_r+0x62>
 80095a6:	68ac      	ldr	r4, [r5, #8]
 80095a8:	e7df      	b.n	800956a <_fflush_r+0x22>
 80095aa:	4b04      	ldr	r3, [pc, #16]	; (80095bc <_fflush_r+0x74>)
 80095ac:	429c      	cmp	r4, r3
 80095ae:	bf08      	it	eq
 80095b0:	68ec      	ldreq	r4, [r5, #12]
 80095b2:	e7da      	b.n	800956a <_fflush_r+0x22>
 80095b4:	0800a0b8 	.word	0x0800a0b8
 80095b8:	0800a0d8 	.word	0x0800a0d8
 80095bc:	0800a098 	.word	0x0800a098

080095c0 <_lseek_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	; (80095e0 <_lseek_r+0x20>)
 80095c4:	4604      	mov	r4, r0
 80095c6:	4608      	mov	r0, r1
 80095c8:	4611      	mov	r1, r2
 80095ca:	2200      	movs	r2, #0
 80095cc:	602a      	str	r2, [r5, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f7f7 fd80 	bl	80010d4 <_lseek>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_lseek_r+0x1e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_lseek_r+0x1e>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	200137ec 	.word	0x200137ec

080095e4 <__swhatbuf_r>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	460e      	mov	r6, r1
 80095e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ec:	2900      	cmp	r1, #0
 80095ee:	b096      	sub	sp, #88	; 0x58
 80095f0:	4614      	mov	r4, r2
 80095f2:	461d      	mov	r5, r3
 80095f4:	da08      	bge.n	8009608 <__swhatbuf_r+0x24>
 80095f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	602a      	str	r2, [r5, #0]
 80095fe:	061a      	lsls	r2, r3, #24
 8009600:	d410      	bmi.n	8009624 <__swhatbuf_r+0x40>
 8009602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009606:	e00e      	b.n	8009626 <__swhatbuf_r+0x42>
 8009608:	466a      	mov	r2, sp
 800960a:	f000 f8bb 	bl	8009784 <_fstat_r>
 800960e:	2800      	cmp	r0, #0
 8009610:	dbf1      	blt.n	80095f6 <__swhatbuf_r+0x12>
 8009612:	9a01      	ldr	r2, [sp, #4]
 8009614:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009618:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800961c:	425a      	negs	r2, r3
 800961e:	415a      	adcs	r2, r3
 8009620:	602a      	str	r2, [r5, #0]
 8009622:	e7ee      	b.n	8009602 <__swhatbuf_r+0x1e>
 8009624:	2340      	movs	r3, #64	; 0x40
 8009626:	2000      	movs	r0, #0
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	b016      	add	sp, #88	; 0x58
 800962c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009630 <__smakebuf_r>:
 8009630:	898b      	ldrh	r3, [r1, #12]
 8009632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009634:	079d      	lsls	r5, r3, #30
 8009636:	4606      	mov	r6, r0
 8009638:	460c      	mov	r4, r1
 800963a:	d507      	bpl.n	800964c <__smakebuf_r+0x1c>
 800963c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	6123      	str	r3, [r4, #16]
 8009644:	2301      	movs	r3, #1
 8009646:	6163      	str	r3, [r4, #20]
 8009648:	b002      	add	sp, #8
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	ab01      	add	r3, sp, #4
 800964e:	466a      	mov	r2, sp
 8009650:	f7ff ffc8 	bl	80095e4 <__swhatbuf_r>
 8009654:	9900      	ldr	r1, [sp, #0]
 8009656:	4605      	mov	r5, r0
 8009658:	4630      	mov	r0, r6
 800965a:	f7ff fa57 	bl	8008b0c <_malloc_r>
 800965e:	b948      	cbnz	r0, 8009674 <__smakebuf_r+0x44>
 8009660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009664:	059a      	lsls	r2, r3, #22
 8009666:	d4ef      	bmi.n	8009648 <__smakebuf_r+0x18>
 8009668:	f023 0303 	bic.w	r3, r3, #3
 800966c:	f043 0302 	orr.w	r3, r3, #2
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	e7e3      	b.n	800963c <__smakebuf_r+0xc>
 8009674:	4b0d      	ldr	r3, [pc, #52]	; (80096ac <__smakebuf_r+0x7c>)
 8009676:	62b3      	str	r3, [r6, #40]	; 0x28
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	6020      	str	r0, [r4, #0]
 800967c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009680:	81a3      	strh	r3, [r4, #12]
 8009682:	9b00      	ldr	r3, [sp, #0]
 8009684:	6163      	str	r3, [r4, #20]
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	6120      	str	r0, [r4, #16]
 800968a:	b15b      	cbz	r3, 80096a4 <__smakebuf_r+0x74>
 800968c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009690:	4630      	mov	r0, r6
 8009692:	f000 f889 	bl	80097a8 <_isatty_r>
 8009696:	b128      	cbz	r0, 80096a4 <__smakebuf_r+0x74>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f023 0303 	bic.w	r3, r3, #3
 800969e:	f043 0301 	orr.w	r3, r3, #1
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	89a0      	ldrh	r0, [r4, #12]
 80096a6:	4305      	orrs	r5, r0
 80096a8:	81a5      	strh	r5, [r4, #12]
 80096aa:	e7cd      	b.n	8009648 <__smakebuf_r+0x18>
 80096ac:	08008925 	.word	0x08008925

080096b0 <__malloc_lock>:
 80096b0:	4801      	ldr	r0, [pc, #4]	; (80096b8 <__malloc_lock+0x8>)
 80096b2:	f7ff ba09 	b.w	8008ac8 <__retarget_lock_acquire_recursive>
 80096b6:	bf00      	nop
 80096b8:	200137e0 	.word	0x200137e0

080096bc <__malloc_unlock>:
 80096bc:	4801      	ldr	r0, [pc, #4]	; (80096c4 <__malloc_unlock+0x8>)
 80096be:	f7ff ba04 	b.w	8008aca <__retarget_lock_release_recursive>
 80096c2:	bf00      	nop
 80096c4:	200137e0 	.word	0x200137e0

080096c8 <_free_r>:
 80096c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ca:	2900      	cmp	r1, #0
 80096cc:	d044      	beq.n	8009758 <_free_r+0x90>
 80096ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096d2:	9001      	str	r0, [sp, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f1a1 0404 	sub.w	r4, r1, #4
 80096da:	bfb8      	it	lt
 80096dc:	18e4      	addlt	r4, r4, r3
 80096de:	f7ff ffe7 	bl	80096b0 <__malloc_lock>
 80096e2:	4a1e      	ldr	r2, [pc, #120]	; (800975c <_free_r+0x94>)
 80096e4:	9801      	ldr	r0, [sp, #4]
 80096e6:	6813      	ldr	r3, [r2, #0]
 80096e8:	b933      	cbnz	r3, 80096f8 <_free_r+0x30>
 80096ea:	6063      	str	r3, [r4, #4]
 80096ec:	6014      	str	r4, [r2, #0]
 80096ee:	b003      	add	sp, #12
 80096f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096f4:	f7ff bfe2 	b.w	80096bc <__malloc_unlock>
 80096f8:	42a3      	cmp	r3, r4
 80096fa:	d908      	bls.n	800970e <_free_r+0x46>
 80096fc:	6825      	ldr	r5, [r4, #0]
 80096fe:	1961      	adds	r1, r4, r5
 8009700:	428b      	cmp	r3, r1
 8009702:	bf01      	itttt	eq
 8009704:	6819      	ldreq	r1, [r3, #0]
 8009706:	685b      	ldreq	r3, [r3, #4]
 8009708:	1949      	addeq	r1, r1, r5
 800970a:	6021      	streq	r1, [r4, #0]
 800970c:	e7ed      	b.n	80096ea <_free_r+0x22>
 800970e:	461a      	mov	r2, r3
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	b10b      	cbz	r3, 8009718 <_free_r+0x50>
 8009714:	42a3      	cmp	r3, r4
 8009716:	d9fa      	bls.n	800970e <_free_r+0x46>
 8009718:	6811      	ldr	r1, [r2, #0]
 800971a:	1855      	adds	r5, r2, r1
 800971c:	42a5      	cmp	r5, r4
 800971e:	d10b      	bne.n	8009738 <_free_r+0x70>
 8009720:	6824      	ldr	r4, [r4, #0]
 8009722:	4421      	add	r1, r4
 8009724:	1854      	adds	r4, r2, r1
 8009726:	42a3      	cmp	r3, r4
 8009728:	6011      	str	r1, [r2, #0]
 800972a:	d1e0      	bne.n	80096ee <_free_r+0x26>
 800972c:	681c      	ldr	r4, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	6053      	str	r3, [r2, #4]
 8009732:	4421      	add	r1, r4
 8009734:	6011      	str	r1, [r2, #0]
 8009736:	e7da      	b.n	80096ee <_free_r+0x26>
 8009738:	d902      	bls.n	8009740 <_free_r+0x78>
 800973a:	230c      	movs	r3, #12
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	e7d6      	b.n	80096ee <_free_r+0x26>
 8009740:	6825      	ldr	r5, [r4, #0]
 8009742:	1961      	adds	r1, r4, r5
 8009744:	428b      	cmp	r3, r1
 8009746:	bf04      	itt	eq
 8009748:	6819      	ldreq	r1, [r3, #0]
 800974a:	685b      	ldreq	r3, [r3, #4]
 800974c:	6063      	str	r3, [r4, #4]
 800974e:	bf04      	itt	eq
 8009750:	1949      	addeq	r1, r1, r5
 8009752:	6021      	streq	r1, [r4, #0]
 8009754:	6054      	str	r4, [r2, #4]
 8009756:	e7ca      	b.n	80096ee <_free_r+0x26>
 8009758:	b003      	add	sp, #12
 800975a:	bd30      	pop	{r4, r5, pc}
 800975c:	200137e4 	.word	0x200137e4

08009760 <_read_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d07      	ldr	r5, [pc, #28]	; (8009780 <_read_r+0x20>)
 8009764:	4604      	mov	r4, r0
 8009766:	4608      	mov	r0, r1
 8009768:	4611      	mov	r1, r2
 800976a:	2200      	movs	r2, #0
 800976c:	602a      	str	r2, [r5, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	f7f7 fc50 	bl	8001014 <_read>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_read_r+0x1e>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_read_r+0x1e>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	200137ec 	.word	0x200137ec

08009784 <_fstat_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	4d07      	ldr	r5, [pc, #28]	; (80097a4 <_fstat_r+0x20>)
 8009788:	2300      	movs	r3, #0
 800978a:	4604      	mov	r4, r0
 800978c:	4608      	mov	r0, r1
 800978e:	4611      	mov	r1, r2
 8009790:	602b      	str	r3, [r5, #0]
 8009792:	f7f7 fc84 	bl	800109e <_fstat>
 8009796:	1c43      	adds	r3, r0, #1
 8009798:	d102      	bne.n	80097a0 <_fstat_r+0x1c>
 800979a:	682b      	ldr	r3, [r5, #0]
 800979c:	b103      	cbz	r3, 80097a0 <_fstat_r+0x1c>
 800979e:	6023      	str	r3, [r4, #0]
 80097a0:	bd38      	pop	{r3, r4, r5, pc}
 80097a2:	bf00      	nop
 80097a4:	200137ec 	.word	0x200137ec

080097a8 <_isatty_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	4d06      	ldr	r5, [pc, #24]	; (80097c4 <_isatty_r+0x1c>)
 80097ac:	2300      	movs	r3, #0
 80097ae:	4604      	mov	r4, r0
 80097b0:	4608      	mov	r0, r1
 80097b2:	602b      	str	r3, [r5, #0]
 80097b4:	f7f7 fc83 	bl	80010be <_isatty>
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	d102      	bne.n	80097c2 <_isatty_r+0x1a>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	b103      	cbz	r3, 80097c2 <_isatty_r+0x1a>
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
 80097c4:	200137ec 	.word	0x200137ec

080097c8 <_init>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	bf00      	nop
 80097cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ce:	bc08      	pop	{r3}
 80097d0:	469e      	mov	lr, r3
 80097d2:	4770      	bx	lr

080097d4 <_fini>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	bf00      	nop
 80097d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097da:	bc08      	pop	{r3}
 80097dc:	469e      	mov	lr, r3
 80097de:	4770      	bx	lr
=======
08005960 <_fini>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	bf00      	nop
 8005964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	469e      	mov	lr, r3
 800596a:	4770      	bx	lr
>>>>>>> master
>>>>>>> master
=======
08005a10 <_init>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr

08005a1c <_fini>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr
>>>>>>> Feature_Parser2
