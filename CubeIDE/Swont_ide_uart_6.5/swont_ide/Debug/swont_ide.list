
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a0  080051a0  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a8  080051a8  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080051b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013250  200000e4  08005294  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013334  08005294  00023334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dee9  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002690  00000000  00000000  0002dffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00030690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  000313b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232ab  00000000  00000000  00031f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001109e  00000000  00000000  00055243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cab7c  00000000  00000000  000662e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e4  00000000  00000000  00130eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e4 	.word	0x200000e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f20 	.word	0x08004f20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e8 	.word	0x200000e8
 80001c4:	08004f20 	.word	0x08004f20

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f0:	f000 b974 	b.w	80004dc <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468e      	mov	lr, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14d      	bne.n	80002b6 <__udivmoddi4+0xaa>
 800021a:	428a      	cmp	r2, r1
 800021c:	4694      	mov	ip, r2
 800021e:	d969      	bls.n	80002f4 <__udivmoddi4+0xe8>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b152      	cbz	r2, 800023c <__udivmoddi4+0x30>
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	f1c2 0120 	rsb	r1, r2, #32
 800022e:	fa20 f101 	lsr.w	r1, r0, r1
 8000232:	fa0c fc02 	lsl.w	ip, ip, r2
 8000236:	ea41 0e03 	orr.w	lr, r1, r3
 800023a:	4094      	lsls	r4, r2
 800023c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000240:	0c21      	lsrs	r1, r4, #16
 8000242:	fbbe f6f8 	udiv	r6, lr, r8
 8000246:	fa1f f78c 	uxth.w	r7, ip
 800024a:	fb08 e316 	mls	r3, r8, r6, lr
 800024e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000252:	fb06 f107 	mul.w	r1, r6, r7
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 811f 	bcs.w	80004a4 <__udivmoddi4+0x298>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 811c 	bls.w	80004a4 <__udivmoddi4+0x298>
 800026c:	3e02      	subs	r6, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x92>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000290:	f080 810a 	bcs.w	80004a8 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8107 	bls.w	80004a8 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a2:	1be4      	subs	r4, r4, r7
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa4>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xc2>
 80002ba:	2d00      	cmp	r5, #0
 80002bc:	f000 80ef 	beq.w	800049e <__udivmoddi4+0x292>
 80002c0:	2600      	movs	r6, #0
 80002c2:	e9c5 0100 	strd	r0, r1, [r5]
 80002c6:	4630      	mov	r0, r6
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f683 	clz	r6, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d14a      	bne.n	800036c <__udivmoddi4+0x160>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd4>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80f9 	bhi.w	80004d2 <__udivmoddi4+0x2c6>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	469e      	mov	lr, r3
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa4>
 80002ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa4>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xec>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 8092 	bne.w	8000426 <__udivmoddi4+0x21a>
 8000302:	eba1 010c 	sub.w	r1, r1, ip
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2601      	movs	r6, #1
 8000310:	0c20      	lsrs	r0, r4, #16
 8000312:	fbb1 f3f7 	udiv	r3, r1, r7
 8000316:	fb07 1113 	mls	r1, r7, r3, r1
 800031a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031e:	fb0e f003 	mul.w	r0, lr, r3
 8000322:	4288      	cmp	r0, r1
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x12c>
 8000326:	eb1c 0101 	adds.w	r1, ip, r1
 800032a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x12a>
 8000330:	4288      	cmp	r0, r1
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2c0>
 8000336:	4643      	mov	r3, r8
 8000338:	1a09      	subs	r1, r1, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000340:	fb07 1110 	mls	r1, r7, r0, r1
 8000344:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x156>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x154>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2ca>
 8000360:	4608      	mov	r0, r1
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036a:	e79c      	b.n	80002a6 <__udivmoddi4+0x9a>
 800036c:	f1c6 0720 	rsb	r7, r6, #32
 8000370:	40b3      	lsls	r3, r6
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa20 f407 	lsr.w	r4, r0, r7
 800037e:	fa01 f306 	lsl.w	r3, r1, r6
 8000382:	431c      	orrs	r4, r3
 8000384:	40f9      	lsrs	r1, r7
 8000386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038a:	fa00 f306 	lsl.w	r3, r0, r6
 800038e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000392:	0c20      	lsrs	r0, r4, #16
 8000394:	fa1f fe8c 	uxth.w	lr, ip
 8000398:	fb09 1118 	mls	r1, r9, r8, r1
 800039c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a0:	fb08 f00e 	mul.w	r0, r8, lr
 80003a4:	4288      	cmp	r0, r1
 80003a6:	fa02 f206 	lsl.w	r2, r2, r6
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b8>
 80003ac:	eb1c 0101 	adds.w	r1, ip, r1
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2bc>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2bc>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4461      	add	r1, ip
 80003c4:	1a09      	subs	r1, r1, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003cc:	fb09 1110 	mls	r1, r9, r0, r1
 80003d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d8:	458e      	cmp	lr, r1
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1e2>
 80003dc:	eb1c 0101 	adds.w	r1, ip, r1
 80003e0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2b4>
 80003e6:	458e      	cmp	lr, r1
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2b4>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4461      	add	r1, ip
 80003ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f2:	fba0 9402 	umull	r9, r4, r0, r2
 80003f6:	eba1 010e 	sub.w	r1, r1, lr
 80003fa:	42a1      	cmp	r1, r4
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46a6      	mov	lr, r4
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x2a4>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x2a0>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x212>
 8000406:	ebb3 0208 	subs.w	r2, r3, r8
 800040a:	eb61 010e 	sbc.w	r1, r1, lr
 800040e:	fa01 f707 	lsl.w	r7, r1, r7
 8000412:	fa22 f306 	lsr.w	r3, r2, r6
 8000416:	40f1      	lsrs	r1, r6
 8000418:	431f      	orrs	r7, r3
 800041a:	e9c5 7100 	strd	r7, r1, [r5]
 800041e:	2600      	movs	r6, #0
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	f1c2 0320 	rsb	r3, r2, #32
 800042a:	40d8      	lsrs	r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa21 f303 	lsr.w	r3, r1, r3
 8000434:	4091      	lsls	r1, r2
 8000436:	4301      	orrs	r1, r0
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb3 f0f7 	udiv	r0, r3, r7
 8000444:	fb07 3610 	mls	r6, r7, r0, r3
 8000448:	0c0b      	lsrs	r3, r1, #16
 800044a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044e:	fb00 f60e 	mul.w	r6, r0, lr
 8000452:	429e      	cmp	r6, r3
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x260>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b8>
 8000464:	429e      	cmp	r6, r3
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b8>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1b9b      	subs	r3, r3, r6
 800046e:	b289      	uxth	r1, r1
 8000470:	fbb3 f6f7 	udiv	r6, r3, r7
 8000474:	fb07 3316 	mls	r3, r7, r6, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb06 f30e 	mul.w	r3, r6, lr
 8000480:	428b      	cmp	r3, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x28a>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800048e:	428b      	cmp	r3, r1
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000492:	3e02      	subs	r6, #2
 8000494:	4461      	add	r1, ip
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0x104>
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e705      	b.n	80002b0 <__udivmoddi4+0xa4>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e3      	b.n	8000270 <__udivmoddi4+0x64>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6f8      	b.n	800029e <__udivmoddi4+0x92>
 80004ac:	454b      	cmp	r3, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f8>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f8>
 80004bc:	4646      	mov	r6, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x28a>
 80004c0:	4620      	mov	r0, r4
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1e2>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x260>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b8>
 80004cc:	3b02      	subs	r3, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x12c>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e709      	b.n	80002ea <__udivmoddi4+0xde>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x156>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <RecieveCommandLijn>:
 * the buffer
 *
 * @param commandArray
 * @param inputStruct
 */
void RecieveCommandLijn(CmdStruct CmdBuf, input_vars inputStruct) {
 80004e0:	b084      	sub	sp, #16
 80004e2:	b590      	push	{r4, r7, lr}
 80004e4:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
 80004e8:	f44f 6703 	mov.w	r7, #2096	; 0x830
 80004ec:	446f      	add	r7, sp
 80004ee:	f107 0418 	add.w	r4, r7, #24
 80004f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t neededArg = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 7; i++) {
 80004fa:	2300      	movs	r3, #0
 80004fc:	71fb      	strb	r3, [r7, #7]
 80004fe:	e047      	b.n	8000590 <RecieveCommandLijn+0xb0>
		neededArg = i + 1;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	3301      	adds	r3, #1
 8000504:	71bb      	strb	r3, [r7, #6]
		if (i == 4) {
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b04      	cmp	r3, #4
 800050a:	d11f      	bne.n	800054c <RecieveCommandLijn+0x6c>
			ParseOnKomma(inputStruct, neededArg, 0, 1, CmdBuf);
 800050c:	79bc      	ldrb	r4, [r7, #6]
 800050e:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000512:	f107 0118 	add.w	r1, r7, #24
 8000516:	f240 421c 	movw	r2, #1052	; 0x41c
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fc5e 	bl	8004ddc <memcpy>
 8000520:	2301      	movs	r3, #1
 8000522:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000526:	2300      	movs	r3, #0
 8000528:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 800052c:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000530:	4668      	mov	r0, sp
 8000532:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8000536:	f240 4204 	movw	r2, #1028	; 0x404
 800053a:	4619      	mov	r1, r3
 800053c:	f004 fc4e 	bl	8004ddc <memcpy>
 8000540:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8000544:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000546:	f000 f995 	bl	8000874 <ParseOnKomma>
 800054a:	e01e      	b.n	800058a <RecieveCommandLijn+0xaa>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 800054c:	79bc      	ldrb	r4, [r7, #6]
 800054e:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000552:	f107 0118 	add.w	r1, r7, #24
 8000556:	f240 421c 	movw	r2, #1052	; 0x41c
 800055a:	4618      	mov	r0, r3
 800055c:	f004 fc3e 	bl	8004ddc <memcpy>
 8000560:	2300      	movs	r3, #0
 8000562:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000566:	2301      	movs	r3, #1
 8000568:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 800056c:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000570:	4668      	mov	r0, sp
 8000572:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8000576:	f240 4204 	movw	r2, #1028	; 0x404
 800057a:	4619      	mov	r1, r3
 800057c:	f004 fc2e 	bl	8004ddc <memcpy>
 8000580:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8000584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000586:	f000 f975 	bl	8000874 <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	3301      	adds	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b06      	cmp	r3, #6
 8000594:	d9b4      	bls.n	8000500 <RecieveCommandLijn+0x20>
		}
	}
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80005a2:	b004      	add	sp, #16
 80005a4:	4770      	bx	lr

080005a6 <RecieveCommandClear>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
void RecieveCommandClear(CmdStruct CmdBuf, input_vars inputStruct) {
 80005a6:	b084      	sub	sp, #16
 80005a8:	b580      	push	{r7, lr}
 80005aa:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 80005ae:	f44f 6703 	mov.w	r7, #2096	; 0x830
 80005b2:	446f      	add	r7, sp
 80005b4:	f107 0c08 	add.w	ip, r7, #8
 80005b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 0, 1, CmdBuf);
 80005bc:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 80005c0:	f107 0108 	add.w	r1, r7, #8
 80005c4:	f240 421c 	movw	r2, #1052	; 0x41c
 80005c8:	4618      	mov	r0, r3
 80005ca:	f004 fc07 	bl	8004ddc <memcpy>
 80005ce:	2301      	movs	r3, #1
 80005d0:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 80005da:	2301      	movs	r3, #1
 80005dc:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 80005e0:	4668      	mov	r0, sp
 80005e2:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80005e6:	f240 4204 	movw	r2, #1028	; 0x404
 80005ea:	4619      	mov	r1, r3
 80005ec:	f004 fbf6 	bl	8004ddc <memcpy>
 80005f0:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	f000 f93d 	bl	8000874 <ParseOnKomma>
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000602:	b004      	add	sp, #16
 8000604:	4770      	bx	lr

08000606 <RecieveCommandRechthoek>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
void RecieveCommandRechthoek(CmdStruct CmdBuf, input_vars inputStruct) {
 8000606:	b084      	sub	sp, #16
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
 800060e:	f44f 6703 	mov.w	r7, #2096	; 0x830
 8000612:	446f      	add	r7, sp
 8000614:	f107 0418 	add.w	r4, r7, #24
 8000618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t neededArg = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 7; i++) {
 8000620:	2300      	movs	r3, #0
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	e047      	b.n	80006b6 <RecieveCommandRechthoek+0xb0>
		neededArg = i + 1;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	71bb      	strb	r3, [r7, #6]
		if (i == 4) {
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b04      	cmp	r3, #4
 8000630:	d11f      	bne.n	8000672 <RecieveCommandRechthoek+0x6c>
			ParseOnKomma(inputStruct, neededArg, 0, 1, CmdBuf);
 8000632:	79bc      	ldrb	r4, [r7, #6]
 8000634:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000638:	f107 0118 	add.w	r1, r7, #24
 800063c:	f240 421c 	movw	r2, #1052	; 0x41c
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fbcb 	bl	8004ddc <memcpy>
 8000646:	2301      	movs	r3, #1
 8000648:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 800064c:	2300      	movs	r3, #0
 800064e:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000652:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000656:	4668      	mov	r0, sp
 8000658:	f207 4344 	addw	r3, r7, #1092	; 0x444
 800065c:	f240 4204 	movw	r2, #1028	; 0x404
 8000660:	4619      	mov	r1, r3
 8000662:	f004 fbbb 	bl	8004ddc <memcpy>
 8000666:	f207 4334 	addw	r3, r7, #1076	; 0x434
 800066a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800066c:	f000 f902 	bl	8000874 <ParseOnKomma>
 8000670:	e01e      	b.n	80006b0 <RecieveCommandRechthoek+0xaa>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 8000672:	79bc      	ldrb	r4, [r7, #6]
 8000674:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000678:	f107 0118 	add.w	r1, r7, #24
 800067c:	f240 421c 	movw	r2, #1052	; 0x41c
 8000680:	4618      	mov	r0, r3
 8000682:	f004 fbab 	bl	8004ddc <memcpy>
 8000686:	2300      	movs	r3, #0
 8000688:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 800068c:	2301      	movs	r3, #1
 800068e:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000692:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000696:	4668      	mov	r0, sp
 8000698:	f207 4344 	addw	r3, r7, #1092	; 0x444
 800069c:	f240 4204 	movw	r2, #1028	; 0x404
 80006a0:	4619      	mov	r1, r3
 80006a2:	f004 fb9b 	bl	8004ddc <memcpy>
 80006a6:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80006aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ac:	f000 f8e2 	bl	8000874 <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	3301      	adds	r3, #1
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d9b4      	bls.n	8000626 <RecieveCommandRechthoek+0x20>
		}
	}
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006c8:	b004      	add	sp, #16
 80006ca:	4770      	bx	lr

080006cc <RecieveCommandTekst>:

void RecieveCommandTekst(CmdStruct CmdBuf, input_vars inputStruct) {}
 80006cc:	b084      	sub	sp, #16
 80006ce:	b490      	push	{r4, r7}
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	f107 0408 	add.w	r4, r7, #8
 80006d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc90      	pop	{r4, r7}
 80006e0:	b004      	add	sp, #16
 80006e2:	4770      	bx	lr

080006e4 <RecieveCommandBitmap>:

void RecieveCommandBitmap(CmdStruct CmdBuf, input_vars inputStruct) {
 80006e4:	b084      	sub	sp, #16
 80006e6:	b590      	push	{r4, r7, lr}
 80006e8:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
 80006ec:	f44f 6703 	mov.w	r7, #2096	; 0x830
 80006f0:	446f      	add	r7, sp
 80006f2:	f107 0418 	add.w	r4, r7, #24
 80006f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t neededArg = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 3; i++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	e024      	b.n	800074e <RecieveCommandBitmap+0x6a>
		neededArg = i + 1;
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	3301      	adds	r3, #1
 8000708:	71bb      	strb	r3, [r7, #6]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 800070a:	79bc      	ldrb	r4, [r7, #6]
 800070c:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000710:	f107 0118 	add.w	r1, r7, #24
 8000714:	f240 421c 	movw	r2, #1052	; 0x41c
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fb5f 	bl	8004ddc <memcpy>
 800071e:	2300      	movs	r3, #0
 8000720:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000724:	2301      	movs	r3, #1
 8000726:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 800072a:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 800072e:	4668      	mov	r0, sp
 8000730:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8000734:	f240 4204 	movw	r2, #1028	; 0x404
 8000738:	4619      	mov	r1, r3
 800073a:	f004 fb4f 	bl	8004ddc <memcpy>
 800073e:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8000742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000744:	f000 f896 	bl	8000874 <ParseOnKomma>
	for (uint8_t i = 0; i < 3; i++) {
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3301      	adds	r3, #1
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d9d7      	bls.n	8000704 <RecieveCommandBitmap+0x20>
	}
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000760:	b004      	add	sp, #16
 8000762:	4770      	bx	lr

08000764 <RecieveCommandWacht>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
void RecieveCommandWacht(CmdStruct CmdBuf, input_vars inputStruct) {
 8000764:	b084      	sub	sp, #16
 8000766:	b580      	push	{r7, lr}
 8000768:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 800076c:	f44f 6703 	mov.w	r7, #2096	; 0x830
 8000770:	446f      	add	r7, sp
 8000772:	f107 0c08 	add.w	ip, r7, #8
 8000776:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 1, 0, CmdBuf);
 800077a:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 800077e:	f107 0108 	add.w	r1, r7, #8
 8000782:	f240 421c 	movw	r2, #1052	; 0x41c
 8000786:	4618      	mov	r0, r3
 8000788:	f004 fb28 	bl	8004ddc <memcpy>
 800078c:	2300      	movs	r3, #0
 800078e:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000792:	2301      	movs	r3, #1
 8000794:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000798:	2301      	movs	r3, #1
 800079a:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 800079e:	4668      	mov	r0, sp
 80007a0:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80007a4:	f240 4204 	movw	r2, #1028	; 0x404
 80007a8:	4619      	mov	r1, r3
 80007aa:	f004 fb17 	bl	8004ddc <memcpy>
 80007ae:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80007b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b4:	f000 f85e 	bl	8000874 <ParseOnKomma>
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007c0:	b004      	add	sp, #16
 80007c2:	4770      	bx	lr

080007c4 <RecieveCommandHerhaal>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
void RecieveCommandHerhaal(CmdStruct CmdBuf, input_vars inputStruct) {
 80007c4:	b084      	sub	sp, #16
 80007c6:	b590      	push	{r4, r7, lr}
 80007c8:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
 80007cc:	f44f 6703 	mov.w	r7, #2096	; 0x830
 80007d0:	446f      	add	r7, sp
 80007d2:	f107 0418 	add.w	r4, r7, #24
 80007d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t neededArg = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 2; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	e024      	b.n	800082e <RecieveCommandHerhaal+0x6a>
		neededArg = i + 1;
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	3301      	adds	r3, #1
 80007e8:	71bb      	strb	r3, [r7, #6]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 80007ea:	79bc      	ldrb	r4, [r7, #6]
 80007ec:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 80007f0:	f107 0118 	add.w	r1, r7, #24
 80007f4:	f240 421c 	movw	r2, #1052	; 0x41c
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 faef 	bl	8004ddc <memcpy>
 80007fe:	2300      	movs	r3, #0
 8000800:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000804:	2301      	movs	r3, #1
 8000806:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 800080a:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 800080e:	4668      	mov	r0, sp
 8000810:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8000814:	f240 4204 	movw	r2, #1028	; 0x404
 8000818:	4619      	mov	r1, r3
 800081a:	f004 fadf 	bl	8004ddc <memcpy>
 800081e:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8000822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000824:	f000 f826 	bl	8000874 <ParseOnKomma>
	for (uint8_t i = 0; i < 2; i++) {
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	3301      	adds	r3, #1
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d9d7      	bls.n	80007e4 <RecieveCommandHerhaal+0x20>
	}
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <RecieveCommandFiguur>:

void RecieveCommandFiguur(CmdStruct CmdBuf, input_vars inputStruct) {}
 8000844:	b084      	sub	sp, #16
 8000846:	b490      	push	{r4, r7}
 8000848:	af00      	add	r7, sp, #0
 800084a:	f107 0408 	add.w	r4, r7, #8
 800084e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc90      	pop	{r4, r7}
 8000858:	b004      	add	sp, #16
 800085a:	4770      	bx	lr

0800085c <RecieveCommandCirkel>:

void RecieveCommandCirkel(CmdStruct CmdBuf, input_vars inputStruct) {}
 800085c:	b084      	sub	sp, #16
 800085e:	b490      	push	{r4, r7}
 8000860:	af00      	add	r7, sp, #0
 8000862:	f107 0408 	add.w	r4, r7, #8
 8000866:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc90      	pop	{r4, r7}
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <ParseOnKomma>:
 * @param convertColor
 * @param commandArray
 */
void ParseOnKomma(input_vars inputStruct, uint8_t neededArgument,
				  uint8_t convertToNumber, int convertColor,
				  CmdStruct CmdBuf) {
 8000874:	b084      	sub	sp, #16
 8000876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800087a:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 800087e:	f640 0728 	movw	r7, #2088	; 0x828
 8000882:	446f      	add	r7, sp
 8000884:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8000888:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800088c:	466b      	mov	r3, sp
 800088e:	469a      	mov	sl, r3
	uint8_t commaCounter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	73bb      	strb	r3, [r7, #14]
	uint8_t placeInBuf = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
	char incommingMessage[inputStruct.msglen];
 8000898:	f8d7 6434 	ldr.w	r6, [r7, #1076]	; 0x434
 800089c:	1e73      	subs	r3, r6, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	4632      	mov	r2, r6
 80008a2:	2300      	movs	r3, #0
 80008a4:	4690      	mov	r8, r2
 80008a6:	4699      	mov	r9, r3
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008bc:	4632      	mov	r2, r6
 80008be:	2300      	movs	r3, #0
 80008c0:	4614      	mov	r4, r2
 80008c2:	461d      	mov	r5, r3
 80008c4:	f04f 0200 	mov.w	r2, #0
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	00eb      	lsls	r3, r5, #3
 80008ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008d2:	00e2      	lsls	r2, r4, #3
 80008d4:	4633      	mov	r3, r6
 80008d6:	3307      	adds	r3, #7
 80008d8:	08db      	lsrs	r3, r3, #3
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	ebad 0d03 	sub.w	sp, sp, r3
 80008e0:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 80008e4:	3300      	adds	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	e0b4      	b.n	8000a58 <ParseOnKomma+0x1e4>
		if (inputStruct.line_rx_buffer[j] == ',') {
 80008ee:	f107 0231 	add.w	r2, r7, #49	; 0x31
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b2c      	cmp	r3, #44	; 0x2c
 80008fa:	d155      	bne.n	80009a8 <ParseOnKomma+0x134>
			incommingMessage[j] = 0;
 80008fc:	683a      	ldr	r2, [r7, #0]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	4413      	add	r3, r2
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
			placeInBuf = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageParse, sizeof(debugMessageParse), &huart2);
#endif
			if (commaCounter == neededArgument) {
 800090a:	7bba      	ldrb	r2, [r7, #14]
 800090c:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000910:	429a      	cmp	r2, r3
 8000912:	d140      	bne.n	8000996 <ParseOnKomma+0x122>
				if (!commaCounter)
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d116      	bne.n	8000948 <ParseOnKomma+0xd4>
					CheckWhatCommand(incommingMessage, CmdBuf,
 800091a:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 800091e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000922:	f240 4214 	movw	r2, #1044	; 0x414
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fa58 	bl	8004ddc <memcpy>
 800092c:	4668      	mov	r0, sp
 800092e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8000932:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8000936:	4619      	mov	r1, r3
 8000938:	f004 fa50 	bl	8004ddc <memcpy>
 800093c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8000940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f000 f89a 	bl	8000a7c <CheckWhatCommand>
									 inputStruct);
				if (convertColor)
 8000948:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800094c:	2b00      	cmp	r3, #0
 800094e:	d011      	beq.n	8000974 <ParseOnKomma+0x100>
					CheckWhatColor(incommingMessage, CmdBuf,
 8000950:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000954:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000958:	4668      	mov	r0, sp
 800095a:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800095e:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8000962:	4619      	mov	r1, r3
 8000964:	f004 fa3a 	bl	8004ddc <memcpy>
 8000968:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800096c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800096e:	6838      	ldr	r0, [r7, #0]
 8000970:	f000 f8c6 	bl	8000b00 <CheckWhatColor>
								   neededArgument);
				if (convertToNumber)
 8000974:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000978:	2b00      	cmp	r3, #0
 800097a:	d074      	beq.n	8000a66 <ParseOnKomma+0x1f2>
					CmdBuf.argBuf[neededArgument] = atoi(incommingMessage);
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f004 f9ff 	bl	8004d80 <atoi>
 8000982:	4602      	mov	r2, r0
 8000984:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000988:	b292      	uxth	r2, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	3330      	adds	r3, #48	; 0x30
 800098e:	443b      	add	r3, r7
 8000990:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
				break;
 8000994:	e067      	b.n	8000a66 <ParseOnKomma+0x1f2>
			}
			commaCounter++;
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	3301      	adds	r3, #1
 800099a:	73bb      	strb	r3, [r7, #14]
			// set the array to 0 again to fill with the argument
			memset(incommingMessage, 0, sizeof(incommingMessage));
 800099c:	4633      	mov	r3, r6
 800099e:	461a      	mov	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	6838      	ldr	r0, [r7, #0]
 80009a4:	f004 fa28 	bl	8004df8 <memset>
		}
		if (j == inputStruct.msglen) {
 80009a8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d136      	bne.n	8000a20 <ParseOnKomma+0x1ac>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	f107 0131 	add.w	r1, r7, #49	; 0x31
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	440a      	add	r2, r1
 80009bc:	7811      	ldrb	r1, [r2, #0]
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	3301      	adds	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
			if (commaCounter == neededArgument) {
 80009c8:	7bba      	ldrb	r2, [r7, #14]
 80009ca:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d14b      	bne.n	8000a6a <ParseOnKomma+0x1f6>
				if (convertColor)
 80009d2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d011      	beq.n	80009fe <ParseOnKomma+0x18a>
					CheckWhatColor(incommingMessage, CmdBuf,
 80009da:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 80009de:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 80009e2:	4668      	mov	r0, sp
 80009e4:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80009e8:	f44f 6282 	mov.w	r2, #1040	; 0x410
 80009ec:	4619      	mov	r1, r3
 80009ee:	f004 f9f5 	bl	8004ddc <memcpy>
 80009f2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80009f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009f8:	6838      	ldr	r0, [r7, #0]
 80009fa:	f000 f881 	bl	8000b00 <CheckWhatColor>
								   neededArgument);
				if (convertToNumber)
 80009fe:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d031      	beq.n	8000a6a <ParseOnKomma+0x1f6>
					CmdBuf.argBuf[neededArgument] = atoi(incommingMessage);
 8000a06:	6838      	ldr	r0, [r7, #0]
 8000a08:	f004 f9ba 	bl	8004d80 <atoi>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000a12:	b292      	uxth	r2, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	3330      	adds	r3, #48	; 0x30
 8000a18:	443b      	add	r3, r7
 8000a1a:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
			}
			break;
 8000a1e:	e024      	b.n	8000a6a <ParseOnKomma+0x1f6>
		}
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000a20:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4413      	add	r3, r2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d011      	beq.n	8000a52 <ParseOnKomma+0x1de>
			inputStruct.line_rx_buffer[j] != ',') {
 8000a2e:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000a38:	2b2c      	cmp	r3, #44	; 0x2c
 8000a3a:	d00a      	beq.n	8000a52 <ParseOnKomma+0x1de>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	440a      	add	r2, r1
 8000a46:	7811      	ldrb	r1, [r2, #0]
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	73fb      	strb	r3, [r7, #15]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	f77f af45 	ble.w	80008ee <ParseOnKomma+0x7a>
 8000a64:	e002      	b.n	8000a6c <ParseOnKomma+0x1f8>
				break;
 8000a66:	bf00      	nop
 8000a68:	e000      	b.n	8000a6c <ParseOnKomma+0x1f8>
			break;
 8000a6a:	bf00      	nop
 8000a6c:	46d5      	mov	sp, sl
		}
	}
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <CheckWhatCommand>:
 * @param incommingCommand
 * @param commandArray
 * @param inputStruct
 */
void CheckWhatCommand(char incommingCommand[], CmdStruct CmdBuf,
					  input_vars inputStruct) {
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 8000a84:	f44f 6702 	mov.w	r7, #2080	; 0x820
 8000a88:	446f      	add	r7, sp
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	f107 001c 	add.w	r0, r7, #28
 8000a90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]
 8000a98:	e025      	b.n	8000ae6 <CheckWhatCommand+0x6a>
		if (strcmp(incommingCommand, possibleCommands[i]) == 0) {
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	4a17      	ldr	r2, [pc, #92]	; (8000afc <CheckWhatCommand+0x80>)
 8000a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fb8f 	bl	80001c8 <strcmp>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d117      	bne.n	8000ae0 <CheckWhatCommand+0x64>
			CmdBuf.commandNummer = i;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	61fb      	str	r3, [r7, #28]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageCommand, sizeof(debugMessageCommand),
						&huart2);
#endif
			DoOnCommand(CmdBuf, inputStruct);
 8000ab4:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000ab8:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000abc:	f240 4214 	movw	r2, #1044	; 0x414
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f004 f98b 	bl	8004ddc <memcpy>
 8000ac6:	4668      	mov	r0, sp
 8000ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000acc:	f240 420c 	movw	r2, #1036	; 0x40c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f004 f983 	bl	8004ddc <memcpy>
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000adc:	f000 f844 	bl	8000b68 <DoOnCommand>
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d9d6      	bls.n	8000a9a <CheckWhatCommand+0x1e>
		}
	}
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr
 8000afc:	20000000 	.word	0x20000000

08000b00 <CheckWhatColor>:
 *
 * @param incommingColor
 * @param commandArray
 * @param argPlace
 */
void CheckWhatColor(char incommingColor[], CmdStruct CmdBuf, uint8_t argPlace) {
 8000b00:	b084      	sub	sp, #16
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	f107 001c 	add.w	r0, r7, #28
 8000b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]
 8000b16:	e018      	b.n	8000b4a <CheckWhatColor+0x4a>
		if (strcmp(incommingColor, possibleColors[i]) == 0) {
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <CheckWhatColor+0x60>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	4619      	mov	r1, r3
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fb50 	bl	80001c8 <strcmp>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10a      	bne.n	8000b44 <CheckWhatColor+0x44>
			CmdBuf.argBuf[argPlace] = colorCodes[i];
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <CheckWhatColor+0x64>)
 8000b32:	5cd2      	ldrb	r2, [r2, r3]
 8000b34:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 8000b38:	b292      	uxth	r2, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	3318      	adds	r3, #24
 8000b3e:	443b      	add	r3, r7
 8000b40:	811a      	strh	r2, [r3, #8]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageColor, sizeof(debugMessageColor), &huart2);
#endif
			break;
 8000b42:	e006      	b.n	8000b52 <CheckWhatColor+0x52>
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	3301      	adds	r3, #1
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d9e3      	bls.n	8000b18 <CheckWhatColor+0x18>
		}
	}
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr
 8000b60:	20000024 	.word	0x20000024
 8000b64:	20000064 	.word	0x20000064

08000b68 <DoOnCommand>:
 * of the args
 *
 * @param commandArray
 * @param inputStruct
 */
void DoOnCommand(CmdStruct CmdBuf, input_vars inputStruct) {
 8000b68:	b084      	sub	sp, #16
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	f5ad 6d02 	sub.w	sp, sp, #2080	; 0x820
 8000b70:	f44f 6702 	mov.w	r7, #2080	; 0x820
 8000b74:	446f      	add	r7, sp
 8000b76:	f107 0c08 	add.w	ip, r7, #8
 8000b7a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (CmdBuf.commandNummer) {
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	f200 80e4 	bhi.w	8000d4e <DoOnCommand+0x1e6>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <DoOnCommand+0x24>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000bb1 	.word	0x08000bb1
 8000b90:	08000bdf 	.word	0x08000bdf
 8000b94:	08000c0d 	.word	0x08000c0d
 8000b98:	08000c3b 	.word	0x08000c3b
 8000b9c:	08000c69 	.word	0x08000c69
 8000ba0:	08000c97 	.word	0x08000c97
 8000ba4:	08000cc5 	.word	0x08000cc5
 8000ba8:	08000cf3 	.word	0x08000cf3
 8000bac:	08000d21 	.word	0x08000d21
		case 0:
			// lijn
			RecieveCommandLijn(CmdBuf, inputStruct);
 8000bb0:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000bb4:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000bb8:	f240 4214 	movw	r2, #1044	; 0x414
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f004 f90d 	bl	8004ddc <memcpy>
 8000bc2:	4668      	mov	r0, sp
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	f240 420c 	movw	r2, #1036	; 0x40c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f004 f905 	bl	8004ddc <memcpy>
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd8:	f7ff fc82 	bl	80004e0 <RecieveCommandLijn>
			break;
 8000bdc:	e0b7      	b.n	8000d4e <DoOnCommand+0x1e6>
		case 1:
			// clearscherm
			RecieveCommandClear(CmdBuf, inputStruct);
 8000bde:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000be2:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000be6:	f240 4214 	movw	r2, #1044	; 0x414
 8000bea:	4619      	mov	r1, r3
 8000bec:	f004 f8f6 	bl	8004ddc <memcpy>
 8000bf0:	4668      	mov	r0, sp
 8000bf2:	f107 0318 	add.w	r3, r7, #24
 8000bf6:	f240 420c 	movw	r2, #1036	; 0x40c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f004 f8ee 	bl	8004ddc <memcpy>
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c06:	f7ff fcce 	bl	80005a6 <RecieveCommandClear>
			break;
 8000c0a:	e0a0      	b.n	8000d4e <DoOnCommand+0x1e6>
		case 2:
			// rechthoek
			RecieveCommandRechthoek(CmdBuf, inputStruct);
 8000c0c:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000c10:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000c14:	f240 4214 	movw	r2, #1044	; 0x414
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f004 f8df 	bl	8004ddc <memcpy>
 8000c1e:	4668      	mov	r0, sp
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	f240 420c 	movw	r2, #1036	; 0x40c
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f004 f8d7 	bl	8004ddc <memcpy>
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c34:	f7ff fce7 	bl	8000606 <RecieveCommandRechthoek>
			break;
 8000c38:	e089      	b.n	8000d4e <DoOnCommand+0x1e6>
		case 3:
			// wacht
			RecieveCommandWacht(CmdBuf, inputStruct);
 8000c3a:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000c3e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000c42:	f240 4214 	movw	r2, #1044	; 0x414
 8000c46:	4619      	mov	r1, r3
 8000c48:	f004 f8c8 	bl	8004ddc <memcpy>
 8000c4c:	4668      	mov	r0, sp
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	f240 420c 	movw	r2, #1036	; 0x40c
 8000c56:	4619      	mov	r1, r3
 8000c58:	f004 f8c0 	bl	8004ddc <memcpy>
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c62:	f7ff fd7f 	bl	8000764 <RecieveCommandWacht>
			break;
 8000c66:	e072      	b.n	8000d4e <DoOnCommand+0x1e6>
		case 4:
			// tekst
			RecieveCommandTekst(CmdBuf, inputStruct);
 8000c68:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000c6c:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000c70:	f240 4214 	movw	r2, #1044	; 0x414
 8000c74:	4619      	mov	r1, r3
 8000c76:	f004 f8b1 	bl	8004ddc <memcpy>
 8000c7a:	4668      	mov	r0, sp
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	f240 420c 	movw	r2, #1036	; 0x40c
 8000c84:	4619      	mov	r1, r3
 8000c86:	f004 f8a9 	bl	8004ddc <memcpy>
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c90:	f7ff fd1c 	bl	80006cc <RecieveCommandTekst>
			break;
 8000c94:	e05b      	b.n	8000d4e <DoOnCommand+0x1e6>
		case 5:
			// bitmap
			RecieveCommandBitmap(CmdBuf, inputStruct);
 8000c96:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000c9a:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000c9e:	f240 4214 	movw	r2, #1044	; 0x414
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f004 f89a 	bl	8004ddc <memcpy>
 8000ca8:	4668      	mov	r0, sp
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	f240 420c 	movw	r2, #1036	; 0x40c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f004 f892 	bl	8004ddc <memcpy>
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cbe:	f7ff fd11 	bl	80006e4 <RecieveCommandBitmap>
			break;
 8000cc2:	e044      	b.n	8000d4e <DoOnCommand+0x1e6>
		case 6:
			// cirkel
			RecieveCommandCirkel(CmdBuf, inputStruct);
 8000cc4:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000cc8:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000ccc:	f240 4214 	movw	r2, #1044	; 0x414
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f004 f883 	bl	8004ddc <memcpy>
 8000cd6:	4668      	mov	r0, sp
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	f240 420c 	movw	r2, #1036	; 0x40c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f004 f87b 	bl	8004ddc <memcpy>
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cec:	f7ff fdb6 	bl	800085c <RecieveCommandCirkel>
			break;
 8000cf0:	e02d      	b.n	8000d4e <DoOnCommand+0x1e6>
		case 7:
			// figuur
			RecieveCommandFiguur(CmdBuf, inputStruct);
 8000cf2:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000cf6:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000cfa:	f240 4214 	movw	r2, #1044	; 0x414
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f004 f86c 	bl	8004ddc <memcpy>
 8000d04:	4668      	mov	r0, sp
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	f240 420c 	movw	r2, #1036	; 0x40c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f004 f864 	bl	8004ddc <memcpy>
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1a:	f7ff fd93 	bl	8000844 <RecieveCommandFiguur>
			break;
 8000d1e:	e016      	b.n	8000d4e <DoOnCommand+0x1e6>
		case 8:
			// herhaal
			RecieveCommandHerhaal(CmdBuf, inputStruct);
 8000d20:	f20d 400c 	addw	r0, sp, #1036	; 0x40c
 8000d24:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000d28:	f240 4214 	movw	r2, #1044	; 0x414
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f004 f855 	bl	8004ddc <memcpy>
 8000d32:	4668      	mov	r0, sp
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	f240 420c 	movw	r2, #1036	; 0x40c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f004 f84d 	bl	8004ddc <memcpy>
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d48:	f7ff fd3c 	bl	80007c4 <RecieveCommandHerhaal>
			break;
 8000d4c:	bf00      	nop
	}
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d56:	b004      	add	sp, #16
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_DMA_Init+0x3c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <MX_DMA_Init+0x3c>)
 8000d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_DMA_Init+0x3c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2044      	movs	r0, #68	; 0x44
 8000d84:	f000 fe9f 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000d88:	2044      	movs	r0, #68	; 0x44
 8000d8a:	f000 feb8 	bl	8001afe <HAL_NVIC_EnableIRQ>

}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a31      	ldr	r2, [pc, #196]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a2a      	ldr	r2, [pc, #168]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_GPIO_Init+0xe4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000e28:	4816      	ldr	r0, [pc, #88]	; (8000e84 <MX_GPIO_Init+0xe8>)
 8000e2a:	f001 fbb1 	bl	8002590 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e34:	4814      	ldr	r0, [pc, #80]	; (8000e88 <MX_GPIO_Init+0xec>)
 8000e36:	f001 fbab 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000e3a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000e3e:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_GPIO_Init+0xe8>)
 8000e54:	f001 fa00 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_GPIO_Init+0xec>)
 8000e72:	f001 f9f1 	bl	8002258 <HAL_GPIO_Init>

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40020400 	.word	0x40020400

08000e8c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8000e92:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000e96:	446f      	add	r7, sp

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000e98:	f000 fcc8 	bl	800182c <HAL_Init>

  /* USER CODE BEGIN Init */
  command commandBuf = {0};
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
 8000eaa:	615a      	str	r2, [r3, #20]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f85e 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f7ff ff74 	bl	8000d9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb4:	f7ff ff52 	bl	8000d5c <MX_DMA_Init>
  MX_TIM1_Init();
 8000eb8:	f000 fa00 	bl	80012bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ebc:	f000 fa4e 	bl	800135c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 fb64 	bl	800158c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init();  // Init VGA-Screen
 8000ec4:	f000 fc14 	bl	80016f0 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fc63 	bl	8001794 <UB_VGA_FillScreen>
  //  UB_VGA_SetPixel(10,14,VGA_COL_BLUE);
  //  UB_VGA_SetPixel(10,15,VGA_COL_BLUE);
  //  UB_VGA_SetPixel(10,16,VGA_COL_BLUE);
  //  //UB_VGA_SetPixel(0,0,0x00);
  //  //UB_VGA_SetPixel(319,,0x00);
  UB_VGA_FillScreen(VGA_COL_WHITE);
 8000ece:	20ff      	movs	r0, #255	; 0xff
 8000ed0:	f000 fc60 	bl	8001794 <UB_VGA_FillScreen>
 int i;

  for (i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e008      	b.n	8000eec <main+0x60>
 8000eda:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <main+0xd8>)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef2:	dbf2      	blt.n	8000eda <main+0x4e>

  //  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <main+0xd8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <main+0xd8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  input.command_execute_flag = FALSE;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <main+0xd8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

  // HAl wants a memory location to store the charachter it receives from the
  // UART We will pass it an array, but we will not use it. We declare our own
  // variable in the interupt handler See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4915      	ldr	r1, [pc, #84]	; (8000f64 <main+0xd8>)
 8000f0e:	4816      	ldr	r0, [pc, #88]	; (8000f68 <main+0xdc>)
 8000f10:	f002 ffd3 	bl	8003eba <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (input.command_execute_flag == TRUE) {
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <main+0xd8>)
 8000f16:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8000f1a:	2bff      	cmp	r3, #255	; 0xff
 8000f1c:	d1fa      	bne.n	8000f14 <main+0x88>
      // Do some stuff
      ParseOnKomma(input, 0, 0, 0, commandBuf);
 8000f1e:	4c11      	ldr	r4, [pc, #68]	; (8000f64 <main+0xd8>)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000f38:	4668      	mov	r0, sp
 8000f3a:	f104 0310 	add.w	r3, r4, #16
 8000f3e:	f240 4204 	movw	r2, #1028	; 0x404
 8000f42:	4619      	mov	r1, r3
 8000f44:	f003 ff4a 	bl	8004ddc <memcpy>
 8000f48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f4c:	f7ff fc92 	bl	8000874 <ParseOnKomma>
      ClearScreen(commandBuf[1]);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fbbd 	bl	80016d2 <ClearScreen>


      // When finished reset the flag
      input.command_execute_flag = FALSE;
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <main+0xd8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    if (input.command_execute_flag == TRUE) {
 8000f60:	e7d8      	b.n	8000f14 <main+0x88>
 8000f62:	bf00      	nop
 8000f64:	20000100 	.word	0x20000100
 8000f68:	200005f4 	.word	0x200005f4

08000f6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 ff3c 	bl	8004df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <SystemClock_Config+0xcc>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <SystemClock_Config+0xcc>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a21      	ldr	r2, [pc, #132]	; (800103c <SystemClock_Config+0xd0>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <SystemClock_Config+0xd0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fe0:	23a8      	movs	r3, #168	; 0xa8
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fae7 	bl	80025c4 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x94>
    Error_Handler();
 8000ffc:	f000 f820 	bl	8001040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001000:	230f      	movs	r3, #15
 8001002:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2302      	movs	r3, #2
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2105      	movs	r1, #5
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fd3e 	bl	8002aa0 <HAL_RCC_ClockConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xc2>
    Error_Handler();
 800102a:	f000 f809 	bl	8001040 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3750      	adds	r7, #80	; 0x50
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_MspInit+0x4c>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x4c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x4c>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <MemManage_Handler+0x4>

080010ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 fbec 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001100:	4828      	ldr	r0, [pc, #160]	; (80011a4 <TIM2_IRQHandler+0xa8>)
 8001102:	f002 f829 	bl	8003158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001106:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <TIM2_IRQHandler+0xa8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f06f 0208 	mvn.w	r2, #8
 800110e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <TIM2_IRQHandler+0xac>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <TIM2_IRQHandler+0xac>)
 800111a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <TIM2_IRQHandler+0xac>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001124:	d905      	bls.n	8001132 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <TIM2_IRQHandler+0xac>)
 8001128:	2200      	movs	r2, #0
 800112a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 800112c:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <TIM2_IRQHandler+0xb0>)
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <TIM2_IRQHandler+0xac>)
 8001130:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <TIM2_IRQHandler+0xac>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d802      	bhi.n	8001140 <TIM2_IRQHandler+0x44>
 800113a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800113e:	e001      	b.n	8001144 <TIM2_IRQHandler+0x48>
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <TIM2_IRQHandler+0xb4>)
 8001146:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <TIM2_IRQHandler+0xac>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2b23      	cmp	r3, #35	; 0x23
 800114e:	d927      	bls.n	80011a0 <TIM2_IRQHandler+0xa4>
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <TIM2_IRQHandler+0xac>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f240 2202 	movw	r2, #514	; 0x202
 8001158:	4293      	cmp	r3, r2
 800115a:	d821      	bhi.n	80011a0 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 800115c:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <TIM2_IRQHandler+0xb8>)
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <TIM2_IRQHandler+0xac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8001164:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <TIM2_IRQHandler+0xb8>)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <TIM2_IRQHandler+0xac>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <TIM2_IRQHandler+0xbc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <TIM2_IRQHandler+0xbc>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <TIM2_IRQHandler+0xc0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <TIM2_IRQHandler+0xc0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <TIM2_IRQHandler+0xac>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <TIM2_IRQHandler+0xac>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f203 1341 	addw	r3, r3, #321	; 0x141
 800119c:	4a02      	ldr	r2, [pc, #8]	; (80011a8 <TIM2_IRQHandler+0xac>)
 800119e:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000554 	.word	0x20000554
 80011a8:	20013324 	.word	0x20013324
 80011ac:	20000634 	.word	0x20000634
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40026488 	.word	0x40026488
 80011b8:	40010000 	.word	0x40010000
 80011bc:	20000594 	.word	0x20000594

080011c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <USART2_IRQHandler+0x70>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b0a      	cmp	r3, #10
 80011d0:	d026      	beq.n	8001220 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b0d      	cmp	r3, #13
 80011d6:	d002      	beq.n	80011de <USART2_IRQHandler+0x1e>
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b2e      	cmp	r3, #46	; 0x2e
 80011dc:	d10e      	bne.n	80011fc <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <USART2_IRQHandler+0x74>)
 80011e0:	22ff      	movs	r2, #255	; 0xff
 80011e2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			// Store the message length for processing
			input.msglen = input.char_counter;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <USART2_IRQHandler+0x74>)
 80011e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <USART2_IRQHandler+0x74>)
 80011ee:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <USART2_IRQHandler+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 80011fa:	e011      	b.n	8001220 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <USART2_IRQHandler+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <USART2_IRQHandler+0x74>)
 8001206:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <USART2_IRQHandler+0x74>)
 800120c:	4413      	add	r3, r2
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <USART2_IRQHandler+0x74>)
 8001214:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001218:	3301      	adds	r3, #1
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <USART2_IRQHandler+0x74>)
 800121c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <USART2_IRQHandler+0x78>)
 8001222:	f002 fe9f 	bl	8003f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40004400 	.word	0x40004400
 8001234:	20000100 	.word	0x20000100
 8001238:	200005f4 	.word	0x200005f4

0800123c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <DMA2_Stream5_IRQHandler+0x48>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6a1a      	ldr	r2, [r3, #32]
 8001246:	f241 1311 	movw	r3, #4369	; 0x1111
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10f      	bne.n	8001270 <DMA2_Stream5_IRQHandler+0x34>
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <DMA2_Stream5_IRQHandler+0x48>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a1a      	ldr	r2, [r3, #32]
 8001256:	f240 4344 	movw	r3, #1092	; 0x444
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <DMA2_Stream5_IRQHandler+0x34>
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <DMA2_Stream5_IRQHandler+0x48>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <DMA2_Stream5_IRQHandler+0x48>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <DMA2_Stream5_IRQHandler+0x4c>)
 8001272:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001276:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <DMA2_Stream5_IRQHandler+0x50>)
 800127a:	f000 fd83 	bl	8001d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000514 	.word	0x20000514
 8001288:	40021000 	.word	0x40021000
 800128c:	20000594 	.word	0x20000594

08001290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <SystemInit+0x28>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <SystemInit+0x28>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SystemInit+0x28>)
 80012a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012aa:	609a      	str	r2, [r3, #8]
#endif
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_TIM1_Init+0x98>)
 80012da:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <MX_TIM1_Init+0x9c>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_TIM1_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_TIM1_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_TIM1_Init+0x98>)
 80012ec:	220b      	movs	r2, #11
 80012ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_TIM1_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_TIM1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_TIM1_Init+0x98>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <MX_TIM1_Init+0x98>)
 8001304:	f001 fdec 	bl	8002ee0 <HAL_TIM_Base_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800130e:	f7ff fe97 	bl	8001040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_TIM1_Init+0x98>)
 8001320:	f002 f8e8 	bl	80034f4 <HAL_TIM_ConfigClockSource>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800132a:	f7ff fe89 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_TIM1_Init+0x98>)
 800133c:	f002 fce0 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001346:	f7ff fe7b 	bl	8001040 <Error_Handler>
  }

}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000514 	.word	0x20000514
 8001358:	40010000 	.word	0x40010000

0800135c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <MX_TIM2_Init+0xcc>)
 8001380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001384:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <MX_TIM2_Init+0xcc>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <MX_TIM2_Init+0xcc>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <MX_TIM2_Init+0xcc>)
 8001394:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001398:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <MX_TIM2_Init+0xcc>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <MX_TIM2_Init+0xcc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013a6:	4820      	ldr	r0, [pc, #128]	; (8001428 <MX_TIM2_Init+0xcc>)
 80013a8:	f001 fde9 	bl	8002f7e <HAL_TIM_PWM_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013b2:	f7ff fe45 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	4619      	mov	r1, r3
 80013c4:	4818      	ldr	r0, [pc, #96]	; (8001428 <MX_TIM2_Init+0xcc>)
 80013c6:	f002 fc9b 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013d0:	f7ff fe36 	bl	8001040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d4:	2360      	movs	r3, #96	; 0x60
 80013d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 80013d8:	f240 13bb 	movw	r3, #443	; 0x1bb
 80013dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013de:	2302      	movs	r3, #2
 80013e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2208      	movs	r2, #8
 80013ea:	4619      	mov	r1, r3
 80013ec:	480e      	ldr	r0, [pc, #56]	; (8001428 <MX_TIM2_Init+0xcc>)
 80013ee:	f001 ffbb 	bl	8003368 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80013f8:	f7ff fe22 	bl	8001040 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80013fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	220c      	movs	r2, #12
 8001406:	4619      	mov	r1, r3
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <MX_TIM2_Init+0xcc>)
 800140a:	f001 ffad 	bl	8003368 <HAL_TIM_PWM_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001414:	f7ff fe14 	bl	8001040 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <MX_TIM2_Init+0xcc>)
 800141a:	f000 f87f 	bl	800151c <HAL_TIM_MspPostInit>

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000554 	.word	0x20000554

0800142c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <HAL_TIM_Base_MspInit+0x94>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d13c      	bne.n	80014b8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_TIM_Base_MspInit+0x98>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <HAL_TIM_Base_MspInit+0x98>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_TIM_Base_MspInit+0x98>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_TIM_Base_MspInit+0xa0>)
 800145e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001462:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001466:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001490:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001494:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 800149e:	f000 fb49 	bl	8001b34 <HAL_DMA_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80014a8:	f7ff fdca 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 80014b0:	621a      	str	r2, [r3, #32]
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_TIM_Base_MspInit+0x9c>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40010000 	.word	0x40010000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	20000594 	.word	0x20000594
 80014cc:	40026488 	.word	0x40026488

080014d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d115      	bne.n	800150e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_TIM_PWM_MspInit+0x48>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_TIM_PWM_MspInit+0x48>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_TIM_PWM_MspInit+0x48>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	201c      	movs	r0, #28
 8001504:	f000 fadf 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001508:	201c      	movs	r0, #28
 800150a:	f000 faf8 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153c:	d11e      	bne.n	800157c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_TIM_MspPostInit+0x68>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_TIM_MspPostInit+0x68>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_TIM_MspPostInit+0x68>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 800155a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800155e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800156c:	2301      	movs	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4804      	ldr	r0, [pc, #16]	; (8001588 <HAL_TIM_MspPostInit+0x6c>)
 8001578:	f000 fe6e 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40020400 	.word	0x40020400

0800158c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f002 fc2c 	bl	8003e20 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f7ff fd37 	bl	8001040 <Error_Handler>
  }

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200005f4 	.word	0x200005f4
 80015dc:	40004400 	.word	0x40004400

080015e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <HAL_UART_MspInit+0x94>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d133      	bne.n	800166a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <HAL_UART_MspInit+0x98>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <HAL_UART_MspInit+0x98>)
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_UART_MspInit+0x98>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_UART_MspInit+0x98>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_UART_MspInit+0x98>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_UART_MspInit+0x98>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800163a:	230c      	movs	r3, #12
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164a:	2307      	movs	r3, #7
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <HAL_UART_MspInit+0x9c>)
 8001656:	f000 fdff 	bl	8002258 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2026      	movs	r0, #38	; 0x26
 8001660:	f000 fa31 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001664:	2026      	movs	r0, #38	; 0x26
 8001666:	f000 fa4a 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40004400 	.word	0x40004400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001684:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001686:	e003      	b.n	8001690 <LoopCopyDataInit>

08001688 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800168a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800168c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800168e:	3104      	adds	r1, #4

08001690 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001694:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001696:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001698:	d3f6      	bcc.n	8001688 <CopyDataInit>
  ldr  r2, =_sbss
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800169c:	e002      	b.n	80016a4 <LoopFillZerobss>

0800169e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800169e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016a0:	f842 3b04 	str.w	r3, [r2], #4

080016a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016a8:	d3f9      	bcc.n	800169e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016aa:	f7ff fdf1 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ae:	f003 fb71 	bl	8004d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7ff fbeb 	bl	8000e8c <main>
  bx  lr    
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016bc:	080051b0 	.word	0x080051b0
  ldr  r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016c4:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 80016c8:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 80016cc:	20013334 	.word	0x20013334

080016d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC_IRQHandler>

080016d2 <ClearScreen>:
 * @brief Clears the screen in the specified color
 *
 * @param color
 * @return
 */
int ClearScreen(uint8_t color) {
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f858 	bl	8001794 <UB_VGA_FillScreen>
}
 80016e4:	bf00      	nop
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <UB_VGA_Screen_Init+0x84>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <UB_VGA_Screen_Init+0x84>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <UB_VGA_Screen_Init+0x84>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <UB_VGA_Screen_Init+0x88>)
 8001708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800170c:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800170e:	481b      	ldr	r0, [pc, #108]	; (800177c <UB_VGA_Screen_Init+0x8c>)
 8001710:	f001 fc11 	bl	8002f36 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001714:	210c      	movs	r1, #12
 8001716:	4819      	ldr	r0, [pc, #100]	; (800177c <UB_VGA_Screen_Init+0x8c>)
 8001718:	f001 fc5c 	bl	8002fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800171c:	2108      	movs	r1, #8
 800171e:	4817      	ldr	r0, [pc, #92]	; (800177c <UB_VGA_Screen_Init+0x8c>)
 8001720:	f001 fc96 	bl	8003050 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <UB_VGA_Screen_Init+0x90>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <UB_VGA_Screen_Init+0x90>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001732:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <UB_VGA_Screen_Init+0x90>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <UB_VGA_Screen_Init+0x90>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001744:	490f      	ldr	r1, [pc, #60]	; (8001784 <UB_VGA_Screen_Init+0x94>)
 8001746:	f240 1341 	movw	r3, #321	; 0x141
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <UB_VGA_Screen_Init+0x98>)
 800174c:	480f      	ldr	r0, [pc, #60]	; (800178c <UB_VGA_Screen_Init+0x9c>)
 800174e:	f000 fa9f 	bl	8001c90 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <UB_VGA_Screen_Init+0x9c>)
 8001754:	f000 f9ee 	bl	8001b34 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <UB_VGA_Screen_Init+0x9c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <UB_VGA_Screen_Init+0x9c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0210 	orr.w	r2, r2, #16
 8001766:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <UB_VGA_Screen_Init+0xa0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a01      	ldr	r2, [pc, #4]	; (8001774 <UB_VGA_Screen_Init+0x84>)
 800176e:	6093      	str	r3, [r2, #8]
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20013324 	.word	0x20013324
 8001778:	40020400 	.word	0x40020400
 800177c:	20000554 	.word	0x20000554
 8001780:	20000514 	.word	0x20000514
 8001784:	20000634 	.word	0x20000634
 8001788:	40021015 	.word	0x40021015
 800178c:	20000594 	.word	0x20000594
 8001790:	40026488 	.word	0x40026488

08001794 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	81bb      	strh	r3, [r7, #12]
 80017a2:	e012      	b.n	80017ca <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80017a4:	2300      	movs	r3, #0
 80017a6:	81fb      	strh	r3, [r7, #14]
 80017a8:	e008      	b.n	80017bc <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80017aa:	79fa      	ldrb	r2, [r7, #7]
 80017ac:	89b9      	ldrh	r1, [r7, #12]
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f813 	bl	80017dc <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	3301      	adds	r3, #1
 80017ba:	81fb      	strh	r3, [r7, #14]
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017c2:	d3f2      	bcc.n	80017aa <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	81bb      	strh	r3, [r7, #12]
 80017ca:	89bb      	ldrh	r3, [r7, #12]
 80017cc:	2bef      	cmp	r3, #239	; 0xef
 80017ce:	d9e9      	bls.n	80017a4 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
 80017e6:	460b      	mov	r3, r1
 80017e8:	80bb      	strh	r3, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017f4:	d301      	bcc.n	80017fa <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80017fa:	88bb      	ldrh	r3, [r7, #4]
 80017fc:	2bef      	cmp	r3, #239	; 0xef
 80017fe:	d901      	bls.n	8001804 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001804:	88ba      	ldrh	r2, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	441a      	add	r2, r3
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	4413      	add	r3, r2
 8001814:	4904      	ldr	r1, [pc, #16]	; (8001828 <UB_VGA_SetPixel+0x4c>)
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	54ca      	strb	r2, [r1, r3]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000634 	.word	0x20000634

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <HAL_Init+0x40>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_Init+0x40>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_Init+0x40>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f92b 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fbf6 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f943 	bl	8001b1a <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018ac:	f000 f90b 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000074 	.word	0x20000074
 80018c8:	2000007c 	.word	0x2000007c
 80018cc:	20000078 	.word	0x20000078

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000007c 	.word	0x2000007c
 80018f4:	20013330 	.word	0x20013330

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20013330 	.word	0x20013330

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a90:	f7ff ff8e 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff29 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff3e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff8e 	bl	8001a04 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5d 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff31 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff feda 	bl	80018f8 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e099      	b.n	8001c84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b70:	e00f      	b.n	8001b92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b72:	f7ff fec1 	bl	80018f8 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d908      	bls.n	8001b92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e078      	b.n	8001c84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e8      	bne.n	8001b72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_DMA_Init+0x158>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d107      	bne.n	8001bfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f023 0307 	bic.w	r3, r3, #7
 8001c12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d117      	bne.n	8001c56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00e      	beq.n	8001c56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fa91 	bl	8002160 <DMA_CheckFifoParam>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c52:	2301      	movs	r3, #1
 8001c54:	e016      	b.n	8001c84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa48 	bl	80020f4 <DMA_CalcBaseAndBitshift>
 8001c64:	4603      	mov	r3, r0
 8001c66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	223f      	movs	r2, #63	; 0x3f
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	f010803f 	.word	0xf010803f

08001c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_DMA_Start_IT+0x26>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e040      	b.n	8001d38 <HAL_DMA_Start_IT+0xa8>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d12f      	bne.n	8001d2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f9da 	bl	8002098 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	223f      	movs	r2, #63	; 0x3f
 8001cea:	409a      	lsls	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0216 	orr.w	r2, r2, #22
 8001cfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0208 	orr.w	r2, r2, #8
 8001d16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e005      	b.n	8001d36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
 8001d34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d004      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00c      	b.n	8001d78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2205      	movs	r2, #5
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d90:	4b8e      	ldr	r3, [pc, #568]	; (8001fcc <HAL_DMA_IRQHandler+0x248>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a8e      	ldr	r2, [pc, #568]	; (8001fd0 <HAL_DMA_IRQHandler+0x24c>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2208      	movs	r2, #8
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0204 	bic.w	r2, r2, #4
 8001dd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2208      	movs	r2, #8
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	2201      	movs	r2, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2201      	movs	r2, #1
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d012      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2204      	movs	r2, #4
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2210      	movs	r2, #16
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d043      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03c      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2210      	movs	r2, #16
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d024      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
 8001eb2:	e01f      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
 8001ec4:	e016      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0208 	bic.w	r2, r2, #8
 8001ee2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	2220      	movs	r2, #32
 8001efa:	409a      	lsls	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 808f 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8087 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d136      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0216 	bic.w	r2, r2, #22
 8001f3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <HAL_DMA_IRQHandler+0x1da>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0208 	bic.w	r2, r2, #8
 8001f6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	223f      	movs	r2, #63	; 0x3f
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d07e      	beq.n	8002090 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
        }
        return;
 8001f9a:	e079      	b.n	8002090 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d031      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
 8001fc8:	e02c      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
 8001fca:	bf00      	nop
 8001fcc:	20000074 	.word	0x20000074
 8001fd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d023      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e01e      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10f      	bne.n	8002014 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0210 	bic.w	r2, r2, #16
 8002002:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	2b00      	cmp	r3, #0
 800202a:	d032      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d022      	beq.n	800207e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2205      	movs	r2, #5
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3301      	adds	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d307      	bcc.n	800206c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f2      	bne.n	8002050 <HAL_DMA_IRQHandler+0x2cc>
 800206a:	e000      	b.n	800206e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800206c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
 800208e:	e000      	b.n	8002092 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002090:	bf00      	nop
    }
  }
}
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d108      	bne.n	80020d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020d6:	e007      	b.n	80020e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3b10      	subs	r3, #16
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <DMA_CalcBaseAndBitshift+0x64>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210e:	4a13      	ldr	r2, [pc, #76]	; (800215c <DMA_CalcBaseAndBitshift+0x68>)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d909      	bls.n	8002136 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	659a      	str	r2, [r3, #88]	; 0x58
 8002134:	e007      	b.n	8002146 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213e:	f023 0303 	bic.w	r3, r3, #3
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	aaaaaaab 	.word	0xaaaaaaab
 800215c:	08005034 	.word	0x08005034

08002160 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11f      	bne.n	80021ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d856      	bhi.n	800222e <DMA_CheckFifoParam+0xce>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <DMA_CheckFifoParam+0x28>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	08002199 	.word	0x08002199
 800218c:	080021ab 	.word	0x080021ab
 8002190:	08002199 	.word	0x08002199
 8002194:	0800222f 	.word	0x0800222f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d046      	beq.n	8002232 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a8:	e043      	b.n	8002232 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b2:	d140      	bne.n	8002236 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b8:	e03d      	b.n	8002236 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c2:	d121      	bne.n	8002208 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d837      	bhi.n	800223a <DMA_CheckFifoParam+0xda>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <DMA_CheckFifoParam+0x70>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021e7 	.word	0x080021e7
 80021d8:	080021e1 	.word	0x080021e1
 80021dc:	080021f9 	.word	0x080021f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
      break;
 80021e4:	e030      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d025      	beq.n	800223e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f6:	e022      	b.n	800223e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002200:	d11f      	bne.n	8002242 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002206:	e01c      	b.n	8002242 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d903      	bls.n	8002216 <DMA_CheckFifoParam+0xb6>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d003      	beq.n	800221c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002214:	e018      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      break;
 800221a:	e015      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00e      	beq.n	8002246 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e00b      	b.n	8002246 <DMA_CheckFifoParam+0xe6>
      break;
 800222e:	bf00      	nop
 8002230:	e00a      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e008      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e006      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e004      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;   
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
    }
  } 
  
  return status; 
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e16b      	b.n	800254c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	429a      	cmp	r2, r3
 800228e:	f040 815a 	bne.w	8002546 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d00b      	beq.n	80022b2 <HAL_GPIO_Init+0x5a>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d007      	beq.n	80022b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022a6:	2b11      	cmp	r3, #17
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d130      	bne.n	8002314 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e8:	2201      	movs	r2, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 0201 	and.w	r2, r3, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0xfc>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	69b9      	ldr	r1, [r7, #24]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80b4 	beq.w	8002546 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b60      	ldr	r3, [pc, #384]	; (8002564 <HAL_GPIO_Init+0x30c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a5f      	ldr	r2, [pc, #380]	; (8002564 <HAL_GPIO_Init+0x30c>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <HAL_GPIO_Init+0x30c>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fa:	4a5b      	ldr	r2, [pc, #364]	; (8002568 <HAL_GPIO_Init+0x310>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_GPIO_Init+0x314>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d02b      	beq.n	800247e <HAL_GPIO_Init+0x226>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a51      	ldr	r2, [pc, #324]	; (8002570 <HAL_GPIO_Init+0x318>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d025      	beq.n	800247a <HAL_GPIO_Init+0x222>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a50      	ldr	r2, [pc, #320]	; (8002574 <HAL_GPIO_Init+0x31c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d01f      	beq.n	8002476 <HAL_GPIO_Init+0x21e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4f      	ldr	r2, [pc, #316]	; (8002578 <HAL_GPIO_Init+0x320>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d019      	beq.n	8002472 <HAL_GPIO_Init+0x21a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4e      	ldr	r2, [pc, #312]	; (800257c <HAL_GPIO_Init+0x324>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_GPIO_Init+0x216>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4d      	ldr	r2, [pc, #308]	; (8002580 <HAL_GPIO_Init+0x328>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00d      	beq.n	800246a <HAL_GPIO_Init+0x212>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <HAL_GPIO_Init+0x32c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d007      	beq.n	8002466 <HAL_GPIO_Init+0x20e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4b      	ldr	r2, [pc, #300]	; (8002588 <HAL_GPIO_Init+0x330>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_GPIO_Init+0x20a>
 800245e:	2307      	movs	r3, #7
 8002460:	e00e      	b.n	8002480 <HAL_GPIO_Init+0x228>
 8002462:	2308      	movs	r3, #8
 8002464:	e00c      	b.n	8002480 <HAL_GPIO_Init+0x228>
 8002466:	2306      	movs	r3, #6
 8002468:	e00a      	b.n	8002480 <HAL_GPIO_Init+0x228>
 800246a:	2305      	movs	r3, #5
 800246c:	e008      	b.n	8002480 <HAL_GPIO_Init+0x228>
 800246e:	2304      	movs	r3, #4
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x228>
 8002472:	2303      	movs	r3, #3
 8002474:	e004      	b.n	8002480 <HAL_GPIO_Init+0x228>
 8002476:	2302      	movs	r3, #2
 8002478:	e002      	b.n	8002480 <HAL_GPIO_Init+0x228>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_GPIO_Init+0x228>
 800247e:	2300      	movs	r3, #0
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	f002 0203 	and.w	r2, r2, #3
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	4093      	lsls	r3, r2
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002490:	4935      	ldr	r1, [pc, #212]	; (8002568 <HAL_GPIO_Init+0x310>)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <HAL_GPIO_Init+0x334>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c2:	4a32      	ldr	r2, [pc, #200]	; (800258c <HAL_GPIO_Init+0x334>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024c8:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_GPIO_Init+0x334>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ec:	4a27      	ldr	r2, [pc, #156]	; (800258c <HAL_GPIO_Init+0x334>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_GPIO_Init+0x334>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002516:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_GPIO_Init+0x334>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_GPIO_Init+0x334>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002540:	4a12      	ldr	r2, [pc, #72]	; (800258c <HAL_GPIO_Init+0x334>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3301      	adds	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b0f      	cmp	r3, #15
 8002550:	f67f ae90 	bls.w	8002274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3724      	adds	r7, #36	; 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	40013800 	.word	0x40013800
 800256c:	40020000 	.word	0x40020000
 8002570:	40020400 	.word	0x40020400
 8002574:	40020800 	.word	0x40020800
 8002578:	40020c00 	.word	0x40020c00
 800257c:	40021000 	.word	0x40021000
 8002580:	40021400 	.word	0x40021400
 8002584:	40021800 	.word	0x40021800
 8002588:	40021c00 	.word	0x40021c00
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e25e      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d075      	beq.n	80026ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025e2:	4b88      	ldr	r3, [pc, #544]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d00c      	beq.n	8002608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4b85      	ldr	r3, [pc, #532]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d112      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002606:	d10b      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05b      	beq.n	80026cc <HAL_RCC_OscConfig+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d157      	bne.n	80026cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e239      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x74>
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x98>
 8002642:	4b70      	ldr	r3, [pc, #448]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6f      	ldr	r2, [pc, #444]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 800265c:	4b69      	ldr	r3, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a68      	ldr	r2, [pc, #416]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b66      	ldr	r3, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a65      	ldr	r2, [pc, #404]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff f93c 	bl	80018f8 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff f938 	bl	80018f8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1fe      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b5b      	ldr	r3, [pc, #364]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xc0>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff f928 	bl	80018f8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff f924 	bl	80018f8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1ea      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b51      	ldr	r3, [pc, #324]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0xe8>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026da:	4b4a      	ldr	r3, [pc, #296]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b44      	ldr	r3, [pc, #272]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1be      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4937      	ldr	r1, [pc, #220]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_RCC_OscConfig+0x244>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff f8dd 	bl	80018f8 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002742:	f7ff f8d9 	bl	80018f8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e19f      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b28      	ldr	r3, [pc, #160]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4925      	ldr	r1, [pc, #148]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_OscConfig+0x244>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7ff f8bc 	bl	80018f8 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002784:	f7ff f8b8 	bl	80018f8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e17e      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d036      	beq.n	800281c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_RCC_OscConfig+0x248>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7ff f89c 	bl	80018f8 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c4:	f7ff f898 	bl	80018f8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e15e      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x240>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x200>
 80027e2:	e01b      	b.n	800281c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_OscConfig+0x248>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff f885 	bl	80018f8 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	e00e      	b.n	8002810 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f2:	f7ff f881 	bl	80018f8 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d907      	bls.n	8002810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e147      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
 8002804:	40023800 	.word	0x40023800
 8002808:	42470000 	.word	0x42470000
 800280c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	4b88      	ldr	r3, [pc, #544]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ea      	bne.n	80027f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8097 	beq.w	8002958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282e:	4b81      	ldr	r3, [pc, #516]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b7d      	ldr	r3, [pc, #500]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a7c      	ldr	r2, [pc, #496]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b77      	ldr	r3, [pc, #476]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	4b74      	ldr	r3, [pc, #464]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a73      	ldr	r2, [pc, #460]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002872:	f7ff f841 	bl	80018f8 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7ff f83d 	bl	80018f8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e103      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <HAL_RCC_OscConfig+0x474>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x2ea>
 80028a0:	4b64      	ldr	r3, [pc, #400]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a63      	ldr	r2, [pc, #396]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	e01c      	b.n	80028e8 <HAL_RCC_OscConfig+0x324>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x30c>
 80028b6:	4b5f      	ldr	r3, [pc, #380]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a5e      	ldr	r2, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
 80028c2:	4b5c      	ldr	r3, [pc, #368]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a5b      	ldr	r2, [pc, #364]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0x324>
 80028d0:	4b58      	ldr	r3, [pc, #352]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a54      	ldr	r2, [pc, #336]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 0304 	bic.w	r3, r3, #4
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7ff f802 	bl	80018f8 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe fffe 	bl	80018f8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0c2      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ee      	beq.n	80028f8 <HAL_RCC_OscConfig+0x334>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291c:	f7fe ffec 	bl	80018f8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe ffe8 	bl	80018f8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0ac      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ee      	bne.n	8002924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	4a38      	ldr	r2, [pc, #224]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002956:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8098 	beq.w	8002a92 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002962:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b08      	cmp	r3, #8
 800296c:	d05c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d141      	bne.n	80029fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <HAL_RCC_OscConfig+0x478>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe ffbc 	bl	80018f8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe ffb8 	bl	80018f8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e07e      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	019b      	lsls	r3, r3, #6
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	3b01      	subs	r3, #1
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	061b      	lsls	r3, r3, #24
 80029c6:	491b      	ldr	r1, [pc, #108]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x478>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe ff91 	bl	80018f8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe ff8d 	bl	80018f8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e053      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x416>
 80029f8:	e04b      	b.n	8002a92 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_RCC_OscConfig+0x478>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff7a 	bl	80018f8 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe ff76 	bl	80018f8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e03c      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x444>
 8002a26:	e034      	b.n	8002a92 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e02f      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_RCC_OscConfig+0x4d8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d11c      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d115      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10d      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0cc      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b68      	ldr	r3, [pc, #416]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d90c      	bls.n	8002adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b8      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a52      	ldr	r2, [pc, #328]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	494d      	ldr	r1, [pc, #308]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d044      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d119      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e067      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4934      	ldr	r1, [pc, #208]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7fe feb2 	bl	80018f8 <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fe feae 	bl	80018f8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e04f      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 020c 	and.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1eb      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d20c      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e032      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4916      	ldr	r1, [pc, #88]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	490e      	ldr	r1, [pc, #56]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c26:	f000 f821 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	490a      	ldr	r1, [pc, #40]	; (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	5ccb      	ldrb	r3, [r1, r3]
 8002c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fe12 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023c00 	.word	0x40023c00
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	0800501c 	.word	0x0800501c
 8002c64:	20000074 	.word	0x20000074
 8002c68:	20000078 	.word	0x20000078

08002c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c70:	b094      	sub	sp, #80	; 0x50
 8002c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	647b      	str	r3, [r7, #68]	; 0x44
 8002c78:	2300      	movs	r3, #0
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c84:	4b79      	ldr	r3, [pc, #484]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d00d      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0x40>
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	f200 80e1 	bhi.w	8002e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c9e:	e0db      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ca4:	e0db      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca6:	4b73      	ldr	r3, [pc, #460]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ca8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002caa:	e0d8      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb6:	4b6d      	ldr	r3, [pc, #436]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	2200      	movs	r2, #0
 8002cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ccc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cde:	4622      	mov	r2, r4
 8002ce0:	462b      	mov	r3, r5
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	0159      	lsls	r1, r3, #5
 8002cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf0:	0150      	lsls	r0, r2, #5
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	1a51      	subs	r1, r2, r1
 8002cfa:	6139      	str	r1, [r7, #16]
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d10:	4659      	mov	r1, fp
 8002d12:	018b      	lsls	r3, r1, #6
 8002d14:	4651      	mov	r1, sl
 8002d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d1a:	4651      	mov	r1, sl
 8002d1c:	018a      	lsls	r2, r1, #6
 8002d1e:	4651      	mov	r1, sl
 8002d20:	ebb2 0801 	subs.w	r8, r2, r1
 8002d24:	4659      	mov	r1, fp
 8002d26:	eb63 0901 	sbc.w	r9, r3, r1
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3e:	4690      	mov	r8, r2
 8002d40:	4699      	mov	r9, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	eb18 0303 	adds.w	r3, r8, r3
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	462b      	mov	r3, r5
 8002d4c:	eb49 0303 	adc.w	r3, r9, r3
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d5e:	4629      	mov	r1, r5
 8002d60:	024b      	lsls	r3, r1, #9
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d68:	4621      	mov	r1, r4
 8002d6a:	024a      	lsls	r2, r1, #9
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d72:	2200      	movs	r2, #0
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d7c:	f7fd fa2e 	bl	80001dc <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d88:	e058      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	2200      	movs	r2, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	4611      	mov	r1, r2
 8002d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	f04f 0000 	mov.w	r0, #0
 8002dac:	f04f 0100 	mov.w	r1, #0
 8002db0:	0159      	lsls	r1, r3, #5
 8002db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db6:	0150      	lsls	r0, r2, #5
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8002de0:	eb63 050b 	sbc.w	r5, r3, fp
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	00eb      	lsls	r3, r5, #3
 8002dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df2:	00e2      	lsls	r2, r4, #3
 8002df4:	4614      	mov	r4, r2
 8002df6:	461d      	mov	r5, r3
 8002df8:	4643      	mov	r3, r8
 8002dfa:	18e3      	adds	r3, r4, r3
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	464b      	mov	r3, r9
 8002e00:	eb45 0303 	adc.w	r3, r5, r3
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e12:	4629      	mov	r1, r5
 8002e14:	028b      	lsls	r3, r1, #10
 8002e16:	4621      	mov	r1, r4
 8002e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	028a      	lsls	r2, r1, #10
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e26:	2200      	movs	r2, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	61fa      	str	r2, [r7, #28]
 8002e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e30:	f7fd f9d4 	bl	80001dc <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3750      	adds	r7, #80	; 0x50
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000074 	.word	0x20000074

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e94:	f7ff fff0 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0a9b      	lsrs	r3, r3, #10
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	0800502c 	.word	0x0800502c

08002eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ebc:	f7ff ffdc 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0b5b      	lsrs	r3, r3, #13
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	0800502c 	.word	0x0800502c

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e01d      	b.n	8002f2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe fa90 	bl	800142c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 fbde 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d007      	beq.n	8002f68 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e01d      	b.n	8002fcc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d106      	bne.n	8002faa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fe fa93 	bl	80014d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f000 fb8f 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	6839      	ldr	r1, [r7, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fe64 	bl	8003cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a15      	ldr	r2, [pc, #84]	; (8003048 <HAL_TIM_PWM_Start+0x74>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_TIM_PWM_Start+0x2c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <HAL_TIM_PWM_Start+0x78>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_TIM_PWM_Start+0x30>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <HAL_TIM_PWM_Start+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003018:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b06      	cmp	r3, #6
 800302a:	d007      	beq.n	800303c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40010000 	.word	0x40010000
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d841      	bhi.n	80030e4 <HAL_TIM_PWM_Start_IT+0x94>
 8003060:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <HAL_TIM_PWM_Start_IT+0x18>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	0800309d 	.word	0x0800309d
 800306c:	080030e5 	.word	0x080030e5
 8003070:	080030e5 	.word	0x080030e5
 8003074:	080030e5 	.word	0x080030e5
 8003078:	080030af 	.word	0x080030af
 800307c:	080030e5 	.word	0x080030e5
 8003080:	080030e5 	.word	0x080030e5
 8003084:	080030e5 	.word	0x080030e5
 8003088:	080030c1 	.word	0x080030c1
 800308c:	080030e5 	.word	0x080030e5
 8003090:	080030e5 	.word	0x080030e5
 8003094:	080030e5 	.word	0x080030e5
 8003098:	080030d3 	.word	0x080030d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0202 	orr.w	r2, r2, #2
 80030aa:	60da      	str	r2, [r3, #12]
      break;
 80030ac:	e01b      	b.n	80030e6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0204 	orr.w	r2, r2, #4
 80030bc:	60da      	str	r2, [r3, #12]
      break;
 80030be:	e012      	b.n	80030e6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0208 	orr.w	r2, r2, #8
 80030ce:	60da      	str	r2, [r3, #12]
      break;
 80030d0:	e009      	b.n	80030e6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0210 	orr.w	r2, r2, #16
 80030e0:	60da      	str	r2, [r3, #12]
      break;
 80030e2:	e000      	b.n	80030e6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80030e4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2201      	movs	r2, #1
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fde0 	bl	8003cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a15      	ldr	r2, [pc, #84]	; (8003150 <HAL_TIM_PWM_Start_IT+0x100>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <HAL_TIM_PWM_Start_IT+0xb8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a14      	ldr	r2, [pc, #80]	; (8003154 <HAL_TIM_PWM_Start_IT+0x104>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_TIM_PWM_Start_IT+0xbc>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_TIM_PWM_Start_IT+0xbe>
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b06      	cmp	r3, #6
 8003132:	d007      	beq.n	8003144 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000
 8003154:	40010400 	.word	0x40010400

08003158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0202 	mvn.w	r2, #2
 8003184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa82 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fa74 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fa85 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0204 	mvn.w	r2, #4
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa58 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fa4a 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fa5b 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b08      	cmp	r3, #8
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0208 	mvn.w	r2, #8
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa2e 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fa20 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fa31 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b10      	cmp	r3, #16
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0210 	mvn.w	r2, #16
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2208      	movs	r2, #8
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa04 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9f6 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fa07 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0201 	mvn.w	r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f9d0 	bl	800367c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fd82 	bl	8003e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d10e      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d107      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9cc 	bl	80036cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b20      	cmp	r3, #32
 8003340:	d10e      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b20      	cmp	r3, #32
 800334e:	d107      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0220 	mvn.w	r2, #32
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fd4c 	bl	8003df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800337e:	2302      	movs	r3, #2
 8003380:	e0b4      	b.n	80034ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	f200 809f 	bhi.w	80034d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080034d9 	.word	0x080034d9
 80033a8:	080034d9 	.word	0x080034d9
 80033ac:	080034d9 	.word	0x080034d9
 80033b0:	08003415 	.word	0x08003415
 80033b4:	080034d9 	.word	0x080034d9
 80033b8:	080034d9 	.word	0x080034d9
 80033bc:	080034d9 	.word	0x080034d9
 80033c0:	08003457 	.word	0x08003457
 80033c4:	080034d9 	.word	0x080034d9
 80033c8:	080034d9 	.word	0x080034d9
 80033cc:	080034d9 	.word	0x080034d9
 80033d0:	08003497 	.word	0x08003497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa20 	bl	8003820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0208 	orr.w	r2, r2, #8
 80033ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0204 	bic.w	r2, r2, #4
 80033fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6999      	ldr	r1, [r3, #24]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	619a      	str	r2, [r3, #24]
      break;
 8003412:	e062      	b.n	80034da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fa70 	bl	8003900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6999      	ldr	r1, [r3, #24]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	619a      	str	r2, [r3, #24]
      break;
 8003454:	e041      	b.n	80034da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fac5 	bl	80039ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0208 	orr.w	r2, r2, #8
 8003470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0204 	bic.w	r2, r2, #4
 8003480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69d9      	ldr	r1, [r3, #28]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	61da      	str	r2, [r3, #28]
      break;
 8003494:	e021      	b.n	80034da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fb19 	bl	8003ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	61da      	str	r2, [r3, #28]
      break;
 80034d6:	e000      	b.n	80034da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80034d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_TIM_ConfigClockSource+0x18>
 8003508:	2302      	movs	r3, #2
 800350a:	e0b3      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x180>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800352a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003532:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003544:	d03e      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0xd0>
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354a:	f200 8087 	bhi.w	800365c <HAL_TIM_ConfigClockSource+0x168>
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003552:	f000 8085 	beq.w	8003660 <HAL_TIM_ConfigClockSource+0x16c>
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355a:	d87f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x168>
 800355c:	2b70      	cmp	r3, #112	; 0x70
 800355e:	d01a      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0xa2>
 8003560:	2b70      	cmp	r3, #112	; 0x70
 8003562:	d87b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x168>
 8003564:	2b60      	cmp	r3, #96	; 0x60
 8003566:	d050      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x116>
 8003568:	2b60      	cmp	r3, #96	; 0x60
 800356a:	d877      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x168>
 800356c:	2b50      	cmp	r3, #80	; 0x50
 800356e:	d03c      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0xf6>
 8003570:	2b50      	cmp	r3, #80	; 0x50
 8003572:	d873      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x168>
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d058      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x136>
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d86f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x168>
 800357c:	2b30      	cmp	r3, #48	; 0x30
 800357e:	d064      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x156>
 8003580:	2b30      	cmp	r3, #48	; 0x30
 8003582:	d86b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x168>
 8003584:	2b20      	cmp	r3, #32
 8003586:	d060      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x156>
 8003588:	2b20      	cmp	r3, #32
 800358a:	d867      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x168>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05c      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x156>
 8003590:	2b10      	cmp	r3, #16
 8003592:	d05a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003594:	e062      	b.n	800365c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f000 fb65 	bl	8003c74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	609a      	str	r2, [r3, #8]
      break;
 80035c2:	e04e      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6899      	ldr	r1, [r3, #8]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f000 fb4e 	bl	8003c74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e6:	609a      	str	r2, [r3, #8]
      break;
 80035e8:	e03b      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 fac2 	bl	8003b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2150      	movs	r1, #80	; 0x50
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fb1b 	bl	8003c3e <TIM_ITRx_SetConfig>
      break;
 8003608:	e02b      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	461a      	mov	r2, r3
 8003618:	f000 fae1 	bl	8003bde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2160      	movs	r1, #96	; 0x60
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fb0b 	bl	8003c3e <TIM_ITRx_SetConfig>
      break;
 8003628:	e01b      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	461a      	mov	r2, r3
 8003638:	f000 faa2 	bl	8003b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2140      	movs	r1, #64	; 0x40
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fafb 	bl	8003c3e <TIM_ITRx_SetConfig>
      break;
 8003648:	e00b      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f000 faf2 	bl	8003c3e <TIM_ITRx_SetConfig>
      break;
 800365a:	e002      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800365c:	bf00      	nop
 800365e:	e000      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003660:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a40      	ldr	r2, [pc, #256]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d00f      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a3d      	ldr	r2, [pc, #244]	; (80037f8 <TIM_Base_SetConfig+0x118>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00b      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3c      	ldr	r2, [pc, #240]	; (80037fc <TIM_Base_SetConfig+0x11c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3b      	ldr	r2, [pc, #236]	; (8003800 <TIM_Base_SetConfig+0x120>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <TIM_Base_SetConfig+0x124>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d02b      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d027      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <TIM_Base_SetConfig+0x118>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d023      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2b      	ldr	r2, [pc, #172]	; (80037fc <TIM_Base_SetConfig+0x11c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <TIM_Base_SetConfig+0x120>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01b      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a29      	ldr	r2, [pc, #164]	; (8003804 <TIM_Base_SetConfig+0x124>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d017      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a28      	ldr	r2, [pc, #160]	; (8003808 <TIM_Base_SetConfig+0x128>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <TIM_Base_SetConfig+0x12c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a26      	ldr	r2, [pc, #152]	; (8003810 <TIM_Base_SetConfig+0x130>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <TIM_Base_SetConfig+0x134>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <TIM_Base_SetConfig+0x138>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <TIM_Base_SetConfig+0x13c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <TIM_Base_SetConfig+0x124>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	615a      	str	r2, [r3, #20]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40010400 	.word	0x40010400
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800
 8003814:	40001800 	.word	0x40001800
 8003818:	40001c00 	.word	0x40001c00
 800381c:	40002000 	.word	0x40002000

08003820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f023 0201 	bic.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 0302 	bic.w	r3, r3, #2
 8003868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <TIM_OC1_SetConfig+0xd8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_OC1_SetConfig+0x64>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <TIM_OC1_SetConfig+0xdc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10c      	bne.n	800389e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0308 	bic.w	r3, r3, #8
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <TIM_OC1_SetConfig+0xd8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d003      	beq.n	80038ae <TIM_OC1_SetConfig+0x8e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a14      	ldr	r2, [pc, #80]	; (80038fc <TIM_OC1_SetConfig+0xdc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d111      	bne.n	80038d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40010400 	.word	0x40010400

08003900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f023 0210 	bic.w	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0320 	bic.w	r3, r3, #32
 800394a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <TIM_OC2_SetConfig+0xe4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_OC2_SetConfig+0x68>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <TIM_OC2_SetConfig+0xe8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d10d      	bne.n	8003984 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800396e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <TIM_OC2_SetConfig+0xe4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_OC2_SetConfig+0x94>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <TIM_OC2_SetConfig+0xe8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d113      	bne.n	80039bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800399a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40010400 	.word	0x40010400

080039ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a21      	ldr	r2, [pc, #132]	; (8003acc <TIM_OC3_SetConfig+0xe0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_OC3_SetConfig+0x66>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a20      	ldr	r2, [pc, #128]	; (8003ad0 <TIM_OC3_SetConfig+0xe4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10d      	bne.n	8003a6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a16      	ldr	r2, [pc, #88]	; (8003acc <TIM_OC3_SetConfig+0xe0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_OC3_SetConfig+0x92>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <TIM_OC3_SetConfig+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d113      	bne.n	8003aa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	031b      	lsls	r3, r3, #12
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <TIM_OC4_SetConfig+0xa4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_OC4_SetConfig+0x68>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <TIM_OC4_SetConfig+0xa8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d109      	bne.n	8003b50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	019b      	lsls	r3, r3, #6
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	40010400 	.word	0x40010400

08003b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0201 	bic.w	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f023 030a 	bic.w	r3, r3, #10
 8003bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b087      	sub	sp, #28
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f023 0210 	bic.w	r2, r3, #16
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b085      	sub	sp, #20
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f043 0307 	orr.w	r3, r3, #7
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	609a      	str	r2, [r3, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1a      	ldr	r2, [r3, #32]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1a      	ldr	r2, [r3, #32]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e05a      	b.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d01d      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a18      	ldr	r2, [pc, #96]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d10c      	bne.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40010400 	.word	0x40010400
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40001800 	.word	0x40001800

08003df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e03f      	b.n	8003eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd fbca 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fabd 	bl	80043e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d140      	bne.n	8003f56 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_UART_Receive_IT+0x26>
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e039      	b.n	8003f58 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Receive_IT+0x38>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e032      	b.n	8003f58 <HAL_UART_Receive_IT+0x9e>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2222      	movs	r2, #34	; 0x22
 8003f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f30:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0220 	orr.w	r2, r2, #32
 8003f50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x52>
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f996 	bl	80042e0 <UART_Receive_IT>
      return;
 8003fb4:	e0d0      	b.n	8004158 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80b0 	beq.w	800411e <HAL_UART_IRQHandler+0x1ba>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x70>
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80a5 	beq.w	800411e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x90>
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_UART_IRQHandler+0xb0>
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	f043 0202 	orr.w	r2, r3, #2
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_UART_IRQHandler+0xd0>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00f      	beq.n	800405e <HAL_UART_IRQHandler+0xfa>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <HAL_UART_IRQHandler+0xee>
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	f043 0208 	orr.w	r2, r3, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d077      	beq.n	8004156 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_UART_IRQHandler+0x11c>
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f930 	bl	80042e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <HAL_UART_IRQHandler+0x144>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d031      	beq.n	800410c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f879 	bl	80041a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d123      	bne.n	8004104 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	4a21      	ldr	r2, [pc, #132]	; (8004160 <HAL_UART_IRQHandler+0x1fc>)
 80040da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fd fe2d 	bl	8001d40 <HAL_DMA_Abort_IT>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d016      	beq.n	800411a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040f6:	4610      	mov	r0, r2
 80040f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fa:	e00e      	b.n	800411a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f845 	bl	800418c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004102:	e00a      	b.n	800411a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f841 	bl	800418c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410a:	e006      	b.n	800411a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f83d 	bl	800418c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004118:	e01d      	b.n	8004156 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411a:	bf00      	nop
    return;
 800411c:	e01b      	b.n	8004156 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_UART_IRQHandler+0x1d6>
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f866 	bl	8004204 <UART_Transmit_IT>
    return;
 8004138:	e00e      	b.n	8004158 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <HAL_UART_IRQHandler+0x1f4>
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8ae 	bl	80042b0 <UART_EndTransmit_IT>
    return;
 8004154:	e000      	b.n	8004158 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004156:	bf00      	nop
  }
}
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	080041dd 	.word	0x080041dd

08004164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff ffc8 	bl	800418c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b21      	cmp	r3, #33	; 0x21
 8004216:	d144      	bne.n	80042a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	d11a      	bne.n	8004258 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004236:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	1c9a      	adds	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]
 800424a:	e00e      	b.n	800426a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	621a      	str	r2, [r3, #32]
 8004256:	e008      	b.n	800426a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	1c59      	adds	r1, r3, #1
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6211      	str	r1, [r2, #32]
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29b      	uxth	r3, r3
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4619      	mov	r1, r3
 8004278:	84d1      	strh	r1, [r2, #38]	; 0x26
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800428c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800429c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff47 	bl	8004164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b22      	cmp	r3, #34	; 0x22
 80042f2:	d171      	bne.n	80043d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fc:	d123      	bne.n	8004346 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10e      	bne.n	800432a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
 8004328:	e029      	b.n	800437e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	b29b      	uxth	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
 8004344:	e01b      	b.n	800437e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6858      	ldr	r0, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	1c59      	adds	r1, r3, #1
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6291      	str	r1, [r2, #40]	; 0x28
 800435e:	b2c2      	uxtb	r2, r0
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e00c      	b.n	800437e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	1c58      	adds	r0, r3, #1
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	6288      	str	r0, [r1, #40]	; 0x28
 8004376:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29b      	uxth	r3, r3
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4619      	mov	r1, r3
 800438c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800438e:	2b00      	cmp	r3, #0
 8004390:	d120      	bne.n	80043d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0220 	bic.w	r2, r2, #32
 80043a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fed4 	bl	8004178 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e002      	b.n	80043da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e000      	b.n	80043da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
  }
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004402:	68d9      	ldr	r1, [r3, #12]
 8004404:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	ea40 0301 	orr.w	r3, r0, r1
 800440e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004410:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	431a      	orrs	r2, r3
 800441e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	431a      	orrs	r2, r3
 8004426:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004432:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800443e:	f021 010c 	bic.w	r1, r1, #12
 8004442:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800444c:	430b      	orrs	r3, r1
 800444e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004450:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800445c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004460:	6999      	ldr	r1, [r3, #24]
 8004462:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	ea40 0301 	orr.w	r3, r0, r1
 800446c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004478:	f040 824a 	bne.w	8004910 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800447c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b96      	ldr	r3, [pc, #600]	; (80046dc <UART_SetConfig+0x2f8>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d006      	beq.n	8004496 <UART_SetConfig+0xb2>
 8004488:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b94      	ldr	r3, [pc, #592]	; (80046e0 <UART_SetConfig+0x2fc>)
 8004490:	429a      	cmp	r2, r3
 8004492:	f040 8129 	bne.w	80046e8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004496:	f7fe fd0f 	bl	8002eb8 <HAL_RCC_GetPCLK2Freq>
 800449a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800449e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80044a8:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80044ac:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80044b0:	4622      	mov	r2, r4
 80044b2:	462b      	mov	r3, r5
 80044b4:	1891      	adds	r1, r2, r2
 80044b6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80044ba:	415b      	adcs	r3, r3
 80044bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80044c0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80044c4:	4621      	mov	r1, r4
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80044cc:	4629      	mov	r1, r5
 80044ce:	414b      	adcs	r3, r1
 80044d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80044e0:	4649      	mov	r1, r9
 80044e2:	00cb      	lsls	r3, r1, #3
 80044e4:	4641      	mov	r1, r8
 80044e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ea:	4641      	mov	r1, r8
 80044ec:	00ca      	lsls	r2, r1, #3
 80044ee:	4610      	mov	r0, r2
 80044f0:	4619      	mov	r1, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	4622      	mov	r2, r4
 80044f6:	189b      	adds	r3, r3, r2
 80044f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80044fc:	462b      	mov	r3, r5
 80044fe:	460a      	mov	r2, r1
 8004500:	eb42 0303 	adc.w	r3, r2, r3
 8004504:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004508:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004514:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004518:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800451c:	460b      	mov	r3, r1
 800451e:	18db      	adds	r3, r3, r3
 8004520:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004524:	4613      	mov	r3, r2
 8004526:	eb42 0303 	adc.w	r3, r2, r3
 800452a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800452e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004532:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004536:	f7fb fe51 	bl	80001dc <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <UART_SetConfig+0x300>)
 8004540:	fba3 2302 	umull	r2, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	011c      	lsls	r4, r3, #4
 8004548:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800454c:	2200      	movs	r2, #0
 800454e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004552:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004556:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800455a:	4642      	mov	r2, r8
 800455c:	464b      	mov	r3, r9
 800455e:	1891      	adds	r1, r2, r2
 8004560:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004564:	415b      	adcs	r3, r3
 8004566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800456a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800456e:	4641      	mov	r1, r8
 8004570:	1851      	adds	r1, r2, r1
 8004572:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004576:	4649      	mov	r1, r9
 8004578:	414b      	adcs	r3, r1
 800457a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800458a:	4659      	mov	r1, fp
 800458c:	00cb      	lsls	r3, r1, #3
 800458e:	4651      	mov	r1, sl
 8004590:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004594:	4651      	mov	r1, sl
 8004596:	00ca      	lsls	r2, r1, #3
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	4603      	mov	r3, r0
 800459e:	4642      	mov	r2, r8
 80045a0:	189b      	adds	r3, r3, r2
 80045a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80045a6:	464b      	mov	r3, r9
 80045a8:	460a      	mov	r2, r1
 80045aa:	eb42 0303 	adc.w	r3, r2, r3
 80045ae:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80045b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80045be:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80045c2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80045c6:	460b      	mov	r3, r1
 80045c8:	18db      	adds	r3, r3, r3
 80045ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045ce:	4613      	mov	r3, r2
 80045d0:	eb42 0303 	adc.w	r3, r2, r3
 80045d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045d8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80045dc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80045e0:	f7fb fdfc 	bl	80001dc <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4611      	mov	r1, r2
 80045ea:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <UART_SetConfig+0x300>)
 80045ec:	fba3 2301 	umull	r2, r3, r3, r1
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	2264      	movs	r2, #100	; 0x64
 80045f4:	fb02 f303 	mul.w	r3, r2, r3
 80045f8:	1acb      	subs	r3, r1, r3
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004600:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <UART_SetConfig+0x300>)
 8004602:	fba3 2302 	umull	r2, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800460e:	441c      	add	r4, r3
 8004610:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800461a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800461e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004622:	4642      	mov	r2, r8
 8004624:	464b      	mov	r3, r9
 8004626:	1891      	adds	r1, r2, r2
 8004628:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800462c:	415b      	adcs	r3, r3
 800462e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004632:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004636:	4641      	mov	r1, r8
 8004638:	1851      	adds	r1, r2, r1
 800463a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800463e:	4649      	mov	r1, r9
 8004640:	414b      	adcs	r3, r1
 8004642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004652:	4659      	mov	r1, fp
 8004654:	00cb      	lsls	r3, r1, #3
 8004656:	4651      	mov	r1, sl
 8004658:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465c:	4651      	mov	r1, sl
 800465e:	00ca      	lsls	r2, r1, #3
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	4603      	mov	r3, r0
 8004666:	4642      	mov	r2, r8
 8004668:	189b      	adds	r3, r3, r2
 800466a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800466e:	464b      	mov	r3, r9
 8004670:	460a      	mov	r2, r1
 8004672:	eb42 0303 	adc.w	r3, r2, r3
 8004676:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800467a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004686:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800468a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800468e:	460b      	mov	r3, r1
 8004690:	18db      	adds	r3, r3, r3
 8004692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004696:	4613      	mov	r3, r2
 8004698:	eb42 0303 	adc.w	r3, r2, r3
 800469c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046a0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80046a4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80046a8:	f7fb fd98 	bl	80001dc <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <UART_SetConfig+0x300>)
 80046b2:	fba3 1302 	umull	r1, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2164      	movs	r1, #100	; 0x64
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	3332      	adds	r3, #50	; 0x32
 80046c4:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <UART_SetConfig+0x300>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	f003 0207 	and.w	r2, r3, #7
 80046d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4422      	add	r2, r4
 80046d8:	609a      	str	r2, [r3, #8]
 80046da:	e349      	b.n	8004d70 <UART_SetConfig+0x98c>
 80046dc:	40011000 	.word	0x40011000
 80046e0:	40011400 	.word	0x40011400
 80046e4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046e8:	f7fe fbd2 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 80046ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80046fa:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80046fe:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004702:	4622      	mov	r2, r4
 8004704:	462b      	mov	r3, r5
 8004706:	1891      	adds	r1, r2, r2
 8004708:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800470c:	415b      	adcs	r3, r3
 800470e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004712:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004716:	4621      	mov	r1, r4
 8004718:	eb12 0a01 	adds.w	sl, r2, r1
 800471c:	4629      	mov	r1, r5
 800471e:	eb43 0b01 	adc.w	fp, r3, r1
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800472e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004736:	4692      	mov	sl, r2
 8004738:	469b      	mov	fp, r3
 800473a:	4623      	mov	r3, r4
 800473c:	eb1a 0303 	adds.w	r3, sl, r3
 8004740:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004744:	462b      	mov	r3, r5
 8004746:	eb4b 0303 	adc.w	r3, fp, r3
 800474a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800474e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800475a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800475e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004762:	460b      	mov	r3, r1
 8004764:	18db      	adds	r3, r3, r3
 8004766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800476a:	4613      	mov	r3, r2
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004774:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004778:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800477c:	f7fb fd2e 	bl	80001dc <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4b61      	ldr	r3, [pc, #388]	; (800490c <UART_SetConfig+0x528>)
 8004786:	fba3 2302 	umull	r2, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	011c      	lsls	r4, r3, #4
 800478e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004792:	2200      	movs	r2, #0
 8004794:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004798:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800479c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80047a0:	4642      	mov	r2, r8
 80047a2:	464b      	mov	r3, r9
 80047a4:	1891      	adds	r1, r2, r2
 80047a6:	67b9      	str	r1, [r7, #120]	; 0x78
 80047a8:	415b      	adcs	r3, r3
 80047aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047ac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80047b0:	4641      	mov	r1, r8
 80047b2:	1851      	adds	r1, r2, r1
 80047b4:	6739      	str	r1, [r7, #112]	; 0x70
 80047b6:	4649      	mov	r1, r9
 80047b8:	414b      	adcs	r3, r1
 80047ba:	677b      	str	r3, [r7, #116]	; 0x74
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80047c8:	4659      	mov	r1, fp
 80047ca:	00cb      	lsls	r3, r1, #3
 80047cc:	4651      	mov	r1, sl
 80047ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047d2:	4651      	mov	r1, sl
 80047d4:	00ca      	lsls	r2, r1, #3
 80047d6:	4610      	mov	r0, r2
 80047d8:	4619      	mov	r1, r3
 80047da:	4603      	mov	r3, r0
 80047dc:	4642      	mov	r2, r8
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80047e4:	464b      	mov	r3, r9
 80047e6:	460a      	mov	r2, r1
 80047e8:	eb42 0303 	adc.w	r3, r2, r3
 80047ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80047f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80047fc:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004800:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004804:	460b      	mov	r3, r1
 8004806:	18db      	adds	r3, r3, r3
 8004808:	66bb      	str	r3, [r7, #104]	; 0x68
 800480a:	4613      	mov	r3, r2
 800480c:	eb42 0303 	adc.w	r3, r2, r3
 8004810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004812:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004816:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800481a:	f7fb fcdf 	bl	80001dc <__aeabi_uldivmod>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4611      	mov	r1, r2
 8004824:	4b39      	ldr	r3, [pc, #228]	; (800490c <UART_SetConfig+0x528>)
 8004826:	fba3 2301 	umull	r2, r3, r3, r1
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	2264      	movs	r2, #100	; 0x64
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	1acb      	subs	r3, r1, r3
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800483a:	4b34      	ldr	r3, [pc, #208]	; (800490c <UART_SetConfig+0x528>)
 800483c:	fba3 2302 	umull	r2, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004848:	441c      	add	r4, r3
 800484a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004854:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004858:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800485c:	4642      	mov	r2, r8
 800485e:	464b      	mov	r3, r9
 8004860:	1891      	adds	r1, r2, r2
 8004862:	6639      	str	r1, [r7, #96]	; 0x60
 8004864:	415b      	adcs	r3, r3
 8004866:	667b      	str	r3, [r7, #100]	; 0x64
 8004868:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800486c:	4641      	mov	r1, r8
 800486e:	1851      	adds	r1, r2, r1
 8004870:	65b9      	str	r1, [r7, #88]	; 0x58
 8004872:	4649      	mov	r1, r9
 8004874:	414b      	adcs	r3, r1
 8004876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004884:	4659      	mov	r1, fp
 8004886:	00cb      	lsls	r3, r1, #3
 8004888:	4651      	mov	r1, sl
 800488a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800488e:	4651      	mov	r1, sl
 8004890:	00ca      	lsls	r2, r1, #3
 8004892:	4610      	mov	r0, r2
 8004894:	4619      	mov	r1, r3
 8004896:	4603      	mov	r3, r0
 8004898:	4642      	mov	r2, r8
 800489a:	189b      	adds	r3, r3, r2
 800489c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80048a0:	464b      	mov	r3, r9
 80048a2:	460a      	mov	r2, r1
 80048a4:	eb42 0303 	adc.w	r3, r2, r3
 80048a8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80048ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80048b8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80048bc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80048c0:	460b      	mov	r3, r1
 80048c2:	18db      	adds	r3, r3, r3
 80048c4:	653b      	str	r3, [r7, #80]	; 0x50
 80048c6:	4613      	mov	r3, r2
 80048c8:	eb42 0303 	adc.w	r3, r2, r3
 80048cc:	657b      	str	r3, [r7, #84]	; 0x54
 80048ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048d2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80048d6:	f7fb fc81 	bl	80001dc <__aeabi_uldivmod>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <UART_SetConfig+0x528>)
 80048e0:	fba3 1302 	umull	r1, r3, r3, r2
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	2164      	movs	r1, #100	; 0x64
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	3332      	adds	r3, #50	; 0x32
 80048f2:	4a06      	ldr	r2, [pc, #24]	; (800490c <UART_SetConfig+0x528>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	f003 0207 	and.w	r2, r3, #7
 80048fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4422      	add	r2, r4
 8004906:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004908:	e232      	b.n	8004d70 <UART_SetConfig+0x98c>
 800490a:	bf00      	nop
 800490c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004910:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b8d      	ldr	r3, [pc, #564]	; (8004b4c <UART_SetConfig+0x768>)
 8004918:	429a      	cmp	r2, r3
 800491a:	d006      	beq.n	800492a <UART_SetConfig+0x546>
 800491c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b8b      	ldr	r3, [pc, #556]	; (8004b50 <UART_SetConfig+0x76c>)
 8004924:	429a      	cmp	r2, r3
 8004926:	f040 8117 	bne.w	8004b58 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800492a:	f7fe fac5 	bl	8002eb8 <HAL_RCC_GetPCLK2Freq>
 800492e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004932:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004936:	2200      	movs	r2, #0
 8004938:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800493c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004940:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004944:	4622      	mov	r2, r4
 8004946:	462b      	mov	r3, r5
 8004948:	1891      	adds	r1, r2, r2
 800494a:	64b9      	str	r1, [r7, #72]	; 0x48
 800494c:	415b      	adcs	r3, r3
 800494e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004950:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004954:	4621      	mov	r1, r4
 8004956:	eb12 0801 	adds.w	r8, r2, r1
 800495a:	4629      	mov	r1, r5
 800495c:	eb43 0901 	adc.w	r9, r3, r1
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004970:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004974:	4690      	mov	r8, r2
 8004976:	4699      	mov	r9, r3
 8004978:	4623      	mov	r3, r4
 800497a:	eb18 0303 	adds.w	r3, r8, r3
 800497e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004982:	462b      	mov	r3, r5
 8004984:	eb49 0303 	adc.w	r3, r9, r3
 8004988:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800498c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004998:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80049a8:	4629      	mov	r1, r5
 80049aa:	008b      	lsls	r3, r1, #2
 80049ac:	4621      	mov	r1, r4
 80049ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b2:	4621      	mov	r1, r4
 80049b4:	008a      	lsls	r2, r1, #2
 80049b6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80049ba:	f7fb fc0f 	bl	80001dc <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4b64      	ldr	r3, [pc, #400]	; (8004b54 <UART_SetConfig+0x770>)
 80049c4:	fba3 2302 	umull	r2, r3, r3, r2
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	011c      	lsls	r4, r3, #4
 80049cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80049d6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80049da:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80049de:	4642      	mov	r2, r8
 80049e0:	464b      	mov	r3, r9
 80049e2:	1891      	adds	r1, r2, r2
 80049e4:	6439      	str	r1, [r7, #64]	; 0x40
 80049e6:	415b      	adcs	r3, r3
 80049e8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049ee:	4641      	mov	r1, r8
 80049f0:	1851      	adds	r1, r2, r1
 80049f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049f4:	4649      	mov	r1, r9
 80049f6:	414b      	adcs	r3, r1
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004a06:	4659      	mov	r1, fp
 8004a08:	00cb      	lsls	r3, r1, #3
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a10:	4651      	mov	r1, sl
 8004a12:	00ca      	lsls	r2, r1, #3
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	4603      	mov	r3, r0
 8004a1a:	4642      	mov	r2, r8
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004a22:	464b      	mov	r3, r9
 8004a24:	460a      	mov	r2, r1
 8004a26:	eb42 0303 	adc.w	r3, r2, r3
 8004a2a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004a2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004a3a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	008b      	lsls	r3, r1, #2
 8004a4e:	4641      	mov	r1, r8
 8004a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a54:	4641      	mov	r1, r8
 8004a56:	008a      	lsls	r2, r1, #2
 8004a58:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004a5c:	f7fb fbbe 	bl	80001dc <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <UART_SetConfig+0x770>)
 8004a66:	fba3 1302 	umull	r1, r3, r3, r2
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	2164      	movs	r1, #100	; 0x64
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	3332      	adds	r3, #50	; 0x32
 8004a78:	4a36      	ldr	r2, [pc, #216]	; (8004b54 <UART_SetConfig+0x770>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a84:	441c      	add	r4, r3
 8004a86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004a90:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004a94:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004a98:	4642      	mov	r2, r8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	1891      	adds	r1, r2, r2
 8004a9e:	6339      	str	r1, [r7, #48]	; 0x30
 8004aa0:	415b      	adcs	r3, r3
 8004aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	1851      	adds	r1, r2, r1
 8004aac:	62b9      	str	r1, [r7, #40]	; 0x28
 8004aae:	4649      	mov	r1, r9
 8004ab0:	414b      	adcs	r3, r1
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	00cb      	lsls	r3, r1, #3
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aca:	4651      	mov	r1, sl
 8004acc:	00ca      	lsls	r2, r1, #3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	189b      	adds	r3, r3, r2
 8004ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004adc:	464b      	mov	r3, r9
 8004ade:	460a      	mov	r2, r1
 8004ae0:	eb42 0303 	adc.w	r3, r2, r3
 8004ae4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ae8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004af4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004b04:	4649      	mov	r1, r9
 8004b06:	008b      	lsls	r3, r1, #2
 8004b08:	4641      	mov	r1, r8
 8004b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b0e:	4641      	mov	r1, r8
 8004b10:	008a      	lsls	r2, r1, #2
 8004b12:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004b16:	f7fb fb61 	bl	80001dc <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <UART_SetConfig+0x770>)
 8004b20:	fba3 1302 	umull	r1, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2164      	movs	r1, #100	; 0x64
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	3332      	adds	r3, #50	; 0x32
 8004b32:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <UART_SetConfig+0x770>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f003 020f 	and.w	r2, r3, #15
 8004b3e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4422      	add	r2, r4
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	e112      	b.n	8004d70 <UART_SetConfig+0x98c>
 8004b4a:	bf00      	nop
 8004b4c:	40011000 	.word	0x40011000
 8004b50:	40011400 	.word	0x40011400
 8004b54:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe f99a 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004b6a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004b6e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004b72:	4642      	mov	r2, r8
 8004b74:	464b      	mov	r3, r9
 8004b76:	1891      	adds	r1, r2, r2
 8004b78:	6239      	str	r1, [r7, #32]
 8004b7a:	415b      	adcs	r3, r3
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b82:	4641      	mov	r1, r8
 8004b84:	1854      	adds	r4, r2, r1
 8004b86:	4649      	mov	r1, r9
 8004b88:	eb43 0501 	adc.w	r5, r3, r1
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	00eb      	lsls	r3, r5, #3
 8004b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9a:	00e2      	lsls	r2, r4, #3
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	4643      	mov	r3, r8
 8004ba2:	18e3      	adds	r3, r4, r3
 8004ba4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004ba8:	464b      	mov	r3, r9
 8004baa:	eb45 0303 	adc.w	r3, r5, r3
 8004bae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004bb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004bbe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004bce:	4629      	mov	r1, r5
 8004bd0:	008b      	lsls	r3, r1, #2
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd8:	4621      	mov	r1, r4
 8004bda:	008a      	lsls	r2, r1, #2
 8004bdc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004be0:	f7fb fafc 	bl	80001dc <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4b64      	ldr	r3, [pc, #400]	; (8004d7c <UART_SetConfig+0x998>)
 8004bea:	fba3 2302 	umull	r2, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	011c      	lsls	r4, r3, #4
 8004bf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bfc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004c00:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	61b9      	str	r1, [r7, #24]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c14:	4641      	mov	r1, r8
 8004c16:	1851      	adds	r1, r2, r1
 8004c18:	6139      	str	r1, [r7, #16]
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	414b      	adcs	r3, r1
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	00cb      	lsls	r3, r1, #3
 8004c30:	4651      	mov	r1, sl
 8004c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c36:	4651      	mov	r1, sl
 8004c38:	00ca      	lsls	r2, r1, #3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4642      	mov	r2, r8
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c48:	464b      	mov	r3, r9
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c60:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004c70:	4649      	mov	r1, r9
 8004c72:	008b      	lsls	r3, r1, #2
 8004c74:	4641      	mov	r1, r8
 8004c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	008a      	lsls	r2, r1, #2
 8004c7e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004c82:	f7fb faab 	bl	80001dc <__aeabi_uldivmod>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4b3c      	ldr	r3, [pc, #240]	; (8004d7c <UART_SetConfig+0x998>)
 8004c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	2164      	movs	r1, #100	; 0x64
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	3332      	adds	r3, #50	; 0x32
 8004c9e:	4a37      	ldr	r2, [pc, #220]	; (8004d7c <UART_SetConfig+0x998>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004caa:	441c      	add	r4, r3
 8004cac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cba:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004cbe:	4642      	mov	r2, r8
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	1891      	adds	r1, r2, r2
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	415b      	adcs	r3, r3
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cce:	4641      	mov	r1, r8
 8004cd0:	1851      	adds	r1, r2, r1
 8004cd2:	6039      	str	r1, [r7, #0]
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	414b      	adcs	r3, r1
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	00cb      	lsls	r3, r1, #3
 8004cea:	4651      	mov	r1, sl
 8004cec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	00ca      	lsls	r2, r1, #3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d02:	464b      	mov	r3, r9
 8004d04:	460a      	mov	r2, r1
 8004d06:	eb42 0303 	adc.w	r3, r2, r3
 8004d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	008b      	lsls	r3, r1, #2
 8004d2e:	4641      	mov	r1, r8
 8004d30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d34:	4641      	mov	r1, r8
 8004d36:	008a      	lsls	r2, r1, #2
 8004d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d3c:	f7fb fa4e 	bl	80001dc <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <UART_SetConfig+0x998>)
 8004d46:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2164      	movs	r1, #100	; 0x64
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	3332      	adds	r3, #50	; 0x32
 8004d58:	4a08      	ldr	r2, [pc, #32]	; (8004d7c <UART_SetConfig+0x998>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	f003 020f 	and.w	r2, r3, #15
 8004d64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4422      	add	r2, r4
 8004d6c:	609a      	str	r2, [r3, #8]
}
 8004d6e:	e7ff      	b.n	8004d70 <UART_SetConfig+0x98c>
 8004d70:	bf00      	nop
 8004d72:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004d76:	46bd      	mov	sp, r7
 8004d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7c:	51eb851f 	.word	0x51eb851f

08004d80 <atoi>:
 8004d80:	220a      	movs	r2, #10
 8004d82:	2100      	movs	r1, #0
 8004d84:	f000 b8c2 	b.w	8004f0c <strtol>

08004d88 <__errno>:
 8004d88:	4b01      	ldr	r3, [pc, #4]	; (8004d90 <__errno+0x8>)
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000080 	.word	0x20000080

08004d94 <__libc_init_array>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	4d0d      	ldr	r5, [pc, #52]	; (8004dcc <__libc_init_array+0x38>)
 8004d98:	4c0d      	ldr	r4, [pc, #52]	; (8004dd0 <__libc_init_array+0x3c>)
 8004d9a:	1b64      	subs	r4, r4, r5
 8004d9c:	10a4      	asrs	r4, r4, #2
 8004d9e:	2600      	movs	r6, #0
 8004da0:	42a6      	cmp	r6, r4
 8004da2:	d109      	bne.n	8004db8 <__libc_init_array+0x24>
 8004da4:	4d0b      	ldr	r5, [pc, #44]	; (8004dd4 <__libc_init_array+0x40>)
 8004da6:	4c0c      	ldr	r4, [pc, #48]	; (8004dd8 <__libc_init_array+0x44>)
 8004da8:	f000 f8ba 	bl	8004f20 <_init>
 8004dac:	1b64      	subs	r4, r4, r5
 8004dae:	10a4      	asrs	r4, r4, #2
 8004db0:	2600      	movs	r6, #0
 8004db2:	42a6      	cmp	r6, r4
 8004db4:	d105      	bne.n	8004dc2 <__libc_init_array+0x2e>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbc:	4798      	blx	r3
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	e7ee      	b.n	8004da0 <__libc_init_array+0xc>
 8004dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc6:	4798      	blx	r3
 8004dc8:	3601      	adds	r6, #1
 8004dca:	e7f2      	b.n	8004db2 <__libc_init_array+0x1e>
 8004dcc:	080051a8 	.word	0x080051a8
 8004dd0:	080051a8 	.word	0x080051a8
 8004dd4:	080051a8 	.word	0x080051a8
 8004dd8:	080051ac 	.word	0x080051ac

08004ddc <memcpy>:
 8004ddc:	440a      	add	r2, r1
 8004dde:	4291      	cmp	r1, r2
 8004de0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004de4:	d100      	bne.n	8004de8 <memcpy+0xc>
 8004de6:	4770      	bx	lr
 8004de8:	b510      	push	{r4, lr}
 8004dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004df2:	4291      	cmp	r1, r2
 8004df4:	d1f9      	bne.n	8004dea <memcpy+0xe>
 8004df6:	bd10      	pop	{r4, pc}

08004df8 <memset>:
 8004df8:	4402      	add	r2, r0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d100      	bne.n	8004e02 <memset+0xa>
 8004e00:	4770      	bx	lr
 8004e02:	f803 1b01 	strb.w	r1, [r3], #1
 8004e06:	e7f9      	b.n	8004dfc <memset+0x4>

08004e08 <_strtol_l.constprop.0>:
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0e:	d001      	beq.n	8004e14 <_strtol_l.constprop.0+0xc>
 8004e10:	2b24      	cmp	r3, #36	; 0x24
 8004e12:	d906      	bls.n	8004e22 <_strtol_l.constprop.0+0x1a>
 8004e14:	f7ff ffb8 	bl	8004d88 <__errno>
 8004e18:	2316      	movs	r3, #22
 8004e1a:	6003      	str	r3, [r0, #0]
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004f08 <_strtol_l.constprop.0+0x100>
 8004e26:	460d      	mov	r5, r1
 8004e28:	462e      	mov	r6, r5
 8004e2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004e32:	f017 0708 	ands.w	r7, r7, #8
 8004e36:	d1f7      	bne.n	8004e28 <_strtol_l.constprop.0+0x20>
 8004e38:	2c2d      	cmp	r4, #45	; 0x2d
 8004e3a:	d132      	bne.n	8004ea2 <_strtol_l.constprop.0+0x9a>
 8004e3c:	782c      	ldrb	r4, [r5, #0]
 8004e3e:	2701      	movs	r7, #1
 8004e40:	1cb5      	adds	r5, r6, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d05b      	beq.n	8004efe <_strtol_l.constprop.0+0xf6>
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d109      	bne.n	8004e5e <_strtol_l.constprop.0+0x56>
 8004e4a:	2c30      	cmp	r4, #48	; 0x30
 8004e4c:	d107      	bne.n	8004e5e <_strtol_l.constprop.0+0x56>
 8004e4e:	782c      	ldrb	r4, [r5, #0]
 8004e50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004e54:	2c58      	cmp	r4, #88	; 0x58
 8004e56:	d14d      	bne.n	8004ef4 <_strtol_l.constprop.0+0xec>
 8004e58:	786c      	ldrb	r4, [r5, #1]
 8004e5a:	2310      	movs	r3, #16
 8004e5c:	3502      	adds	r5, #2
 8004e5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004e62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004e66:	f04f 0c00 	mov.w	ip, #0
 8004e6a:	fbb8 f9f3 	udiv	r9, r8, r3
 8004e6e:	4666      	mov	r6, ip
 8004e70:	fb03 8a19 	mls	sl, r3, r9, r8
 8004e74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004e78:	f1be 0f09 	cmp.w	lr, #9
 8004e7c:	d816      	bhi.n	8004eac <_strtol_l.constprop.0+0xa4>
 8004e7e:	4674      	mov	r4, lr
 8004e80:	42a3      	cmp	r3, r4
 8004e82:	dd24      	ble.n	8004ece <_strtol_l.constprop.0+0xc6>
 8004e84:	f1bc 0f00 	cmp.w	ip, #0
 8004e88:	db1e      	blt.n	8004ec8 <_strtol_l.constprop.0+0xc0>
 8004e8a:	45b1      	cmp	r9, r6
 8004e8c:	d31c      	bcc.n	8004ec8 <_strtol_l.constprop.0+0xc0>
 8004e8e:	d101      	bne.n	8004e94 <_strtol_l.constprop.0+0x8c>
 8004e90:	45a2      	cmp	sl, r4
 8004e92:	db19      	blt.n	8004ec8 <_strtol_l.constprop.0+0xc0>
 8004e94:	fb06 4603 	mla	r6, r6, r3, r4
 8004e98:	f04f 0c01 	mov.w	ip, #1
 8004e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ea0:	e7e8      	b.n	8004e74 <_strtol_l.constprop.0+0x6c>
 8004ea2:	2c2b      	cmp	r4, #43	; 0x2b
 8004ea4:	bf04      	itt	eq
 8004ea6:	782c      	ldrbeq	r4, [r5, #0]
 8004ea8:	1cb5      	addeq	r5, r6, #2
 8004eaa:	e7ca      	b.n	8004e42 <_strtol_l.constprop.0+0x3a>
 8004eac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004eb0:	f1be 0f19 	cmp.w	lr, #25
 8004eb4:	d801      	bhi.n	8004eba <_strtol_l.constprop.0+0xb2>
 8004eb6:	3c37      	subs	r4, #55	; 0x37
 8004eb8:	e7e2      	b.n	8004e80 <_strtol_l.constprop.0+0x78>
 8004eba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004ebe:	f1be 0f19 	cmp.w	lr, #25
 8004ec2:	d804      	bhi.n	8004ece <_strtol_l.constprop.0+0xc6>
 8004ec4:	3c57      	subs	r4, #87	; 0x57
 8004ec6:	e7db      	b.n	8004e80 <_strtol_l.constprop.0+0x78>
 8004ec8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004ecc:	e7e6      	b.n	8004e9c <_strtol_l.constprop.0+0x94>
 8004ece:	f1bc 0f00 	cmp.w	ip, #0
 8004ed2:	da05      	bge.n	8004ee0 <_strtol_l.constprop.0+0xd8>
 8004ed4:	2322      	movs	r3, #34	; 0x22
 8004ed6:	6003      	str	r3, [r0, #0]
 8004ed8:	4646      	mov	r6, r8
 8004eda:	b942      	cbnz	r2, 8004eee <_strtol_l.constprop.0+0xe6>
 8004edc:	4630      	mov	r0, r6
 8004ede:	e79e      	b.n	8004e1e <_strtol_l.constprop.0+0x16>
 8004ee0:	b107      	cbz	r7, 8004ee4 <_strtol_l.constprop.0+0xdc>
 8004ee2:	4276      	negs	r6, r6
 8004ee4:	2a00      	cmp	r2, #0
 8004ee6:	d0f9      	beq.n	8004edc <_strtol_l.constprop.0+0xd4>
 8004ee8:	f1bc 0f00 	cmp.w	ip, #0
 8004eec:	d000      	beq.n	8004ef0 <_strtol_l.constprop.0+0xe8>
 8004eee:	1e69      	subs	r1, r5, #1
 8004ef0:	6011      	str	r1, [r2, #0]
 8004ef2:	e7f3      	b.n	8004edc <_strtol_l.constprop.0+0xd4>
 8004ef4:	2430      	movs	r4, #48	; 0x30
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1b1      	bne.n	8004e5e <_strtol_l.constprop.0+0x56>
 8004efa:	2308      	movs	r3, #8
 8004efc:	e7af      	b.n	8004e5e <_strtol_l.constprop.0+0x56>
 8004efe:	2c30      	cmp	r4, #48	; 0x30
 8004f00:	d0a5      	beq.n	8004e4e <_strtol_l.constprop.0+0x46>
 8004f02:	230a      	movs	r3, #10
 8004f04:	e7ab      	b.n	8004e5e <_strtol_l.constprop.0+0x56>
 8004f06:	bf00      	nop
 8004f08:	0800503d 	.word	0x0800503d

08004f0c <strtol>:
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	460a      	mov	r2, r1
 8004f10:	4601      	mov	r1, r0
 8004f12:	4802      	ldr	r0, [pc, #8]	; (8004f1c <strtol+0x10>)
 8004f14:	6800      	ldr	r0, [r0, #0]
 8004f16:	f7ff bf77 	b.w	8004e08 <_strtol_l.constprop.0>
 8004f1a:	bf00      	nop
 8004f1c:	20000080 	.word	0x20000080

08004f20 <_init>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr

08004f2c <_fini>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	bf00      	nop
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr
