
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e54  08006e54  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e5c  08006e5c  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08006e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015968  200000e8  08006f4c  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015a50  08006f4c  00025a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaf0  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c3  00000000  00000000  0002ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  000315d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  000323d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240a3  00000000  00000000  00033068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cc6  00000000  00000000  0005710b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc264  00000000  00000000  00068dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004288  00000000  00000000  00135088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e8 	.word	0x200000e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a1c 	.word	0x08006a1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	08006a1c 	.word	0x08006a1c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b974 	b.w	80009a8 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9d08      	ldr	r5, [sp, #32]
 80006de:	4604      	mov	r4, r0
 80006e0:	468e      	mov	lr, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d14d      	bne.n	8000782 <__udivmoddi4+0xaa>
 80006e6:	428a      	cmp	r2, r1
 80006e8:	4694      	mov	ip, r2
 80006ea:	d969      	bls.n	80007c0 <__udivmoddi4+0xe8>
 80006ec:	fab2 f282 	clz	r2, r2
 80006f0:	b152      	cbz	r2, 8000708 <__udivmoddi4+0x30>
 80006f2:	fa01 f302 	lsl.w	r3, r1, r2
 80006f6:	f1c2 0120 	rsb	r1, r2, #32
 80006fa:	fa20 f101 	lsr.w	r1, r0, r1
 80006fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000702:	ea41 0e03 	orr.w	lr, r1, r3
 8000706:	4094      	lsls	r4, r2
 8000708:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800070c:	0c21      	lsrs	r1, r4, #16
 800070e:	fbbe f6f8 	udiv	r6, lr, r8
 8000712:	fa1f f78c 	uxth.w	r7, ip
 8000716:	fb08 e316 	mls	r3, r8, r6, lr
 800071a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800071e:	fb06 f107 	mul.w	r1, r6, r7
 8000722:	4299      	cmp	r1, r3
 8000724:	d90a      	bls.n	800073c <__udivmoddi4+0x64>
 8000726:	eb1c 0303 	adds.w	r3, ip, r3
 800072a:	f106 30ff 	add.w	r0, r6, #4294967295
 800072e:	f080 811f 	bcs.w	8000970 <__udivmoddi4+0x298>
 8000732:	4299      	cmp	r1, r3
 8000734:	f240 811c 	bls.w	8000970 <__udivmoddi4+0x298>
 8000738:	3e02      	subs	r6, #2
 800073a:	4463      	add	r3, ip
 800073c:	1a5b      	subs	r3, r3, r1
 800073e:	b2a4      	uxth	r4, r4
 8000740:	fbb3 f0f8 	udiv	r0, r3, r8
 8000744:	fb08 3310 	mls	r3, r8, r0, r3
 8000748:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800074c:	fb00 f707 	mul.w	r7, r0, r7
 8000750:	42a7      	cmp	r7, r4
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x92>
 8000754:	eb1c 0404 	adds.w	r4, ip, r4
 8000758:	f100 33ff 	add.w	r3, r0, #4294967295
 800075c:	f080 810a 	bcs.w	8000974 <__udivmoddi4+0x29c>
 8000760:	42a7      	cmp	r7, r4
 8000762:	f240 8107 	bls.w	8000974 <__udivmoddi4+0x29c>
 8000766:	4464      	add	r4, ip
 8000768:	3802      	subs	r0, #2
 800076a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800076e:	1be4      	subs	r4, r4, r7
 8000770:	2600      	movs	r6, #0
 8000772:	b11d      	cbz	r5, 800077c <__udivmoddi4+0xa4>
 8000774:	40d4      	lsrs	r4, r2
 8000776:	2300      	movs	r3, #0
 8000778:	e9c5 4300 	strd	r4, r3, [r5]
 800077c:	4631      	mov	r1, r6
 800077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000782:	428b      	cmp	r3, r1
 8000784:	d909      	bls.n	800079a <__udivmoddi4+0xc2>
 8000786:	2d00      	cmp	r5, #0
 8000788:	f000 80ef 	beq.w	800096a <__udivmoddi4+0x292>
 800078c:	2600      	movs	r6, #0
 800078e:	e9c5 0100 	strd	r0, r1, [r5]
 8000792:	4630      	mov	r0, r6
 8000794:	4631      	mov	r1, r6
 8000796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079a:	fab3 f683 	clz	r6, r3
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d14a      	bne.n	8000838 <__udivmoddi4+0x160>
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d302      	bcc.n	80007ac <__udivmoddi4+0xd4>
 80007a6:	4282      	cmp	r2, r0
 80007a8:	f200 80f9 	bhi.w	800099e <__udivmoddi4+0x2c6>
 80007ac:	1a84      	subs	r4, r0, r2
 80007ae:	eb61 0303 	sbc.w	r3, r1, r3
 80007b2:	2001      	movs	r0, #1
 80007b4:	469e      	mov	lr, r3
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d0e0      	beq.n	800077c <__udivmoddi4+0xa4>
 80007ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80007be:	e7dd      	b.n	800077c <__udivmoddi4+0xa4>
 80007c0:	b902      	cbnz	r2, 80007c4 <__udivmoddi4+0xec>
 80007c2:	deff      	udf	#255	; 0xff
 80007c4:	fab2 f282 	clz	r2, r2
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	f040 8092 	bne.w	80008f2 <__udivmoddi4+0x21a>
 80007ce:	eba1 010c 	sub.w	r1, r1, ip
 80007d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007d6:	fa1f fe8c 	uxth.w	lr, ip
 80007da:	2601      	movs	r6, #1
 80007dc:	0c20      	lsrs	r0, r4, #16
 80007de:	fbb1 f3f7 	udiv	r3, r1, r7
 80007e2:	fb07 1113 	mls	r1, r7, r3, r1
 80007e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ea:	fb0e f003 	mul.w	r0, lr, r3
 80007ee:	4288      	cmp	r0, r1
 80007f0:	d908      	bls.n	8000804 <__udivmoddi4+0x12c>
 80007f2:	eb1c 0101 	adds.w	r1, ip, r1
 80007f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007fa:	d202      	bcs.n	8000802 <__udivmoddi4+0x12a>
 80007fc:	4288      	cmp	r0, r1
 80007fe:	f200 80cb 	bhi.w	8000998 <__udivmoddi4+0x2c0>
 8000802:	4643      	mov	r3, r8
 8000804:	1a09      	subs	r1, r1, r0
 8000806:	b2a4      	uxth	r4, r4
 8000808:	fbb1 f0f7 	udiv	r0, r1, r7
 800080c:	fb07 1110 	mls	r1, r7, r0, r1
 8000810:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000814:	fb0e fe00 	mul.w	lr, lr, r0
 8000818:	45a6      	cmp	lr, r4
 800081a:	d908      	bls.n	800082e <__udivmoddi4+0x156>
 800081c:	eb1c 0404 	adds.w	r4, ip, r4
 8000820:	f100 31ff 	add.w	r1, r0, #4294967295
 8000824:	d202      	bcs.n	800082c <__udivmoddi4+0x154>
 8000826:	45a6      	cmp	lr, r4
 8000828:	f200 80bb 	bhi.w	80009a2 <__udivmoddi4+0x2ca>
 800082c:	4608      	mov	r0, r1
 800082e:	eba4 040e 	sub.w	r4, r4, lr
 8000832:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000836:	e79c      	b.n	8000772 <__udivmoddi4+0x9a>
 8000838:	f1c6 0720 	rsb	r7, r6, #32
 800083c:	40b3      	lsls	r3, r6
 800083e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000842:	ea4c 0c03 	orr.w	ip, ip, r3
 8000846:	fa20 f407 	lsr.w	r4, r0, r7
 800084a:	fa01 f306 	lsl.w	r3, r1, r6
 800084e:	431c      	orrs	r4, r3
 8000850:	40f9      	lsrs	r1, r7
 8000852:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000856:	fa00 f306 	lsl.w	r3, r0, r6
 800085a:	fbb1 f8f9 	udiv	r8, r1, r9
 800085e:	0c20      	lsrs	r0, r4, #16
 8000860:	fa1f fe8c 	uxth.w	lr, ip
 8000864:	fb09 1118 	mls	r1, r9, r8, r1
 8000868:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800086c:	fb08 f00e 	mul.w	r0, r8, lr
 8000870:	4288      	cmp	r0, r1
 8000872:	fa02 f206 	lsl.w	r2, r2, r6
 8000876:	d90b      	bls.n	8000890 <__udivmoddi4+0x1b8>
 8000878:	eb1c 0101 	adds.w	r1, ip, r1
 800087c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000880:	f080 8088 	bcs.w	8000994 <__udivmoddi4+0x2bc>
 8000884:	4288      	cmp	r0, r1
 8000886:	f240 8085 	bls.w	8000994 <__udivmoddi4+0x2bc>
 800088a:	f1a8 0802 	sub.w	r8, r8, #2
 800088e:	4461      	add	r1, ip
 8000890:	1a09      	subs	r1, r1, r0
 8000892:	b2a4      	uxth	r4, r4
 8000894:	fbb1 f0f9 	udiv	r0, r1, r9
 8000898:	fb09 1110 	mls	r1, r9, r0, r1
 800089c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008a4:	458e      	cmp	lr, r1
 80008a6:	d908      	bls.n	80008ba <__udivmoddi4+0x1e2>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80008b0:	d26c      	bcs.n	800098c <__udivmoddi4+0x2b4>
 80008b2:	458e      	cmp	lr, r1
 80008b4:	d96a      	bls.n	800098c <__udivmoddi4+0x2b4>
 80008b6:	3802      	subs	r0, #2
 80008b8:	4461      	add	r1, ip
 80008ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008be:	fba0 9402 	umull	r9, r4, r0, r2
 80008c2:	eba1 010e 	sub.w	r1, r1, lr
 80008c6:	42a1      	cmp	r1, r4
 80008c8:	46c8      	mov	r8, r9
 80008ca:	46a6      	mov	lr, r4
 80008cc:	d356      	bcc.n	800097c <__udivmoddi4+0x2a4>
 80008ce:	d053      	beq.n	8000978 <__udivmoddi4+0x2a0>
 80008d0:	b15d      	cbz	r5, 80008ea <__udivmoddi4+0x212>
 80008d2:	ebb3 0208 	subs.w	r2, r3, r8
 80008d6:	eb61 010e 	sbc.w	r1, r1, lr
 80008da:	fa01 f707 	lsl.w	r7, r1, r7
 80008de:	fa22 f306 	lsr.w	r3, r2, r6
 80008e2:	40f1      	lsrs	r1, r6
 80008e4:	431f      	orrs	r7, r3
 80008e6:	e9c5 7100 	strd	r7, r1, [r5]
 80008ea:	2600      	movs	r6, #0
 80008ec:	4631      	mov	r1, r6
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	f1c2 0320 	rsb	r3, r2, #32
 80008f6:	40d8      	lsrs	r0, r3
 80008f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000900:	4091      	lsls	r1, r2
 8000902:	4301      	orrs	r1, r0
 8000904:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000908:	fa1f fe8c 	uxth.w	lr, ip
 800090c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000910:	fb07 3610 	mls	r6, r7, r0, r3
 8000914:	0c0b      	lsrs	r3, r1, #16
 8000916:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800091a:	fb00 f60e 	mul.w	r6, r0, lr
 800091e:	429e      	cmp	r6, r3
 8000920:	fa04 f402 	lsl.w	r4, r4, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x260>
 8000926:	eb1c 0303 	adds.w	r3, ip, r3
 800092a:	f100 38ff 	add.w	r8, r0, #4294967295
 800092e:	d22f      	bcs.n	8000990 <__udivmoddi4+0x2b8>
 8000930:	429e      	cmp	r6, r3
 8000932:	d92d      	bls.n	8000990 <__udivmoddi4+0x2b8>
 8000934:	3802      	subs	r0, #2
 8000936:	4463      	add	r3, ip
 8000938:	1b9b      	subs	r3, r3, r6
 800093a:	b289      	uxth	r1, r1
 800093c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000940:	fb07 3316 	mls	r3, r7, r6, r3
 8000944:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000948:	fb06 f30e 	mul.w	r3, r6, lr
 800094c:	428b      	cmp	r3, r1
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x28a>
 8000950:	eb1c 0101 	adds.w	r1, ip, r1
 8000954:	f106 38ff 	add.w	r8, r6, #4294967295
 8000958:	d216      	bcs.n	8000988 <__udivmoddi4+0x2b0>
 800095a:	428b      	cmp	r3, r1
 800095c:	d914      	bls.n	8000988 <__udivmoddi4+0x2b0>
 800095e:	3e02      	subs	r6, #2
 8000960:	4461      	add	r1, ip
 8000962:	1ac9      	subs	r1, r1, r3
 8000964:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000968:	e738      	b.n	80007dc <__udivmoddi4+0x104>
 800096a:	462e      	mov	r6, r5
 800096c:	4628      	mov	r0, r5
 800096e:	e705      	b.n	800077c <__udivmoddi4+0xa4>
 8000970:	4606      	mov	r6, r0
 8000972:	e6e3      	b.n	800073c <__udivmoddi4+0x64>
 8000974:	4618      	mov	r0, r3
 8000976:	e6f8      	b.n	800076a <__udivmoddi4+0x92>
 8000978:	454b      	cmp	r3, r9
 800097a:	d2a9      	bcs.n	80008d0 <__udivmoddi4+0x1f8>
 800097c:	ebb9 0802 	subs.w	r8, r9, r2
 8000980:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000984:	3801      	subs	r0, #1
 8000986:	e7a3      	b.n	80008d0 <__udivmoddi4+0x1f8>
 8000988:	4646      	mov	r6, r8
 800098a:	e7ea      	b.n	8000962 <__udivmoddi4+0x28a>
 800098c:	4620      	mov	r0, r4
 800098e:	e794      	b.n	80008ba <__udivmoddi4+0x1e2>
 8000990:	4640      	mov	r0, r8
 8000992:	e7d1      	b.n	8000938 <__udivmoddi4+0x260>
 8000994:	46d0      	mov	r8, sl
 8000996:	e77b      	b.n	8000890 <__udivmoddi4+0x1b8>
 8000998:	3b02      	subs	r3, #2
 800099a:	4461      	add	r1, ip
 800099c:	e732      	b.n	8000804 <__udivmoddi4+0x12c>
 800099e:	4630      	mov	r0, r6
 80009a0:	e709      	b.n	80007b6 <__udivmoddi4+0xde>
 80009a2:	4464      	add	r4, ip
 80009a4:	3802      	subs	r0, #2
 80009a6:	e742      	b.n	800082e <__udivmoddi4+0x156>

080009a8 <__aeabi_idiv0>:
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <CircBufPush>:

CmdStruct CmdBuf[CMD_BUFF_SIZE];
CmdStruct *pCmdBuf = &CmdBuf[0];
uint32_t CmdBufLen = 0;

Error CircBufPush(CmdStruct *CmdBuf) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	pCmdBuf->commandNummer = CmdBuf->commandNummer;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <CircBufPush+0x58>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	601a      	str	r2, [r3, #0]
	memcpy(pCmdBuf->argBuf, CmdBuf->argBuf, sizeof(CmdBuf->argBuf[0]) * MAX_CMD_ARGS);
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <CircBufPush+0x58>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	1d18      	adds	r0, r3, #4
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3304      	adds	r3, #4
 80009c8:	2218      	movs	r2, #24
 80009ca:	4619      	mov	r1, r3
 80009cc:	f004 ff80 	bl	80058d0 <memcpy>
	memcpy(pCmdBuf->textSentence, CmdBuf->textSentence, sizeof(CmdBuf->textSentence[0]) * MAX_CMD_CHARS);
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <CircBufPush+0x58>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f103 001c 	add.w	r0, r3, #28
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	331c      	adds	r3, #28
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	4619      	mov	r1, r3
 80009e0:	f004 ff76 	bl	80058d0 <memcpy>
	++pCmdBuf;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <CircBufPush+0x58>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	339c      	adds	r3, #156	; 0x9c
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <CircBufPush+0x58>)
 80009ec:	6013      	str	r3, [r2, #0]
	++CmdBufLen;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <CircBufPush+0x5c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <CircBufPush+0x5c>)
 80009f6:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
 80009f8:	2304      	movs	r3, #4
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20002804 	.word	0x20002804

08000a0c <CircBufPop>:

CmdStruct CircBufPop(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	--pCmdBuf;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <CircBufPop+0x38>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3b9c      	subs	r3, #156	; 0x9c
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <CircBufPop+0x38>)
 8000a1c:	6013      	str	r3, [r2, #0]
	--CmdBufLen;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <CircBufPop+0x3c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <CircBufPop+0x3c>)
 8000a26:	6013      	str	r3, [r2, #0]
	return *pCmdBuf;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <CircBufPop+0x38>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	239c      	movs	r3, #156	; 0x9c
 8000a34:	461a      	mov	r2, r3
 8000a36:	f004 ff4b 	bl	80058d0 <memcpy>
}
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20002804 	.word	0x20002804

08000a4c <RecieveCommandLijn>:
 * the buffer
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandLijn(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	b590      	push	{r4, r7, lr}
 8000a50:	f2ad 5d5c 	subw	sp, sp, #1372	; 0x55c
 8000a54:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
 8000a58:	446f      	add	r7, sp
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000a60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	for (uint8_t i = 0; i < 7; i++) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8000a70:	e04c      	b.n	8000b0c <RecieveCommandLijn+0xc0>
		neededArg = i + 1;
 8000a72:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000a76:	3301      	adds	r3, #1
 8000a78:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
		if (i == 4) {
 8000a7c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d11f      	bne.n	8000ac4 <RecieveCommandLijn+0x78>
			ParseOnKomma(inputStruct, neededArg, 0, 1, *CmdBuf);
 8000a84:	f897 40a6 	ldrb.w	r4, [r7, #166]	; 0xa6
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000a8e:	4611      	mov	r1, r2
 8000a90:	229c      	movs	r2, #156	; 0x9c
 8000a92:	4618      	mov	r0, r3
 8000a94:	f004 ff1c 	bl	80058d0 <memcpy>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000aa4:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000aa8:	4668      	mov	r0, sp
 8000aaa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000aae:	f240 4204 	movw	r2, #1028	; 0x404
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f004 ff0c 	bl	80058d0 <memcpy>
 8000ab8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000abc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000abe:	f000 f9b5 	bl	8000e2c <ParseOnKomma>
 8000ac2:	e01e      	b.n	8000b02 <RecieveCommandLijn+0xb6>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, *CmdBuf);
 8000ac4:	f897 40a6 	ldrb.w	r4, [r7, #166]	; 0xa6
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000ace:	4611      	mov	r1, r2
 8000ad0:	229c      	movs	r2, #156	; 0x9c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 fefc 	bl	80058d0 <memcpy>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000ae4:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000ae8:	4668      	mov	r0, sp
 8000aea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000aee:	f240 4204 	movw	r2, #1028	; 0x404
 8000af2:	4619      	mov	r1, r3
 8000af4:	f004 feec 	bl	80058d0 <memcpy>
 8000af8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000afe:	f000 f995 	bl	8000e2c <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 8000b02:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000b06:	3301      	adds	r3, #1
 8000b08:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8000b0c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000b10:	2b06      	cmp	r3, #6
 8000b12:	d9ae      	bls.n	8000a72 <RecieveCommandLijn+0x26>
		}
	}
	printf("yeye\r\n");
 8000b14:	480e      	ldr	r0, [pc, #56]	; (8000b50 <RecieveCommandLijn+0x104>)
 8000b16:	f004 ff77 	bl	8005a08 <puts>
	printf("%d\r\n",(uint32_t)CmdBuf->commandNummer);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <RecieveCommandLijn+0x108>)
 8000b22:	f004 feeb 	bl	80058fc <iprintf>
	CircBufPush(CmdBuf);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff40 	bl	80009ac <CircBufPush>
	CmdStruct temp = CircBufPop();
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff6b 	bl	8000a0c <CircBufPop>
	printf("%d\r\n", temp.commandNummer);
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <RecieveCommandLijn+0x108>)
 8000b3c:	f004 fede 	bl	80058fc <iprintf>
}
 8000b40:	bf00      	nop
 8000b42:	4618      	mov	r0, r3
 8000b44:	37ac      	adds	r7, #172	; 0xac
 8000b46:	46bd      	mov	sp, r7
 8000b48:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr
 8000b50:	08006aec 	.word	0x08006aec
 8000b54:	08006af4 	.word	0x08006af4

08000b58 <RecieveCommandClear>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandClear(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000b58:	b084      	sub	sp, #16
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8000b60:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
 8000b64:	446f      	add	r7, sp
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	f107 0014 	add.w	r0, r7, #20
 8000b6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 0, 1, *CmdBuf);
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000b76:	4611      	mov	r1, r2
 8000b78:	229c      	movs	r2, #156	; 0x9c
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f004 fea8 	bl	80058d0 <memcpy>
 8000b80:	2301      	movs	r3, #1
 8000b82:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000b92:	4668      	mov	r0, sp
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	f240 4204 	movw	r2, #1028	; 0x404
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f004 fe97 	bl	80058d0 <memcpy>
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ba8:	f000 f940 	bl	8000e2c <ParseOnKomma>
}
 8000bac:	bf00      	nop
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <RecieveCommandRechthoek>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandRechthoek(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	b590      	push	{r4, r7, lr}
 8000bc0:	f2ad 4dc4 	subw	sp, sp, #1220	; 0x4c4
 8000bc4:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
 8000bc8:	446f      	add	r7, sp
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000bd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e045      	b.n	8000c6a <RecieveCommandRechthoek+0xae>
		neededArg = i + 1;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	3301      	adds	r3, #1
 8000be2:	73bb      	strb	r3, [r7, #14]
		if (i == 4) {
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d11e      	bne.n	8000c28 <RecieveCommandRechthoek+0x6c>
			ParseOnKomma(inputStruct, neededArg, 0, 1, *CmdBuf);
 8000bea:	7bbc      	ldrb	r4, [r7, #14]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	229c      	movs	r2, #156	; 0x9c
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f004 fe6a 	bl	80058d0 <memcpy>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000c08:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000c0c:	4668      	mov	r0, sp
 8000c0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c12:	f240 4204 	movw	r2, #1028	; 0x404
 8000c16:	4619      	mov	r1, r3
 8000c18:	f004 fe5a 	bl	80058d0 <memcpy>
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c22:	f000 f903 	bl	8000e2c <ParseOnKomma>
 8000c26:	e01d      	b.n	8000c64 <RecieveCommandRechthoek+0xa8>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, *CmdBuf);
 8000c28:	7bbc      	ldrb	r4, [r7, #14]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000c30:	4611      	mov	r1, r2
 8000c32:	229c      	movs	r2, #156	; 0x9c
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 fe4b 	bl	80058d0 <memcpy>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000c40:	2301      	movs	r3, #1
 8000c42:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000c46:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000c4a:	4668      	mov	r0, sp
 8000c4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c50:	f240 4204 	movw	r2, #1028	; 0x404
 8000c54:	4619      	mov	r1, r3
 8000c56:	f004 fe3b 	bl	80058d0 <memcpy>
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c60:	f000 f8e4 	bl	8000e2c <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	3301      	adds	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	2b06      	cmp	r3, #6
 8000c6e:	d9b6      	bls.n	8000bde <RecieveCommandRechthoek+0x22>
		}
	}
}
 8000c70:	bf00      	nop
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <RecieveCommandTekst>:

Error RecieveCommandTekst(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000c80:	b084      	sub	sp, #16
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	f107 0014 	add.w	r0, r7, #20
 8000c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000c92:	bf00      	nop
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4770      	bx	lr

08000ca2 <RecieveCommandBitmap>:

Error RecieveCommandBitmap(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000caa:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000cae:	446f      	add	r7, sp
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	f107 001c 	add.w	r0, r7, #28
 8000cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 3; i++) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e01e      	b.n	8000d02 <RecieveCommandBitmap+0x60>
		neededArg = i + 1;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	73bb      	strb	r3, [r7, #14]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000cde:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000ce2:	4668      	mov	r0, sp
 8000ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce8:	f240 4204 	movw	r2, #1028	; 0x404
 8000cec:	4619      	mov	r1, r3
 8000cee:	f004 fdef 	bl	80058d0 <memcpy>
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf8:	f000 f898 	bl	8000e2c <ParseOnKomma>
	for (uint8_t i = 0; i < 3; i++) {
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d9dd      	bls.n	8000cc4 <RecieveCommandBitmap+0x22>
	}
}
 8000d08:	bf00      	nop
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <RecieveCommandWacht>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandWacht(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000d18:	b084      	sub	sp, #16
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000d20:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000d24:	446f      	add	r7, sp
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	f107 0014 	add.w	r0, r7, #20
 8000d2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 1, 0, CmdBuf);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000d42:	2301      	movs	r3, #1
 8000d44:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000d48:	4668      	mov	r0, sp
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	f240 4204 	movw	r2, #1028	; 0x404
 8000d52:	4619      	mov	r1, r3
 8000d54:	f004 fdbc 	bl	80058d0 <memcpy>
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d5e:	f000 f865 	bl	8000e2c <ParseOnKomma>
}
 8000d62:	bf00      	nop
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d6e:	b004      	add	sp, #16
 8000d70:	4770      	bx	lr

08000d72 <RecieveCommandHerhaal>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandHerhaal(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000d72:	b084      	sub	sp, #16
 8000d74:	b580      	push	{r7, lr}
 8000d76:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000d7a:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000d7e:	446f      	add	r7, sp
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	f107 001c 	add.w	r0, r7, #28
 8000d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 2; i++) {
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e01e      	b.n	8000dd2 <RecieveCommandHerhaal+0x60>
		neededArg = i + 1;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3301      	adds	r3, #1
 8000d98:	73bb      	strb	r3, [r7, #14]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 8000da2:	2200      	movs	r2, #0
 8000da4:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 8000da8:	2201      	movs	r2, #1
 8000daa:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000dae:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000db2:	4668      	mov	r0, sp
 8000db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db8:	f240 4204 	movw	r2, #1028	; 0x404
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f004 fd87 	bl	80058d0 <memcpy>
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc8:	f000 f830 	bl	8000e2c <ParseOnKomma>
	for (uint8_t i = 0; i < 2; i++) {
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d9dd      	bls.n	8000d94 <RecieveCommandHerhaal+0x22>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de4:	b004      	add	sp, #16
 8000de6:	4770      	bx	lr

08000de8 <RecieveCommandFiguur>:

Error RecieveCommandFiguur(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000de8:	b084      	sub	sp, #16
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	f107 0014 	add.w	r0, r7, #20
 8000df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000dfa:	bf00      	nop
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	b004      	add	sp, #16
 8000e08:	4770      	bx	lr

08000e0a <RecieveCommandCirkel>:

Error RecieveCommandCirkel(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	f107 0014 	add.w	r0, r7, #20
 8000e18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e1c:	bf00      	nop
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	b004      	add	sp, #16
 8000e2a:	4770      	bx	lr

08000e2c <ParseOnKomma>:
 * @param convertColor
 * @param commandArray
 */
Error ParseOnKomma(input_vars inputStruct, uint8_t neededArgument,
				   uint8_t convertToNumber, int convertColor,
				   CmdStruct *CmdBuf) {
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e32:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000e36:	f44f 6782 	mov.w	r7, #1040	; 0x410
 8000e3a:	446f      	add	r7, sp
 8000e3c:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8000e40:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000e44:	466b      	mov	r3, sp
 8000e46:	469a      	mov	sl, r3
	uint8_t commaCounter = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73bb      	strb	r3, [r7, #14]
	uint8_t placeInBuf = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
	char incommingMessage[inputStruct.msglen];
 8000e50:	f8d7 6434 	ldr.w	r6, [r7, #1076]	; 0x434
 8000e54:	1e73      	subs	r3, r6, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	4632      	mov	r2, r6
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	4690      	mov	r8, r2
 8000e5e:	4699      	mov	r9, r3
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e74:	4632      	mov	r2, r6
 8000e76:	2300      	movs	r3, #0
 8000e78:	4614      	mov	r4, r2
 8000e7a:	461d      	mov	r5, r3
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	00eb      	lsls	r3, r5, #3
 8000e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e8a:	00e2      	lsls	r2, r4, #3
 8000e8c:	4633      	mov	r3, r6
 8000e8e:	3307      	adds	r3, #7
 8000e90:	08db      	lsrs	r3, r3, #3
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	ebad 0d03 	sub.w	sp, sp, r3
 8000e98:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000e9c:	3300      	adds	r3, #0
 8000e9e:	603b      	str	r3, [r7, #0]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	e09b      	b.n	8000fde <ParseOnKomma+0x1b2>
		if (inputStruct.line_rx_buffer[j] == ',') {
 8000ea6:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b2c      	cmp	r3, #44	; 0x2c
 8000eb2:	d145      	bne.n	8000f40 <ParseOnKomma+0x114>
			incommingMessage[j] = 0;
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	4413      	add	r3, r2
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
			placeInBuf = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageParse, sizeof(debugMessageParse), &huart2);
#endif
			if (commaCounter == neededArgument) {
 8000ec2:	7bba      	ldrb	r2, [r7, #14]
 8000ec4:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d130      	bne.n	8000f2e <ParseOnKomma+0x102>
				if (!commaCounter)
 8000ecc:	7bbb      	ldrb	r3, [r7, #14]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10f      	bne.n	8000ef2 <ParseOnKomma+0xc6>
					CheckWhatCommand(incommingMessage, CmdBuf, inputStruct);
 8000ed2:	4668      	mov	r0, sp
 8000ed4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed8:	f240 420c 	movw	r2, #1036	; 0x40c
 8000edc:	4619      	mov	r1, r3
 8000ede:	f004 fcf7 	bl	80058d0 <memcpy>
 8000ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee6:	cb0c      	ldmia	r3, {r2, r3}
 8000ee8:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8000eec:	6838      	ldr	r0, [r7, #0]
 8000eee:	f000 f889 	bl	8001004 <CheckWhatCommand>
				if (convertColor)
 8000ef2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <ParseOnKomma+0xde>
					CheckWhatColor(incommingMessage, CmdBuf, neededArgument);
 8000efa:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000efe:	461a      	mov	r2, r3
 8000f00:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8000f04:	6838      	ldr	r0, [r7, #0]
 8000f06:	f000 f8b9 	bl	800107c <CheckWhatColor>
				if (convertToNumber)
 8000f0a:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d06c      	beq.n	8000fec <ParseOnKomma+0x1c0>
					CmdBuf->argBuf[neededArgument] = atoi(incommingMessage);
 8000f12:	6838      	ldr	r0, [r7, #0]
 8000f14:	f004 fcae 	bl	8005874 <atoi>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000f1e:	b291      	uxth	r1, r2
 8000f20:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	460a      	mov	r2, r1
 8000f2a:	809a      	strh	r2, [r3, #4]
				break;
 8000f2c:	e05e      	b.n	8000fec <ParseOnKomma+0x1c0>
			}
			commaCounter++;
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	3301      	adds	r3, #1
 8000f32:	73bb      	strb	r3, [r7, #14]
			// set the array to 0 again to fill with the argument
			memset(incommingMessage, 0, sizeof(incommingMessage));
 8000f34:	4633      	mov	r3, r6
 8000f36:	461a      	mov	r2, r3
 8000f38:	2100      	movs	r1, #0
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f004 fcd6 	bl	80058ec <memset>
		}
		if (j == inputStruct.msglen) {
 8000f40:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d12d      	bne.n	8000fa6 <ParseOnKomma+0x17a>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	440a      	add	r2, r1
 8000f54:	7811      	ldrb	r1, [r2, #0]
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
			if (commaCounter == neededArgument) {
 8000f60:	7bba      	ldrb	r2, [r7, #14]
 8000f62:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d142      	bne.n	8000ff0 <ParseOnKomma+0x1c4>
				if (convertColor)
 8000f6a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <ParseOnKomma+0x156>
					CheckWhatColor(incommingMessage, CmdBuf, neededArgument);
 8000f72:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000f76:	461a      	mov	r2, r3
 8000f78:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f000 f87d 	bl	800107c <CheckWhatColor>
				if (convertToNumber)
 8000f82:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d032      	beq.n	8000ff0 <ParseOnKomma+0x1c4>
					CmdBuf->argBuf[neededArgument] = atoi(incommingMessage);
 8000f8a:	6838      	ldr	r0, [r7, #0]
 8000f8c:	f004 fc72 	bl	8005874 <atoi>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000f96:	b291      	uxth	r1, r2
 8000f98:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	809a      	strh	r2, [r3, #4]
			}
			break;
 8000fa4:	e024      	b.n	8000ff0 <ParseOnKomma+0x1c4>
		}
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000fa6:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d011      	beq.n	8000fd8 <ParseOnKomma+0x1ac>
			inputStruct.line_rx_buffer[j] != ',') {
 8000fb4:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4413      	add	r3, r2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000fbe:	2b2c      	cmp	r3, #44	; 0x2c
 8000fc0:	d00a      	beq.n	8000fd8 <ParseOnKomma+0x1ac>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	440a      	add	r2, r1
 8000fcc:	7811      	ldrb	r1, [r2, #0]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f77f af5e 	ble.w	8000ea6 <ParseOnKomma+0x7a>
 8000fea:	e002      	b.n	8000ff2 <ParseOnKomma+0x1c6>
				break;
 8000fec:	bf00      	nop
 8000fee:	e000      	b.n	8000ff2 <ParseOnKomma+0x1c6>
			break;
 8000ff0:	bf00      	nop
 8000ff2:	46d5      	mov	sp, sl
		}
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001000:	b004      	add	sp, #16
 8001002:	4770      	bx	lr

08001004 <CheckWhatCommand>:
 * @param incommingCommand
 * @param commandArray
 * @param inputStruct
 */
Error CheckWhatCommand(char incommingCommand[], CmdStruct *CmdBuf,
					   input_vars inputStruct) {
 8001004:	b082      	sub	sp, #8
 8001006:	b580      	push	{r7, lr}
 8001008:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 800100c:	f44f 6781 	mov.w	r7, #1032	; 0x408
 8001010:	446f      	add	r7, sp
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	f107 0118 	add.w	r1, r7, #24
 800101a:	e881 000c 	stmia.w	r1, {r2, r3}
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e01e      	b.n	8001062 <CheckWhatCommand+0x5e>
		if (strcmp(incommingCommand, possibleCommands[i]) == 0) {
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <CheckWhatCommand+0x74>)
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff f8ce 	bl	80001d0 <strcmp>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d110      	bne.n	800105c <CheckWhatCommand+0x58>
			CmdBuf->commandNummer = i;
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageCommand, sizeof(debugMessageCommand),
						&huart2);
#endif
			DoOnCommand(CmdBuf, inputStruct);
 8001040:	4668      	mov	r0, sp
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800104a:	4619      	mov	r1, r3
 800104c:	f004 fc40 	bl	80058d0 <memcpy>
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f000 f840 	bl	80010dc <DoOnCommand>
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3301      	adds	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b08      	cmp	r3, #8
 8001066:	d9dd      	bls.n	8001024 <CheckWhatCommand+0x20>
		}
	}
}
 8001068:	bf00      	nop
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001074:	b002      	add	sp, #8
 8001076:	4770      	bx	lr
 8001078:	20000004 	.word	0x20000004

0800107c <CheckWhatColor>:
 * @param incommingColor
 * @param commandArray
 * @param argPlace
 */
Error CheckWhatColor(char incommingColor[], CmdStruct *CmdBuf,
					 uint8_t argPlace) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	4613      	mov	r3, r2
 8001088:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	75fb      	strb	r3, [r7, #23]
 800108e:	e018      	b.n	80010c2 <CheckWhatColor+0x46>
		if (strcmp(incommingColor, possibleColors[i]) == 0) {
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <CheckWhatColor+0x58>)
 8001094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001098:	4619      	mov	r1, r3
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff f898 	bl	80001d0 <strcmp>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10a      	bne.n	80010bc <CheckWhatColor+0x40>
			CmdBuf->argBuf[argPlace] = colorCodes[i];
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <CheckWhatColor+0x5c>)
 80010aa:	5cd2      	ldrb	r2, [r2, r3]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	b291      	uxth	r1, r2
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	460a      	mov	r2, r1
 80010b8:	809a      	strh	r2, [r3, #4]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageColor, sizeof(debugMessageColor), &huart2);
#endif
			break;
 80010ba:	e005      	b.n	80010c8 <CheckWhatColor+0x4c>
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	3301      	adds	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d9e3      	bls.n	8001090 <CheckWhatColor+0x14>
		}
	}
}
 80010c8:	bf00      	nop
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000028 	.word	0x20000028
 80010d8:	20000068 	.word	0x20000068

080010dc <DoOnCommand>:
 * of the args
 *
 * @param commandArray
 * @param inputStruct
 */
Error DoOnCommand(CmdStruct *CmdBuf, input_vars inputStruct) {
 80010dc:	b084      	sub	sp, #16
 80010de:	b590      	push	{r4, r7, lr}
 80010e0:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80010e4:	f44f 6781 	mov.w	r7, #1032	; 0x408
 80010e8:	446f      	add	r7, sp
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	f107 001c 	add.w	r0, r7, #28
 80010f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	switch (CmdBuf->commandNummer) {
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	f200 80a5 	bhi.w	8001248 <DoOnCommand+0x16c>
 80010fe:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <DoOnCommand+0x28>)
 8001100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001104:	08001129 	.word	0x08001129
 8001108:	08001149 	.word	0x08001149
 800110c:	08001169 	.word	0x08001169
 8001110:	08001189 	.word	0x08001189
 8001114:	080011a9 	.word	0x080011a9
 8001118:	080011c9 	.word	0x080011c9
 800111c:	080011e9 	.word	0x080011e9
 8001120:	08001209 	.word	0x08001209
 8001124:	08001229 	.word	0x08001229
		case 0:
			// lijn
			RecieveCommandLijn(&CmdBuf, inputStruct);
 8001128:	1d3c      	adds	r4, r7, #4
 800112a:	4668      	mov	r0, sp
 800112c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001130:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001134:	4619      	mov	r1, r3
 8001136:	f004 fbcb 	bl	80058d0 <memcpy>
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff fc83 	bl	8000a4c <RecieveCommandLijn>
			break;
 8001146:	e07f      	b.n	8001248 <DoOnCommand+0x16c>
		case 1:
			// clearscherm
			RecieveCommandClear(&CmdBuf, inputStruct);
 8001148:	1d3c      	adds	r4, r7, #4
 800114a:	4668      	mov	r0, sp
 800114c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001150:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001154:	4619      	mov	r1, r3
 8001156:	f004 fbbb 	bl	80058d0 <memcpy>
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff fcf9 	bl	8000b58 <RecieveCommandClear>
			break;
 8001166:	e06f      	b.n	8001248 <DoOnCommand+0x16c>
		case 2:
			// rechthoek
			RecieveCommandRechthoek(&CmdBuf, inputStruct);
 8001168:	1d3c      	adds	r4, r7, #4
 800116a:	4668      	mov	r0, sp
 800116c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001170:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001174:	4619      	mov	r1, r3
 8001176:	f004 fbab 	bl	80058d0 <memcpy>
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001180:	4620      	mov	r0, r4
 8001182:	f7ff fd1b 	bl	8000bbc <RecieveCommandRechthoek>
			break;
 8001186:	e05f      	b.n	8001248 <DoOnCommand+0x16c>
		case 3:
			// wacht
			RecieveCommandWacht(&CmdBuf, inputStruct);
 8001188:	1d3c      	adds	r4, r7, #4
 800118a:	4668      	mov	r0, sp
 800118c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001190:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001194:	4619      	mov	r1, r3
 8001196:	f004 fb9b 	bl	80058d0 <memcpy>
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a0:	4620      	mov	r0, r4
 80011a2:	f7ff fdb9 	bl	8000d18 <RecieveCommandWacht>
			break;
 80011a6:	e04f      	b.n	8001248 <DoOnCommand+0x16c>
		case 4:
			// tekst
			RecieveCommandTekst(&CmdBuf, inputStruct);
 80011a8:	1d3c      	adds	r4, r7, #4
 80011aa:	4668      	mov	r0, sp
 80011ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b0:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80011b4:	4619      	mov	r1, r3
 80011b6:	f004 fb8b 	bl	80058d0 <memcpy>
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fd5d 	bl	8000c80 <RecieveCommandTekst>
			break;
 80011c6:	e03f      	b.n	8001248 <DoOnCommand+0x16c>
		case 5:
			// bitmap
			RecieveCommandBitmap(&CmdBuf, inputStruct);
 80011c8:	1d3c      	adds	r4, r7, #4
 80011ca:	4668      	mov	r0, sp
 80011cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d0:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80011d4:	4619      	mov	r1, r3
 80011d6:	f004 fb7b 	bl	80058d0 <memcpy>
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff fd5e 	bl	8000ca2 <RecieveCommandBitmap>
			break;
 80011e6:	e02f      	b.n	8001248 <DoOnCommand+0x16c>
		case 6:
			// cirkel
			RecieveCommandCirkel(&CmdBuf, inputStruct);
 80011e8:	1d3c      	adds	r4, r7, #4
 80011ea:	4668      	mov	r0, sp
 80011ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f0:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80011f4:	4619      	mov	r1, r3
 80011f6:	f004 fb6b 	bl	80058d0 <memcpy>
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff fe02 	bl	8000e0a <RecieveCommandCirkel>
			break;
 8001206:	e01f      	b.n	8001248 <DoOnCommand+0x16c>
		case 7:
			// figuur
			RecieveCommandFiguur(&CmdBuf, inputStruct);
 8001208:	1d3c      	adds	r4, r7, #4
 800120a:	4668      	mov	r0, sp
 800120c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001210:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001214:	4619      	mov	r1, r3
 8001216:	f004 fb5b 	bl	80058d0 <memcpy>
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fde1 	bl	8000de8 <RecieveCommandFiguur>
			break;
 8001226:	e00f      	b.n	8001248 <DoOnCommand+0x16c>
		case 8:
			// herhaal
			RecieveCommandHerhaal(&CmdBuf, inputStruct);
 8001228:	1d3c      	adds	r4, r7, #4
 800122a:	4668      	mov	r0, sp
 800122c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001230:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001234:	4619      	mov	r1, r3
 8001236:	f004 fb4b 	bl	80058d0 <memcpy>
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001240:	4620      	mov	r0, r4
 8001242:	f7ff fd96 	bl	8000d72 <RecieveCommandHerhaal>
			break;
 8001246:	bf00      	nop
	}
}
 8001248:	bf00      	nop
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001254:	b004      	add	sp, #16
 8001256:	4770      	bx	lr

08001258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_DMA_Init+0x3c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <MX_DMA_Init+0x3c>)
 8001268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_DMA_Init+0x3c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2044      	movs	r0, #68	; 0x44
 8001280:	f001 f8b7 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001284:	2044      	movs	r0, #68	; 0x44
 8001286:	f001 f8d0 	bl	800242a <HAL_NVIC_EnableIRQ>

}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b32      	ldr	r3, [pc, #200]	; (800137c <MX_GPIO_Init+0xe4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a31      	ldr	r2, [pc, #196]	; (800137c <MX_GPIO_Init+0xe4>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <MX_GPIO_Init+0xe4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <MX_GPIO_Init+0xe4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a2a      	ldr	r2, [pc, #168]	; (800137c <MX_GPIO_Init+0xe4>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <MX_GPIO_Init+0xe4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <MX_GPIO_Init+0xe4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a23      	ldr	r2, [pc, #140]	; (800137c <MX_GPIO_Init+0xe4>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <MX_GPIO_Init+0xe4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_GPIO_Init+0xe4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <MX_GPIO_Init+0xe4>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_GPIO_Init+0xe4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001324:	4816      	ldr	r0, [pc, #88]	; (8001380 <MX_GPIO_Init+0xe8>)
 8001326:	f001 fdc9 	bl	8002ebc <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	4814      	ldr	r0, [pc, #80]	; (8001384 <MX_GPIO_Init+0xec>)
 8001332:	f001 fdc3 	bl	8002ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001336:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800133a:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <MX_GPIO_Init+0xe8>)
 8001350:	f001 fc18 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_GPIO_Init+0xec>)
 800136e:	f001 fc09 	bl	8002b84 <HAL_GPIO_Init>

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40021000 	.word	0x40021000
 8001384:	40020400 	.word	0x40020400

08001388 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 800138e:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8001392:	446f      	add	r7, sp

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8001394:	f000 fee0 	bl	8002158 <HAL_Init>
  CmdStruct arg_struct;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001398:	f000 f890 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139c:	f7ff ff7c 	bl	8001298 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a0:	f7ff ff5a 	bl	8001258 <MX_DMA_Init>
  MX_TIM1_Init();
 80013a4:	f000 fade 	bl	8001964 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013a8:	f000 fb2c 	bl	8001a04 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80013ac:	f000 fc42 	bl	8001c34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init();  // Init VGA-Screen
 80013b0:	f000 fe34 	bl	800201c <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f000 fe83 	bl	80020c0 <UB_VGA_FillScreen>
  UB_VGA_FillScreen(VGA_COL_WHITE);
 80013ba:	20ff      	movs	r0, #255	; 0xff
 80013bc:	f000 fe80 	bl	80020c0 <UB_VGA_FillScreen>
  int i;

  for (i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80013c6:	e00b      	b.n	80013e0 <main+0x58>
 80013c8:	4a3a      	ldr	r2, [pc, #232]	; (80014b4 <main+0x12c>)
 80013ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013ce:	4413      	add	r3, r2
 80013d0:	3301      	adds	r3, #1
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013da:	3301      	adds	r3, #1
 80013dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80013e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e8:	dbee      	blt.n	80013c8 <main+0x40>

  //  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 80013ea:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <main+0x12c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 80013f0:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <main+0x12c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  input.command_execute_flag = FALSE;
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <main+0x12c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

  // HAl wants a memory location to store the charachter it receives from the
  // UART We will pass it an array, but we will not use it. We declare our own
  // variable in the interupt handler See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8001400:	2201      	movs	r2, #1
 8001402:	492c      	ldr	r1, [pc, #176]	; (80014b4 <main+0x12c>)
 8001404:	482c      	ldr	r0, [pc, #176]	; (80014b8 <main+0x130>)
 8001406:	f003 fa87 	bl	8004918 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (input.command_execute_flag == TRUE) {
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <main+0x12c>)
 800140c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001410:	2bff      	cmp	r3, #255	; 0xff
 8001412:	d1fa      	bne.n	800140a <main+0x82>
      // Do some stuff
      ParseOnKomma(input, 0, 0, 0, &arg_struct);
 8001414:	4c27      	ldr	r4, [pc, #156]	; (80014b4 <main+0x12c>)
 8001416:	463b      	mov	r3, r7
 8001418:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 800141c:	2300      	movs	r3, #0
 800141e:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8001422:	2300      	movs	r3, #0
 8001424:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8001428:	2300      	movs	r3, #0
 800142a:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 800142e:	4668      	mov	r0, sp
 8001430:	f104 0310 	add.w	r3, r4, #16
 8001434:	f240 4204 	movw	r2, #1028	; 0x404
 8001438:	4619      	mov	r1, r3
 800143a:	f004 fa49 	bl	80058d0 <memcpy>
 800143e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001442:	f7ff fcf3 	bl	8000e2c <ParseOnKomma>
      switch(arg_struct.commandNummer)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d01c      	beq.n	8001486 <main+0xfe>
 800144c:	2b02      	cmp	r3, #2
 800144e:	dc2b      	bgt.n	80014a8 <main+0x120>
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <main+0xd2>
 8001454:	2b01      	cmp	r3, #1
 8001456:	d011      	beq.n	800147c <main+0xf4>
 8001458:	e026      	b.n	80014a8 <main+0x120>
      {
      case 0:
    	  DrawLine(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3], arg_struct.argBuf[4], arg_struct.argBuf[5], arg_struct.argBuf[6]);
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	4618      	mov	r0, r3
 800145e:	893b      	ldrh	r3, [r7, #8]
 8001460:	4619      	mov	r1, r3
 8001462:	897b      	ldrh	r3, [r7, #10]
 8001464:	461c      	mov	r4, r3
 8001466:	89bb      	ldrh	r3, [r7, #12]
 8001468:	461d      	mov	r5, r3
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	8a3a      	ldrh	r2, [r7, #16]
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	462b      	mov	r3, r5
 8001474:	4622      	mov	r2, r4
 8001476:	f000 fd19 	bl	8001eac <DrawLine>
    	  break;
 800147a:	e015      	b.n	80014a8 <main+0x120>
      case 1:
    	  ClearScreen(arg_struct.argBuf[1]);
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fdbe 	bl	8002000 <ClearScreen>
    	  break;
 8001484:	e010      	b.n	80014a8 <main+0x120>
      case 2:
    	  DrawRectangle(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3], arg_struct.argBuf[4], arg_struct.argBuf[5], arg_struct.argBuf[6]);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	4618      	mov	r0, r3
 800148a:	893b      	ldrh	r3, [r7, #8]
 800148c:	4619      	mov	r1, r3
 800148e:	897b      	ldrh	r3, [r7, #10]
 8001490:	461c      	mov	r4, r3
 8001492:	89bb      	ldrh	r3, [r7, #12]
 8001494:	461d      	mov	r5, r3
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	8a3a      	ldrh	r2, [r7, #16]
 800149a:	9201      	str	r2, [sp, #4]
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	462b      	mov	r3, r5
 80014a0:	4622      	mov	r2, r4
 80014a2:	f000 fc6a 	bl	8001d7a <DrawRectangle>
    	  break;
 80014a6:	bf00      	nop
      }


      // When finished reset the flag
      input.command_execute_flag = FALSE;
 80014a8:	4b02      	ldr	r3, [pc, #8]	; (80014b4 <main+0x12c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    if (input.command_execute_flag == TRUE) {
 80014b0:	e7ab      	b.n	800140a <main+0x82>
 80014b2:	bf00      	nop
 80014b4:	20002808 	.word	0x20002808
 80014b8:	20002d00 	.word	0x20002d00

080014bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	; 0x50
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	2230      	movs	r2, #48	; 0x30
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 fa0e 	bl	80058ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <SystemClock_Config+0xcc>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <SystemClock_Config+0xcc>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ee:	6413      	str	r3, [r2, #64]	; 0x40
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <SystemClock_Config+0xcc>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <SystemClock_Config+0xd0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <SystemClock_Config+0xd0>)
 8001506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <SystemClock_Config+0xd0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001518:	2301      	movs	r3, #1
 800151a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001522:	2302      	movs	r3, #2
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001526:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152c:	2304      	movs	r3, #4
 800152e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001530:	23a8      	movs	r3, #168	; 0xa8
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001534:	2302      	movs	r3, #2
 8001536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001538:	2304      	movs	r3, #4
 800153a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800153c:	f107 0320 	add.w	r3, r7, #32
 8001540:	4618      	mov	r0, r3
 8001542:	f001 fcd5 	bl	8002ef0 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x94>
    Error_Handler();
 800154c:	f000 f832 	bl	80015b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001550:	230f      	movs	r3, #15
 8001552:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001554:	2302      	movs	r3, #2
 8001556:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800155c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2105      	movs	r1, #5
 800156e:	4618      	mov	r0, r3
 8001570:	f001 ff2c 	bl	80033cc <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0xc2>
    Error_Handler();
 800157a:	f000 f81b 	bl	80015b4 <Error_Handler>
  }
}
 800157e:	bf00      	nop
 8001580:	3750      	adds	r7, #80	; 0x50
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40007000 	.word	0x40007000

08001590 <__io_putchar>:
#define USART_PRINTF \
  int fputc(int ch, FILE *f)  // With other compiler printf calls fputc()
#endif                        /* __GNUC__ */

// Retargets the C library printf function to the USART
USART_PRINTF {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1,
 8001598:	1d39      	adds	r1, r7, #4
 800159a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159e:	2201      	movs	r2, #1
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <__io_putchar+0x20>)
 80015a2:	f003 f920 	bl	80047e6 <HAL_UART_Transmit>
                    0xFFFF);  // Write character to UART2
  return ch;                  // Return the character
 80015a6:	687b      	ldr	r3, [r7, #4]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20002d00 	.word	0x20002d00

080015b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_MspInit+0x4c>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_MspInit+0x4c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_MspInit+0x4c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 fdc8 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001674:	4828      	ldr	r0, [pc, #160]	; (8001718 <TIM2_IRQHandler+0xa8>)
 8001676:	f002 fa05 	bl	8003a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800167a:	4b27      	ldr	r3, [pc, #156]	; (8001718 <TIM2_IRQHandler+0xa8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f06f 0208 	mvn.w	r2, #8
 8001682:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <TIM2_IRQHandler+0xac>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <TIM2_IRQHandler+0xac>)
 800168e:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <TIM2_IRQHandler+0xac>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001698:	d905      	bls.n	80016a6 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <TIM2_IRQHandler+0xac>)
 800169c:	2200      	movs	r2, #0
 800169e:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 80016a0:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <TIM2_IRQHandler+0xb0>)
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <TIM2_IRQHandler+0xac>)
 80016a4:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <TIM2_IRQHandler+0xac>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d802      	bhi.n	80016b4 <TIM2_IRQHandler+0x44>
 80016ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016b2:	e001      	b.n	80016b8 <TIM2_IRQHandler+0x48>
 80016b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b8:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <TIM2_IRQHandler+0xb4>)
 80016ba:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <TIM2_IRQHandler+0xac>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2b23      	cmp	r3, #35	; 0x23
 80016c2:	d927      	bls.n	8001714 <TIM2_IRQHandler+0xa4>
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <TIM2_IRQHandler+0xac>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	f240 2202 	movw	r2, #514	; 0x202
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d821      	bhi.n	8001714 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <TIM2_IRQHandler+0xb8>)
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <TIM2_IRQHandler+0xac>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80016d8:	4a13      	ldr	r2, [pc, #76]	; (8001728 <TIM2_IRQHandler+0xb8>)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <TIM2_IRQHandler+0xac>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <TIM2_IRQHandler+0xbc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <TIM2_IRQHandler+0xbc>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <TIM2_IRQHandler+0xc0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <TIM2_IRQHandler+0xc0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <TIM2_IRQHandler+0xac>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <TIM2_IRQHandler+0xac>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001710:	4a02      	ldr	r2, [pc, #8]	; (800171c <TIM2_IRQHandler+0xac>)
 8001712:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20002c60 	.word	0x20002c60
 800171c:	20015a30 	.word	0x20015a30
 8001720:	20002d40 	.word	0x20002d40
 8001724:	40020400 	.word	0x40020400
 8001728:	40026488 	.word	0x40026488
 800172c:	40010000 	.word	0x40010000
 8001730:	20002ca0 	.word	0x20002ca0

08001734 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <USART2_IRQHandler+0x70>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b0a      	cmp	r3, #10
 8001744:	d026      	beq.n	8001794 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b0d      	cmp	r3, #13
 800174a:	d002      	beq.n	8001752 <USART2_IRQHandler+0x1e>
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2b2e      	cmp	r3, #46	; 0x2e
 8001750:	d10e      	bne.n	8001770 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <USART2_IRQHandler+0x74>)
 8001754:	22ff      	movs	r2, #255	; 0xff
 8001756:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			// Store the message length for processing
			input.msglen = input.char_counter;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <USART2_IRQHandler+0x74>)
 800175c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <USART2_IRQHandler+0x74>)
 8001762:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <USART2_IRQHandler+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 800176e:	e011      	b.n	8001794 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <USART2_IRQHandler+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <USART2_IRQHandler+0x74>)
 800177a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <USART2_IRQHandler+0x74>)
 8001780:	4413      	add	r3, r2
 8001782:	79fa      	ldrb	r2, [r7, #7]
 8001784:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <USART2_IRQHandler+0x74>)
 8001788:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800178c:	3301      	adds	r3, #1
 800178e:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <USART2_IRQHandler+0x74>)
 8001790:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <USART2_IRQHandler+0x78>)
 8001796:	f003 f915 	bl	80049c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40004400 	.word	0x40004400
 80017a8:	20002808 	.word	0x20002808
 80017ac:	20002d00 	.word	0x20002d00

080017b0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <DMA2_Stream5_IRQHandler+0x48>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10f      	bne.n	80017e4 <DMA2_Stream5_IRQHandler+0x34>
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <DMA2_Stream5_IRQHandler+0x48>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6a1a      	ldr	r2, [r3, #32]
 80017ca:	f240 4344 	movw	r3, #1092	; 0x444
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <DMA2_Stream5_IRQHandler+0x34>
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <DMA2_Stream5_IRQHandler+0x48>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <DMA2_Stream5_IRQHandler+0x48>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <DMA2_Stream5_IRQHandler+0x4c>)
 80017e6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80017ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <DMA2_Stream5_IRQHandler+0x50>)
 80017ee:	f000 ff5f 	bl	80026b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20002c20 	.word	0x20002c20
 80017fc:	40021000 	.word	0x40021000
 8001800:	20002ca0 	.word	0x20002ca0

08001804 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e00a      	b.n	800182c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001816:	f3af 8000 	nop.w
 800181a:	4601      	mov	r1, r0
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf0      	blt.n	8001816 <_read+0x12>
	}

return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e009      	b.n	8001864 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	60ba      	str	r2, [r7, #8]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fe99 	bl	8001590 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf1      	blt.n	8001850 <_write+0x12>
	}
	return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_close>:

int _close(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189e:	605a      	str	r2, [r3, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_isatty>:

int _isatty(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	return 1;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x50>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x16>
		heap_end = &end;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <_sbrk+0x50>)
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <_sbrk+0x54>)
 80018f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <_sbrk+0x50>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <_sbrk+0x50>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	466a      	mov	r2, sp
 8001906:	4293      	cmp	r3, r2
 8001908:	d907      	bls.n	800191a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800190a:	f003 ffb7 	bl	800587c <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	220c      	movs	r2, #12
 8001912:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
 8001918:	e006      	b.n	8001928 <_sbrk+0x48>
	}

	heap_end += incr;
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <_sbrk+0x50>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a03      	ldr	r2, [pc, #12]	; (8001930 <_sbrk+0x50>)
 8001924:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20002c1c 	.word	0x20002c1c
 8001934:	20015a50 	.word	0x20015a50

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <SystemInit+0x28>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <SystemInit+0x28>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SystemInit+0x28>)
 800194e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001952:	609a      	str	r2, [r3, #8]
#endif
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	463b      	mov	r3, r7
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <MX_TIM1_Init+0x98>)
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <MX_TIM1_Init+0x9c>)
 8001984:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_TIM1_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_TIM1_Init+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_TIM1_Init+0x98>)
 8001994:	220b      	movs	r2, #11
 8001996:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_TIM1_Init+0x98>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_TIM1_Init+0x98>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_TIM1_Init+0x98>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019aa:	4814      	ldr	r0, [pc, #80]	; (80019fc <MX_TIM1_Init+0x98>)
 80019ac:	f001 ff2e 	bl	800380c <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80019b6:	f7ff fdfd 	bl	80015b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4619      	mov	r1, r3
 80019c6:	480d      	ldr	r0, [pc, #52]	; (80019fc <MX_TIM1_Init+0x98>)
 80019c8:	f002 fa2a 	bl	8003e20 <HAL_TIM_ConfigClockSource>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80019d2:	f7ff fdef 	bl	80015b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019de:	463b      	mov	r3, r7
 80019e0:	4619      	mov	r1, r3
 80019e2:	4806      	ldr	r0, [pc, #24]	; (80019fc <MX_TIM1_Init+0x98>)
 80019e4:	f002 fe22 	bl	800462c <HAL_TIMEx_MasterConfigSynchronization>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80019ee:	f7ff fde1 	bl	80015b4 <Error_Handler>
  }

}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20002c20 	.word	0x20002c20
 8001a00:	40010000 	.word	0x40010000

08001a04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0a:	f107 0320 	add.w	r3, r7, #32
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001a3c:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001a40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a4e:	4820      	ldr	r0, [pc, #128]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001a50:	f001 ff2b 	bl	80038aa <HAL_TIM_PWM_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a5a:	f7ff fdab 	bl	80015b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001a6e:	f002 fddd 	bl	800462c <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a78:	f7ff fd9c 	bl	80015b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7c:	2360      	movs	r3, #96	; 0x60
 8001a7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001a80:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001a84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a86:	2302      	movs	r3, #2
 8001a88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2208      	movs	r2, #8
 8001a92:	4619      	mov	r1, r3
 8001a94:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001a96:	f002 f8fd 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001aa0:	f7ff fd88 	bl	80015b4 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001aa4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	220c      	movs	r2, #12
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001ab2:	f002 f8ef 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001abc:	f7ff fd7a 	bl	80015b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <MX_TIM2_Init+0xcc>)
 8001ac2:	f000 f87f 	bl	8001bc4 <HAL_TIM_MspPostInit>

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20002c60 	.word	0x20002c60

08001ad4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <HAL_TIM_Base_MspInit+0x94>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d13c      	bne.n	8001b60 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_TIM_Base_MspInit+0x98>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_TIM_Base_MspInit+0x98>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_TIM_Base_MspInit+0x98>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_TIM_Base_MspInit+0xa0>)
 8001b06:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b0a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001b0e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b12:	2240      	movs	r2, #64	; 0x40
 8001b14:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b22:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b3c:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001b44:	480a      	ldr	r0, [pc, #40]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b46:	f000 fc8b 	bl	8002460 <HAL_DMA_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001b50:	f7ff fd30 	bl	80015b4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b58:	621a      	str	r2, [r3, #32]
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <HAL_TIM_Base_MspInit+0x9c>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	20002ca0 	.word	0x20002ca0
 8001b74:	40026488 	.word	0x40026488

08001b78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b88:	d115      	bne.n	8001bb6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x48>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x48>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x48>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	201c      	movs	r0, #28
 8001bac:	f000 fc21 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bb0:	201c      	movs	r0, #28
 8001bb2:	f000 fc3a 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be4:	d11e      	bne.n	8001c24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_TIM_MspPostInit+0x68>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <HAL_TIM_MspPostInit+0x68>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_TIM_MspPostInit+0x68>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c14:	2301      	movs	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4804      	ldr	r0, [pc, #16]	; (8001c30 <HAL_TIM_MspPostInit+0x6c>)
 8001c20:	f000 ffb0 	bl	8002b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020400 	.word	0x40020400

08001c34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <MX_USART2_UART_Init+0x50>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	f002 fd6e 	bl	800474c <HAL_UART_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c76:	f7ff fc9d 	bl	80015b4 <Error_Handler>
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20002d00 	.word	0x20002d00
 8001c84:	40004400 	.word	0x40004400

08001c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <HAL_UART_MspInit+0x94>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d133      	bne.n	8001d12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <HAL_UART_MspInit+0x9c>)
 8001cfe:	f000 ff41 	bl	8002b84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2026      	movs	r0, #38	; 0x26
 8001d08:	f000 fb73 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d0c:	2026      	movs	r0, #38	; 0x26
 8001d0e:	f000 fb8c 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40004400 	.word	0x40004400
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d2e:	e003      	b.n	8001d38 <LoopCopyDataInit>

08001d30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d36:	3104      	adds	r1, #4

08001d38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d40:	d3f6      	bcc.n	8001d30 <CopyDataInit>
  ldr  r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d44:	e002      	b.n	8001d4c <LoopFillZerobss>

08001d46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d48:	f842 3b04 	str.w	r3, [r2], #4

08001d4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d50:	d3f9      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d52:	f7ff fdf1 	bl	8001938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f003 fd97 	bl	8005888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7ff fb15 	bl	8001388 <main>
  bx  lr    
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d64:	08006e64 	.word	0x08006e64
  ldr  r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d6c:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 8001d70:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 8001d74:	20015a50 	.word	0x20015a50

08001d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC_IRQHandler>

08001d7a <DrawRectangle>:
 * @param color
 * @param filled
 * @return
 */
int DrawRectangle(uint8_t xp, uint8_t yp, uint8_t Width, uint8_t Heigth,
		uint8_t color, uint8_t filled) {
 8001d7a:	b590      	push	{r4, r7, lr}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4604      	mov	r4, r0
 8001d82:	4608      	mov	r0, r1
 8001d84:	4611      	mov	r1, r2
 8001d86:	461a      	mov	r2, r3
 8001d88:	4623      	mov	r3, r4
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71bb      	strb	r3, [r7, #6]
 8001d90:	460b      	mov	r3, r1
 8001d92:	717b      	strb	r3, [r7, #5]
 8001d94:	4613      	mov	r3, r2
 8001d96:	713b      	strb	r3, [r7, #4]
	if (filled == 0) {
 8001d98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d120      	bne.n	8001de2 <DrawRectangle+0x68>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001da0:	79bb      	ldrb	r3, [r7, #6]
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e017      	b.n	8001dd6 <DrawRectangle+0x5c>
			for (uint8_t x = xp; x < xp + Width; x++) {
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	73bb      	strb	r3, [r7, #14]
 8001daa:	e00b      	b.n	8001dc4 <DrawRectangle+0x4a>
				UB_VGA_SetPixel(x, y, color);
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	b291      	uxth	r1, r2
 8001db4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 f9a5 	bl	8002108 <UB_VGA_SetPixel>
			for (uint8_t x = xp; x < xp + Width; x++) {
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	73bb      	strb	r3, [r7, #14]
 8001dc4:	7bba      	ldrb	r2, [r7, #14]
 8001dc6:	79f9      	ldrb	r1, [r7, #7]
 8001dc8:	797b      	ldrb	r3, [r7, #5]
 8001dca:	440b      	add	r3, r1
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbed      	blt.n	8001dac <DrawRectangle+0x32>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	79b9      	ldrb	r1, [r7, #6]
 8001dda:	793b      	ldrb	r3, [r7, #4]
 8001ddc:	440b      	add	r3, r1
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dbe1      	blt.n	8001da6 <DrawRectangle+0x2c>
			}
		}
	}
	//rectangle not filled, only lines
	if (filled == 1) {
 8001de2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d15b      	bne.n	8001ea2 <DrawRectangle+0x128>
		//top line
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	737b      	strb	r3, [r7, #13]
 8001dee:	e00b      	b.n	8001e08 <DrawRectangle+0x8e>
			UB_VGA_SetPixel(x, yp, color);
 8001df0:	7b7b      	ldrb	r3, [r7, #13]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	79ba      	ldrb	r2, [r7, #6]
 8001df6:	b291      	uxth	r1, r2
 8001df8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 f983 	bl	8002108 <UB_VGA_SetPixel>
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001e02:	7b7b      	ldrb	r3, [r7, #13]
 8001e04:	3301      	adds	r3, #1
 8001e06:	737b      	strb	r3, [r7, #13]
 8001e08:	7b7a      	ldrb	r2, [r7, #13]
 8001e0a:	79f9      	ldrb	r1, [r7, #7]
 8001e0c:	797b      	ldrb	r3, [r7, #5]
 8001e0e:	440b      	add	r3, r1
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbed      	blt.n	8001df0 <DrawRectangle+0x76>
		}
		//bottom line
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	733b      	strb	r3, [r7, #12]
 8001e18:	e00f      	b.n	8001e3a <DrawRectangle+0xc0>
			UB_VGA_SetPixel(x, yp + Heigth, color);
 8001e1a:	7b3b      	ldrb	r3, [r7, #12]
 8001e1c:	b298      	uxth	r0, r3
 8001e1e:	79bb      	ldrb	r3, [r7, #6]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	793b      	ldrb	r3, [r7, #4]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f000 f96a 	bl	8002108 <UB_VGA_SetPixel>
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001e34:	7b3b      	ldrb	r3, [r7, #12]
 8001e36:	3301      	adds	r3, #1
 8001e38:	733b      	strb	r3, [r7, #12]
 8001e3a:	7b3a      	ldrb	r2, [r7, #12]
 8001e3c:	79f9      	ldrb	r1, [r7, #7]
 8001e3e:	797b      	ldrb	r3, [r7, #5]
 8001e40:	440b      	add	r3, r1
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dbe9      	blt.n	8001e1a <DrawRectangle+0xa0>
		}

		//Left vertical line
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	72fb      	strb	r3, [r7, #11]
 8001e4a:	e00b      	b.n	8001e64 <DrawRectangle+0xea>
			UB_VGA_SetPixel(xp, y, color);
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	7afa      	ldrb	r2, [r7, #11]
 8001e52:	b291      	uxth	r1, r2
 8001e54:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f955 	bl	8002108 <UB_VGA_SetPixel>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	3301      	adds	r3, #1
 8001e62:	72fb      	strb	r3, [r7, #11]
 8001e64:	7afa      	ldrb	r2, [r7, #11]
 8001e66:	79b9      	ldrb	r1, [r7, #6]
 8001e68:	793b      	ldrb	r3, [r7, #4]
 8001e6a:	440b      	add	r3, r1
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbed      	blt.n	8001e4c <DrawRectangle+0xd2>

		}
		//Right vertical line
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	72bb      	strb	r3, [r7, #10]
 8001e74:	e00f      	b.n	8001e96 <DrawRectangle+0x11c>
			UB_VGA_SetPixel(xp + Width, y, color);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	797b      	ldrb	r3, [r7, #5]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	7aba      	ldrb	r2, [r7, #10]
 8001e84:	b291      	uxth	r1, r2
 8001e86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f93c 	bl	8002108 <UB_VGA_SetPixel>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001e90:	7abb      	ldrb	r3, [r7, #10]
 8001e92:	3301      	adds	r3, #1
 8001e94:	72bb      	strb	r3, [r7, #10]
 8001e96:	7aba      	ldrb	r2, [r7, #10]
 8001e98:	79b9      	ldrb	r1, [r7, #6]
 8001e9a:	793b      	ldrb	r3, [r7, #4]
 8001e9c:	440b      	add	r3, r1
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	dbe9      	blt.n	8001e76 <DrawRectangle+0xfc>
		}
	}
}
 8001ea2:	bf00      	nop
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd90      	pop	{r4, r7, pc}

08001eac <DrawLine>:
 * @param color
 * @param thickness
 * @return
 */
int DrawLine(uint8_t xp1, uint8_t yp1, uint8_t xp2, uint8_t yp2, uint8_t color,
		uint8_t thickness) {
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b08d      	sub	sp, #52	; 0x34
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4623      	mov	r3, r4
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71bb      	strb	r3, [r7, #6]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	717b      	strb	r3, [r7, #5]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	713b      	strb	r3, [r7, #4]
	int dx = xp2 - xp1;
 8001eca:	797a      	ldrb	r2, [r7, #5]
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	61fb      	str	r3, [r7, #28]
	int dy = yp2 - yp1;
 8001ed2:	793a      	ldrb	r2, [r7, #4]
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	61bb      	str	r3, [r7, #24]

	// calculate steps required for generating pixels
	int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ee0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bfb8      	it	lt
 8001eea:	425b      	neglt	r3, r3
 8001eec:	4293      	cmp	r3, r2
 8001eee:	bfb8      	it	lt
 8001ef0:	4613      	movlt	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

	// calculate increment in x & y for each steps
	float Xinc = dx / (float) steps;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f0c:	edc7 7a04 	vstr	s15, [r7, #16]
	float Yinc = dy / (float) steps;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f28:	edc7 7a03 	vstr	s15, [r7, #12]

	// Put pixel for each step
	for (int j = 0 - abs(thickness / 2); j <= abs(thickness / 2); j++) {
 8001f2c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	425b      	negs	r3, r3
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f38:	e053      	b.n	8001fe2 <DrawLine+0x136>
		float X = xp1 + 0.5;
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe faf9 	bl	8000534 <__aeabi_i2d>
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <DrawLine+0x150>)
 8001f48:	f7fe f9a8 	bl	800029c <__adddf3>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fb58 	bl	8000608 <__aeabi_d2f>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
		float Y = yp1 + j + 0.5;
 8001f5c:	79ba      	ldrb	r2, [r7, #6]
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	4413      	add	r3, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fae6 	bl	8000534 <__aeabi_i2d>
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <DrawLine+0x150>)
 8001f6e:	f7fe f995 	bl	800029c <__adddf3>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fb45 	bl	8000608 <__aeabi_d2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i <= steps; i++) {
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	e025      	b.n	8001fd4 <DrawLine+0x128>
			UB_VGA_SetPixel(X, Y, color);
 8001f88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f90:	ee17 3a90 	vmov	r3, s15
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9e:	ee17 2a90 	vmov	r2, s15
 8001fa2:	b291      	uxth	r1, r2
 8001fa4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f8ad 	bl	8002108 <UB_VGA_SetPixel>
			X += Xinc; // increment in x at each step
 8001fae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001fb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			Y += Yinc;
 8001fbe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001fc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (int i = 0; i <= steps; i++) {
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	623b      	str	r3, [r7, #32]
 8001fd4:	6a3a      	ldr	r2, [r7, #32]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	ddd5      	ble.n	8001f88 <DrawLine+0xdc>
	for (int j = 0 - abs(thickness / 2); j <= abs(thickness / 2); j++) {
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	3301      	adds	r3, #1
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	dda3      	ble.n	8001f3a <DrawLine+0x8e>
		}
	}
}
 8001ff2:	bf00      	nop
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3734      	adds	r7, #52	; 0x34
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	3fe00000 	.word	0x3fe00000

08002000 <ClearScreen>:
 * @brief Clears the screen in the specified color
 *
 * @param color
 * @return
 */
int ClearScreen(uint8_t color) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f857 	bl	80020c0 <UB_VGA_FillScreen>
}
 8002012:	bf00      	nop
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <UB_VGA_Screen_Init+0x84>)
 8002022:	2200      	movs	r2, #0
 8002024:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <UB_VGA_Screen_Init+0x84>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <UB_VGA_Screen_Init+0x84>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <UB_VGA_Screen_Init+0x88>)
 8002034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002038:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800203a:	481b      	ldr	r0, [pc, #108]	; (80020a8 <UB_VGA_Screen_Init+0x8c>)
 800203c:	f001 fc11 	bl	8003862 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002040:	210c      	movs	r1, #12
 8002042:	4819      	ldr	r0, [pc, #100]	; (80020a8 <UB_VGA_Screen_Init+0x8c>)
 8002044:	f001 fc5c 	bl	8003900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8002048:	2108      	movs	r1, #8
 800204a:	4817      	ldr	r0, [pc, #92]	; (80020a8 <UB_VGA_Screen_Init+0x8c>)
 800204c:	f001 fc96 	bl	800397c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002050:	4b16      	ldr	r3, [pc, #88]	; (80020ac <UB_VGA_Screen_Init+0x90>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <UB_VGA_Screen_Init+0x90>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <UB_VGA_Screen_Init+0x90>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <UB_VGA_Screen_Init+0x90>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8002070:	490f      	ldr	r1, [pc, #60]	; (80020b0 <UB_VGA_Screen_Init+0x94>)
 8002072:	f240 1341 	movw	r3, #321	; 0x141
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <UB_VGA_Screen_Init+0x98>)
 8002078:	480f      	ldr	r0, [pc, #60]	; (80020b8 <UB_VGA_Screen_Init+0x9c>)
 800207a:	f000 fa9f 	bl	80025bc <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800207e:	480e      	ldr	r0, [pc, #56]	; (80020b8 <UB_VGA_Screen_Init+0x9c>)
 8002080:	f000 f9ee 	bl	8002460 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <UB_VGA_Screen_Init+0x9c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <UB_VGA_Screen_Init+0x9c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0210 	orr.w	r2, r2, #16
 8002092:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <UB_VGA_Screen_Init+0xa0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a01      	ldr	r2, [pc, #4]	; (80020a0 <UB_VGA_Screen_Init+0x84>)
 800209a:	6093      	str	r3, [r2, #8]
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20015a30 	.word	0x20015a30
 80020a4:	40020400 	.word	0x40020400
 80020a8:	20002c60 	.word	0x20002c60
 80020ac:	20002c20 	.word	0x20002c20
 80020b0:	20002d40 	.word	0x20002d40
 80020b4:	40021015 	.word	0x40021015
 80020b8:	20002ca0 	.word	0x20002ca0
 80020bc:	40026488 	.word	0x40026488

080020c0 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80020ca:	2300      	movs	r3, #0
 80020cc:	81bb      	strh	r3, [r7, #12]
 80020ce:	e012      	b.n	80020f6 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	81fb      	strh	r3, [r7, #14]
 80020d4:	e008      	b.n	80020e8 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	89b9      	ldrh	r1, [r7, #12]
 80020da:	89fb      	ldrh	r3, [r7, #14]
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 f813 	bl	8002108 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80020e2:	89fb      	ldrh	r3, [r7, #14]
 80020e4:	3301      	adds	r3, #1
 80020e6:	81fb      	strh	r3, [r7, #14]
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020ee:	d3f2      	bcc.n	80020d6 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80020f0:	89bb      	ldrh	r3, [r7, #12]
 80020f2:	3301      	adds	r3, #1
 80020f4:	81bb      	strh	r3, [r7, #12]
 80020f6:	89bb      	ldrh	r3, [r7, #12]
 80020f8:	2bef      	cmp	r3, #239	; 0xef
 80020fa:	d9e9      	bls.n	80020d0 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
 8002112:	460b      	mov	r3, r1
 8002114:	80bb      	strh	r3, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002120:	d301      	bcc.n	8002126 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	2bef      	cmp	r3, #239	; 0xef
 800212a:	d901      	bls.n	8002130 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8002130:	88ba      	ldrh	r2, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	441a      	add	r2, r3
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	4413      	add	r3, r2
 8002140:	4904      	ldr	r1, [pc, #16]	; (8002154 <UB_VGA_SetPixel+0x4c>)
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	54ca      	strb	r2, [r1, r3]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20002d40 	.word	0x20002d40

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <HAL_Init+0x40>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <HAL_Init+0x40>)
 800216e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a07      	ldr	r2, [pc, #28]	; (8002198 <HAL_Init+0x40>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002180:	2003      	movs	r0, #3
 8002182:	f000 f92b 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002186:	2000      	movs	r0, #0
 8002188:	f000 f808 	bl	800219c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800218c:	f7ff fa1a 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x54>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x58>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f943 	bl	8002446 <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00e      	b.n	80021e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d80a      	bhi.n	80021e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f000 f90b 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_InitTick+0x5c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000078 	.word	0x20000078
 80021f4:	20000080 	.word	0x20000080
 80021f8:	2000007c 	.word	0x2000007c

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000080 	.word	0x20000080
 8002220:	20015a3c 	.word	0x20015a3c

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20015a3c 	.word	0x20015a3c

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff29 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff3e 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff31 	bl	80022a0 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff feda 	bl	8002224 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e099      	b.n	80025b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249c:	e00f      	b.n	80024be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249e:	f7ff fec1 	bl	8002224 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d908      	bls.n	80024be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2203      	movs	r2, #3
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e078      	b.n	80025b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e8      	bne.n	800249e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_DMA_Init+0x158>)
 80024d8:	4013      	ands	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	2b04      	cmp	r3, #4
 8002516:	d107      	bne.n	8002528 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4313      	orrs	r3, r2
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f023 0307 	bic.w	r3, r3, #7
 800253e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	2b04      	cmp	r3, #4
 8002550:	d117      	bne.n	8002582 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00e      	beq.n	8002582 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fa91 	bl	8002a8c <DMA_CheckFifoParam>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2240      	movs	r2, #64	; 0x40
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800257e:	2301      	movs	r3, #1
 8002580:	e016      	b.n	80025b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fa48 	bl	8002a20 <DMA_CalcBaseAndBitshift>
 8002590:	4603      	mov	r3, r0
 8002592:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	223f      	movs	r2, #63	; 0x3f
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	f010803f 	.word	0xf010803f

080025bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_DMA_Start_IT+0x26>
 80025de:	2302      	movs	r3, #2
 80025e0:	e040      	b.n	8002664 <HAL_DMA_Start_IT+0xa8>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d12f      	bne.n	8002656 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f9da 	bl	80029c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	223f      	movs	r2, #63	; 0x3f
 8002616:	409a      	lsls	r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0216 	orr.w	r2, r2, #22
 800262a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0208 	orr.w	r2, r2, #8
 8002642:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e005      	b.n	8002662 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002662:	7dfb      	ldrb	r3, [r7, #23]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d004      	beq.n	800268a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00c      	b.n	80026a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026bc:	4b8e      	ldr	r3, [pc, #568]	; (80028f8 <HAL_DMA_IRQHandler+0x248>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a8e      	ldr	r2, [pc, #568]	; (80028fc <HAL_DMA_IRQHandler+0x24c>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0a9b      	lsrs	r3, r3, #10
 80026c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	2208      	movs	r2, #8
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01a      	beq.n	800271c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0204 	bic.w	r2, r2, #4
 8002702:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002708:	2208      	movs	r2, #8
 800270a:	409a      	lsls	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	2201      	movs	r2, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d012      	beq.n	8002752 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273e:	2201      	movs	r2, #1
 8002740:	409a      	lsls	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2204      	movs	r2, #4
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	2204      	movs	r2, #4
 8002776:	409a      	lsls	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	2210      	movs	r2, #16
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d043      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d03c      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	2210      	movs	r2, #16
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d018      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d024      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
 80027de:	e01f      	b.n	8002820 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
 80027f0:	e016      	b.n	8002820 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0208 	bic.w	r2, r2, #8
 800280e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	2220      	movs	r2, #32
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 808f 	beq.w	8002950 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8087 	beq.w	8002950 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2220      	movs	r2, #32
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b05      	cmp	r3, #5
 8002858:	d136      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0216 	bic.w	r2, r2, #22
 8002868:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002878:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_DMA_IRQHandler+0x1da>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0208 	bic.w	r2, r2, #8
 8002898:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	223f      	movs	r2, #63	; 0x3f
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d07e      	beq.n	80029bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
        }
        return;
 80028c6:	e079      	b.n	80029bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01d      	beq.n	8002912 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10d      	bne.n	8002900 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d031      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
 80028f4:	e02c      	b.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
 80028f6:	bf00      	nop
 80028f8:	20000078 	.word	0x20000078
 80028fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
 8002910:	e01e      	b.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10f      	bne.n	8002940 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0210 	bic.w	r2, r2, #16
 800292e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	2b00      	cmp	r3, #0
 8002956:	d032      	beq.n	80029be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d022      	beq.n	80029aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2205      	movs	r2, #5
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	3301      	adds	r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	429a      	cmp	r2, r3
 8002986:	d307      	bcc.n	8002998 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f2      	bne.n	800297c <HAL_DMA_IRQHandler+0x2cc>
 8002996:	e000      	b.n	800299a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002998:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
 80029ba:	e000      	b.n	80029be <HAL_DMA_IRQHandler+0x30e>
        return;
 80029bc:	bf00      	nop
    }
  }
}
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d108      	bne.n	8002a04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a02:	e007      	b.n	8002a14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3b10      	subs	r3, #16
 8002a30:	4a14      	ldr	r2, [pc, #80]	; (8002a84 <DMA_CalcBaseAndBitshift+0x64>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <DMA_CalcBaseAndBitshift+0x68>)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d909      	bls.n	8002a62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a56:	f023 0303 	bic.w	r3, r3, #3
 8002a5a:	1d1a      	adds	r2, r3, #4
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a60:	e007      	b.n	8002a72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	aaaaaaab 	.word	0xaaaaaaab
 8002a88:	08006cb0 	.word	0x08006cb0

08002a8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d11f      	bne.n	8002ae6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d856      	bhi.n	8002b5a <DMA_CheckFifoParam+0xce>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <DMA_CheckFifoParam+0x28>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002ad7 	.word	0x08002ad7
 8002abc:	08002ac5 	.word	0x08002ac5
 8002ac0:	08002b5b 	.word	0x08002b5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d046      	beq.n	8002b5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad4:	e043      	b.n	8002b5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ade:	d140      	bne.n	8002b62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae4:	e03d      	b.n	8002b62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aee:	d121      	bne.n	8002b34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d837      	bhi.n	8002b66 <DMA_CheckFifoParam+0xda>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <DMA_CheckFifoParam+0x70>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b13 	.word	0x08002b13
 8002b04:	08002b0d 	.word	0x08002b0d
 8002b08:	08002b25 	.word	0x08002b25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	e030      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d025      	beq.n	8002b6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b22:	e022      	b.n	8002b6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b2c:	d11f      	bne.n	8002b6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b32:	e01c      	b.n	8002b6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d903      	bls.n	8002b42 <DMA_CheckFifoParam+0xb6>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d003      	beq.n	8002b48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b40:	e018      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
      break;
 8002b46:	e015      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e00b      	b.n	8002b72 <DMA_CheckFifoParam+0xe6>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e00a      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e008      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e006      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e004      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e002      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b6e:	bf00      	nop
 8002b70:	e000      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
    }
  } 
  
  return status; 
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop

08002b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e16b      	b.n	8002e78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f040 815a 	bne.w	8002e72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d00b      	beq.n	8002bde <HAL_GPIO_Init+0x5a>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d007      	beq.n	8002bde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd2:	2b11      	cmp	r3, #17
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b12      	cmp	r3, #18
 8002bdc:	d130      	bne.n	8002c40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 0201 	and.w	r2, r3, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0xfc>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b12      	cmp	r3, #18
 8002c7e:	d123      	bne.n	8002cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	220f      	movs	r2, #15
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	08da      	lsrs	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3208      	adds	r2, #8
 8002cc2:	69b9      	ldr	r1, [r7, #24]
 8002cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0203 	and.w	r2, r3, #3
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80b4 	beq.w	8002e72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <HAL_GPIO_Init+0x30c>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a5f      	ldr	r2, [pc, #380]	; (8002e90 <HAL_GPIO_Init+0x30c>)
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_GPIO_Init+0x30c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d26:	4a5b      	ldr	r2, [pc, #364]	; (8002e94 <HAL_GPIO_Init+0x310>)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <HAL_GPIO_Init+0x314>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02b      	beq.n	8002daa <HAL_GPIO_Init+0x226>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a51      	ldr	r2, [pc, #324]	; (8002e9c <HAL_GPIO_Init+0x318>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d025      	beq.n	8002da6 <HAL_GPIO_Init+0x222>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a50      	ldr	r2, [pc, #320]	; (8002ea0 <HAL_GPIO_Init+0x31c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <HAL_GPIO_Init+0x21e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4f      	ldr	r2, [pc, #316]	; (8002ea4 <HAL_GPIO_Init+0x320>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d019      	beq.n	8002d9e <HAL_GPIO_Init+0x21a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ea8 <HAL_GPIO_Init+0x324>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0x216>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4d      	ldr	r2, [pc, #308]	; (8002eac <HAL_GPIO_Init+0x328>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00d      	beq.n	8002d96 <HAL_GPIO_Init+0x212>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	; (8002eb0 <HAL_GPIO_Init+0x32c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x20e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4b      	ldr	r2, [pc, #300]	; (8002eb4 <HAL_GPIO_Init+0x330>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_GPIO_Init+0x20a>
 8002d8a:	2307      	movs	r3, #7
 8002d8c:	e00e      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d8e:	2308      	movs	r3, #8
 8002d90:	e00c      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d92:	2306      	movs	r3, #6
 8002d94:	e00a      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d96:	2305      	movs	r3, #5
 8002d98:	e008      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e004      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e002      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002daa:	2300      	movs	r3, #0
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f002 0203 	and.w	r2, r2, #3
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4093      	lsls	r3, r2
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dbc:	4935      	ldr	r1, [pc, #212]	; (8002e94 <HAL_GPIO_Init+0x310>)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dca:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_GPIO_Init+0x334>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dee:	4a32      	ldr	r2, [pc, #200]	; (8002eb8 <HAL_GPIO_Init+0x334>)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <HAL_GPIO_Init+0x334>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e18:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e42:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e6c:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3301      	adds	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b0f      	cmp	r3, #15
 8002e7c:	f67f ae90 	bls.w	8002ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40020c00 	.word	0x40020c00
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40021400 	.word	0x40021400
 8002eb0:	40021800 	.word	0x40021800
 8002eb4:	40021c00 	.word	0x40021c00
 8002eb8:	40013c00 	.word	0x40013c00

08002ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	807b      	strh	r3, [r7, #2]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ecc:	787b      	ldrb	r3, [r7, #1]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ed2:	887a      	ldrh	r2, [r7, #2]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed8:	e003      	b.n	8002ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eda:	887b      	ldrh	r3, [r7, #2]
 8002edc:	041a      	lsls	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	619a      	str	r2, [r3, #24]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e25e      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d075      	beq.n	8002ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0e:	4b88      	ldr	r3, [pc, #544]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4b85      	ldr	r3, [pc, #532]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b82      	ldr	r3, [pc, #520]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	4b7e      	ldr	r3, [pc, #504]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05b      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x108>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d157      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e239      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d106      	bne.n	8002f64 <HAL_RCC_OscConfig+0x74>
 8002f56:	4b76      	ldr	r3, [pc, #472]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a75      	ldr	r2, [pc, #468]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b70      	ldr	r3, [pc, #448]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6f      	ldr	r2, [pc, #444]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6c      	ldr	r2, [pc, #432]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f88:	4b69      	ldr	r3, [pc, #420]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a68      	ldr	r2, [pc, #416]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b66      	ldr	r3, [pc, #408]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a65      	ldr	r2, [pc, #404]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7ff f93c 	bl	8002224 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7ff f938 	bl	8002224 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1fe      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b5b      	ldr	r3, [pc, #364]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xc0>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7ff f928 	bl	8002224 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7ff f924 	bl	8002224 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1ea      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b51      	ldr	r3, [pc, #324]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xe8>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003006:	4b4a      	ldr	r3, [pc, #296]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b44      	ldr	r3, [pc, #272]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1be      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4937      	ldr	r1, [pc, #220]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e03a      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_OscConfig+0x244>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7ff f8dd 	bl	8002224 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306e:	f7ff f8d9 	bl	8002224 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e19f      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4925      	ldr	r1, [pc, #148]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_OscConfig+0x244>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7ff f8bc 	bl	8002224 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b0:	f7ff f8b8 	bl	8002224 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e17e      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d036      	beq.n	8003148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_RCC_OscConfig+0x248>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7ff f89c 	bl	8002224 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f0:	f7ff f898 	bl	8002224 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e15e      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_OscConfig+0x240>)
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x200>
 800310e:	e01b      	b.n	8003148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_OscConfig+0x248>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7ff f885 	bl	8002224 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	e00e      	b.n	800313c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311e:	f7ff f881 	bl	8002224 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d907      	bls.n	800313c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e147      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
 8003130:	40023800 	.word	0x40023800
 8003134:	42470000 	.word	0x42470000
 8003138:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ea      	bne.n	800311e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8097 	beq.w	8003284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b81      	ldr	r3, [pc, #516]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	4b7d      	ldr	r3, [pc, #500]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a7c      	ldr	r2, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b7a      	ldr	r3, [pc, #488]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b77      	ldr	r3, [pc, #476]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d118      	bne.n	80031c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003192:	4b74      	ldr	r3, [pc, #464]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a73      	ldr	r2, [pc, #460]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7ff f841 	bl	8002224 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a6:	f7ff f83d 	bl	8002224 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e103      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x474>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x2ea>
 80031cc:	4b64      	ldr	r3, [pc, #400]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a63      	ldr	r2, [pc, #396]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
 80031d8:	e01c      	b.n	8003214 <HAL_RCC_OscConfig+0x324>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x30c>
 80031e2:	4b5f      	ldr	r3, [pc, #380]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a5e      	ldr	r2, [pc, #376]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031e8:	f043 0304 	orr.w	r3, r3, #4
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	4b5c      	ldr	r3, [pc, #368]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4a5b      	ldr	r2, [pc, #364]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0x324>
 80031fc:	4b58      	ldr	r3, [pc, #352]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a57      	ldr	r2, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	4b55      	ldr	r3, [pc, #340]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a54      	ldr	r2, [pc, #336]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 0304 	bic.w	r3, r3, #4
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d015      	beq.n	8003248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7ff f802 	bl	8002224 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	e00a      	b.n	800323a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fe fffe 	bl	8002224 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e0c2      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	4b49      	ldr	r3, [pc, #292]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ee      	beq.n	8003224 <HAL_RCC_OscConfig+0x334>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003248:	f7fe ffec 	bl	8002224 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7fe ffe8 	bl	8002224 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0ac      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003266:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ee      	bne.n	8003250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003282:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8098 	beq.w	80033be <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800328e:	4b34      	ldr	r3, [pc, #208]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b08      	cmp	r3, #8
 8003298:	d05c      	beq.n	8003354 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d141      	bne.n	8003326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe ffbc 	bl	8002224 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe ffb8 	bl	8002224 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e07e      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	491b      	ldr	r1, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe ff91 	bl	8002224 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe ff8d 	bl	8002224 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e053      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x416>
 8003324:	e04b      	b.n	80033be <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe ff7a 	bl	8002224 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe ff76 	bl	8002224 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e03c      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x470>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x444>
 8003352:	e034      	b.n	80033be <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e02f      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
 8003360:	40023800 	.word	0x40023800
 8003364:	40007000 	.word	0x40007000
 8003368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800336c:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	429a      	cmp	r2, r3
 800337e:	d11c      	bne.n	80033ba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d115      	bne.n	80033ba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339a:	4293      	cmp	r3, r2
 800339c:	d10d      	bne.n	80033ba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d001      	beq.n	80033be <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800

080033cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0cc      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b68      	ldr	r3, [pc, #416]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d90c      	bls.n	8003408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b65      	ldr	r3, [pc, #404]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d044      	beq.n	80034ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d119      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003486:	2b03      	cmp	r3, #3
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e067      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4934      	ldr	r1, [pc, #208]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fe feb2 	bl	8002224 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fe feae 	bl	8002224 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e04f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d20c      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe fe12 	bl	800219c <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00
 8003588:	40023800 	.word	0x40023800
 800358c:	08006c98 	.word	0x08006c98
 8003590:	20000078 	.word	0x20000078
 8003594:	2000007c 	.word	0x2000007c

08003598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b094      	sub	sp, #80	; 0x50
 800359e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	647b      	str	r3, [r7, #68]	; 0x44
 80035a4:	2300      	movs	r3, #0
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a8:	2300      	movs	r3, #0
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b0:	4b79      	ldr	r3, [pc, #484]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d00d      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x40>
 80035bc:	2b08      	cmp	r3, #8
 80035be:	f200 80e1 	bhi.w	8003784 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x34>
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ca:	e0db      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b73      	ldr	r3, [pc, #460]	; (800379c <HAL_RCC_GetSysClockFreq+0x204>)
 80035ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035d0:	e0db      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d2:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80035d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d6:	e0d8      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d8:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e2:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ee:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	2200      	movs	r2, #0
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
 8003602:	2300      	movs	r3, #0
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
 8003606:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800360a:	4622      	mov	r2, r4
 800360c:	462b      	mov	r3, r5
 800360e:	f04f 0000 	mov.w	r0, #0
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	0159      	lsls	r1, r3, #5
 8003618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800361c:	0150      	lsls	r0, r2, #5
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4621      	mov	r1, r4
 8003624:	1a51      	subs	r1, r2, r1
 8003626:	6139      	str	r1, [r7, #16]
 8003628:	4629      	mov	r1, r5
 800362a:	eb63 0301 	sbc.w	r3, r3, r1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800363c:	4659      	mov	r1, fp
 800363e:	018b      	lsls	r3, r1, #6
 8003640:	4651      	mov	r1, sl
 8003642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003646:	4651      	mov	r1, sl
 8003648:	018a      	lsls	r2, r1, #6
 800364a:	4651      	mov	r1, sl
 800364c:	ebb2 0801 	subs.w	r8, r2, r1
 8003650:	4659      	mov	r1, fp
 8003652:	eb63 0901 	sbc.w	r9, r3, r1
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800366a:	4690      	mov	r8, r2
 800366c:	4699      	mov	r9, r3
 800366e:	4623      	mov	r3, r4
 8003670:	eb18 0303 	adds.w	r3, r8, r3
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	462b      	mov	r3, r5
 8003678:	eb49 0303 	adc.w	r3, r9, r3
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800368a:	4629      	mov	r1, r5
 800368c:	024b      	lsls	r3, r1, #9
 800368e:	4621      	mov	r1, r4
 8003690:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003694:	4621      	mov	r1, r4
 8003696:	024a      	lsls	r2, r1, #9
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369e:	2200      	movs	r2, #0
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036a8:	f7fc fffe 	bl	80006a8 <__aeabi_uldivmod>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4613      	mov	r3, r2
 80036b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b4:	e058      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b6:	4b38      	ldr	r3, [pc, #224]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	099b      	lsrs	r3, r3, #6
 80036bc:	2200      	movs	r2, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	4611      	mov	r1, r2
 80036c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036c6:	623b      	str	r3, [r7, #32]
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036d0:	4642      	mov	r2, r8
 80036d2:	464b      	mov	r3, r9
 80036d4:	f04f 0000 	mov.w	r0, #0
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	0159      	lsls	r1, r3, #5
 80036de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036e2:	0150      	lsls	r0, r2, #5
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4641      	mov	r1, r8
 80036ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ee:	4649      	mov	r1, r9
 80036f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003700:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003704:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003708:	ebb2 040a 	subs.w	r4, r2, sl
 800370c:	eb63 050b 	sbc.w	r5, r3, fp
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	00eb      	lsls	r3, r5, #3
 800371a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371e:	00e2      	lsls	r2, r4, #3
 8003720:	4614      	mov	r4, r2
 8003722:	461d      	mov	r5, r3
 8003724:	4643      	mov	r3, r8
 8003726:	18e3      	adds	r3, r4, r3
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	464b      	mov	r3, r9
 800372c:	eb45 0303 	adc.w	r3, r5, r3
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800373e:	4629      	mov	r1, r5
 8003740:	028b      	lsls	r3, r1, #10
 8003742:	4621      	mov	r1, r4
 8003744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003748:	4621      	mov	r1, r4
 800374a:	028a      	lsls	r2, r1, #10
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003752:	2200      	movs	r2, #0
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	61fa      	str	r2, [r7, #28]
 8003758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375c:	f7fc ffa4 	bl	80006a8 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4613      	mov	r3, r2
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_GetSysClockFreq+0x200>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	3301      	adds	r3, #1
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800377a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003782:	e002      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetSysClockFreq+0x204>)
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800378c:	4618      	mov	r0, r3
 800378e:	3750      	adds	r7, #80	; 0x50
 8003790:	46bd      	mov	sp, r7
 8003792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	007a1200 	.word	0x007a1200

080037a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000078 	.word	0x20000078

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c0:	f7ff fff0 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0a9b      	lsrs	r3, r3, #10
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	08006ca8 	.word	0x08006ca8

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037e8:	f7ff ffdc 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0b5b      	lsrs	r3, r3, #13
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	08006ca8 	.word	0x08006ca8

0800380c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e01d      	b.n	800385a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fe f94e 	bl	8001ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f000 fbde 	bl	800400c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b06      	cmp	r3, #6
 8003882:	d007      	beq.n	8003894 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e01d      	b.n	80038f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fe f951 	bl	8001b78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f000 fb8f 	bl	800400c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2201      	movs	r2, #1
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fe64 	bl	80045e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a15      	ldr	r2, [pc, #84]	; (8003974 <HAL_TIM_PWM_Start+0x74>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_TIM_PWM_Start+0x2c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a14      	ldr	r2, [pc, #80]	; (8003978 <HAL_TIM_PWM_Start+0x78>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_TIM_PWM_Start+0x30>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_TIM_PWM_Start+0x32>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b06      	cmp	r3, #6
 8003956:	d007      	beq.n	8003968 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40010400 	.word	0x40010400

0800397c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	d841      	bhi.n	8003a10 <HAL_TIM_PWM_Start_IT+0x94>
 800398c:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <HAL_TIM_PWM_Start_IT+0x18>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039c9 	.word	0x080039c9
 8003998:	08003a11 	.word	0x08003a11
 800399c:	08003a11 	.word	0x08003a11
 80039a0:	08003a11 	.word	0x08003a11
 80039a4:	080039db 	.word	0x080039db
 80039a8:	08003a11 	.word	0x08003a11
 80039ac:	08003a11 	.word	0x08003a11
 80039b0:	08003a11 	.word	0x08003a11
 80039b4:	080039ed 	.word	0x080039ed
 80039b8:	08003a11 	.word	0x08003a11
 80039bc:	08003a11 	.word	0x08003a11
 80039c0:	08003a11 	.word	0x08003a11
 80039c4:	080039ff 	.word	0x080039ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0202 	orr.w	r2, r2, #2
 80039d6:	60da      	str	r2, [r3, #12]
      break;
 80039d8:	e01b      	b.n	8003a12 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0204 	orr.w	r2, r2, #4
 80039e8:	60da      	str	r2, [r3, #12]
      break;
 80039ea:	e012      	b.n	8003a12 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0208 	orr.w	r2, r2, #8
 80039fa:	60da      	str	r2, [r3, #12]
      break;
 80039fc:	e009      	b.n	8003a12 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0210 	orr.w	r2, r2, #16
 8003a0c:	60da      	str	r2, [r3, #12]
      break;
 8003a0e:	e000      	b.n	8003a12 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003a10:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2201      	movs	r2, #1
 8003a18:	6839      	ldr	r1, [r7, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fde0 	bl	80045e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <HAL_TIM_PWM_Start_IT+0x100>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_TIM_PWM_Start_IT+0xb8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <HAL_TIM_PWM_Start_IT+0x104>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <HAL_TIM_PWM_Start_IT+0xbc>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_TIM_PWM_Start_IT+0xbe>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b06      	cmp	r3, #6
 8003a5e:	d007      	beq.n	8003a70 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40010400 	.word	0x40010400

08003a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d122      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0202 	mvn.w	r2, #2
 8003ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa82 	bl	8003fd0 <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa74 	bl	8003fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fa85 	bl	8003fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d122      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11b      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0204 	mvn.w	r2, #4
 8003b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa58 	bl	8003fd0 <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa4a 	bl	8003fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fa5b 	bl	8003fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d122      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d11b      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0208 	mvn.w	r2, #8
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa2e 	bl	8003fd0 <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa20 	bl	8003fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fa31 	bl	8003fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d122      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d11b      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0210 	mvn.w	r2, #16
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa04 	bl	8003fd0 <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f9f6 	bl	8003fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fa07 	bl	8003fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0201 	mvn.w	r2, #1
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9d0 	bl	8003fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fd82 	bl	8004738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f9cc 	bl	8003ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fd4c 	bl	8004724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e0b4      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	f200 809f 	bhi.w	8003e04 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003e05 	.word	0x08003e05
 8003cd4:	08003e05 	.word	0x08003e05
 8003cd8:	08003e05 	.word	0x08003e05
 8003cdc:	08003d41 	.word	0x08003d41
 8003ce0:	08003e05 	.word	0x08003e05
 8003ce4:	08003e05 	.word	0x08003e05
 8003ce8:	08003e05 	.word	0x08003e05
 8003cec:	08003d83 	.word	0x08003d83
 8003cf0:	08003e05 	.word	0x08003e05
 8003cf4:	08003e05 	.word	0x08003e05
 8003cf8:	08003e05 	.word	0x08003e05
 8003cfc:	08003dc3 	.word	0x08003dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa20 	bl	800414c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]
      break;
 8003d3e:	e062      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fa70 	bl	800422c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
      break;
 8003d80:	e041      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fac5 	bl	8004318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0208 	orr.w	r2, r2, #8
 8003d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0204 	bic.w	r2, r2, #4
 8003dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
      break;
 8003dc0:	e021      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fb19 	bl	8004400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	61da      	str	r2, [r3, #28]
      break;
 8003e02:	e000      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e04:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_ConfigClockSource+0x18>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e0b3      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x180>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e70:	d03e      	beq.n	8003ef0 <HAL_TIM_ConfigClockSource+0xd0>
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e76:	f200 8087 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x168>
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7e:	f000 8085 	beq.w	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e86:	d87f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x168>
 8003e88:	2b70      	cmp	r3, #112	; 0x70
 8003e8a:	d01a      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0xa2>
 8003e8c:	2b70      	cmp	r3, #112	; 0x70
 8003e8e:	d87b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x168>
 8003e90:	2b60      	cmp	r3, #96	; 0x60
 8003e92:	d050      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x116>
 8003e94:	2b60      	cmp	r3, #96	; 0x60
 8003e96:	d877      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x168>
 8003e98:	2b50      	cmp	r3, #80	; 0x50
 8003e9a:	d03c      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0xf6>
 8003e9c:	2b50      	cmp	r3, #80	; 0x50
 8003e9e:	d873      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x168>
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d058      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x136>
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d86f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x168>
 8003ea8:	2b30      	cmp	r3, #48	; 0x30
 8003eaa:	d064      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x156>
 8003eac:	2b30      	cmp	r3, #48	; 0x30
 8003eae:	d86b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x168>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d060      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x156>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d867      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x168>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05c      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x156>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d05a      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ec0:	e062      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6899      	ldr	r1, [r3, #8]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f000 fb65 	bl	80045a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ee4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	609a      	str	r2, [r3, #8]
      break;
 8003eee:	e04e      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6899      	ldr	r1, [r3, #8]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f000 fb4e 	bl	80045a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f12:	609a      	str	r2, [r3, #8]
      break;
 8003f14:	e03b      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 fac2 	bl	80044ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2150      	movs	r1, #80	; 0x50
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fb1b 	bl	800456a <TIM_ITRx_SetConfig>
      break;
 8003f34:	e02b      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 fae1 	bl	800450a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2160      	movs	r1, #96	; 0x60
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fb0b 	bl	800456a <TIM_ITRx_SetConfig>
      break;
 8003f54:	e01b      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 faa2 	bl	80044ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fafb 	bl	800456a <TIM_ITRx_SetConfig>
      break;
 8003f74:	e00b      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f000 faf2 	bl	800456a <TIM_ITRx_SetConfig>
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a40      	ldr	r2, [pc, #256]	; (8004120 <TIM_Base_SetConfig+0x114>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d013      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402a:	d00f      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3d      	ldr	r2, [pc, #244]	; (8004124 <TIM_Base_SetConfig+0x118>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00b      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <TIM_Base_SetConfig+0x11c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a3b      	ldr	r2, [pc, #236]	; (800412c <TIM_Base_SetConfig+0x120>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_Base_SetConfig+0x40>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a3a      	ldr	r2, [pc, #232]	; (8004130 <TIM_Base_SetConfig+0x124>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d108      	bne.n	800405e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2f      	ldr	r2, [pc, #188]	; (8004120 <TIM_Base_SetConfig+0x114>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d02b      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406c:	d027      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2c      	ldr	r2, [pc, #176]	; (8004124 <TIM_Base_SetConfig+0x118>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d023      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2b      	ldr	r2, [pc, #172]	; (8004128 <TIM_Base_SetConfig+0x11c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01f      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2a      	ldr	r2, [pc, #168]	; (800412c <TIM_Base_SetConfig+0x120>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01b      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a29      	ldr	r2, [pc, #164]	; (8004130 <TIM_Base_SetConfig+0x124>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d017      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a28      	ldr	r2, [pc, #160]	; (8004134 <TIM_Base_SetConfig+0x128>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a27      	ldr	r2, [pc, #156]	; (8004138 <TIM_Base_SetConfig+0x12c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a26      	ldr	r2, [pc, #152]	; (800413c <TIM_Base_SetConfig+0x130>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a25      	ldr	r2, [pc, #148]	; (8004140 <TIM_Base_SetConfig+0x134>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a24      	ldr	r2, [pc, #144]	; (8004144 <TIM_Base_SetConfig+0x138>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a23      	ldr	r2, [pc, #140]	; (8004148 <TIM_Base_SetConfig+0x13c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <TIM_Base_SetConfig+0x114>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0xf8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <TIM_Base_SetConfig+0x124>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d103      	bne.n	800410c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	615a      	str	r2, [r3, #20]
}
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010400 	.word	0x40010400
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400
 800413c:	40014800 	.word	0x40014800
 8004140:	40001800 	.word	0x40001800
 8004144:	40001c00 	.word	0x40001c00
 8004148:	40002000 	.word	0x40002000

0800414c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f023 0201 	bic.w	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0303 	bic.w	r3, r3, #3
 8004182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 0302 	bic.w	r3, r3, #2
 8004194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a20      	ldr	r2, [pc, #128]	; (8004224 <TIM_OC1_SetConfig+0xd8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_OC1_SetConfig+0x64>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <TIM_OC1_SetConfig+0xdc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10c      	bne.n	80041ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0308 	bic.w	r3, r3, #8
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <TIM_OC1_SetConfig+0xd8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_OC1_SetConfig+0x8e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a14      	ldr	r2, [pc, #80]	; (8004228 <TIM_OC1_SetConfig+0xdc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d111      	bne.n	80041fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40010000 	.word	0x40010000
 8004228:	40010400 	.word	0x40010400

0800422c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f023 0210 	bic.w	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f023 0320 	bic.w	r3, r3, #32
 8004276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a22      	ldr	r2, [pc, #136]	; (8004310 <TIM_OC2_SetConfig+0xe4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <TIM_OC2_SetConfig+0x68>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a21      	ldr	r2, [pc, #132]	; (8004314 <TIM_OC2_SetConfig+0xe8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10d      	bne.n	80042b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a17      	ldr	r2, [pc, #92]	; (8004310 <TIM_OC2_SetConfig+0xe4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_OC2_SetConfig+0x94>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a16      	ldr	r2, [pc, #88]	; (8004314 <TIM_OC2_SetConfig+0xe8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d113      	bne.n	80042e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000
 8004314:	40010400 	.word	0x40010400

08004318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <TIM_OC3_SetConfig+0xe0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_OC3_SetConfig+0x66>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a20      	ldr	r2, [pc, #128]	; (80043fc <TIM_OC3_SetConfig+0xe4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d10d      	bne.n	800439a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <TIM_OC3_SetConfig+0xe0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_OC3_SetConfig+0x92>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <TIM_OC3_SetConfig+0xe4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d113      	bne.n	80043d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40010400 	.word	0x40010400

08004400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800444a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	031b      	lsls	r3, r3, #12
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <TIM_OC4_SetConfig+0xa4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC4_SetConfig+0x68>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a11      	ldr	r2, [pc, #68]	; (80044a8 <TIM_OC4_SetConfig+0xa8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d109      	bne.n	800447c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800446e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	019b      	lsls	r3, r3, #6
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40010400 	.word	0x40010400

080044ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f023 030a 	bic.w	r3, r3, #10
 80044e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800450a:	b480      	push	{r7}
 800450c:	b087      	sub	sp, #28
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0210 	bic.w	r2, r3, #16
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	031b      	lsls	r3, r3, #12
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004546:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800456a:	b480      	push	{r7}
 800456c:	b085      	sub	sp, #20
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	f043 0307 	orr.w	r3, r3, #7
 800458c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	021a      	lsls	r2, r3, #8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	609a      	str	r2, [r3, #8]
}
 80045d4:	bf00      	nop
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	2201      	movs	r2, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1a      	ldr	r2, [r3, #32]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	43db      	mvns	r3, r3
 8004602:	401a      	ands	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004640:	2302      	movs	r3, #2
 8004642:	e05a      	b.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a21      	ldr	r2, [pc, #132]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004690:	d01d      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1d      	ldr	r2, [pc, #116]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1b      	ldr	r2, [pc, #108]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1a      	ldr	r2, [pc, #104]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a18      	ldr	r2, [pc, #96]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a17      	ldr	r2, [pc, #92]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a15      	ldr	r2, [pc, #84]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d10c      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40010000 	.word	0x40010000
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	40000c00 	.word	0x40000c00
 8004718:	40010400 	.word	0x40010400
 800471c:	40014000 	.word	0x40014000
 8004720:	40001800 	.word	0x40001800

08004724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e03f      	b.n	80047de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fd fa88 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2224      	movs	r2, #36	; 0x24
 800477c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800478e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fba1 	bl	8004ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b088      	sub	sp, #32
 80047ea:	af02      	add	r7, sp, #8
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4613      	mov	r3, r2
 80047f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b20      	cmp	r3, #32
 8004804:	f040 8083 	bne.w	800490e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_UART_Transmit+0x2e>
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e07b      	b.n	8004910 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_UART_Transmit+0x40>
 8004822:	2302      	movs	r3, #2
 8004824:	e074      	b.n	8004910 <HAL_UART_Transmit+0x12a>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2221      	movs	r2, #33	; 0x21
 8004838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800483c:	f7fd fcf2 	bl	8002224 <HAL_GetTick>
 8004840:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	88fa      	ldrh	r2, [r7, #6]
 8004846:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004856:	e042      	b.n	80048de <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486e:	d122      	bne.n	80048b6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f9c0 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e042      	b.n	8004910 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800489c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	3302      	adds	r3, #2
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	e017      	b.n	80048de <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	e013      	b.n	80048de <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f99d 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e01f      	b.n	8004910 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	60ba      	str	r2, [r7, #8]
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1b7      	bne.n	8004858 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2200      	movs	r2, #0
 80048f0:	2140      	movs	r1, #64	; 0x40
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f984 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e006      	b.n	8004910 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e000      	b.n	8004910 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800490e:	2302      	movs	r3, #2
  }
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	4613      	mov	r3, r2
 8004924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b20      	cmp	r3, #32
 8004930:	d140      	bne.n	80049b4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_UART_Receive_IT+0x26>
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e039      	b.n	80049b6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_UART_Receive_IT+0x38>
 800494c:	2302      	movs	r3, #2
 800494e:	e032      	b.n	80049b6 <HAL_UART_Receive_IT+0x9e>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	88fa      	ldrh	r2, [r7, #6]
 8004962:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2222      	movs	r2, #34	; 0x22
 8004974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0220 	orr.w	r2, r2, #32
 80049ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10d      	bne.n	8004a16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_UART_IRQHandler+0x52>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9e0 	bl	8004dd4 <UART_Receive_IT>
      return;
 8004a14:	e0d0      	b.n	8004bb8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80b0 	beq.w	8004b7e <HAL_UART_IRQHandler+0x1ba>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_UART_IRQHandler+0x70>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80a5 	beq.w	8004b7e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_UART_IRQHandler+0x90>
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_UART_IRQHandler+0xb0>
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	f043 0202 	orr.w	r2, r3, #2
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_UART_IRQHandler+0xd0>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8c:	f043 0204 	orr.w	r2, r3, #4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00f      	beq.n	8004abe <HAL_UART_IRQHandler+0xfa>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_UART_IRQHandler+0xee>
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	f043 0208 	orr.w	r2, r3, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d077      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x11c>
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f97a 	bl	8004dd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <HAL_UART_IRQHandler+0x144>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d031      	beq.n	8004b6c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f8c3 	bl	8004c94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d123      	bne.n	8004b64 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d013      	beq.n	8004b5c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	4a21      	ldr	r2, [pc, #132]	; (8004bc0 <HAL_UART_IRQHandler+0x1fc>)
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd fd93 	bl	800266c <HAL_DMA_Abort_IT>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b56:	4610      	mov	r0, r2
 8004b58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5a:	e00e      	b.n	8004b7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f845 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b62:	e00a      	b.n	8004b7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f841 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6a:	e006      	b.n	8004b7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f83d 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b78:	e01d      	b.n	8004bb6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7a:	bf00      	nop
    return;
 8004b7c:	e01b      	b.n	8004bb6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_UART_IRQHandler+0x1d6>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8b0 	bl	8004cf8 <UART_Transmit_IT>
    return;
 8004b98:	e00e      	b.n	8004bb8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d009      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x1f4>
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8f8 	bl	8004da4 <UART_EndTransmit_IT>
    return;
 8004bb4:	e000      	b.n	8004bb8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004bb6:	bf00      	nop
  }
}
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	08004cd1 	.word	0x08004cd1

08004bc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c10:	e02c      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d028      	beq.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c20:	f7fd fb00 	bl	8002224 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d21d      	bcs.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0201 	bic.w	r2, r2, #1
 8004c4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e00f      	b.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d0c3      	beq.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004caa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695a      	ldr	r2, [r3, #20]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0201 	bic.w	r2, r2, #1
 8004cba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff ff7e 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b21      	cmp	r3, #33	; 0x21
 8004d0a:	d144      	bne.n	8004d96 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d14:	d11a      	bne.n	8004d4c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d2a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	1c9a      	adds	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]
 8004d3e:	e00e      	b.n	8004d5e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	621a      	str	r2, [r3, #32]
 8004d4a:	e008      	b.n	8004d5e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	1c59      	adds	r1, r3, #1
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6211      	str	r1, [r2, #32]
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff fefd 	bl	8004bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b22      	cmp	r3, #34	; 0x22
 8004de6:	d171      	bne.n	8004ecc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df0:	d123      	bne.n	8004e3a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10e      	bne.n	8004e1e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	1c9a      	adds	r2, r3, #2
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e1c:	e029      	b.n	8004e72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28
 8004e38:	e01b      	b.n	8004e72 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6858      	ldr	r0, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	1c59      	adds	r1, r3, #1
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6291      	str	r1, [r2, #40]	; 0x28
 8004e52:	b2c2      	uxtb	r2, r0
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	e00c      	b.n	8004e72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	1c58      	adds	r0, r3, #1
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	6288      	str	r0, [r1, #40]	; 0x28
 8004e6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d120      	bne.n	8004ec8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0220 	bic.w	r2, r2, #32
 8004e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fe8a 	bl	8004bd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e002      	b.n	8004ece <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e000      	b.n	8004ece <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004edc:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ef2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ef6:	68d9      	ldr	r1, [r3, #12]
 8004ef8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	ea40 0301 	orr.w	r3, r0, r1
 8004f02:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004f26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f32:	f021 010c 	bic.w	r1, r1, #12
 8004f36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004f40:	430b      	orrs	r3, r1
 8004f42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f54:	6999      	ldr	r1, [r3, #24]
 8004f56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	ea40 0301 	orr.w	r3, r0, r1
 8004f60:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6c:	f040 824a 	bne.w	8005404 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4b96      	ldr	r3, [pc, #600]	; (80051d0 <UART_SetConfig+0x2f8>)
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d006      	beq.n	8004f8a <UART_SetConfig+0xb2>
 8004f7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b94      	ldr	r3, [pc, #592]	; (80051d4 <UART_SetConfig+0x2fc>)
 8004f84:	429a      	cmp	r2, r3
 8004f86:	f040 8129 	bne.w	80051dc <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f8a:	f7fe fc2b 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 8004f8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004f9c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004fa0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	1891      	adds	r1, r2, r2
 8004faa:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004fae:	415b      	adcs	r3, r3
 8004fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fb4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004fb8:	4621      	mov	r1, r4
 8004fba:	1851      	adds	r1, r2, r1
 8004fbc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	414b      	adcs	r3, r1
 8004fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	00cb      	lsls	r3, r1, #3
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fde:	4641      	mov	r1, r8
 8004fe0:	00ca      	lsls	r2, r1, #3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4622      	mov	r2, r4
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004ffc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005008:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800500c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8005010:	460b      	mov	r3, r1
 8005012:	18db      	adds	r3, r3, r3
 8005014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005018:	4613      	mov	r3, r2
 800501a:	eb42 0303 	adc.w	r3, r2, r3
 800501e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005022:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8005026:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800502a:	f7fb fb3d 	bl	80006a8 <__aeabi_uldivmod>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4b69      	ldr	r3, [pc, #420]	; (80051d8 <UART_SetConfig+0x300>)
 8005034:	fba3 2302 	umull	r2, r3, r3, r2
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	011c      	lsls	r4, r3, #4
 800503c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005040:	2200      	movs	r2, #0
 8005042:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005046:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800504a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800504e:	4642      	mov	r2, r8
 8005050:	464b      	mov	r3, r9
 8005052:	1891      	adds	r1, r2, r2
 8005054:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005058:	415b      	adcs	r3, r3
 800505a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800505e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8005062:	4641      	mov	r1, r8
 8005064:	1851      	adds	r1, r2, r1
 8005066:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800506a:	4649      	mov	r1, r9
 800506c:	414b      	adcs	r3, r1
 800506e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800507e:	4659      	mov	r1, fp
 8005080:	00cb      	lsls	r3, r1, #3
 8005082:	4651      	mov	r1, sl
 8005084:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005088:	4651      	mov	r1, sl
 800508a:	00ca      	lsls	r2, r1, #3
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	4603      	mov	r3, r0
 8005092:	4642      	mov	r2, r8
 8005094:	189b      	adds	r3, r3, r2
 8005096:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800509a:	464b      	mov	r3, r9
 800509c:	460a      	mov	r2, r1
 800509e:	eb42 0303 	adc.w	r3, r2, r3
 80050a2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80050a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80050b2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80050b6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80050ba:	460b      	mov	r3, r1
 80050bc:	18db      	adds	r3, r3, r3
 80050be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050c2:	4613      	mov	r3, r2
 80050c4:	eb42 0303 	adc.w	r3, r2, r3
 80050c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050cc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80050d0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80050d4:	f7fb fae8 	bl	80006a8 <__aeabi_uldivmod>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4611      	mov	r1, r2
 80050de:	4b3e      	ldr	r3, [pc, #248]	; (80051d8 <UART_SetConfig+0x300>)
 80050e0:	fba3 2301 	umull	r2, r3, r3, r1
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	2264      	movs	r2, #100	; 0x64
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	1acb      	subs	r3, r1, r3
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050f4:	4b38      	ldr	r3, [pc, #224]	; (80051d8 <UART_SetConfig+0x300>)
 80050f6:	fba3 2302 	umull	r2, r3, r3, r2
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005102:	441c      	add	r4, r3
 8005104:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005108:	2200      	movs	r2, #0
 800510a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800510e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8005112:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8005116:	4642      	mov	r2, r8
 8005118:	464b      	mov	r3, r9
 800511a:	1891      	adds	r1, r2, r2
 800511c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8005120:	415b      	adcs	r3, r3
 8005122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005126:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800512a:	4641      	mov	r1, r8
 800512c:	1851      	adds	r1, r2, r1
 800512e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8005132:	4649      	mov	r1, r9
 8005134:	414b      	adcs	r3, r1
 8005136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8005146:	4659      	mov	r1, fp
 8005148:	00cb      	lsls	r3, r1, #3
 800514a:	4651      	mov	r1, sl
 800514c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005150:	4651      	mov	r1, sl
 8005152:	00ca      	lsls	r2, r1, #3
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	4603      	mov	r3, r0
 800515a:	4642      	mov	r2, r8
 800515c:	189b      	adds	r3, r3, r2
 800515e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8005162:	464b      	mov	r3, r9
 8005164:	460a      	mov	r2, r1
 8005166:	eb42 0303 	adc.w	r3, r2, r3
 800516a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800516e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800517a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800517e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8005182:	460b      	mov	r3, r1
 8005184:	18db      	adds	r3, r3, r3
 8005186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800518a:	4613      	mov	r3, r2
 800518c:	eb42 0303 	adc.w	r3, r2, r3
 8005190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005194:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005198:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800519c:	f7fb fa84 	bl	80006a8 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <UART_SetConfig+0x300>)
 80051a6:	fba3 1302 	umull	r1, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2164      	movs	r1, #100	; 0x64
 80051ae:	fb01 f303 	mul.w	r3, r1, r3
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	3332      	adds	r3, #50	; 0x32
 80051b8:	4a07      	ldr	r2, [pc, #28]	; (80051d8 <UART_SetConfig+0x300>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	f003 0207 	and.w	r2, r3, #7
 80051c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4422      	add	r2, r4
 80051cc:	609a      	str	r2, [r3, #8]
 80051ce:	e349      	b.n	8005864 <UART_SetConfig+0x98c>
 80051d0:	40011000 	.word	0x40011000
 80051d4:	40011400 	.word	0x40011400
 80051d8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051dc:	f7fe faee 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 80051e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80051ee:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80051f2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80051f6:	4622      	mov	r2, r4
 80051f8:	462b      	mov	r3, r5
 80051fa:	1891      	adds	r1, r2, r2
 80051fc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005200:	415b      	adcs	r3, r3
 8005202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005206:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800520a:	4621      	mov	r1, r4
 800520c:	eb12 0a01 	adds.w	sl, r2, r1
 8005210:	4629      	mov	r1, r5
 8005212:	eb43 0b01 	adc.w	fp, r3, r1
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005222:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005226:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800522a:	4692      	mov	sl, r2
 800522c:	469b      	mov	fp, r3
 800522e:	4623      	mov	r3, r4
 8005230:	eb1a 0303 	adds.w	r3, sl, r3
 8005234:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005238:	462b      	mov	r3, r5
 800523a:	eb4b 0303 	adc.w	r3, fp, r3
 800523e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005242:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800524e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005252:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8005256:	460b      	mov	r3, r1
 8005258:	18db      	adds	r3, r3, r3
 800525a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800525e:	4613      	mov	r3, r2
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005268:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800526c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8005270:	f7fb fa1a 	bl	80006a8 <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4b61      	ldr	r3, [pc, #388]	; (8005400 <UART_SetConfig+0x528>)
 800527a:	fba3 2302 	umull	r2, r3, r3, r2
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	011c      	lsls	r4, r3, #4
 8005282:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800528c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8005290:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8005294:	4642      	mov	r2, r8
 8005296:	464b      	mov	r3, r9
 8005298:	1891      	adds	r1, r2, r2
 800529a:	67b9      	str	r1, [r7, #120]	; 0x78
 800529c:	415b      	adcs	r3, r3
 800529e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80052a4:	4641      	mov	r1, r8
 80052a6:	1851      	adds	r1, r2, r1
 80052a8:	6739      	str	r1, [r7, #112]	; 0x70
 80052aa:	4649      	mov	r1, r9
 80052ac:	414b      	adcs	r3, r1
 80052ae:	677b      	str	r3, [r7, #116]	; 0x74
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80052bc:	4659      	mov	r1, fp
 80052be:	00cb      	lsls	r3, r1, #3
 80052c0:	4651      	mov	r1, sl
 80052c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052c6:	4651      	mov	r1, sl
 80052c8:	00ca      	lsls	r2, r1, #3
 80052ca:	4610      	mov	r0, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	4642      	mov	r2, r8
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80052d8:	464b      	mov	r3, r9
 80052da:	460a      	mov	r2, r1
 80052dc:	eb42 0303 	adc.w	r3, r2, r3
 80052e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80052e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80052f0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80052f4:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80052f8:	460b      	mov	r3, r1
 80052fa:	18db      	adds	r3, r3, r3
 80052fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80052fe:	4613      	mov	r3, r2
 8005300:	eb42 0303 	adc.w	r3, r2, r3
 8005304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005306:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800530a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800530e:	f7fb f9cb 	bl	80006a8 <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4611      	mov	r1, r2
 8005318:	4b39      	ldr	r3, [pc, #228]	; (8005400 <UART_SetConfig+0x528>)
 800531a:	fba3 2301 	umull	r2, r3, r3, r1
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	2264      	movs	r2, #100	; 0x64
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	1acb      	subs	r3, r1, r3
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800532e:	4b34      	ldr	r3, [pc, #208]	; (8005400 <UART_SetConfig+0x528>)
 8005330:	fba3 2302 	umull	r2, r3, r3, r2
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800533c:	441c      	add	r4, r3
 800533e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005342:	2200      	movs	r2, #0
 8005344:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005348:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800534c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8005350:	4642      	mov	r2, r8
 8005352:	464b      	mov	r3, r9
 8005354:	1891      	adds	r1, r2, r2
 8005356:	6639      	str	r1, [r7, #96]	; 0x60
 8005358:	415b      	adcs	r3, r3
 800535a:	667b      	str	r3, [r7, #100]	; 0x64
 800535c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005360:	4641      	mov	r1, r8
 8005362:	1851      	adds	r1, r2, r1
 8005364:	65b9      	str	r1, [r7, #88]	; 0x58
 8005366:	4649      	mov	r1, r9
 8005368:	414b      	adcs	r3, r1
 800536a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005378:	4659      	mov	r1, fp
 800537a:	00cb      	lsls	r3, r1, #3
 800537c:	4651      	mov	r1, sl
 800537e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005382:	4651      	mov	r1, sl
 8005384:	00ca      	lsls	r2, r1, #3
 8005386:	4610      	mov	r0, r2
 8005388:	4619      	mov	r1, r3
 800538a:	4603      	mov	r3, r0
 800538c:	4642      	mov	r2, r8
 800538e:	189b      	adds	r3, r3, r2
 8005390:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005394:	464b      	mov	r3, r9
 8005396:	460a      	mov	r2, r1
 8005398:	eb42 0303 	adc.w	r3, r2, r3
 800539c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80053a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80053ac:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80053b0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80053b4:	460b      	mov	r3, r1
 80053b6:	18db      	adds	r3, r3, r3
 80053b8:	653b      	str	r3, [r7, #80]	; 0x50
 80053ba:	4613      	mov	r3, r2
 80053bc:	eb42 0303 	adc.w	r3, r2, r3
 80053c0:	657b      	str	r3, [r7, #84]	; 0x54
 80053c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053c6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80053ca:	f7fb f96d 	bl	80006a8 <__aeabi_uldivmod>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <UART_SetConfig+0x528>)
 80053d4:	fba3 1302 	umull	r1, r3, r3, r2
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	2164      	movs	r1, #100	; 0x64
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	3332      	adds	r3, #50	; 0x32
 80053e6:	4a06      	ldr	r2, [pc, #24]	; (8005400 <UART_SetConfig+0x528>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	f003 0207 	and.w	r2, r3, #7
 80053f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4422      	add	r2, r4
 80053fa:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80053fc:	e232      	b.n	8005864 <UART_SetConfig+0x98c>
 80053fe:	bf00      	nop
 8005400:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005404:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b8d      	ldr	r3, [pc, #564]	; (8005640 <UART_SetConfig+0x768>)
 800540c:	429a      	cmp	r2, r3
 800540e:	d006      	beq.n	800541e <UART_SetConfig+0x546>
 8005410:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b8b      	ldr	r3, [pc, #556]	; (8005644 <UART_SetConfig+0x76c>)
 8005418:	429a      	cmp	r2, r3
 800541a:	f040 8117 	bne.w	800564c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800541e:	f7fe f9e1 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 8005422:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005426:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800542a:	2200      	movs	r2, #0
 800542c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005430:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005434:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005438:	4622      	mov	r2, r4
 800543a:	462b      	mov	r3, r5
 800543c:	1891      	adds	r1, r2, r2
 800543e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005440:	415b      	adcs	r3, r3
 8005442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005448:	4621      	mov	r1, r4
 800544a:	eb12 0801 	adds.w	r8, r2, r1
 800544e:	4629      	mov	r1, r5
 8005450:	eb43 0901 	adc.w	r9, r3, r1
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005460:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005464:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005468:	4690      	mov	r8, r2
 800546a:	4699      	mov	r9, r3
 800546c:	4623      	mov	r3, r4
 800546e:	eb18 0303 	adds.w	r3, r8, r3
 8005472:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005476:	462b      	mov	r3, r5
 8005478:	eb49 0303 	adc.w	r3, r9, r3
 800547c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005480:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800548c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800549c:	4629      	mov	r1, r5
 800549e:	008b      	lsls	r3, r1, #2
 80054a0:	4621      	mov	r1, r4
 80054a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a6:	4621      	mov	r1, r4
 80054a8:	008a      	lsls	r2, r1, #2
 80054aa:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80054ae:	f7fb f8fb 	bl	80006a8 <__aeabi_uldivmod>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4b64      	ldr	r3, [pc, #400]	; (8005648 <UART_SetConfig+0x770>)
 80054b8:	fba3 2302 	umull	r2, r3, r3, r2
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	011c      	lsls	r4, r3, #4
 80054c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054c4:	2200      	movs	r2, #0
 80054c6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80054ca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80054ce:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80054d2:	4642      	mov	r2, r8
 80054d4:	464b      	mov	r3, r9
 80054d6:	1891      	adds	r1, r2, r2
 80054d8:	6439      	str	r1, [r7, #64]	; 0x40
 80054da:	415b      	adcs	r3, r3
 80054dc:	647b      	str	r3, [r7, #68]	; 0x44
 80054de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054e2:	4641      	mov	r1, r8
 80054e4:	1851      	adds	r1, r2, r1
 80054e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054e8:	4649      	mov	r1, r9
 80054ea:	414b      	adcs	r3, r1
 80054ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80054fa:	4659      	mov	r1, fp
 80054fc:	00cb      	lsls	r3, r1, #3
 80054fe:	4651      	mov	r1, sl
 8005500:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005504:	4651      	mov	r1, sl
 8005506:	00ca      	lsls	r2, r1, #3
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	4603      	mov	r3, r0
 800550e:	4642      	mov	r2, r8
 8005510:	189b      	adds	r3, r3, r2
 8005512:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005516:	464b      	mov	r3, r9
 8005518:	460a      	mov	r2, r1
 800551a:	eb42 0303 	adc.w	r3, r2, r3
 800551e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005522:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800552e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800553e:	4649      	mov	r1, r9
 8005540:	008b      	lsls	r3, r1, #2
 8005542:	4641      	mov	r1, r8
 8005544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005548:	4641      	mov	r1, r8
 800554a:	008a      	lsls	r2, r1, #2
 800554c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005550:	f7fb f8aa 	bl	80006a8 <__aeabi_uldivmod>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <UART_SetConfig+0x770>)
 800555a:	fba3 1302 	umull	r1, r3, r3, r2
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	2164      	movs	r1, #100	; 0x64
 8005562:	fb01 f303 	mul.w	r3, r1, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	3332      	adds	r3, #50	; 0x32
 800556c:	4a36      	ldr	r2, [pc, #216]	; (8005648 <UART_SetConfig+0x770>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005578:	441c      	add	r4, r3
 800557a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800557e:	2200      	movs	r2, #0
 8005580:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005584:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005588:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	1891      	adds	r1, r2, r2
 8005592:	6339      	str	r1, [r7, #48]	; 0x30
 8005594:	415b      	adcs	r3, r3
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
 8005598:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800559c:	4641      	mov	r1, r8
 800559e:	1851      	adds	r1, r2, r1
 80055a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80055a2:	4649      	mov	r1, r9
 80055a4:	414b      	adcs	r3, r1
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80055b4:	4659      	mov	r1, fp
 80055b6:	00cb      	lsls	r3, r1, #3
 80055b8:	4651      	mov	r1, sl
 80055ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055be:	4651      	mov	r1, sl
 80055c0:	00ca      	lsls	r2, r1, #3
 80055c2:	4610      	mov	r0, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	4642      	mov	r2, r8
 80055ca:	189b      	adds	r3, r3, r2
 80055cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80055d0:	464b      	mov	r3, r9
 80055d2:	460a      	mov	r2, r1
 80055d4:	eb42 0303 	adc.w	r3, r2, r3
 80055d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055e8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80055f8:	4649      	mov	r1, r9
 80055fa:	008b      	lsls	r3, r1, #2
 80055fc:	4641      	mov	r1, r8
 80055fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005602:	4641      	mov	r1, r8
 8005604:	008a      	lsls	r2, r1, #2
 8005606:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800560a:	f7fb f84d 	bl	80006a8 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <UART_SetConfig+0x770>)
 8005614:	fba3 1302 	umull	r1, r3, r3, r2
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	2164      	movs	r1, #100	; 0x64
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	3332      	adds	r3, #50	; 0x32
 8005626:	4a08      	ldr	r2, [pc, #32]	; (8005648 <UART_SetConfig+0x770>)
 8005628:	fba2 2303 	umull	r2, r3, r2, r3
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	f003 020f 	and.w	r2, r3, #15
 8005632:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4422      	add	r2, r4
 800563a:	609a      	str	r2, [r3, #8]
 800563c:	e112      	b.n	8005864 <UART_SetConfig+0x98c>
 800563e:	bf00      	nop
 8005640:	40011000 	.word	0x40011000
 8005644:	40011400 	.word	0x40011400
 8005648:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800564c:	f7fe f8b6 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8005650:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005654:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800565e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005662:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8005666:	4642      	mov	r2, r8
 8005668:	464b      	mov	r3, r9
 800566a:	1891      	adds	r1, r2, r2
 800566c:	6239      	str	r1, [r7, #32]
 800566e:	415b      	adcs	r3, r3
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005676:	4641      	mov	r1, r8
 8005678:	1854      	adds	r4, r2, r1
 800567a:	4649      	mov	r1, r9
 800567c:	eb43 0501 	adc.w	r5, r3, r1
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	00eb      	lsls	r3, r5, #3
 800568a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568e:	00e2      	lsls	r2, r4, #3
 8005690:	4614      	mov	r4, r2
 8005692:	461d      	mov	r5, r3
 8005694:	4643      	mov	r3, r8
 8005696:	18e3      	adds	r3, r4, r3
 8005698:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800569c:	464b      	mov	r3, r9
 800569e:	eb45 0303 	adc.w	r3, r5, r3
 80056a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80056a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80056b2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80056c2:	4629      	mov	r1, r5
 80056c4:	008b      	lsls	r3, r1, #2
 80056c6:	4621      	mov	r1, r4
 80056c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056cc:	4621      	mov	r1, r4
 80056ce:	008a      	lsls	r2, r1, #2
 80056d0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80056d4:	f7fa ffe8 	bl	80006a8 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4b64      	ldr	r3, [pc, #400]	; (8005870 <UART_SetConfig+0x998>)
 80056de:	fba3 2302 	umull	r2, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	011c      	lsls	r4, r3, #4
 80056e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056f0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80056f4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	61b9      	str	r1, [r7, #24]
 8005700:	415b      	adcs	r3, r3
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005708:	4641      	mov	r1, r8
 800570a:	1851      	adds	r1, r2, r1
 800570c:	6139      	str	r1, [r7, #16]
 800570e:	4649      	mov	r1, r9
 8005710:	414b      	adcs	r3, r1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005720:	4659      	mov	r1, fp
 8005722:	00cb      	lsls	r3, r1, #3
 8005724:	4651      	mov	r1, sl
 8005726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800572a:	4651      	mov	r1, sl
 800572c:	00ca      	lsls	r2, r1, #3
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	4603      	mov	r3, r0
 8005734:	4642      	mov	r2, r8
 8005736:	189b      	adds	r3, r3, r2
 8005738:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800573c:	464b      	mov	r3, r9
 800573e:	460a      	mov	r2, r1
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005748:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005754:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8005764:	4649      	mov	r1, r9
 8005766:	008b      	lsls	r3, r1, #2
 8005768:	4641      	mov	r1, r8
 800576a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800576e:	4641      	mov	r1, r8
 8005770:	008a      	lsls	r2, r1, #2
 8005772:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005776:	f7fa ff97 	bl	80006a8 <__aeabi_uldivmod>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4b3c      	ldr	r3, [pc, #240]	; (8005870 <UART_SetConfig+0x998>)
 8005780:	fba3 1302 	umull	r1, r3, r3, r2
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	2164      	movs	r1, #100	; 0x64
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	3332      	adds	r3, #50	; 0x32
 8005792:	4a37      	ldr	r2, [pc, #220]	; (8005870 <UART_SetConfig+0x998>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800579e:	441c      	add	r4, r3
 80057a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057ae:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80057b2:	4642      	mov	r2, r8
 80057b4:	464b      	mov	r3, r9
 80057b6:	1891      	adds	r1, r2, r2
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	415b      	adcs	r3, r3
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c2:	4641      	mov	r1, r8
 80057c4:	1851      	adds	r1, r2, r1
 80057c6:	6039      	str	r1, [r7, #0]
 80057c8:	4649      	mov	r1, r9
 80057ca:	414b      	adcs	r3, r1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057da:	4659      	mov	r1, fp
 80057dc:	00cb      	lsls	r3, r1, #3
 80057de:	4651      	mov	r1, sl
 80057e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e4:	4651      	mov	r1, sl
 80057e6:	00ca      	lsls	r2, r1, #3
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	4603      	mov	r3, r0
 80057ee:	4642      	mov	r2, r8
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057f6:	464b      	mov	r3, r9
 80057f8:	460a      	mov	r2, r1
 80057fa:	eb42 0303 	adc.w	r3, r2, r3
 80057fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005802:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800580e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800581e:	4649      	mov	r1, r9
 8005820:	008b      	lsls	r3, r1, #2
 8005822:	4641      	mov	r1, r8
 8005824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005828:	4641      	mov	r1, r8
 800582a:	008a      	lsls	r2, r1, #2
 800582c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005830:	f7fa ff3a 	bl	80006a8 <__aeabi_uldivmod>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <UART_SetConfig+0x998>)
 800583a:	fba3 1302 	umull	r1, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	2164      	movs	r1, #100	; 0x64
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	3332      	adds	r3, #50	; 0x32
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <UART_SetConfig+0x998>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f003 020f 	and.w	r2, r3, #15
 8005858:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4422      	add	r2, r4
 8005860:	609a      	str	r2, [r3, #8]
}
 8005862:	e7ff      	b.n	8005864 <UART_SetConfig+0x98c>
 8005864:	bf00      	nop
 8005866:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800586a:	46bd      	mov	sp, r7
 800586c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005870:	51eb851f 	.word	0x51eb851f

08005874 <atoi>:
 8005874:	220a      	movs	r2, #10
 8005876:	2100      	movs	r1, #0
 8005878:	f000 b950 	b.w	8005b1c <strtol>

0800587c <__errno>:
 800587c:	4b01      	ldr	r3, [pc, #4]	; (8005884 <__errno+0x8>)
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000084 	.word	0x20000084

08005888 <__libc_init_array>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4d0d      	ldr	r5, [pc, #52]	; (80058c0 <__libc_init_array+0x38>)
 800588c:	4c0d      	ldr	r4, [pc, #52]	; (80058c4 <__libc_init_array+0x3c>)
 800588e:	1b64      	subs	r4, r4, r5
 8005890:	10a4      	asrs	r4, r4, #2
 8005892:	2600      	movs	r6, #0
 8005894:	42a6      	cmp	r6, r4
 8005896:	d109      	bne.n	80058ac <__libc_init_array+0x24>
 8005898:	4d0b      	ldr	r5, [pc, #44]	; (80058c8 <__libc_init_array+0x40>)
 800589a:	4c0c      	ldr	r4, [pc, #48]	; (80058cc <__libc_init_array+0x44>)
 800589c:	f001 f8be 	bl	8006a1c <_init>
 80058a0:	1b64      	subs	r4, r4, r5
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	2600      	movs	r6, #0
 80058a6:	42a6      	cmp	r6, r4
 80058a8:	d105      	bne.n	80058b6 <__libc_init_array+0x2e>
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b0:	4798      	blx	r3
 80058b2:	3601      	adds	r6, #1
 80058b4:	e7ee      	b.n	8005894 <__libc_init_array+0xc>
 80058b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ba:	4798      	blx	r3
 80058bc:	3601      	adds	r6, #1
 80058be:	e7f2      	b.n	80058a6 <__libc_init_array+0x1e>
 80058c0:	08006e5c 	.word	0x08006e5c
 80058c4:	08006e5c 	.word	0x08006e5c
 80058c8:	08006e5c 	.word	0x08006e5c
 80058cc:	08006e60 	.word	0x08006e60

080058d0 <memcpy>:
 80058d0:	440a      	add	r2, r1
 80058d2:	4291      	cmp	r1, r2
 80058d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058d8:	d100      	bne.n	80058dc <memcpy+0xc>
 80058da:	4770      	bx	lr
 80058dc:	b510      	push	{r4, lr}
 80058de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058e6:	4291      	cmp	r1, r2
 80058e8:	d1f9      	bne.n	80058de <memcpy+0xe>
 80058ea:	bd10      	pop	{r4, pc}

080058ec <memset>:
 80058ec:	4402      	add	r2, r0
 80058ee:	4603      	mov	r3, r0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d100      	bne.n	80058f6 <memset+0xa>
 80058f4:	4770      	bx	lr
 80058f6:	f803 1b01 	strb.w	r1, [r3], #1
 80058fa:	e7f9      	b.n	80058f0 <memset+0x4>

080058fc <iprintf>:
 80058fc:	b40f      	push	{r0, r1, r2, r3}
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <iprintf+0x2c>)
 8005900:	b513      	push	{r0, r1, r4, lr}
 8005902:	681c      	ldr	r4, [r3, #0]
 8005904:	b124      	cbz	r4, 8005910 <iprintf+0x14>
 8005906:	69a3      	ldr	r3, [r4, #24]
 8005908:	b913      	cbnz	r3, 8005910 <iprintf+0x14>
 800590a:	4620      	mov	r0, r4
 800590c:	f000 faea 	bl	8005ee4 <__sinit>
 8005910:	ab05      	add	r3, sp, #20
 8005912:	9a04      	ldr	r2, [sp, #16]
 8005914:	68a1      	ldr	r1, [r4, #8]
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	4620      	mov	r0, r4
 800591a:	f000 fcf3 	bl	8006304 <_vfiprintf_r>
 800591e:	b002      	add	sp, #8
 8005920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005924:	b004      	add	sp, #16
 8005926:	4770      	bx	lr
 8005928:	20000084 	.word	0x20000084

0800592c <_puts_r>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	460e      	mov	r6, r1
 8005930:	4605      	mov	r5, r0
 8005932:	b118      	cbz	r0, 800593c <_puts_r+0x10>
 8005934:	6983      	ldr	r3, [r0, #24]
 8005936:	b90b      	cbnz	r3, 800593c <_puts_r+0x10>
 8005938:	f000 fad4 	bl	8005ee4 <__sinit>
 800593c:	69ab      	ldr	r3, [r5, #24]
 800593e:	68ac      	ldr	r4, [r5, #8]
 8005940:	b913      	cbnz	r3, 8005948 <_puts_r+0x1c>
 8005942:	4628      	mov	r0, r5
 8005944:	f000 face 	bl	8005ee4 <__sinit>
 8005948:	4b2c      	ldr	r3, [pc, #176]	; (80059fc <_puts_r+0xd0>)
 800594a:	429c      	cmp	r4, r3
 800594c:	d120      	bne.n	8005990 <_puts_r+0x64>
 800594e:	686c      	ldr	r4, [r5, #4]
 8005950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005952:	07db      	lsls	r3, r3, #31
 8005954:	d405      	bmi.n	8005962 <_puts_r+0x36>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	0598      	lsls	r0, r3, #22
 800595a:	d402      	bmi.n	8005962 <_puts_r+0x36>
 800595c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595e:	f000 fb5f 	bl	8006020 <__retarget_lock_acquire_recursive>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	0719      	lsls	r1, r3, #28
 8005966:	d51d      	bpl.n	80059a4 <_puts_r+0x78>
 8005968:	6923      	ldr	r3, [r4, #16]
 800596a:	b1db      	cbz	r3, 80059a4 <_puts_r+0x78>
 800596c:	3e01      	subs	r6, #1
 800596e:	68a3      	ldr	r3, [r4, #8]
 8005970:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005974:	3b01      	subs	r3, #1
 8005976:	60a3      	str	r3, [r4, #8]
 8005978:	bb39      	cbnz	r1, 80059ca <_puts_r+0x9e>
 800597a:	2b00      	cmp	r3, #0
 800597c:	da38      	bge.n	80059f0 <_puts_r+0xc4>
 800597e:	4622      	mov	r2, r4
 8005980:	210a      	movs	r1, #10
 8005982:	4628      	mov	r0, r5
 8005984:	f000 f8d4 	bl	8005b30 <__swbuf_r>
 8005988:	3001      	adds	r0, #1
 800598a:	d011      	beq.n	80059b0 <_puts_r+0x84>
 800598c:	250a      	movs	r5, #10
 800598e:	e011      	b.n	80059b4 <_puts_r+0x88>
 8005990:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <_puts_r+0xd4>)
 8005992:	429c      	cmp	r4, r3
 8005994:	d101      	bne.n	800599a <_puts_r+0x6e>
 8005996:	68ac      	ldr	r4, [r5, #8]
 8005998:	e7da      	b.n	8005950 <_puts_r+0x24>
 800599a:	4b1a      	ldr	r3, [pc, #104]	; (8005a04 <_puts_r+0xd8>)
 800599c:	429c      	cmp	r4, r3
 800599e:	bf08      	it	eq
 80059a0:	68ec      	ldreq	r4, [r5, #12]
 80059a2:	e7d5      	b.n	8005950 <_puts_r+0x24>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f914 	bl	8005bd4 <__swsetup_r>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d0dd      	beq.n	800596c <_puts_r+0x40>
 80059b0:	f04f 35ff 	mov.w	r5, #4294967295
 80059b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b6:	07da      	lsls	r2, r3, #31
 80059b8:	d405      	bmi.n	80059c6 <_puts_r+0x9a>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	059b      	lsls	r3, r3, #22
 80059be:	d402      	bmi.n	80059c6 <_puts_r+0x9a>
 80059c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059c2:	f000 fb2e 	bl	8006022 <__retarget_lock_release_recursive>
 80059c6:	4628      	mov	r0, r5
 80059c8:	bd70      	pop	{r4, r5, r6, pc}
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da04      	bge.n	80059d8 <_puts_r+0xac>
 80059ce:	69a2      	ldr	r2, [r4, #24]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	dc06      	bgt.n	80059e2 <_puts_r+0xb6>
 80059d4:	290a      	cmp	r1, #10
 80059d6:	d004      	beq.n	80059e2 <_puts_r+0xb6>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	6022      	str	r2, [r4, #0]
 80059de:	7019      	strb	r1, [r3, #0]
 80059e0:	e7c5      	b.n	800596e <_puts_r+0x42>
 80059e2:	4622      	mov	r2, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 f8a3 	bl	8005b30 <__swbuf_r>
 80059ea:	3001      	adds	r0, #1
 80059ec:	d1bf      	bne.n	800596e <_puts_r+0x42>
 80059ee:	e7df      	b.n	80059b0 <_puts_r+0x84>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	250a      	movs	r5, #10
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	6022      	str	r2, [r4, #0]
 80059f8:	701d      	strb	r5, [r3, #0]
 80059fa:	e7db      	b.n	80059b4 <_puts_r+0x88>
 80059fc:	08006de0 	.word	0x08006de0
 8005a00:	08006e00 	.word	0x08006e00
 8005a04:	08006dc0 	.word	0x08006dc0

08005a08 <puts>:
 8005a08:	4b02      	ldr	r3, [pc, #8]	; (8005a14 <puts+0xc>)
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f7ff bf8d 	b.w	800592c <_puts_r>
 8005a12:	bf00      	nop
 8005a14:	20000084 	.word	0x20000084

08005a18 <_strtol_l.constprop.0>:
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1e:	d001      	beq.n	8005a24 <_strtol_l.constprop.0+0xc>
 8005a20:	2b24      	cmp	r3, #36	; 0x24
 8005a22:	d906      	bls.n	8005a32 <_strtol_l.constprop.0+0x1a>
 8005a24:	f7ff ff2a 	bl	800587c <__errno>
 8005a28:	2316      	movs	r3, #22
 8005a2a:	6003      	str	r3, [r0, #0]
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005b18 <_strtol_l.constprop.0+0x100>
 8005a36:	460d      	mov	r5, r1
 8005a38:	462e      	mov	r6, r5
 8005a3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005a42:	f017 0708 	ands.w	r7, r7, #8
 8005a46:	d1f7      	bne.n	8005a38 <_strtol_l.constprop.0+0x20>
 8005a48:	2c2d      	cmp	r4, #45	; 0x2d
 8005a4a:	d132      	bne.n	8005ab2 <_strtol_l.constprop.0+0x9a>
 8005a4c:	782c      	ldrb	r4, [r5, #0]
 8005a4e:	2701      	movs	r7, #1
 8005a50:	1cb5      	adds	r5, r6, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d05b      	beq.n	8005b0e <_strtol_l.constprop.0+0xf6>
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d109      	bne.n	8005a6e <_strtol_l.constprop.0+0x56>
 8005a5a:	2c30      	cmp	r4, #48	; 0x30
 8005a5c:	d107      	bne.n	8005a6e <_strtol_l.constprop.0+0x56>
 8005a5e:	782c      	ldrb	r4, [r5, #0]
 8005a60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005a64:	2c58      	cmp	r4, #88	; 0x58
 8005a66:	d14d      	bne.n	8005b04 <_strtol_l.constprop.0+0xec>
 8005a68:	786c      	ldrb	r4, [r5, #1]
 8005a6a:	2310      	movs	r3, #16
 8005a6c:	3502      	adds	r5, #2
 8005a6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005a72:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a76:	f04f 0c00 	mov.w	ip, #0
 8005a7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005a7e:	4666      	mov	r6, ip
 8005a80:	fb03 8a19 	mls	sl, r3, r9, r8
 8005a84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005a88:	f1be 0f09 	cmp.w	lr, #9
 8005a8c:	d816      	bhi.n	8005abc <_strtol_l.constprop.0+0xa4>
 8005a8e:	4674      	mov	r4, lr
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	dd24      	ble.n	8005ade <_strtol_l.constprop.0+0xc6>
 8005a94:	f1bc 0f00 	cmp.w	ip, #0
 8005a98:	db1e      	blt.n	8005ad8 <_strtol_l.constprop.0+0xc0>
 8005a9a:	45b1      	cmp	r9, r6
 8005a9c:	d31c      	bcc.n	8005ad8 <_strtol_l.constprop.0+0xc0>
 8005a9e:	d101      	bne.n	8005aa4 <_strtol_l.constprop.0+0x8c>
 8005aa0:	45a2      	cmp	sl, r4
 8005aa2:	db19      	blt.n	8005ad8 <_strtol_l.constprop.0+0xc0>
 8005aa4:	fb06 4603 	mla	r6, r6, r3, r4
 8005aa8:	f04f 0c01 	mov.w	ip, #1
 8005aac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ab0:	e7e8      	b.n	8005a84 <_strtol_l.constprop.0+0x6c>
 8005ab2:	2c2b      	cmp	r4, #43	; 0x2b
 8005ab4:	bf04      	itt	eq
 8005ab6:	782c      	ldrbeq	r4, [r5, #0]
 8005ab8:	1cb5      	addeq	r5, r6, #2
 8005aba:	e7ca      	b.n	8005a52 <_strtol_l.constprop.0+0x3a>
 8005abc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005ac0:	f1be 0f19 	cmp.w	lr, #25
 8005ac4:	d801      	bhi.n	8005aca <_strtol_l.constprop.0+0xb2>
 8005ac6:	3c37      	subs	r4, #55	; 0x37
 8005ac8:	e7e2      	b.n	8005a90 <_strtol_l.constprop.0+0x78>
 8005aca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005ace:	f1be 0f19 	cmp.w	lr, #25
 8005ad2:	d804      	bhi.n	8005ade <_strtol_l.constprop.0+0xc6>
 8005ad4:	3c57      	subs	r4, #87	; 0x57
 8005ad6:	e7db      	b.n	8005a90 <_strtol_l.constprop.0+0x78>
 8005ad8:	f04f 3cff 	mov.w	ip, #4294967295
 8005adc:	e7e6      	b.n	8005aac <_strtol_l.constprop.0+0x94>
 8005ade:	f1bc 0f00 	cmp.w	ip, #0
 8005ae2:	da05      	bge.n	8005af0 <_strtol_l.constprop.0+0xd8>
 8005ae4:	2322      	movs	r3, #34	; 0x22
 8005ae6:	6003      	str	r3, [r0, #0]
 8005ae8:	4646      	mov	r6, r8
 8005aea:	b942      	cbnz	r2, 8005afe <_strtol_l.constprop.0+0xe6>
 8005aec:	4630      	mov	r0, r6
 8005aee:	e79e      	b.n	8005a2e <_strtol_l.constprop.0+0x16>
 8005af0:	b107      	cbz	r7, 8005af4 <_strtol_l.constprop.0+0xdc>
 8005af2:	4276      	negs	r6, r6
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	d0f9      	beq.n	8005aec <_strtol_l.constprop.0+0xd4>
 8005af8:	f1bc 0f00 	cmp.w	ip, #0
 8005afc:	d000      	beq.n	8005b00 <_strtol_l.constprop.0+0xe8>
 8005afe:	1e69      	subs	r1, r5, #1
 8005b00:	6011      	str	r1, [r2, #0]
 8005b02:	e7f3      	b.n	8005aec <_strtol_l.constprop.0+0xd4>
 8005b04:	2430      	movs	r4, #48	; 0x30
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1b1      	bne.n	8005a6e <_strtol_l.constprop.0+0x56>
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	e7af      	b.n	8005a6e <_strtol_l.constprop.0+0x56>
 8005b0e:	2c30      	cmp	r4, #48	; 0x30
 8005b10:	d0a5      	beq.n	8005a5e <_strtol_l.constprop.0+0x46>
 8005b12:	230a      	movs	r3, #10
 8005b14:	e7ab      	b.n	8005a6e <_strtol_l.constprop.0+0x56>
 8005b16:	bf00      	nop
 8005b18:	08006cbd 	.word	0x08006cbd

08005b1c <strtol>:
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	460a      	mov	r2, r1
 8005b20:	4601      	mov	r1, r0
 8005b22:	4802      	ldr	r0, [pc, #8]	; (8005b2c <strtol+0x10>)
 8005b24:	6800      	ldr	r0, [r0, #0]
 8005b26:	f7ff bf77 	b.w	8005a18 <_strtol_l.constprop.0>
 8005b2a:	bf00      	nop
 8005b2c:	20000084 	.word	0x20000084

08005b30 <__swbuf_r>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	460e      	mov	r6, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	4605      	mov	r5, r0
 8005b38:	b118      	cbz	r0, 8005b42 <__swbuf_r+0x12>
 8005b3a:	6983      	ldr	r3, [r0, #24]
 8005b3c:	b90b      	cbnz	r3, 8005b42 <__swbuf_r+0x12>
 8005b3e:	f000 f9d1 	bl	8005ee4 <__sinit>
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <__swbuf_r+0x98>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	d12b      	bne.n	8005ba0 <__swbuf_r+0x70>
 8005b48:	686c      	ldr	r4, [r5, #4]
 8005b4a:	69a3      	ldr	r3, [r4, #24]
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	071a      	lsls	r2, r3, #28
 8005b52:	d52f      	bpl.n	8005bb4 <__swbuf_r+0x84>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	b36b      	cbz	r3, 8005bb4 <__swbuf_r+0x84>
 8005b58:	6923      	ldr	r3, [r4, #16]
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	1ac0      	subs	r0, r0, r3
 8005b5e:	6963      	ldr	r3, [r4, #20]
 8005b60:	b2f6      	uxtb	r6, r6
 8005b62:	4283      	cmp	r3, r0
 8005b64:	4637      	mov	r7, r6
 8005b66:	dc04      	bgt.n	8005b72 <__swbuf_r+0x42>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 f926 	bl	8005dbc <_fflush_r>
 8005b70:	bb30      	cbnz	r0, 8005bc0 <__swbuf_r+0x90>
 8005b72:	68a3      	ldr	r3, [r4, #8]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	60a3      	str	r3, [r4, #8]
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	701e      	strb	r6, [r3, #0]
 8005b80:	6963      	ldr	r3, [r4, #20]
 8005b82:	3001      	adds	r0, #1
 8005b84:	4283      	cmp	r3, r0
 8005b86:	d004      	beq.n	8005b92 <__swbuf_r+0x62>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	07db      	lsls	r3, r3, #31
 8005b8c:	d506      	bpl.n	8005b9c <__swbuf_r+0x6c>
 8005b8e:	2e0a      	cmp	r6, #10
 8005b90:	d104      	bne.n	8005b9c <__swbuf_r+0x6c>
 8005b92:	4621      	mov	r1, r4
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 f911 	bl	8005dbc <_fflush_r>
 8005b9a:	b988      	cbnz	r0, 8005bc0 <__swbuf_r+0x90>
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <__swbuf_r+0x9c>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	d101      	bne.n	8005baa <__swbuf_r+0x7a>
 8005ba6:	68ac      	ldr	r4, [r5, #8]
 8005ba8:	e7cf      	b.n	8005b4a <__swbuf_r+0x1a>
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <__swbuf_r+0xa0>)
 8005bac:	429c      	cmp	r4, r3
 8005bae:	bf08      	it	eq
 8005bb0:	68ec      	ldreq	r4, [r5, #12]
 8005bb2:	e7ca      	b.n	8005b4a <__swbuf_r+0x1a>
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 f80c 	bl	8005bd4 <__swsetup_r>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d0cb      	beq.n	8005b58 <__swbuf_r+0x28>
 8005bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8005bc4:	e7ea      	b.n	8005b9c <__swbuf_r+0x6c>
 8005bc6:	bf00      	nop
 8005bc8:	08006de0 	.word	0x08006de0
 8005bcc:	08006e00 	.word	0x08006e00
 8005bd0:	08006dc0 	.word	0x08006dc0

08005bd4 <__swsetup_r>:
 8005bd4:	4b32      	ldr	r3, [pc, #200]	; (8005ca0 <__swsetup_r+0xcc>)
 8005bd6:	b570      	push	{r4, r5, r6, lr}
 8005bd8:	681d      	ldr	r5, [r3, #0]
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460c      	mov	r4, r1
 8005bde:	b125      	cbz	r5, 8005bea <__swsetup_r+0x16>
 8005be0:	69ab      	ldr	r3, [r5, #24]
 8005be2:	b913      	cbnz	r3, 8005bea <__swsetup_r+0x16>
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 f97d 	bl	8005ee4 <__sinit>
 8005bea:	4b2e      	ldr	r3, [pc, #184]	; (8005ca4 <__swsetup_r+0xd0>)
 8005bec:	429c      	cmp	r4, r3
 8005bee:	d10f      	bne.n	8005c10 <__swsetup_r+0x3c>
 8005bf0:	686c      	ldr	r4, [r5, #4]
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bf8:	0719      	lsls	r1, r3, #28
 8005bfa:	d42c      	bmi.n	8005c56 <__swsetup_r+0x82>
 8005bfc:	06dd      	lsls	r5, r3, #27
 8005bfe:	d411      	bmi.n	8005c24 <__swsetup_r+0x50>
 8005c00:	2309      	movs	r3, #9
 8005c02:	6033      	str	r3, [r6, #0]
 8005c04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0e:	e03e      	b.n	8005c8e <__swsetup_r+0xba>
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <__swsetup_r+0xd4>)
 8005c12:	429c      	cmp	r4, r3
 8005c14:	d101      	bne.n	8005c1a <__swsetup_r+0x46>
 8005c16:	68ac      	ldr	r4, [r5, #8]
 8005c18:	e7eb      	b.n	8005bf2 <__swsetup_r+0x1e>
 8005c1a:	4b24      	ldr	r3, [pc, #144]	; (8005cac <__swsetup_r+0xd8>)
 8005c1c:	429c      	cmp	r4, r3
 8005c1e:	bf08      	it	eq
 8005c20:	68ec      	ldreq	r4, [r5, #12]
 8005c22:	e7e6      	b.n	8005bf2 <__swsetup_r+0x1e>
 8005c24:	0758      	lsls	r0, r3, #29
 8005c26:	d512      	bpl.n	8005c4e <__swsetup_r+0x7a>
 8005c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c2a:	b141      	cbz	r1, 8005c3e <__swsetup_r+0x6a>
 8005c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c30:	4299      	cmp	r1, r3
 8005c32:	d002      	beq.n	8005c3a <__swsetup_r+0x66>
 8005c34:	4630      	mov	r0, r6
 8005c36:	f000 fa5b 	bl	80060f0 <_free_r>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c3e:	89a3      	ldrh	r3, [r4, #12]
 8005c40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c44:	81a3      	strh	r3, [r4, #12]
 8005c46:	2300      	movs	r3, #0
 8005c48:	6063      	str	r3, [r4, #4]
 8005c4a:	6923      	ldr	r3, [r4, #16]
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	f043 0308 	orr.w	r3, r3, #8
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	6923      	ldr	r3, [r4, #16]
 8005c58:	b94b      	cbnz	r3, 8005c6e <__swsetup_r+0x9a>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c64:	d003      	beq.n	8005c6e <__swsetup_r+0x9a>
 8005c66:	4621      	mov	r1, r4
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 fa01 	bl	8006070 <__smakebuf_r>
 8005c6e:	89a0      	ldrh	r0, [r4, #12]
 8005c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c74:	f010 0301 	ands.w	r3, r0, #1
 8005c78:	d00a      	beq.n	8005c90 <__swsetup_r+0xbc>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60a3      	str	r3, [r4, #8]
 8005c7e:	6963      	ldr	r3, [r4, #20]
 8005c80:	425b      	negs	r3, r3
 8005c82:	61a3      	str	r3, [r4, #24]
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	b943      	cbnz	r3, 8005c9a <__swsetup_r+0xc6>
 8005c88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c8c:	d1ba      	bne.n	8005c04 <__swsetup_r+0x30>
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	0781      	lsls	r1, r0, #30
 8005c92:	bf58      	it	pl
 8005c94:	6963      	ldrpl	r3, [r4, #20]
 8005c96:	60a3      	str	r3, [r4, #8]
 8005c98:	e7f4      	b.n	8005c84 <__swsetup_r+0xb0>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e7f7      	b.n	8005c8e <__swsetup_r+0xba>
 8005c9e:	bf00      	nop
 8005ca0:	20000084 	.word	0x20000084
 8005ca4:	08006de0 	.word	0x08006de0
 8005ca8:	08006e00 	.word	0x08006e00
 8005cac:	08006dc0 	.word	0x08006dc0

08005cb0 <__sflush_r>:
 8005cb0:	898a      	ldrh	r2, [r1, #12]
 8005cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	0710      	lsls	r0, r2, #28
 8005cba:	460c      	mov	r4, r1
 8005cbc:	d458      	bmi.n	8005d70 <__sflush_r+0xc0>
 8005cbe:	684b      	ldr	r3, [r1, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dc05      	bgt.n	8005cd0 <__sflush_r+0x20>
 8005cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	dc02      	bgt.n	8005cd0 <__sflush_r+0x20>
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cd2:	2e00      	cmp	r6, #0
 8005cd4:	d0f9      	beq.n	8005cca <__sflush_r+0x1a>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cdc:	682f      	ldr	r7, [r5, #0]
 8005cde:	602b      	str	r3, [r5, #0]
 8005ce0:	d032      	beq.n	8005d48 <__sflush_r+0x98>
 8005ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	075a      	lsls	r2, r3, #29
 8005ce8:	d505      	bpl.n	8005cf6 <__sflush_r+0x46>
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	1ac0      	subs	r0, r0, r3
 8005cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cf0:	b10b      	cbz	r3, 8005cf6 <__sflush_r+0x46>
 8005cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cf4:	1ac0      	subs	r0, r0, r3
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cfc:	6a21      	ldr	r1, [r4, #32]
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b0      	blx	r6
 8005d02:	1c43      	adds	r3, r0, #1
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	d106      	bne.n	8005d16 <__sflush_r+0x66>
 8005d08:	6829      	ldr	r1, [r5, #0]
 8005d0a:	291d      	cmp	r1, #29
 8005d0c:	d82c      	bhi.n	8005d68 <__sflush_r+0xb8>
 8005d0e:	4a2a      	ldr	r2, [pc, #168]	; (8005db8 <__sflush_r+0x108>)
 8005d10:	40ca      	lsrs	r2, r1
 8005d12:	07d6      	lsls	r6, r2, #31
 8005d14:	d528      	bpl.n	8005d68 <__sflush_r+0xb8>
 8005d16:	2200      	movs	r2, #0
 8005d18:	6062      	str	r2, [r4, #4]
 8005d1a:	04d9      	lsls	r1, r3, #19
 8005d1c:	6922      	ldr	r2, [r4, #16]
 8005d1e:	6022      	str	r2, [r4, #0]
 8005d20:	d504      	bpl.n	8005d2c <__sflush_r+0x7c>
 8005d22:	1c42      	adds	r2, r0, #1
 8005d24:	d101      	bne.n	8005d2a <__sflush_r+0x7a>
 8005d26:	682b      	ldr	r3, [r5, #0]
 8005d28:	b903      	cbnz	r3, 8005d2c <__sflush_r+0x7c>
 8005d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8005d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d2e:	602f      	str	r7, [r5, #0]
 8005d30:	2900      	cmp	r1, #0
 8005d32:	d0ca      	beq.n	8005cca <__sflush_r+0x1a>
 8005d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	d002      	beq.n	8005d42 <__sflush_r+0x92>
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 f9d7 	bl	80060f0 <_free_r>
 8005d42:	2000      	movs	r0, #0
 8005d44:	6360      	str	r0, [r4, #52]	; 0x34
 8005d46:	e7c1      	b.n	8005ccc <__sflush_r+0x1c>
 8005d48:	6a21      	ldr	r1, [r4, #32]
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b0      	blx	r6
 8005d50:	1c41      	adds	r1, r0, #1
 8005d52:	d1c7      	bne.n	8005ce4 <__sflush_r+0x34>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0c4      	beq.n	8005ce4 <__sflush_r+0x34>
 8005d5a:	2b1d      	cmp	r3, #29
 8005d5c:	d001      	beq.n	8005d62 <__sflush_r+0xb2>
 8005d5e:	2b16      	cmp	r3, #22
 8005d60:	d101      	bne.n	8005d66 <__sflush_r+0xb6>
 8005d62:	602f      	str	r7, [r5, #0]
 8005d64:	e7b1      	b.n	8005cca <__sflush_r+0x1a>
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	e7ad      	b.n	8005ccc <__sflush_r+0x1c>
 8005d70:	690f      	ldr	r7, [r1, #16]
 8005d72:	2f00      	cmp	r7, #0
 8005d74:	d0a9      	beq.n	8005cca <__sflush_r+0x1a>
 8005d76:	0793      	lsls	r3, r2, #30
 8005d78:	680e      	ldr	r6, [r1, #0]
 8005d7a:	bf08      	it	eq
 8005d7c:	694b      	ldreq	r3, [r1, #20]
 8005d7e:	600f      	str	r7, [r1, #0]
 8005d80:	bf18      	it	ne
 8005d82:	2300      	movne	r3, #0
 8005d84:	eba6 0807 	sub.w	r8, r6, r7
 8005d88:	608b      	str	r3, [r1, #8]
 8005d8a:	f1b8 0f00 	cmp.w	r8, #0
 8005d8e:	dd9c      	ble.n	8005cca <__sflush_r+0x1a>
 8005d90:	6a21      	ldr	r1, [r4, #32]
 8005d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d94:	4643      	mov	r3, r8
 8005d96:	463a      	mov	r2, r7
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b0      	blx	r6
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	dc06      	bgt.n	8005dae <__sflush_r+0xfe>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	e78e      	b.n	8005ccc <__sflush_r+0x1c>
 8005dae:	4407      	add	r7, r0
 8005db0:	eba8 0800 	sub.w	r8, r8, r0
 8005db4:	e7e9      	b.n	8005d8a <__sflush_r+0xda>
 8005db6:	bf00      	nop
 8005db8:	20400001 	.word	0x20400001

08005dbc <_fflush_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	690b      	ldr	r3, [r1, #16]
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	b913      	cbnz	r3, 8005dcc <_fflush_r+0x10>
 8005dc6:	2500      	movs	r5, #0
 8005dc8:	4628      	mov	r0, r5
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	b118      	cbz	r0, 8005dd6 <_fflush_r+0x1a>
 8005dce:	6983      	ldr	r3, [r0, #24]
 8005dd0:	b90b      	cbnz	r3, 8005dd6 <_fflush_r+0x1a>
 8005dd2:	f000 f887 	bl	8005ee4 <__sinit>
 8005dd6:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <_fflush_r+0x6c>)
 8005dd8:	429c      	cmp	r4, r3
 8005dda:	d11b      	bne.n	8005e14 <_fflush_r+0x58>
 8005ddc:	686c      	ldr	r4, [r5, #4]
 8005dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0ef      	beq.n	8005dc6 <_fflush_r+0xa>
 8005de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005de8:	07d0      	lsls	r0, r2, #31
 8005dea:	d404      	bmi.n	8005df6 <_fflush_r+0x3a>
 8005dec:	0599      	lsls	r1, r3, #22
 8005dee:	d402      	bmi.n	8005df6 <_fflush_r+0x3a>
 8005df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005df2:	f000 f915 	bl	8006020 <__retarget_lock_acquire_recursive>
 8005df6:	4628      	mov	r0, r5
 8005df8:	4621      	mov	r1, r4
 8005dfa:	f7ff ff59 	bl	8005cb0 <__sflush_r>
 8005dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e00:	07da      	lsls	r2, r3, #31
 8005e02:	4605      	mov	r5, r0
 8005e04:	d4e0      	bmi.n	8005dc8 <_fflush_r+0xc>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	059b      	lsls	r3, r3, #22
 8005e0a:	d4dd      	bmi.n	8005dc8 <_fflush_r+0xc>
 8005e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0e:	f000 f908 	bl	8006022 <__retarget_lock_release_recursive>
 8005e12:	e7d9      	b.n	8005dc8 <_fflush_r+0xc>
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <_fflush_r+0x70>)
 8005e16:	429c      	cmp	r4, r3
 8005e18:	d101      	bne.n	8005e1e <_fflush_r+0x62>
 8005e1a:	68ac      	ldr	r4, [r5, #8]
 8005e1c:	e7df      	b.n	8005dde <_fflush_r+0x22>
 8005e1e:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <_fflush_r+0x74>)
 8005e20:	429c      	cmp	r4, r3
 8005e22:	bf08      	it	eq
 8005e24:	68ec      	ldreq	r4, [r5, #12]
 8005e26:	e7da      	b.n	8005dde <_fflush_r+0x22>
 8005e28:	08006de0 	.word	0x08006de0
 8005e2c:	08006e00 	.word	0x08006e00
 8005e30:	08006dc0 	.word	0x08006dc0

08005e34 <std>:
 8005e34:	2300      	movs	r3, #0
 8005e36:	b510      	push	{r4, lr}
 8005e38:	4604      	mov	r4, r0
 8005e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e42:	6083      	str	r3, [r0, #8]
 8005e44:	8181      	strh	r1, [r0, #12]
 8005e46:	6643      	str	r3, [r0, #100]	; 0x64
 8005e48:	81c2      	strh	r2, [r0, #14]
 8005e4a:	6183      	str	r3, [r0, #24]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	2208      	movs	r2, #8
 8005e50:	305c      	adds	r0, #92	; 0x5c
 8005e52:	f7ff fd4b 	bl	80058ec <memset>
 8005e56:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <std+0x38>)
 8005e58:	6263      	str	r3, [r4, #36]	; 0x24
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <std+0x3c>)
 8005e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <std+0x40>)
 8005e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <std+0x44>)
 8005e64:	6224      	str	r4, [r4, #32]
 8005e66:	6323      	str	r3, [r4, #48]	; 0x30
 8005e68:	bd10      	pop	{r4, pc}
 8005e6a:	bf00      	nop
 8005e6c:	080068ad 	.word	0x080068ad
 8005e70:	080068cf 	.word	0x080068cf
 8005e74:	08006907 	.word	0x08006907
 8005e78:	0800692b 	.word	0x0800692b

08005e7c <_cleanup_r>:
 8005e7c:	4901      	ldr	r1, [pc, #4]	; (8005e84 <_cleanup_r+0x8>)
 8005e7e:	f000 b8af 	b.w	8005fe0 <_fwalk_reent>
 8005e82:	bf00      	nop
 8005e84:	08005dbd 	.word	0x08005dbd

08005e88 <__sfmoreglue>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	2268      	movs	r2, #104	; 0x68
 8005e8c:	1e4d      	subs	r5, r1, #1
 8005e8e:	4355      	muls	r5, r2
 8005e90:	460e      	mov	r6, r1
 8005e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e96:	f000 f997 	bl	80061c8 <_malloc_r>
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	b140      	cbz	r0, 8005eb0 <__sfmoreglue+0x28>
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ea4:	300c      	adds	r0, #12
 8005ea6:	60a0      	str	r0, [r4, #8]
 8005ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005eac:	f7ff fd1e 	bl	80058ec <memset>
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}

08005eb4 <__sfp_lock_acquire>:
 8005eb4:	4801      	ldr	r0, [pc, #4]	; (8005ebc <__sfp_lock_acquire+0x8>)
 8005eb6:	f000 b8b3 	b.w	8006020 <__retarget_lock_acquire_recursive>
 8005eba:	bf00      	nop
 8005ebc:	20015a41 	.word	0x20015a41

08005ec0 <__sfp_lock_release>:
 8005ec0:	4801      	ldr	r0, [pc, #4]	; (8005ec8 <__sfp_lock_release+0x8>)
 8005ec2:	f000 b8ae 	b.w	8006022 <__retarget_lock_release_recursive>
 8005ec6:	bf00      	nop
 8005ec8:	20015a41 	.word	0x20015a41

08005ecc <__sinit_lock_acquire>:
 8005ecc:	4801      	ldr	r0, [pc, #4]	; (8005ed4 <__sinit_lock_acquire+0x8>)
 8005ece:	f000 b8a7 	b.w	8006020 <__retarget_lock_acquire_recursive>
 8005ed2:	bf00      	nop
 8005ed4:	20015a42 	.word	0x20015a42

08005ed8 <__sinit_lock_release>:
 8005ed8:	4801      	ldr	r0, [pc, #4]	; (8005ee0 <__sinit_lock_release+0x8>)
 8005eda:	f000 b8a2 	b.w	8006022 <__retarget_lock_release_recursive>
 8005ede:	bf00      	nop
 8005ee0:	20015a42 	.word	0x20015a42

08005ee4 <__sinit>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	f7ff fff0 	bl	8005ecc <__sinit_lock_acquire>
 8005eec:	69a3      	ldr	r3, [r4, #24]
 8005eee:	b11b      	cbz	r3, 8005ef8 <__sinit+0x14>
 8005ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ef4:	f7ff bff0 	b.w	8005ed8 <__sinit_lock_release>
 8005ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005efc:	6523      	str	r3, [r4, #80]	; 0x50
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <__sinit+0x68>)
 8005f00:	4a13      	ldr	r2, [pc, #76]	; (8005f50 <__sinit+0x6c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	bf04      	itt	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	61a3      	streq	r3, [r4, #24]
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 f820 	bl	8005f54 <__sfp>
 8005f14:	6060      	str	r0, [r4, #4]
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 f81c 	bl	8005f54 <__sfp>
 8005f1c:	60a0      	str	r0, [r4, #8]
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 f818 	bl	8005f54 <__sfp>
 8005f24:	2200      	movs	r2, #0
 8005f26:	60e0      	str	r0, [r4, #12]
 8005f28:	2104      	movs	r1, #4
 8005f2a:	6860      	ldr	r0, [r4, #4]
 8005f2c:	f7ff ff82 	bl	8005e34 <std>
 8005f30:	68a0      	ldr	r0, [r4, #8]
 8005f32:	2201      	movs	r2, #1
 8005f34:	2109      	movs	r1, #9
 8005f36:	f7ff ff7d 	bl	8005e34 <std>
 8005f3a:	68e0      	ldr	r0, [r4, #12]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	2112      	movs	r1, #18
 8005f40:	f7ff ff78 	bl	8005e34 <std>
 8005f44:	2301      	movs	r3, #1
 8005f46:	61a3      	str	r3, [r4, #24]
 8005f48:	e7d2      	b.n	8005ef0 <__sinit+0xc>
 8005f4a:	bf00      	nop
 8005f4c:	08006cb8 	.word	0x08006cb8
 8005f50:	08005e7d 	.word	0x08005e7d

08005f54 <__sfp>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	4607      	mov	r7, r0
 8005f58:	f7ff ffac 	bl	8005eb4 <__sfp_lock_acquire>
 8005f5c:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <__sfp+0x84>)
 8005f5e:	681e      	ldr	r6, [r3, #0]
 8005f60:	69b3      	ldr	r3, [r6, #24]
 8005f62:	b913      	cbnz	r3, 8005f6a <__sfp+0x16>
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff ffbd 	bl	8005ee4 <__sinit>
 8005f6a:	3648      	adds	r6, #72	; 0x48
 8005f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	d503      	bpl.n	8005f7c <__sfp+0x28>
 8005f74:	6833      	ldr	r3, [r6, #0]
 8005f76:	b30b      	cbz	r3, 8005fbc <__sfp+0x68>
 8005f78:	6836      	ldr	r6, [r6, #0]
 8005f7a:	e7f7      	b.n	8005f6c <__sfp+0x18>
 8005f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f80:	b9d5      	cbnz	r5, 8005fb8 <__sfp+0x64>
 8005f82:	4b16      	ldr	r3, [pc, #88]	; (8005fdc <__sfp+0x88>)
 8005f84:	60e3      	str	r3, [r4, #12]
 8005f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8005f8c:	f000 f847 	bl	800601e <__retarget_lock_init_recursive>
 8005f90:	f7ff ff96 	bl	8005ec0 <__sfp_lock_release>
 8005f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f9c:	6025      	str	r5, [r4, #0]
 8005f9e:	61a5      	str	r5, [r4, #24]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fa8:	f7ff fca0 	bl	80058ec <memset>
 8005fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fb8:	3468      	adds	r4, #104	; 0x68
 8005fba:	e7d9      	b.n	8005f70 <__sfp+0x1c>
 8005fbc:	2104      	movs	r1, #4
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	f7ff ff62 	bl	8005e88 <__sfmoreglue>
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	6030      	str	r0, [r6, #0]
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d1d5      	bne.n	8005f78 <__sfp+0x24>
 8005fcc:	f7ff ff78 	bl	8005ec0 <__sfp_lock_release>
 8005fd0:	230c      	movs	r3, #12
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	e7ee      	b.n	8005fb4 <__sfp+0x60>
 8005fd6:	bf00      	nop
 8005fd8:	08006cb8 	.word	0x08006cb8
 8005fdc:	ffff0001 	.word	0xffff0001

08005fe0 <_fwalk_reent>:
 8005fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	4688      	mov	r8, r1
 8005fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fec:	2700      	movs	r7, #0
 8005fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8005ff6:	d505      	bpl.n	8006004 <_fwalk_reent+0x24>
 8005ff8:	6824      	ldr	r4, [r4, #0]
 8005ffa:	2c00      	cmp	r4, #0
 8005ffc:	d1f7      	bne.n	8005fee <_fwalk_reent+0xe>
 8005ffe:	4638      	mov	r0, r7
 8006000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006004:	89ab      	ldrh	r3, [r5, #12]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d907      	bls.n	800601a <_fwalk_reent+0x3a>
 800600a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800600e:	3301      	adds	r3, #1
 8006010:	d003      	beq.n	800601a <_fwalk_reent+0x3a>
 8006012:	4629      	mov	r1, r5
 8006014:	4630      	mov	r0, r6
 8006016:	47c0      	blx	r8
 8006018:	4307      	orrs	r7, r0
 800601a:	3568      	adds	r5, #104	; 0x68
 800601c:	e7e9      	b.n	8005ff2 <_fwalk_reent+0x12>

0800601e <__retarget_lock_init_recursive>:
 800601e:	4770      	bx	lr

08006020 <__retarget_lock_acquire_recursive>:
 8006020:	4770      	bx	lr

08006022 <__retarget_lock_release_recursive>:
 8006022:	4770      	bx	lr

08006024 <__swhatbuf_r>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	460e      	mov	r6, r1
 8006028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602c:	2900      	cmp	r1, #0
 800602e:	b096      	sub	sp, #88	; 0x58
 8006030:	4614      	mov	r4, r2
 8006032:	461d      	mov	r5, r3
 8006034:	da08      	bge.n	8006048 <__swhatbuf_r+0x24>
 8006036:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	602a      	str	r2, [r5, #0]
 800603e:	061a      	lsls	r2, r3, #24
 8006040:	d410      	bmi.n	8006064 <__swhatbuf_r+0x40>
 8006042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006046:	e00e      	b.n	8006066 <__swhatbuf_r+0x42>
 8006048:	466a      	mov	r2, sp
 800604a:	f000 fc95 	bl	8006978 <_fstat_r>
 800604e:	2800      	cmp	r0, #0
 8006050:	dbf1      	blt.n	8006036 <__swhatbuf_r+0x12>
 8006052:	9a01      	ldr	r2, [sp, #4]
 8006054:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006058:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800605c:	425a      	negs	r2, r3
 800605e:	415a      	adcs	r2, r3
 8006060:	602a      	str	r2, [r5, #0]
 8006062:	e7ee      	b.n	8006042 <__swhatbuf_r+0x1e>
 8006064:	2340      	movs	r3, #64	; 0x40
 8006066:	2000      	movs	r0, #0
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	b016      	add	sp, #88	; 0x58
 800606c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006070 <__smakebuf_r>:
 8006070:	898b      	ldrh	r3, [r1, #12]
 8006072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006074:	079d      	lsls	r5, r3, #30
 8006076:	4606      	mov	r6, r0
 8006078:	460c      	mov	r4, r1
 800607a:	d507      	bpl.n	800608c <__smakebuf_r+0x1c>
 800607c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	6123      	str	r3, [r4, #16]
 8006084:	2301      	movs	r3, #1
 8006086:	6163      	str	r3, [r4, #20]
 8006088:	b002      	add	sp, #8
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	ab01      	add	r3, sp, #4
 800608e:	466a      	mov	r2, sp
 8006090:	f7ff ffc8 	bl	8006024 <__swhatbuf_r>
 8006094:	9900      	ldr	r1, [sp, #0]
 8006096:	4605      	mov	r5, r0
 8006098:	4630      	mov	r0, r6
 800609a:	f000 f895 	bl	80061c8 <_malloc_r>
 800609e:	b948      	cbnz	r0, 80060b4 <__smakebuf_r+0x44>
 80060a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a4:	059a      	lsls	r2, r3, #22
 80060a6:	d4ef      	bmi.n	8006088 <__smakebuf_r+0x18>
 80060a8:	f023 0303 	bic.w	r3, r3, #3
 80060ac:	f043 0302 	orr.w	r3, r3, #2
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	e7e3      	b.n	800607c <__smakebuf_r+0xc>
 80060b4:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <__smakebuf_r+0x7c>)
 80060b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80060b8:	89a3      	ldrh	r3, [r4, #12]
 80060ba:	6020      	str	r0, [r4, #0]
 80060bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c0:	81a3      	strh	r3, [r4, #12]
 80060c2:	9b00      	ldr	r3, [sp, #0]
 80060c4:	6163      	str	r3, [r4, #20]
 80060c6:	9b01      	ldr	r3, [sp, #4]
 80060c8:	6120      	str	r0, [r4, #16]
 80060ca:	b15b      	cbz	r3, 80060e4 <__smakebuf_r+0x74>
 80060cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d0:	4630      	mov	r0, r6
 80060d2:	f000 fc63 	bl	800699c <_isatty_r>
 80060d6:	b128      	cbz	r0, 80060e4 <__smakebuf_r+0x74>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	81a3      	strh	r3, [r4, #12]
 80060e4:	89a0      	ldrh	r0, [r4, #12]
 80060e6:	4305      	orrs	r5, r0
 80060e8:	81a5      	strh	r5, [r4, #12]
 80060ea:	e7cd      	b.n	8006088 <__smakebuf_r+0x18>
 80060ec:	08005e7d 	.word	0x08005e7d

080060f0 <_free_r>:
 80060f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060f2:	2900      	cmp	r1, #0
 80060f4:	d044      	beq.n	8006180 <_free_r+0x90>
 80060f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fa:	9001      	str	r0, [sp, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006102:	bfb8      	it	lt
 8006104:	18e4      	addlt	r4, r4, r3
 8006106:	f000 fc6b 	bl	80069e0 <__malloc_lock>
 800610a:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <_free_r+0x94>)
 800610c:	9801      	ldr	r0, [sp, #4]
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	b933      	cbnz	r3, 8006120 <_free_r+0x30>
 8006112:	6063      	str	r3, [r4, #4]
 8006114:	6014      	str	r4, [r2, #0]
 8006116:	b003      	add	sp, #12
 8006118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800611c:	f000 bc66 	b.w	80069ec <__malloc_unlock>
 8006120:	42a3      	cmp	r3, r4
 8006122:	d908      	bls.n	8006136 <_free_r+0x46>
 8006124:	6825      	ldr	r5, [r4, #0]
 8006126:	1961      	adds	r1, r4, r5
 8006128:	428b      	cmp	r3, r1
 800612a:	bf01      	itttt	eq
 800612c:	6819      	ldreq	r1, [r3, #0]
 800612e:	685b      	ldreq	r3, [r3, #4]
 8006130:	1949      	addeq	r1, r1, r5
 8006132:	6021      	streq	r1, [r4, #0]
 8006134:	e7ed      	b.n	8006112 <_free_r+0x22>
 8006136:	461a      	mov	r2, r3
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	b10b      	cbz	r3, 8006140 <_free_r+0x50>
 800613c:	42a3      	cmp	r3, r4
 800613e:	d9fa      	bls.n	8006136 <_free_r+0x46>
 8006140:	6811      	ldr	r1, [r2, #0]
 8006142:	1855      	adds	r5, r2, r1
 8006144:	42a5      	cmp	r5, r4
 8006146:	d10b      	bne.n	8006160 <_free_r+0x70>
 8006148:	6824      	ldr	r4, [r4, #0]
 800614a:	4421      	add	r1, r4
 800614c:	1854      	adds	r4, r2, r1
 800614e:	42a3      	cmp	r3, r4
 8006150:	6011      	str	r1, [r2, #0]
 8006152:	d1e0      	bne.n	8006116 <_free_r+0x26>
 8006154:	681c      	ldr	r4, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	6053      	str	r3, [r2, #4]
 800615a:	4421      	add	r1, r4
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	e7da      	b.n	8006116 <_free_r+0x26>
 8006160:	d902      	bls.n	8006168 <_free_r+0x78>
 8006162:	230c      	movs	r3, #12
 8006164:	6003      	str	r3, [r0, #0]
 8006166:	e7d6      	b.n	8006116 <_free_r+0x26>
 8006168:	6825      	ldr	r5, [r4, #0]
 800616a:	1961      	adds	r1, r4, r5
 800616c:	428b      	cmp	r3, r1
 800616e:	bf04      	itt	eq
 8006170:	6819      	ldreq	r1, [r3, #0]
 8006172:	685b      	ldreq	r3, [r3, #4]
 8006174:	6063      	str	r3, [r4, #4]
 8006176:	bf04      	itt	eq
 8006178:	1949      	addeq	r1, r1, r5
 800617a:	6021      	streq	r1, [r4, #0]
 800617c:	6054      	str	r4, [r2, #4]
 800617e:	e7ca      	b.n	8006116 <_free_r+0x26>
 8006180:	b003      	add	sp, #12
 8006182:	bd30      	pop	{r4, r5, pc}
 8006184:	20015a44 	.word	0x20015a44

08006188 <sbrk_aligned>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	4e0e      	ldr	r6, [pc, #56]	; (80061c4 <sbrk_aligned+0x3c>)
 800618c:	460c      	mov	r4, r1
 800618e:	6831      	ldr	r1, [r6, #0]
 8006190:	4605      	mov	r5, r0
 8006192:	b911      	cbnz	r1, 800619a <sbrk_aligned+0x12>
 8006194:	f000 fb7a 	bl	800688c <_sbrk_r>
 8006198:	6030      	str	r0, [r6, #0]
 800619a:	4621      	mov	r1, r4
 800619c:	4628      	mov	r0, r5
 800619e:	f000 fb75 	bl	800688c <_sbrk_r>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	d00a      	beq.n	80061bc <sbrk_aligned+0x34>
 80061a6:	1cc4      	adds	r4, r0, #3
 80061a8:	f024 0403 	bic.w	r4, r4, #3
 80061ac:	42a0      	cmp	r0, r4
 80061ae:	d007      	beq.n	80061c0 <sbrk_aligned+0x38>
 80061b0:	1a21      	subs	r1, r4, r0
 80061b2:	4628      	mov	r0, r5
 80061b4:	f000 fb6a 	bl	800688c <_sbrk_r>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d101      	bne.n	80061c0 <sbrk_aligned+0x38>
 80061bc:	f04f 34ff 	mov.w	r4, #4294967295
 80061c0:	4620      	mov	r0, r4
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	20015a48 	.word	0x20015a48

080061c8 <_malloc_r>:
 80061c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061cc:	1ccd      	adds	r5, r1, #3
 80061ce:	f025 0503 	bic.w	r5, r5, #3
 80061d2:	3508      	adds	r5, #8
 80061d4:	2d0c      	cmp	r5, #12
 80061d6:	bf38      	it	cc
 80061d8:	250c      	movcc	r5, #12
 80061da:	2d00      	cmp	r5, #0
 80061dc:	4607      	mov	r7, r0
 80061de:	db01      	blt.n	80061e4 <_malloc_r+0x1c>
 80061e0:	42a9      	cmp	r1, r5
 80061e2:	d905      	bls.n	80061f0 <_malloc_r+0x28>
 80061e4:	230c      	movs	r3, #12
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	2600      	movs	r6, #0
 80061ea:	4630      	mov	r0, r6
 80061ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f0:	4e2e      	ldr	r6, [pc, #184]	; (80062ac <_malloc_r+0xe4>)
 80061f2:	f000 fbf5 	bl	80069e0 <__malloc_lock>
 80061f6:	6833      	ldr	r3, [r6, #0]
 80061f8:	461c      	mov	r4, r3
 80061fa:	bb34      	cbnz	r4, 800624a <_malloc_r+0x82>
 80061fc:	4629      	mov	r1, r5
 80061fe:	4638      	mov	r0, r7
 8006200:	f7ff ffc2 	bl	8006188 <sbrk_aligned>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	4604      	mov	r4, r0
 8006208:	d14d      	bne.n	80062a6 <_malloc_r+0xde>
 800620a:	6834      	ldr	r4, [r6, #0]
 800620c:	4626      	mov	r6, r4
 800620e:	2e00      	cmp	r6, #0
 8006210:	d140      	bne.n	8006294 <_malloc_r+0xcc>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	4631      	mov	r1, r6
 8006216:	4638      	mov	r0, r7
 8006218:	eb04 0803 	add.w	r8, r4, r3
 800621c:	f000 fb36 	bl	800688c <_sbrk_r>
 8006220:	4580      	cmp	r8, r0
 8006222:	d13a      	bne.n	800629a <_malloc_r+0xd2>
 8006224:	6821      	ldr	r1, [r4, #0]
 8006226:	3503      	adds	r5, #3
 8006228:	1a6d      	subs	r5, r5, r1
 800622a:	f025 0503 	bic.w	r5, r5, #3
 800622e:	3508      	adds	r5, #8
 8006230:	2d0c      	cmp	r5, #12
 8006232:	bf38      	it	cc
 8006234:	250c      	movcc	r5, #12
 8006236:	4629      	mov	r1, r5
 8006238:	4638      	mov	r0, r7
 800623a:	f7ff ffa5 	bl	8006188 <sbrk_aligned>
 800623e:	3001      	adds	r0, #1
 8006240:	d02b      	beq.n	800629a <_malloc_r+0xd2>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	442b      	add	r3, r5
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	e00e      	b.n	8006268 <_malloc_r+0xa0>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	1b52      	subs	r2, r2, r5
 800624e:	d41e      	bmi.n	800628e <_malloc_r+0xc6>
 8006250:	2a0b      	cmp	r2, #11
 8006252:	d916      	bls.n	8006282 <_malloc_r+0xba>
 8006254:	1961      	adds	r1, r4, r5
 8006256:	42a3      	cmp	r3, r4
 8006258:	6025      	str	r5, [r4, #0]
 800625a:	bf18      	it	ne
 800625c:	6059      	strne	r1, [r3, #4]
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	bf08      	it	eq
 8006262:	6031      	streq	r1, [r6, #0]
 8006264:	5162      	str	r2, [r4, r5]
 8006266:	604b      	str	r3, [r1, #4]
 8006268:	4638      	mov	r0, r7
 800626a:	f104 060b 	add.w	r6, r4, #11
 800626e:	f000 fbbd 	bl	80069ec <__malloc_unlock>
 8006272:	f026 0607 	bic.w	r6, r6, #7
 8006276:	1d23      	adds	r3, r4, #4
 8006278:	1af2      	subs	r2, r6, r3
 800627a:	d0b6      	beq.n	80061ea <_malloc_r+0x22>
 800627c:	1b9b      	subs	r3, r3, r6
 800627e:	50a3      	str	r3, [r4, r2]
 8006280:	e7b3      	b.n	80061ea <_malloc_r+0x22>
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	42a3      	cmp	r3, r4
 8006286:	bf0c      	ite	eq
 8006288:	6032      	streq	r2, [r6, #0]
 800628a:	605a      	strne	r2, [r3, #4]
 800628c:	e7ec      	b.n	8006268 <_malloc_r+0xa0>
 800628e:	4623      	mov	r3, r4
 8006290:	6864      	ldr	r4, [r4, #4]
 8006292:	e7b2      	b.n	80061fa <_malloc_r+0x32>
 8006294:	4634      	mov	r4, r6
 8006296:	6876      	ldr	r6, [r6, #4]
 8006298:	e7b9      	b.n	800620e <_malloc_r+0x46>
 800629a:	230c      	movs	r3, #12
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4638      	mov	r0, r7
 80062a0:	f000 fba4 	bl	80069ec <__malloc_unlock>
 80062a4:	e7a1      	b.n	80061ea <_malloc_r+0x22>
 80062a6:	6025      	str	r5, [r4, #0]
 80062a8:	e7de      	b.n	8006268 <_malloc_r+0xa0>
 80062aa:	bf00      	nop
 80062ac:	20015a44 	.word	0x20015a44

080062b0 <__sfputc_r>:
 80062b0:	6893      	ldr	r3, [r2, #8]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	b410      	push	{r4}
 80062b8:	6093      	str	r3, [r2, #8]
 80062ba:	da08      	bge.n	80062ce <__sfputc_r+0x1e>
 80062bc:	6994      	ldr	r4, [r2, #24]
 80062be:	42a3      	cmp	r3, r4
 80062c0:	db01      	blt.n	80062c6 <__sfputc_r+0x16>
 80062c2:	290a      	cmp	r1, #10
 80062c4:	d103      	bne.n	80062ce <__sfputc_r+0x1e>
 80062c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ca:	f7ff bc31 	b.w	8005b30 <__swbuf_r>
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	1c58      	adds	r0, r3, #1
 80062d2:	6010      	str	r0, [r2, #0]
 80062d4:	7019      	strb	r1, [r3, #0]
 80062d6:	4608      	mov	r0, r1
 80062d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062dc:	4770      	bx	lr

080062de <__sfputs_r>:
 80062de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e0:	4606      	mov	r6, r0
 80062e2:	460f      	mov	r7, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	18d5      	adds	r5, r2, r3
 80062e8:	42ac      	cmp	r4, r5
 80062ea:	d101      	bne.n	80062f0 <__sfputs_r+0x12>
 80062ec:	2000      	movs	r0, #0
 80062ee:	e007      	b.n	8006300 <__sfputs_r+0x22>
 80062f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f4:	463a      	mov	r2, r7
 80062f6:	4630      	mov	r0, r6
 80062f8:	f7ff ffda 	bl	80062b0 <__sfputc_r>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d1f3      	bne.n	80062e8 <__sfputs_r+0xa>
 8006300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006304 <_vfiprintf_r>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	460d      	mov	r5, r1
 800630a:	b09d      	sub	sp, #116	; 0x74
 800630c:	4614      	mov	r4, r2
 800630e:	4698      	mov	r8, r3
 8006310:	4606      	mov	r6, r0
 8006312:	b118      	cbz	r0, 800631c <_vfiprintf_r+0x18>
 8006314:	6983      	ldr	r3, [r0, #24]
 8006316:	b90b      	cbnz	r3, 800631c <_vfiprintf_r+0x18>
 8006318:	f7ff fde4 	bl	8005ee4 <__sinit>
 800631c:	4b89      	ldr	r3, [pc, #548]	; (8006544 <_vfiprintf_r+0x240>)
 800631e:	429d      	cmp	r5, r3
 8006320:	d11b      	bne.n	800635a <_vfiprintf_r+0x56>
 8006322:	6875      	ldr	r5, [r6, #4]
 8006324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006326:	07d9      	lsls	r1, r3, #31
 8006328:	d405      	bmi.n	8006336 <_vfiprintf_r+0x32>
 800632a:	89ab      	ldrh	r3, [r5, #12]
 800632c:	059a      	lsls	r2, r3, #22
 800632e:	d402      	bmi.n	8006336 <_vfiprintf_r+0x32>
 8006330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006332:	f7ff fe75 	bl	8006020 <__retarget_lock_acquire_recursive>
 8006336:	89ab      	ldrh	r3, [r5, #12]
 8006338:	071b      	lsls	r3, r3, #28
 800633a:	d501      	bpl.n	8006340 <_vfiprintf_r+0x3c>
 800633c:	692b      	ldr	r3, [r5, #16]
 800633e:	b9eb      	cbnz	r3, 800637c <_vfiprintf_r+0x78>
 8006340:	4629      	mov	r1, r5
 8006342:	4630      	mov	r0, r6
 8006344:	f7ff fc46 	bl	8005bd4 <__swsetup_r>
 8006348:	b1c0      	cbz	r0, 800637c <_vfiprintf_r+0x78>
 800634a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800634c:	07dc      	lsls	r4, r3, #31
 800634e:	d50e      	bpl.n	800636e <_vfiprintf_r+0x6a>
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	b01d      	add	sp, #116	; 0x74
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	4b7b      	ldr	r3, [pc, #492]	; (8006548 <_vfiprintf_r+0x244>)
 800635c:	429d      	cmp	r5, r3
 800635e:	d101      	bne.n	8006364 <_vfiprintf_r+0x60>
 8006360:	68b5      	ldr	r5, [r6, #8]
 8006362:	e7df      	b.n	8006324 <_vfiprintf_r+0x20>
 8006364:	4b79      	ldr	r3, [pc, #484]	; (800654c <_vfiprintf_r+0x248>)
 8006366:	429d      	cmp	r5, r3
 8006368:	bf08      	it	eq
 800636a:	68f5      	ldreq	r5, [r6, #12]
 800636c:	e7da      	b.n	8006324 <_vfiprintf_r+0x20>
 800636e:	89ab      	ldrh	r3, [r5, #12]
 8006370:	0598      	lsls	r0, r3, #22
 8006372:	d4ed      	bmi.n	8006350 <_vfiprintf_r+0x4c>
 8006374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006376:	f7ff fe54 	bl	8006022 <__retarget_lock_release_recursive>
 800637a:	e7e9      	b.n	8006350 <_vfiprintf_r+0x4c>
 800637c:	2300      	movs	r3, #0
 800637e:	9309      	str	r3, [sp, #36]	; 0x24
 8006380:	2320      	movs	r3, #32
 8006382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006386:	f8cd 800c 	str.w	r8, [sp, #12]
 800638a:	2330      	movs	r3, #48	; 0x30
 800638c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006550 <_vfiprintf_r+0x24c>
 8006390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006394:	f04f 0901 	mov.w	r9, #1
 8006398:	4623      	mov	r3, r4
 800639a:	469a      	mov	sl, r3
 800639c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063a0:	b10a      	cbz	r2, 80063a6 <_vfiprintf_r+0xa2>
 80063a2:	2a25      	cmp	r2, #37	; 0x25
 80063a4:	d1f9      	bne.n	800639a <_vfiprintf_r+0x96>
 80063a6:	ebba 0b04 	subs.w	fp, sl, r4
 80063aa:	d00b      	beq.n	80063c4 <_vfiprintf_r+0xc0>
 80063ac:	465b      	mov	r3, fp
 80063ae:	4622      	mov	r2, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	4630      	mov	r0, r6
 80063b4:	f7ff ff93 	bl	80062de <__sfputs_r>
 80063b8:	3001      	adds	r0, #1
 80063ba:	f000 80aa 	beq.w	8006512 <_vfiprintf_r+0x20e>
 80063be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c0:	445a      	add	r2, fp
 80063c2:	9209      	str	r2, [sp, #36]	; 0x24
 80063c4:	f89a 3000 	ldrb.w	r3, [sl]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80a2 	beq.w	8006512 <_vfiprintf_r+0x20e>
 80063ce:	2300      	movs	r3, #0
 80063d0:	f04f 32ff 	mov.w	r2, #4294967295
 80063d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d8:	f10a 0a01 	add.w	sl, sl, #1
 80063dc:	9304      	str	r3, [sp, #16]
 80063de:	9307      	str	r3, [sp, #28]
 80063e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063e4:	931a      	str	r3, [sp, #104]	; 0x68
 80063e6:	4654      	mov	r4, sl
 80063e8:	2205      	movs	r2, #5
 80063ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ee:	4858      	ldr	r0, [pc, #352]	; (8006550 <_vfiprintf_r+0x24c>)
 80063f0:	f7f9 fefe 	bl	80001f0 <memchr>
 80063f4:	9a04      	ldr	r2, [sp, #16]
 80063f6:	b9d8      	cbnz	r0, 8006430 <_vfiprintf_r+0x12c>
 80063f8:	06d1      	lsls	r1, r2, #27
 80063fa:	bf44      	itt	mi
 80063fc:	2320      	movmi	r3, #32
 80063fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006402:	0713      	lsls	r3, r2, #28
 8006404:	bf44      	itt	mi
 8006406:	232b      	movmi	r3, #43	; 0x2b
 8006408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800640c:	f89a 3000 	ldrb.w	r3, [sl]
 8006410:	2b2a      	cmp	r3, #42	; 0x2a
 8006412:	d015      	beq.n	8006440 <_vfiprintf_r+0x13c>
 8006414:	9a07      	ldr	r2, [sp, #28]
 8006416:	4654      	mov	r4, sl
 8006418:	2000      	movs	r0, #0
 800641a:	f04f 0c0a 	mov.w	ip, #10
 800641e:	4621      	mov	r1, r4
 8006420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006424:	3b30      	subs	r3, #48	; 0x30
 8006426:	2b09      	cmp	r3, #9
 8006428:	d94e      	bls.n	80064c8 <_vfiprintf_r+0x1c4>
 800642a:	b1b0      	cbz	r0, 800645a <_vfiprintf_r+0x156>
 800642c:	9207      	str	r2, [sp, #28]
 800642e:	e014      	b.n	800645a <_vfiprintf_r+0x156>
 8006430:	eba0 0308 	sub.w	r3, r0, r8
 8006434:	fa09 f303 	lsl.w	r3, r9, r3
 8006438:	4313      	orrs	r3, r2
 800643a:	9304      	str	r3, [sp, #16]
 800643c:	46a2      	mov	sl, r4
 800643e:	e7d2      	b.n	80063e6 <_vfiprintf_r+0xe2>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	1d19      	adds	r1, r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	9103      	str	r1, [sp, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	bfbb      	ittet	lt
 800644c:	425b      	neglt	r3, r3
 800644e:	f042 0202 	orrlt.w	r2, r2, #2
 8006452:	9307      	strge	r3, [sp, #28]
 8006454:	9307      	strlt	r3, [sp, #28]
 8006456:	bfb8      	it	lt
 8006458:	9204      	strlt	r2, [sp, #16]
 800645a:	7823      	ldrb	r3, [r4, #0]
 800645c:	2b2e      	cmp	r3, #46	; 0x2e
 800645e:	d10c      	bne.n	800647a <_vfiprintf_r+0x176>
 8006460:	7863      	ldrb	r3, [r4, #1]
 8006462:	2b2a      	cmp	r3, #42	; 0x2a
 8006464:	d135      	bne.n	80064d2 <_vfiprintf_r+0x1ce>
 8006466:	9b03      	ldr	r3, [sp, #12]
 8006468:	1d1a      	adds	r2, r3, #4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	9203      	str	r2, [sp, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	bfb8      	it	lt
 8006472:	f04f 33ff 	movlt.w	r3, #4294967295
 8006476:	3402      	adds	r4, #2
 8006478:	9305      	str	r3, [sp, #20]
 800647a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006560 <_vfiprintf_r+0x25c>
 800647e:	7821      	ldrb	r1, [r4, #0]
 8006480:	2203      	movs	r2, #3
 8006482:	4650      	mov	r0, sl
 8006484:	f7f9 feb4 	bl	80001f0 <memchr>
 8006488:	b140      	cbz	r0, 800649c <_vfiprintf_r+0x198>
 800648a:	2340      	movs	r3, #64	; 0x40
 800648c:	eba0 000a 	sub.w	r0, r0, sl
 8006490:	fa03 f000 	lsl.w	r0, r3, r0
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	4303      	orrs	r3, r0
 8006498:	3401      	adds	r4, #1
 800649a:	9304      	str	r3, [sp, #16]
 800649c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a0:	482c      	ldr	r0, [pc, #176]	; (8006554 <_vfiprintf_r+0x250>)
 80064a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064a6:	2206      	movs	r2, #6
 80064a8:	f7f9 fea2 	bl	80001f0 <memchr>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d03f      	beq.n	8006530 <_vfiprintf_r+0x22c>
 80064b0:	4b29      	ldr	r3, [pc, #164]	; (8006558 <_vfiprintf_r+0x254>)
 80064b2:	bb1b      	cbnz	r3, 80064fc <_vfiprintf_r+0x1f8>
 80064b4:	9b03      	ldr	r3, [sp, #12]
 80064b6:	3307      	adds	r3, #7
 80064b8:	f023 0307 	bic.w	r3, r3, #7
 80064bc:	3308      	adds	r3, #8
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c2:	443b      	add	r3, r7
 80064c4:	9309      	str	r3, [sp, #36]	; 0x24
 80064c6:	e767      	b.n	8006398 <_vfiprintf_r+0x94>
 80064c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064cc:	460c      	mov	r4, r1
 80064ce:	2001      	movs	r0, #1
 80064d0:	e7a5      	b.n	800641e <_vfiprintf_r+0x11a>
 80064d2:	2300      	movs	r3, #0
 80064d4:	3401      	adds	r4, #1
 80064d6:	9305      	str	r3, [sp, #20]
 80064d8:	4619      	mov	r1, r3
 80064da:	f04f 0c0a 	mov.w	ip, #10
 80064de:	4620      	mov	r0, r4
 80064e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064e4:	3a30      	subs	r2, #48	; 0x30
 80064e6:	2a09      	cmp	r2, #9
 80064e8:	d903      	bls.n	80064f2 <_vfiprintf_r+0x1ee>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0c5      	beq.n	800647a <_vfiprintf_r+0x176>
 80064ee:	9105      	str	r1, [sp, #20]
 80064f0:	e7c3      	b.n	800647a <_vfiprintf_r+0x176>
 80064f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064f6:	4604      	mov	r4, r0
 80064f8:	2301      	movs	r3, #1
 80064fa:	e7f0      	b.n	80064de <_vfiprintf_r+0x1da>
 80064fc:	ab03      	add	r3, sp, #12
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	462a      	mov	r2, r5
 8006502:	4b16      	ldr	r3, [pc, #88]	; (800655c <_vfiprintf_r+0x258>)
 8006504:	a904      	add	r1, sp, #16
 8006506:	4630      	mov	r0, r6
 8006508:	f3af 8000 	nop.w
 800650c:	4607      	mov	r7, r0
 800650e:	1c78      	adds	r0, r7, #1
 8006510:	d1d6      	bne.n	80064c0 <_vfiprintf_r+0x1bc>
 8006512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006514:	07d9      	lsls	r1, r3, #31
 8006516:	d405      	bmi.n	8006524 <_vfiprintf_r+0x220>
 8006518:	89ab      	ldrh	r3, [r5, #12]
 800651a:	059a      	lsls	r2, r3, #22
 800651c:	d402      	bmi.n	8006524 <_vfiprintf_r+0x220>
 800651e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006520:	f7ff fd7f 	bl	8006022 <__retarget_lock_release_recursive>
 8006524:	89ab      	ldrh	r3, [r5, #12]
 8006526:	065b      	lsls	r3, r3, #25
 8006528:	f53f af12 	bmi.w	8006350 <_vfiprintf_r+0x4c>
 800652c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800652e:	e711      	b.n	8006354 <_vfiprintf_r+0x50>
 8006530:	ab03      	add	r3, sp, #12
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	462a      	mov	r2, r5
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <_vfiprintf_r+0x258>)
 8006538:	a904      	add	r1, sp, #16
 800653a:	4630      	mov	r0, r6
 800653c:	f000 f880 	bl	8006640 <_printf_i>
 8006540:	e7e4      	b.n	800650c <_vfiprintf_r+0x208>
 8006542:	bf00      	nop
 8006544:	08006de0 	.word	0x08006de0
 8006548:	08006e00 	.word	0x08006e00
 800654c:	08006dc0 	.word	0x08006dc0
 8006550:	08006e20 	.word	0x08006e20
 8006554:	08006e2a 	.word	0x08006e2a
 8006558:	00000000 	.word	0x00000000
 800655c:	080062df 	.word	0x080062df
 8006560:	08006e26 	.word	0x08006e26

08006564 <_printf_common>:
 8006564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	4616      	mov	r6, r2
 800656a:	4699      	mov	r9, r3
 800656c:	688a      	ldr	r2, [r1, #8]
 800656e:	690b      	ldr	r3, [r1, #16]
 8006570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006574:	4293      	cmp	r3, r2
 8006576:	bfb8      	it	lt
 8006578:	4613      	movlt	r3, r2
 800657a:	6033      	str	r3, [r6, #0]
 800657c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006580:	4607      	mov	r7, r0
 8006582:	460c      	mov	r4, r1
 8006584:	b10a      	cbz	r2, 800658a <_printf_common+0x26>
 8006586:	3301      	adds	r3, #1
 8006588:	6033      	str	r3, [r6, #0]
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	0699      	lsls	r1, r3, #26
 800658e:	bf42      	ittt	mi
 8006590:	6833      	ldrmi	r3, [r6, #0]
 8006592:	3302      	addmi	r3, #2
 8006594:	6033      	strmi	r3, [r6, #0]
 8006596:	6825      	ldr	r5, [r4, #0]
 8006598:	f015 0506 	ands.w	r5, r5, #6
 800659c:	d106      	bne.n	80065ac <_printf_common+0x48>
 800659e:	f104 0a19 	add.w	sl, r4, #25
 80065a2:	68e3      	ldr	r3, [r4, #12]
 80065a4:	6832      	ldr	r2, [r6, #0]
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	42ab      	cmp	r3, r5
 80065aa:	dc26      	bgt.n	80065fa <_printf_common+0x96>
 80065ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065b0:	1e13      	subs	r3, r2, #0
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	bf18      	it	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	0692      	lsls	r2, r2, #26
 80065ba:	d42b      	bmi.n	8006614 <_printf_common+0xb0>
 80065bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065c0:	4649      	mov	r1, r9
 80065c2:	4638      	mov	r0, r7
 80065c4:	47c0      	blx	r8
 80065c6:	3001      	adds	r0, #1
 80065c8:	d01e      	beq.n	8006608 <_printf_common+0xa4>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	68e5      	ldr	r5, [r4, #12]
 80065ce:	6832      	ldr	r2, [r6, #0]
 80065d0:	f003 0306 	and.w	r3, r3, #6
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	bf08      	it	eq
 80065d8:	1aad      	subeq	r5, r5, r2
 80065da:	68a3      	ldr	r3, [r4, #8]
 80065dc:	6922      	ldr	r2, [r4, #16]
 80065de:	bf0c      	ite	eq
 80065e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065e4:	2500      	movne	r5, #0
 80065e6:	4293      	cmp	r3, r2
 80065e8:	bfc4      	itt	gt
 80065ea:	1a9b      	subgt	r3, r3, r2
 80065ec:	18ed      	addgt	r5, r5, r3
 80065ee:	2600      	movs	r6, #0
 80065f0:	341a      	adds	r4, #26
 80065f2:	42b5      	cmp	r5, r6
 80065f4:	d11a      	bne.n	800662c <_printf_common+0xc8>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e008      	b.n	800660c <_printf_common+0xa8>
 80065fa:	2301      	movs	r3, #1
 80065fc:	4652      	mov	r2, sl
 80065fe:	4649      	mov	r1, r9
 8006600:	4638      	mov	r0, r7
 8006602:	47c0      	blx	r8
 8006604:	3001      	adds	r0, #1
 8006606:	d103      	bne.n	8006610 <_printf_common+0xac>
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006610:	3501      	adds	r5, #1
 8006612:	e7c6      	b.n	80065a2 <_printf_common+0x3e>
 8006614:	18e1      	adds	r1, r4, r3
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	2030      	movs	r0, #48	; 0x30
 800661a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800661e:	4422      	add	r2, r4
 8006620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006628:	3302      	adds	r3, #2
 800662a:	e7c7      	b.n	80065bc <_printf_common+0x58>
 800662c:	2301      	movs	r3, #1
 800662e:	4622      	mov	r2, r4
 8006630:	4649      	mov	r1, r9
 8006632:	4638      	mov	r0, r7
 8006634:	47c0      	blx	r8
 8006636:	3001      	adds	r0, #1
 8006638:	d0e6      	beq.n	8006608 <_printf_common+0xa4>
 800663a:	3601      	adds	r6, #1
 800663c:	e7d9      	b.n	80065f2 <_printf_common+0x8e>
	...

08006640 <_printf_i>:
 8006640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	7e0f      	ldrb	r7, [r1, #24]
 8006646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006648:	2f78      	cmp	r7, #120	; 0x78
 800664a:	4691      	mov	r9, r2
 800664c:	4680      	mov	r8, r0
 800664e:	460c      	mov	r4, r1
 8006650:	469a      	mov	sl, r3
 8006652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006656:	d807      	bhi.n	8006668 <_printf_i+0x28>
 8006658:	2f62      	cmp	r7, #98	; 0x62
 800665a:	d80a      	bhi.n	8006672 <_printf_i+0x32>
 800665c:	2f00      	cmp	r7, #0
 800665e:	f000 80d8 	beq.w	8006812 <_printf_i+0x1d2>
 8006662:	2f58      	cmp	r7, #88	; 0x58
 8006664:	f000 80a3 	beq.w	80067ae <_printf_i+0x16e>
 8006668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800666c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006670:	e03a      	b.n	80066e8 <_printf_i+0xa8>
 8006672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006676:	2b15      	cmp	r3, #21
 8006678:	d8f6      	bhi.n	8006668 <_printf_i+0x28>
 800667a:	a101      	add	r1, pc, #4	; (adr r1, 8006680 <_printf_i+0x40>)
 800667c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006680:	080066d9 	.word	0x080066d9
 8006684:	080066ed 	.word	0x080066ed
 8006688:	08006669 	.word	0x08006669
 800668c:	08006669 	.word	0x08006669
 8006690:	08006669 	.word	0x08006669
 8006694:	08006669 	.word	0x08006669
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006669 	.word	0x08006669
 80066a0:	08006669 	.word	0x08006669
 80066a4:	08006669 	.word	0x08006669
 80066a8:	08006669 	.word	0x08006669
 80066ac:	080067f9 	.word	0x080067f9
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	080067db 	.word	0x080067db
 80066b8:	08006669 	.word	0x08006669
 80066bc:	08006669 	.word	0x08006669
 80066c0:	0800681b 	.word	0x0800681b
 80066c4:	08006669 	.word	0x08006669
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006669 	.word	0x08006669
 80066d0:	08006669 	.word	0x08006669
 80066d4:	080067e3 	.word	0x080067e3
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	1d1a      	adds	r2, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	602a      	str	r2, [r5, #0]
 80066e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0a3      	b.n	8006834 <_printf_i+0x1f4>
 80066ec:	6820      	ldr	r0, [r4, #0]
 80066ee:	6829      	ldr	r1, [r5, #0]
 80066f0:	0606      	lsls	r6, r0, #24
 80066f2:	f101 0304 	add.w	r3, r1, #4
 80066f6:	d50a      	bpl.n	800670e <_printf_i+0xce>
 80066f8:	680e      	ldr	r6, [r1, #0]
 80066fa:	602b      	str	r3, [r5, #0]
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	da03      	bge.n	8006708 <_printf_i+0xc8>
 8006700:	232d      	movs	r3, #45	; 0x2d
 8006702:	4276      	negs	r6, r6
 8006704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006708:	485e      	ldr	r0, [pc, #376]	; (8006884 <_printf_i+0x244>)
 800670a:	230a      	movs	r3, #10
 800670c:	e019      	b.n	8006742 <_printf_i+0x102>
 800670e:	680e      	ldr	r6, [r1, #0]
 8006710:	602b      	str	r3, [r5, #0]
 8006712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006716:	bf18      	it	ne
 8006718:	b236      	sxthne	r6, r6
 800671a:	e7ef      	b.n	80066fc <_printf_i+0xbc>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	6820      	ldr	r0, [r4, #0]
 8006720:	1d19      	adds	r1, r3, #4
 8006722:	6029      	str	r1, [r5, #0]
 8006724:	0601      	lsls	r1, r0, #24
 8006726:	d501      	bpl.n	800672c <_printf_i+0xec>
 8006728:	681e      	ldr	r6, [r3, #0]
 800672a:	e002      	b.n	8006732 <_printf_i+0xf2>
 800672c:	0646      	lsls	r6, r0, #25
 800672e:	d5fb      	bpl.n	8006728 <_printf_i+0xe8>
 8006730:	881e      	ldrh	r6, [r3, #0]
 8006732:	4854      	ldr	r0, [pc, #336]	; (8006884 <_printf_i+0x244>)
 8006734:	2f6f      	cmp	r7, #111	; 0x6f
 8006736:	bf0c      	ite	eq
 8006738:	2308      	moveq	r3, #8
 800673a:	230a      	movne	r3, #10
 800673c:	2100      	movs	r1, #0
 800673e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006742:	6865      	ldr	r5, [r4, #4]
 8006744:	60a5      	str	r5, [r4, #8]
 8006746:	2d00      	cmp	r5, #0
 8006748:	bfa2      	ittt	ge
 800674a:	6821      	ldrge	r1, [r4, #0]
 800674c:	f021 0104 	bicge.w	r1, r1, #4
 8006750:	6021      	strge	r1, [r4, #0]
 8006752:	b90e      	cbnz	r6, 8006758 <_printf_i+0x118>
 8006754:	2d00      	cmp	r5, #0
 8006756:	d04d      	beq.n	80067f4 <_printf_i+0x1b4>
 8006758:	4615      	mov	r5, r2
 800675a:	fbb6 f1f3 	udiv	r1, r6, r3
 800675e:	fb03 6711 	mls	r7, r3, r1, r6
 8006762:	5dc7      	ldrb	r7, [r0, r7]
 8006764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006768:	4637      	mov	r7, r6
 800676a:	42bb      	cmp	r3, r7
 800676c:	460e      	mov	r6, r1
 800676e:	d9f4      	bls.n	800675a <_printf_i+0x11a>
 8006770:	2b08      	cmp	r3, #8
 8006772:	d10b      	bne.n	800678c <_printf_i+0x14c>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	07de      	lsls	r6, r3, #31
 8006778:	d508      	bpl.n	800678c <_printf_i+0x14c>
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	6861      	ldr	r1, [r4, #4]
 800677e:	4299      	cmp	r1, r3
 8006780:	bfde      	ittt	le
 8006782:	2330      	movle	r3, #48	; 0x30
 8006784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800678c:	1b52      	subs	r2, r2, r5
 800678e:	6122      	str	r2, [r4, #16]
 8006790:	f8cd a000 	str.w	sl, [sp]
 8006794:	464b      	mov	r3, r9
 8006796:	aa03      	add	r2, sp, #12
 8006798:	4621      	mov	r1, r4
 800679a:	4640      	mov	r0, r8
 800679c:	f7ff fee2 	bl	8006564 <_printf_common>
 80067a0:	3001      	adds	r0, #1
 80067a2:	d14c      	bne.n	800683e <_printf_i+0x1fe>
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295
 80067a8:	b004      	add	sp, #16
 80067aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ae:	4835      	ldr	r0, [pc, #212]	; (8006884 <_printf_i+0x244>)
 80067b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067b4:	6829      	ldr	r1, [r5, #0]
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80067bc:	6029      	str	r1, [r5, #0]
 80067be:	061d      	lsls	r5, r3, #24
 80067c0:	d514      	bpl.n	80067ec <_printf_i+0x1ac>
 80067c2:	07df      	lsls	r7, r3, #31
 80067c4:	bf44      	itt	mi
 80067c6:	f043 0320 	orrmi.w	r3, r3, #32
 80067ca:	6023      	strmi	r3, [r4, #0]
 80067cc:	b91e      	cbnz	r6, 80067d6 <_printf_i+0x196>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f023 0320 	bic.w	r3, r3, #32
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	2310      	movs	r3, #16
 80067d8:	e7b0      	b.n	800673c <_printf_i+0xfc>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f043 0320 	orr.w	r3, r3, #32
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	2378      	movs	r3, #120	; 0x78
 80067e4:	4828      	ldr	r0, [pc, #160]	; (8006888 <_printf_i+0x248>)
 80067e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ea:	e7e3      	b.n	80067b4 <_printf_i+0x174>
 80067ec:	0659      	lsls	r1, r3, #25
 80067ee:	bf48      	it	mi
 80067f0:	b2b6      	uxthmi	r6, r6
 80067f2:	e7e6      	b.n	80067c2 <_printf_i+0x182>
 80067f4:	4615      	mov	r5, r2
 80067f6:	e7bb      	b.n	8006770 <_printf_i+0x130>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	6826      	ldr	r6, [r4, #0]
 80067fc:	6961      	ldr	r1, [r4, #20]
 80067fe:	1d18      	adds	r0, r3, #4
 8006800:	6028      	str	r0, [r5, #0]
 8006802:	0635      	lsls	r5, r6, #24
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	d501      	bpl.n	800680c <_printf_i+0x1cc>
 8006808:	6019      	str	r1, [r3, #0]
 800680a:	e002      	b.n	8006812 <_printf_i+0x1d2>
 800680c:	0670      	lsls	r0, r6, #25
 800680e:	d5fb      	bpl.n	8006808 <_printf_i+0x1c8>
 8006810:	8019      	strh	r1, [r3, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	4615      	mov	r5, r2
 8006818:	e7ba      	b.n	8006790 <_printf_i+0x150>
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	1d1a      	adds	r2, r3, #4
 800681e:	602a      	str	r2, [r5, #0]
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	6862      	ldr	r2, [r4, #4]
 8006824:	2100      	movs	r1, #0
 8006826:	4628      	mov	r0, r5
 8006828:	f7f9 fce2 	bl	80001f0 <memchr>
 800682c:	b108      	cbz	r0, 8006832 <_printf_i+0x1f2>
 800682e:	1b40      	subs	r0, r0, r5
 8006830:	6060      	str	r0, [r4, #4]
 8006832:	6863      	ldr	r3, [r4, #4]
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	2300      	movs	r3, #0
 8006838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800683c:	e7a8      	b.n	8006790 <_printf_i+0x150>
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	462a      	mov	r2, r5
 8006842:	4649      	mov	r1, r9
 8006844:	4640      	mov	r0, r8
 8006846:	47d0      	blx	sl
 8006848:	3001      	adds	r0, #1
 800684a:	d0ab      	beq.n	80067a4 <_printf_i+0x164>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	079b      	lsls	r3, r3, #30
 8006850:	d413      	bmi.n	800687a <_printf_i+0x23a>
 8006852:	68e0      	ldr	r0, [r4, #12]
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	4298      	cmp	r0, r3
 8006858:	bfb8      	it	lt
 800685a:	4618      	movlt	r0, r3
 800685c:	e7a4      	b.n	80067a8 <_printf_i+0x168>
 800685e:	2301      	movs	r3, #1
 8006860:	4632      	mov	r2, r6
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	47d0      	blx	sl
 8006868:	3001      	adds	r0, #1
 800686a:	d09b      	beq.n	80067a4 <_printf_i+0x164>
 800686c:	3501      	adds	r5, #1
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	9903      	ldr	r1, [sp, #12]
 8006872:	1a5b      	subs	r3, r3, r1
 8006874:	42ab      	cmp	r3, r5
 8006876:	dcf2      	bgt.n	800685e <_printf_i+0x21e>
 8006878:	e7eb      	b.n	8006852 <_printf_i+0x212>
 800687a:	2500      	movs	r5, #0
 800687c:	f104 0619 	add.w	r6, r4, #25
 8006880:	e7f5      	b.n	800686e <_printf_i+0x22e>
 8006882:	bf00      	nop
 8006884:	08006e31 	.word	0x08006e31
 8006888:	08006e42 	.word	0x08006e42

0800688c <_sbrk_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d06      	ldr	r5, [pc, #24]	; (80068a8 <_sbrk_r+0x1c>)
 8006890:	2300      	movs	r3, #0
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	f7fb f822 	bl	80018e0 <_sbrk>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d102      	bne.n	80068a6 <_sbrk_r+0x1a>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	b103      	cbz	r3, 80068a6 <_sbrk_r+0x1a>
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	20015a4c 	.word	0x20015a4c

080068ac <__sread>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	460c      	mov	r4, r1
 80068b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b4:	f000 f8a0 	bl	80069f8 <_read_r>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	bfab      	itete	ge
 80068bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068be:	89a3      	ldrhlt	r3, [r4, #12]
 80068c0:	181b      	addge	r3, r3, r0
 80068c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068c6:	bfac      	ite	ge
 80068c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ca:	81a3      	strhlt	r3, [r4, #12]
 80068cc:	bd10      	pop	{r4, pc}

080068ce <__swrite>:
 80068ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d2:	461f      	mov	r7, r3
 80068d4:	898b      	ldrh	r3, [r1, #12]
 80068d6:	05db      	lsls	r3, r3, #23
 80068d8:	4605      	mov	r5, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	4616      	mov	r6, r2
 80068de:	d505      	bpl.n	80068ec <__swrite+0x1e>
 80068e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e4:	2302      	movs	r3, #2
 80068e6:	2200      	movs	r2, #0
 80068e8:	f000 f868 	bl	80069bc <_lseek_r>
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	4632      	mov	r2, r6
 80068fa:	463b      	mov	r3, r7
 80068fc:	4628      	mov	r0, r5
 80068fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006902:	f000 b817 	b.w	8006934 <_write_r>

08006906 <__sseek>:
 8006906:	b510      	push	{r4, lr}
 8006908:	460c      	mov	r4, r1
 800690a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690e:	f000 f855 	bl	80069bc <_lseek_r>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	bf15      	itete	ne
 8006918:	6560      	strne	r0, [r4, #84]	; 0x54
 800691a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800691e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006922:	81a3      	strheq	r3, [r4, #12]
 8006924:	bf18      	it	ne
 8006926:	81a3      	strhne	r3, [r4, #12]
 8006928:	bd10      	pop	{r4, pc}

0800692a <__sclose>:
 800692a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800692e:	f000 b813 	b.w	8006958 <_close_r>
	...

08006934 <_write_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4d07      	ldr	r5, [pc, #28]	; (8006954 <_write_r+0x20>)
 8006938:	4604      	mov	r4, r0
 800693a:	4608      	mov	r0, r1
 800693c:	4611      	mov	r1, r2
 800693e:	2200      	movs	r2, #0
 8006940:	602a      	str	r2, [r5, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	f7fa ff7b 	bl	800183e <_write>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d102      	bne.n	8006952 <_write_r+0x1e>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b103      	cbz	r3, 8006952 <_write_r+0x1e>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	20015a4c 	.word	0x20015a4c

08006958 <_close_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4d06      	ldr	r5, [pc, #24]	; (8006974 <_close_r+0x1c>)
 800695c:	2300      	movs	r3, #0
 800695e:	4604      	mov	r4, r0
 8006960:	4608      	mov	r0, r1
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	f7fa ff87 	bl	8001876 <_close>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_close_r+0x1a>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_close_r+0x1a>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	20015a4c 	.word	0x20015a4c

08006978 <_fstat_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d07      	ldr	r5, [pc, #28]	; (8006998 <_fstat_r+0x20>)
 800697c:	2300      	movs	r3, #0
 800697e:	4604      	mov	r4, r0
 8006980:	4608      	mov	r0, r1
 8006982:	4611      	mov	r1, r2
 8006984:	602b      	str	r3, [r5, #0]
 8006986:	f7fa ff82 	bl	800188e <_fstat>
 800698a:	1c43      	adds	r3, r0, #1
 800698c:	d102      	bne.n	8006994 <_fstat_r+0x1c>
 800698e:	682b      	ldr	r3, [r5, #0]
 8006990:	b103      	cbz	r3, 8006994 <_fstat_r+0x1c>
 8006992:	6023      	str	r3, [r4, #0]
 8006994:	bd38      	pop	{r3, r4, r5, pc}
 8006996:	bf00      	nop
 8006998:	20015a4c 	.word	0x20015a4c

0800699c <_isatty_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d06      	ldr	r5, [pc, #24]	; (80069b8 <_isatty_r+0x1c>)
 80069a0:	2300      	movs	r3, #0
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	f7fa ff81 	bl	80018ae <_isatty>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_isatty_r+0x1a>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_isatty_r+0x1a>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	20015a4c 	.word	0x20015a4c

080069bc <_lseek_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d07      	ldr	r5, [pc, #28]	; (80069dc <_lseek_r+0x20>)
 80069c0:	4604      	mov	r4, r0
 80069c2:	4608      	mov	r0, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	2200      	movs	r2, #0
 80069c8:	602a      	str	r2, [r5, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f7fa ff7a 	bl	80018c4 <_lseek>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_lseek_r+0x1e>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_lseek_r+0x1e>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	20015a4c 	.word	0x20015a4c

080069e0 <__malloc_lock>:
 80069e0:	4801      	ldr	r0, [pc, #4]	; (80069e8 <__malloc_lock+0x8>)
 80069e2:	f7ff bb1d 	b.w	8006020 <__retarget_lock_acquire_recursive>
 80069e6:	bf00      	nop
 80069e8:	20015a40 	.word	0x20015a40

080069ec <__malloc_unlock>:
 80069ec:	4801      	ldr	r0, [pc, #4]	; (80069f4 <__malloc_unlock+0x8>)
 80069ee:	f7ff bb18 	b.w	8006022 <__retarget_lock_release_recursive>
 80069f2:	bf00      	nop
 80069f4:	20015a40 	.word	0x20015a40

080069f8 <_read_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	; (8006a18 <_read_r+0x20>)
 80069fc:	4604      	mov	r4, r0
 80069fe:	4608      	mov	r0, r1
 8006a00:	4611      	mov	r1, r2
 8006a02:	2200      	movs	r2, #0
 8006a04:	602a      	str	r2, [r5, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f7fa fefc 	bl	8001804 <_read>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_read_r+0x1e>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_read_r+0x1e>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	20015a4c 	.word	0x20015a4c

08006a1c <_init>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr

08006a28 <_fini>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr
