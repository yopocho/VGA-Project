
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800594c  0800594c  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005954  08005954  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800595c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015954  200000e8  08005a44  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015a3c  08005a44  00025a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2f8  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002758  00000000  00000000  0002e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00030b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  000318a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232b9  00000000  00000000  00032490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f5b  00000000  00000000  00055749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cabc4  00000000  00000000  000666a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131268  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f8  00000000  00000000  001312b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e8 	.word	0x200000e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005614 	.word	0x08005614

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	08005614 	.word	0x08005614

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_d2f>:
 8000554:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000558:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800055c:	bf24      	itt	cs
 800055e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000562:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000566:	d90d      	bls.n	8000584 <__aeabi_d2f+0x30>
 8000568:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800056c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000570:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000574:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000578:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800057c:	bf08      	it	eq
 800057e:	f020 0001 	biceq.w	r0, r0, #1
 8000582:	4770      	bx	lr
 8000584:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000588:	d121      	bne.n	80005ce <__aeabi_d2f+0x7a>
 800058a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058e:	bfbc      	itt	lt
 8000590:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000594:	4770      	bxlt	lr
 8000596:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059e:	f1c2 0218 	rsb	r2, r2, #24
 80005a2:	f1c2 0c20 	rsb	ip, r2, #32
 80005a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	bf18      	it	ne
 80005b0:	f040 0001 	orrne.w	r0, r0, #1
 80005b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005c0:	ea40 000c 	orr.w	r0, r0, ip
 80005c4:	fa23 f302 	lsr.w	r3, r3, r2
 80005c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005cc:	e7cc      	b.n	8000568 <__aeabi_d2f+0x14>
 80005ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005d2:	d107      	bne.n	80005e4 <__aeabi_d2f+0x90>
 80005d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d8:	bf1e      	ittt	ne
 80005da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005e2:	4770      	bxne	lr
 80005e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <__aeabi_uldivmod>:
 80005f4:	b953      	cbnz	r3, 800060c <__aeabi_uldivmod+0x18>
 80005f6:	b94a      	cbnz	r2, 800060c <__aeabi_uldivmod+0x18>
 80005f8:	2900      	cmp	r1, #0
 80005fa:	bf08      	it	eq
 80005fc:	2800      	cmpeq	r0, #0
 80005fe:	bf1c      	itt	ne
 8000600:	f04f 31ff 	movne.w	r1, #4294967295
 8000604:	f04f 30ff 	movne.w	r0, #4294967295
 8000608:	f000 b974 	b.w	80008f4 <__aeabi_idiv0>
 800060c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000610:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000614:	f000 f806 	bl	8000624 <__udivmoddi4>
 8000618:	f8dd e004 	ldr.w	lr, [sp, #4]
 800061c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr

08000624 <__udivmoddi4>:
 8000624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000628:	9d08      	ldr	r5, [sp, #32]
 800062a:	4604      	mov	r4, r0
 800062c:	468e      	mov	lr, r1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d14d      	bne.n	80006ce <__udivmoddi4+0xaa>
 8000632:	428a      	cmp	r2, r1
 8000634:	4694      	mov	ip, r2
 8000636:	d969      	bls.n	800070c <__udivmoddi4+0xe8>
 8000638:	fab2 f282 	clz	r2, r2
 800063c:	b152      	cbz	r2, 8000654 <__udivmoddi4+0x30>
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	f1c2 0120 	rsb	r1, r2, #32
 8000646:	fa20 f101 	lsr.w	r1, r0, r1
 800064a:	fa0c fc02 	lsl.w	ip, ip, r2
 800064e:	ea41 0e03 	orr.w	lr, r1, r3
 8000652:	4094      	lsls	r4, r2
 8000654:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000658:	0c21      	lsrs	r1, r4, #16
 800065a:	fbbe f6f8 	udiv	r6, lr, r8
 800065e:	fa1f f78c 	uxth.w	r7, ip
 8000662:	fb08 e316 	mls	r3, r8, r6, lr
 8000666:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066a:	fb06 f107 	mul.w	r1, r6, r7
 800066e:	4299      	cmp	r1, r3
 8000670:	d90a      	bls.n	8000688 <__udivmoddi4+0x64>
 8000672:	eb1c 0303 	adds.w	r3, ip, r3
 8000676:	f106 30ff 	add.w	r0, r6, #4294967295
 800067a:	f080 811f 	bcs.w	80008bc <__udivmoddi4+0x298>
 800067e:	4299      	cmp	r1, r3
 8000680:	f240 811c 	bls.w	80008bc <__udivmoddi4+0x298>
 8000684:	3e02      	subs	r6, #2
 8000686:	4463      	add	r3, ip
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	b2a4      	uxth	r4, r4
 800068c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000690:	fb08 3310 	mls	r3, r8, r0, r3
 8000694:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000698:	fb00 f707 	mul.w	r7, r0, r7
 800069c:	42a7      	cmp	r7, r4
 800069e:	d90a      	bls.n	80006b6 <__udivmoddi4+0x92>
 80006a0:	eb1c 0404 	adds.w	r4, ip, r4
 80006a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a8:	f080 810a 	bcs.w	80008c0 <__udivmoddi4+0x29c>
 80006ac:	42a7      	cmp	r7, r4
 80006ae:	f240 8107 	bls.w	80008c0 <__udivmoddi4+0x29c>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ba:	1be4      	subs	r4, r4, r7
 80006bc:	2600      	movs	r6, #0
 80006be:	b11d      	cbz	r5, 80006c8 <__udivmoddi4+0xa4>
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	2300      	movs	r3, #0
 80006c4:	e9c5 4300 	strd	r4, r3, [r5]
 80006c8:	4631      	mov	r1, r6
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d909      	bls.n	80006e6 <__udivmoddi4+0xc2>
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	f000 80ef 	beq.w	80008b6 <__udivmoddi4+0x292>
 80006d8:	2600      	movs	r6, #0
 80006da:	e9c5 0100 	strd	r0, r1, [r5]
 80006de:	4630      	mov	r0, r6
 80006e0:	4631      	mov	r1, r6
 80006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e6:	fab3 f683 	clz	r6, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d14a      	bne.n	8000784 <__udivmoddi4+0x160>
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d302      	bcc.n	80006f8 <__udivmoddi4+0xd4>
 80006f2:	4282      	cmp	r2, r0
 80006f4:	f200 80f9 	bhi.w	80008ea <__udivmoddi4+0x2c6>
 80006f8:	1a84      	subs	r4, r0, r2
 80006fa:	eb61 0303 	sbc.w	r3, r1, r3
 80006fe:	2001      	movs	r0, #1
 8000700:	469e      	mov	lr, r3
 8000702:	2d00      	cmp	r5, #0
 8000704:	d0e0      	beq.n	80006c8 <__udivmoddi4+0xa4>
 8000706:	e9c5 4e00 	strd	r4, lr, [r5]
 800070a:	e7dd      	b.n	80006c8 <__udivmoddi4+0xa4>
 800070c:	b902      	cbnz	r2, 8000710 <__udivmoddi4+0xec>
 800070e:	deff      	udf	#255	; 0xff
 8000710:	fab2 f282 	clz	r2, r2
 8000714:	2a00      	cmp	r2, #0
 8000716:	f040 8092 	bne.w	800083e <__udivmoddi4+0x21a>
 800071a:	eba1 010c 	sub.w	r1, r1, ip
 800071e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000722:	fa1f fe8c 	uxth.w	lr, ip
 8000726:	2601      	movs	r6, #1
 8000728:	0c20      	lsrs	r0, r4, #16
 800072a:	fbb1 f3f7 	udiv	r3, r1, r7
 800072e:	fb07 1113 	mls	r1, r7, r3, r1
 8000732:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000736:	fb0e f003 	mul.w	r0, lr, r3
 800073a:	4288      	cmp	r0, r1
 800073c:	d908      	bls.n	8000750 <__udivmoddi4+0x12c>
 800073e:	eb1c 0101 	adds.w	r1, ip, r1
 8000742:	f103 38ff 	add.w	r8, r3, #4294967295
 8000746:	d202      	bcs.n	800074e <__udivmoddi4+0x12a>
 8000748:	4288      	cmp	r0, r1
 800074a:	f200 80cb 	bhi.w	80008e4 <__udivmoddi4+0x2c0>
 800074e:	4643      	mov	r3, r8
 8000750:	1a09      	subs	r1, r1, r0
 8000752:	b2a4      	uxth	r4, r4
 8000754:	fbb1 f0f7 	udiv	r0, r1, r7
 8000758:	fb07 1110 	mls	r1, r7, r0, r1
 800075c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000760:	fb0e fe00 	mul.w	lr, lr, r0
 8000764:	45a6      	cmp	lr, r4
 8000766:	d908      	bls.n	800077a <__udivmoddi4+0x156>
 8000768:	eb1c 0404 	adds.w	r4, ip, r4
 800076c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000770:	d202      	bcs.n	8000778 <__udivmoddi4+0x154>
 8000772:	45a6      	cmp	lr, r4
 8000774:	f200 80bb 	bhi.w	80008ee <__udivmoddi4+0x2ca>
 8000778:	4608      	mov	r0, r1
 800077a:	eba4 040e 	sub.w	r4, r4, lr
 800077e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000782:	e79c      	b.n	80006be <__udivmoddi4+0x9a>
 8000784:	f1c6 0720 	rsb	r7, r6, #32
 8000788:	40b3      	lsls	r3, r6
 800078a:	fa22 fc07 	lsr.w	ip, r2, r7
 800078e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000792:	fa20 f407 	lsr.w	r4, r0, r7
 8000796:	fa01 f306 	lsl.w	r3, r1, r6
 800079a:	431c      	orrs	r4, r3
 800079c:	40f9      	lsrs	r1, r7
 800079e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007a2:	fa00 f306 	lsl.w	r3, r0, r6
 80007a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80007aa:	0c20      	lsrs	r0, r4, #16
 80007ac:	fa1f fe8c 	uxth.w	lr, ip
 80007b0:	fb09 1118 	mls	r1, r9, r8, r1
 80007b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007b8:	fb08 f00e 	mul.w	r0, r8, lr
 80007bc:	4288      	cmp	r0, r1
 80007be:	fa02 f206 	lsl.w	r2, r2, r6
 80007c2:	d90b      	bls.n	80007dc <__udivmoddi4+0x1b8>
 80007c4:	eb1c 0101 	adds.w	r1, ip, r1
 80007c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80007cc:	f080 8088 	bcs.w	80008e0 <__udivmoddi4+0x2bc>
 80007d0:	4288      	cmp	r0, r1
 80007d2:	f240 8085 	bls.w	80008e0 <__udivmoddi4+0x2bc>
 80007d6:	f1a8 0802 	sub.w	r8, r8, #2
 80007da:	4461      	add	r1, ip
 80007dc:	1a09      	subs	r1, r1, r0
 80007de:	b2a4      	uxth	r4, r4
 80007e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e4:	fb09 1110 	mls	r1, r9, r0, r1
 80007e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80007f0:	458e      	cmp	lr, r1
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1e2>
 80007f4:	eb1c 0101 	adds.w	r1, ip, r1
 80007f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80007fc:	d26c      	bcs.n	80008d8 <__udivmoddi4+0x2b4>
 80007fe:	458e      	cmp	lr, r1
 8000800:	d96a      	bls.n	80008d8 <__udivmoddi4+0x2b4>
 8000802:	3802      	subs	r0, #2
 8000804:	4461      	add	r1, ip
 8000806:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800080a:	fba0 9402 	umull	r9, r4, r0, r2
 800080e:	eba1 010e 	sub.w	r1, r1, lr
 8000812:	42a1      	cmp	r1, r4
 8000814:	46c8      	mov	r8, r9
 8000816:	46a6      	mov	lr, r4
 8000818:	d356      	bcc.n	80008c8 <__udivmoddi4+0x2a4>
 800081a:	d053      	beq.n	80008c4 <__udivmoddi4+0x2a0>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x212>
 800081e:	ebb3 0208 	subs.w	r2, r3, r8
 8000822:	eb61 010e 	sbc.w	r1, r1, lr
 8000826:	fa01 f707 	lsl.w	r7, r1, r7
 800082a:	fa22 f306 	lsr.w	r3, r2, r6
 800082e:	40f1      	lsrs	r1, r6
 8000830:	431f      	orrs	r7, r3
 8000832:	e9c5 7100 	strd	r7, r1, [r5]
 8000836:	2600      	movs	r6, #0
 8000838:	4631      	mov	r1, r6
 800083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	40d8      	lsrs	r0, r3
 8000844:	fa0c fc02 	lsl.w	ip, ip, r2
 8000848:	fa21 f303 	lsr.w	r3, r1, r3
 800084c:	4091      	lsls	r1, r2
 800084e:	4301      	orrs	r1, r0
 8000850:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000854:	fa1f fe8c 	uxth.w	lr, ip
 8000858:	fbb3 f0f7 	udiv	r0, r3, r7
 800085c:	fb07 3610 	mls	r6, r7, r0, r3
 8000860:	0c0b      	lsrs	r3, r1, #16
 8000862:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000866:	fb00 f60e 	mul.w	r6, r0, lr
 800086a:	429e      	cmp	r6, r3
 800086c:	fa04 f402 	lsl.w	r4, r4, r2
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x260>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f100 38ff 	add.w	r8, r0, #4294967295
 800087a:	d22f      	bcs.n	80008dc <__udivmoddi4+0x2b8>
 800087c:	429e      	cmp	r6, r3
 800087e:	d92d      	bls.n	80008dc <__udivmoddi4+0x2b8>
 8000880:	3802      	subs	r0, #2
 8000882:	4463      	add	r3, ip
 8000884:	1b9b      	subs	r3, r3, r6
 8000886:	b289      	uxth	r1, r1
 8000888:	fbb3 f6f7 	udiv	r6, r3, r7
 800088c:	fb07 3316 	mls	r3, r7, r6, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb06 f30e 	mul.w	r3, r6, lr
 8000898:	428b      	cmp	r3, r1
 800089a:	d908      	bls.n	80008ae <__udivmoddi4+0x28a>
 800089c:	eb1c 0101 	adds.w	r1, ip, r1
 80008a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80008a4:	d216      	bcs.n	80008d4 <__udivmoddi4+0x2b0>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d914      	bls.n	80008d4 <__udivmoddi4+0x2b0>
 80008aa:	3e02      	subs	r6, #2
 80008ac:	4461      	add	r1, ip
 80008ae:	1ac9      	subs	r1, r1, r3
 80008b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b4:	e738      	b.n	8000728 <__udivmoddi4+0x104>
 80008b6:	462e      	mov	r6, r5
 80008b8:	4628      	mov	r0, r5
 80008ba:	e705      	b.n	80006c8 <__udivmoddi4+0xa4>
 80008bc:	4606      	mov	r6, r0
 80008be:	e6e3      	b.n	8000688 <__udivmoddi4+0x64>
 80008c0:	4618      	mov	r0, r3
 80008c2:	e6f8      	b.n	80006b6 <__udivmoddi4+0x92>
 80008c4:	454b      	cmp	r3, r9
 80008c6:	d2a9      	bcs.n	800081c <__udivmoddi4+0x1f8>
 80008c8:	ebb9 0802 	subs.w	r8, r9, r2
 80008cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008d0:	3801      	subs	r0, #1
 80008d2:	e7a3      	b.n	800081c <__udivmoddi4+0x1f8>
 80008d4:	4646      	mov	r6, r8
 80008d6:	e7ea      	b.n	80008ae <__udivmoddi4+0x28a>
 80008d8:	4620      	mov	r0, r4
 80008da:	e794      	b.n	8000806 <__udivmoddi4+0x1e2>
 80008dc:	4640      	mov	r0, r8
 80008de:	e7d1      	b.n	8000884 <__udivmoddi4+0x260>
 80008e0:	46d0      	mov	r8, sl
 80008e2:	e77b      	b.n	80007dc <__udivmoddi4+0x1b8>
 80008e4:	3b02      	subs	r3, #2
 80008e6:	4461      	add	r1, ip
 80008e8:	e732      	b.n	8000750 <__udivmoddi4+0x12c>
 80008ea:	4630      	mov	r0, r6
 80008ec:	e709      	b.n	8000702 <__udivmoddi4+0xde>
 80008ee:	4464      	add	r4, ip
 80008f0:	3802      	subs	r0, #2
 80008f2:	e742      	b.n	800077a <__udivmoddi4+0x156>

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <CircBufPush>:

CmdStruct CmdBuf[CMD_BUFF_SIZE];
CmdStruct *pCmdBuf = &CmdBuf[0];
uint32_t CmdBufLen = 0;

Error CircBufPush(CmdStruct *CmdBuf) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	pCmdBuf->commandNummer = CmdBuf->commandNummer;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <CircBufPush+0x78>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	6812      	ldr	r2, [r2, #0]
 8000908:	601a      	str	r2, [r3, #0]
	memcpy(pCmdBuf->argBuf, CmdBuf->argBuf, sizeof(CmdBuf->argBuf[0]) * MAX_CMD_ARGS);
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <CircBufPush+0x78>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1d18      	adds	r0, r3, #4
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3304      	adds	r3, #4
 8000914:	2218      	movs	r2, #24
 8000916:	4619      	mov	r1, r3
 8000918:	f004 fdda 	bl	80054d0 <memcpy>
	memcpy(pCmdBuf->textSentence, CmdBuf->textSentence, sizeof(CmdBuf->textSentence[0]) * MAX_CMD_CHARS);
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <CircBufPush+0x78>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f103 001c 	add.w	r0, r3, #28
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	331c      	adds	r3, #28
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	4619      	mov	r1, r3
 800092c:	f004 fdd0 	bl	80054d0 <memcpy>

	//Check if the buffer pointer has reached the end and if so, loop back to start
	if(pCmdBuf == &CmdBuf[CMD_BUFF_SIZE - 1]) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 8000936:	3324      	adds	r3, #36	; 0x24
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <CircBufPush+0x78>)
 800093a:	6812      	ldr	r2, [r2, #0]
 800093c:	4293      	cmp	r3, r2
 800093e:	d104      	bne.n	800094a <CircBufPush+0x52>
		pCmdBuf = &CmdBuf[0];
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <CircBufPush+0x78>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
		return ERR_NONE;
 8000946:	2304      	movs	r3, #4
 8000948:	e00e      	b.n	8000968 <CircBufPush+0x70>
	}
	if(CmdBufLen != CMD_BUFF_SIZE) {
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <CircBufPush+0x7c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b40      	cmp	r3, #64	; 0x40
 8000950:	d004      	beq.n	800095c <CircBufPush+0x64>
		++CmdBufLen;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <CircBufPush+0x7c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <CircBufPush+0x7c>)
 800095a:	6013      	str	r3, [r2, #0]
	}
	++pCmdBuf;
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <CircBufPush+0x78>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	339c      	adds	r3, #156	; 0x9c
 8000962:	4a03      	ldr	r2, [pc, #12]	; (8000970 <CircBufPush+0x78>)
 8000964:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
 8000966:	2304      	movs	r3, #4
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20002804 	.word	0x20002804

08000978 <RecieveCommandLijn>:
 * the buffer
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandLijn(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000978:	b084      	sub	sp, #16
 800097a:	b590      	push	{r4, r7, lr}
 800097c:	f2ad 4dc4 	subw	sp, sp, #1220	; 0x4c4
 8000980:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
 8000984:	446f      	add	r7, sp
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800098c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e045      	b.n	8000a26 <RecieveCommandLijn+0xae>
		neededArg = i + 1;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	3301      	adds	r3, #1
 800099e:	73bb      	strb	r3, [r7, #14]
		if (i == 4) {
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d11e      	bne.n	80009e4 <RecieveCommandLijn+0x6c>
			ParseOnKomma(inputStruct, neededArg, 0, 1, *CmdBuf);
 80009a6:	7bbc      	ldrb	r4, [r7, #14]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 80009ae:	4611      	mov	r1, r2
 80009b0:	229c      	movs	r2, #156	; 0x9c
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 fd8c 	bl	80054d0 <memcpy>
 80009b8:	2301      	movs	r3, #1
 80009ba:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 80009be:	2300      	movs	r3, #0
 80009c0:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 80009c4:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 80009c8:	4668      	mov	r0, sp
 80009ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ce:	f240 4204 	movw	r2, #1028	; 0x404
 80009d2:	4619      	mov	r1, r3
 80009d4:	f004 fd7c 	bl	80054d0 <memcpy>
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009de:	f000 f997 	bl	8000d10 <ParseOnKomma>
 80009e2:	e01d      	b.n	8000a20 <RecieveCommandLijn+0xa8>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, *CmdBuf);
 80009e4:	7bbc      	ldrb	r4, [r7, #14]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 80009ec:	4611      	mov	r1, r2
 80009ee:	229c      	movs	r2, #156	; 0x9c
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 fd6d 	bl	80054d0 <memcpy>
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 80009fc:	2301      	movs	r3, #1
 80009fe:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000a02:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000a06:	4668      	mov	r0, sp
 8000a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a0c:	f240 4204 	movw	r2, #1028	; 0x404
 8000a10:	4619      	mov	r1, r3
 8000a12:	f004 fd5d 	bl	80054d0 <memcpy>
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a1c:	f000 f978 	bl	8000d10 <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	3301      	adds	r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	2b06      	cmp	r3, #6
 8000a2a:	d9b6      	bls.n	800099a <RecieveCommandLijn+0x22>
		}
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <RecieveCommandClear>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandClear(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8000a44:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
 8000a48:	446f      	add	r7, sp
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	f107 0014 	add.w	r0, r7, #20
 8000a50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 0, 1, *CmdBuf);
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	229c      	movs	r2, #156	; 0x9c
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fd36 	bl	80054d0 <memcpy>
 8000a64:	2301      	movs	r3, #1
 8000a66:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000a70:	2301      	movs	r3, #1
 8000a72:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000a76:	4668      	mov	r0, sp
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	f240 4204 	movw	r2, #1028	; 0x404
 8000a80:	4619      	mov	r1, r3
 8000a82:	f004 fd25 	bl	80054d0 <memcpy>
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a8c:	f000 f940 	bl	8000d10 <ParseOnKomma>
}
 8000a90:	bf00      	nop
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a9c:	b004      	add	sp, #16
 8000a9e:	4770      	bx	lr

08000aa0 <RecieveCommandRechthoek>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandRechthoek(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	b590      	push	{r4, r7, lr}
 8000aa4:	f2ad 4dc4 	subw	sp, sp, #1220	; 0x4c4
 8000aa8:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
 8000aac:	446f      	add	r7, sp
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000ab4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e045      	b.n	8000b4e <RecieveCommandRechthoek+0xae>
		neededArg = i + 1;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
		if (i == 4) {
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d11e      	bne.n	8000b0c <RecieveCommandRechthoek+0x6c>
			ParseOnKomma(inputStruct, neededArg, 0, 1, *CmdBuf);
 8000ace:	7bbc      	ldrb	r4, [r7, #14]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	229c      	movs	r2, #156	; 0x9c
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 fcf8 	bl	80054d0 <memcpy>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000aec:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000af0:	4668      	mov	r0, sp
 8000af2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000af6:	f240 4204 	movw	r2, #1028	; 0x404
 8000afa:	4619      	mov	r1, r3
 8000afc:	f004 fce8 	bl	80054d0 <memcpy>
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b06:	f000 f903 	bl	8000d10 <ParseOnKomma>
 8000b0a:	e01d      	b.n	8000b48 <RecieveCommandRechthoek+0xa8>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, *CmdBuf);
 8000b0c:	7bbc      	ldrb	r4, [r7, #14]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000b14:	4611      	mov	r1, r2
 8000b16:	229c      	movs	r2, #156	; 0x9c
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f004 fcd9 	bl	80054d0 <memcpy>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000b24:	2301      	movs	r3, #1
 8000b26:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000b2a:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000b2e:	4668      	mov	r0, sp
 8000b30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b34:	f240 4204 	movw	r2, #1028	; 0x404
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f004 fcc9 	bl	80054d0 <memcpy>
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b44:	f000 f8e4 	bl	8000d10 <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d9b6      	bls.n	8000ac2 <RecieveCommandRechthoek+0x22>
		}
	}
}
 8000b54:	bf00      	nop
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b60:	b004      	add	sp, #16
 8000b62:	4770      	bx	lr

08000b64 <RecieveCommandTekst>:

Error RecieveCommandTekst(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000b64:	b084      	sub	sp, #16
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	f107 0014 	add.w	r0, r7, #20
 8000b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000b76:	bf00      	nop
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	b004      	add	sp, #16
 8000b84:	4770      	bx	lr

08000b86 <RecieveCommandBitmap>:

Error RecieveCommandBitmap(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000b86:	b084      	sub	sp, #16
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000b8e:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000b92:	446f      	add	r7, sp
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	f107 001c 	add.w	r0, r7, #28
 8000b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 3; i++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	e01e      	b.n	8000be6 <RecieveCommandBitmap+0x60>
		neededArg = i + 1;
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	3301      	adds	r3, #1
 8000bac:	73bb      	strb	r3, [r7, #14]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000bc2:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000bc6:	4668      	mov	r0, sp
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	f240 4204 	movw	r2, #1028	; 0x404
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f004 fc7d 	bl	80054d0 <memcpy>
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bdc:	f000 f898 	bl	8000d10 <ParseOnKomma>
	for (uint8_t i = 0; i < 3; i++) {
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	3301      	adds	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d9dd      	bls.n	8000ba8 <RecieveCommandBitmap+0x22>
	}
}
 8000bec:	bf00      	nop
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <RecieveCommandWacht>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandWacht(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000c04:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000c08:	446f      	add	r7, sp
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	f107 0014 	add.w	r0, r7, #20
 8000c10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 1, 0, CmdBuf);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000c20:	2301      	movs	r3, #1
 8000c22:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000c26:	2301      	movs	r3, #1
 8000c28:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000c2c:	4668      	mov	r0, sp
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	f240 4204 	movw	r2, #1028	; 0x404
 8000c36:	4619      	mov	r1, r3
 8000c38:	f004 fc4a 	bl	80054d0 <memcpy>
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c42:	f000 f865 	bl	8000d10 <ParseOnKomma>
}
 8000c46:	bf00      	nop
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c52:	b004      	add	sp, #16
 8000c54:	4770      	bx	lr

08000c56 <RecieveCommandHerhaal>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandHerhaal(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000c56:	b084      	sub	sp, #16
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000c5e:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000c62:	446f      	add	r7, sp
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	f107 001c 	add.w	r0, r7, #28
 8000c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 2; i++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e01e      	b.n	8000cb6 <RecieveCommandHerhaal+0x60>
		neededArg = i + 1;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	73bb      	strb	r3, [r7, #14]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 8000c7e:	7bbb      	ldrb	r3, [r7, #14]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 8000c86:	2200      	movs	r2, #0
 8000c88:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000c92:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000c96:	4668      	mov	r0, sp
 8000c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9c:	f240 4204 	movw	r2, #1028	; 0x404
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f004 fc15 	bl	80054d0 <memcpy>
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cac:	f000 f830 	bl	8000d10 <ParseOnKomma>
	for (uint8_t i = 0; i < 2; i++) {
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d9dd      	bls.n	8000c78 <RecieveCommandHerhaal+0x22>
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <RecieveCommandFiguur>:

Error RecieveCommandFiguur(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	f107 0014 	add.w	r0, r7, #20
 8000cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000cde:	bf00      	nop
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	b004      	add	sp, #16
 8000cec:	4770      	bx	lr

08000cee <RecieveCommandCirkel>:

Error RecieveCommandCirkel(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	f107 0014 	add.w	r0, r7, #20
 8000cfc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000d00:	bf00      	nop
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	b004      	add	sp, #16
 8000d0e:	4770      	bx	lr

08000d10 <ParseOnKomma>:
 * @param convertColor
 * @param commandArray
 */
Error ParseOnKomma(input_vars inputStruct, uint8_t neededArgument,
				   uint8_t convertToNumber, int convertColor,
				   CmdStruct *CmdBuf) {
 8000d10:	b084      	sub	sp, #16
 8000d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d16:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000d1a:	f44f 6782 	mov.w	r7, #1040	; 0x410
 8000d1e:	446f      	add	r7, sp
 8000d20:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8000d24:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000d28:	466b      	mov	r3, sp
 8000d2a:	469a      	mov	sl, r3
	uint8_t commaCounter = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73bb      	strb	r3, [r7, #14]
	uint8_t placeInBuf = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
	char incommingMessage[inputStruct.msglen];
 8000d34:	f8d7 6434 	ldr.w	r6, [r7, #1076]	; 0x434
 8000d38:	1e73      	subs	r3, r6, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4632      	mov	r2, r6
 8000d3e:	2300      	movs	r3, #0
 8000d40:	4690      	mov	r8, r2
 8000d42:	4699      	mov	r9, r3
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d58:	4632      	mov	r2, r6
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	4614      	mov	r4, r2
 8000d5e:	461d      	mov	r5, r3
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	00eb      	lsls	r3, r5, #3
 8000d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d6e:	00e2      	lsls	r2, r4, #3
 8000d70:	4633      	mov	r3, r6
 8000d72:	3307      	adds	r3, #7
 8000d74:	08db      	lsrs	r3, r3, #3
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	ebad 0d03 	sub.w	sp, sp, r3
 8000d7c:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000d80:	3300      	adds	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	e09b      	b.n	8000ec2 <ParseOnKomma+0x1b2>
		if (inputStruct.line_rx_buffer[j] == ',') {
 8000d8a:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b2c      	cmp	r3, #44	; 0x2c
 8000d96:	d145      	bne.n	8000e24 <ParseOnKomma+0x114>
			incommingMessage[j] = 0;
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
			placeInBuf = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageParse, sizeof(debugMessageParse), &huart2);
#endif
			if (commaCounter == neededArgument) {
 8000da6:	7bba      	ldrb	r2, [r7, #14]
 8000da8:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d130      	bne.n	8000e12 <ParseOnKomma+0x102>
				if (!commaCounter)
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10f      	bne.n	8000dd6 <ParseOnKomma+0xc6>
					CheckWhatCommand(incommingMessage, CmdBuf, inputStruct);
 8000db6:	4668      	mov	r0, sp
 8000db8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dbc:	f240 420c 	movw	r2, #1036	; 0x40c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f004 fb85 	bl	80054d0 <memcpy>
 8000dc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dca:	cb0c      	ldmia	r3, {r2, r3}
 8000dcc:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f000 f889 	bl	8000ee8 <CheckWhatCommand>
				if (convertColor)
 8000dd6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <ParseOnKomma+0xde>
					CheckWhatColor(incommingMessage, CmdBuf, neededArgument);
 8000dde:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000de2:	461a      	mov	r2, r3
 8000de4:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8000de8:	6838      	ldr	r0, [r7, #0]
 8000dea:	f000 f8b9 	bl	8000f60 <CheckWhatColor>
				if (convertToNumber)
 8000dee:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d06c      	beq.n	8000ed0 <ParseOnKomma+0x1c0>
					CmdBuf->argBuf[neededArgument] = atoi(incommingMessage);
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f004 fb3c 	bl	8005474 <atoi>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000e02:	b291      	uxth	r1, r2
 8000e04:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	809a      	strh	r2, [r3, #4]
				break;
 8000e10:	e05e      	b.n	8000ed0 <ParseOnKomma+0x1c0>
			}
			commaCounter++;
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73bb      	strb	r3, [r7, #14]
			// set the array to 0 again to fill with the argument
			memset(incommingMessage, 0, sizeof(incommingMessage));
 8000e18:	4633      	mov	r3, r6
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	6838      	ldr	r0, [r7, #0]
 8000e20:	f004 fb64 	bl	80054ec <memset>
		}
		if (j == inputStruct.msglen) {
 8000e24:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d12d      	bne.n	8000e8a <ParseOnKomma+0x17a>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	440a      	add	r2, r1
 8000e38:	7811      	ldrb	r1, [r2, #0]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	3301      	adds	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
			if (commaCounter == neededArgument) {
 8000e44:	7bba      	ldrb	r2, [r7, #14]
 8000e46:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d142      	bne.n	8000ed4 <ParseOnKomma+0x1c4>
				if (convertColor)
 8000e4e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <ParseOnKomma+0x156>
					CheckWhatColor(incommingMessage, CmdBuf, neededArgument);
 8000e56:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8000e60:	6838      	ldr	r0, [r7, #0]
 8000e62:	f000 f87d 	bl	8000f60 <CheckWhatColor>
				if (convertToNumber)
 8000e66:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d032      	beq.n	8000ed4 <ParseOnKomma+0x1c4>
					CmdBuf->argBuf[neededArgument] = atoi(incommingMessage);
 8000e6e:	6838      	ldr	r0, [r7, #0]
 8000e70:	f004 fb00 	bl	8005474 <atoi>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000e7a:	b291      	uxth	r1, r2
 8000e7c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	460a      	mov	r2, r1
 8000e86:	809a      	strh	r2, [r3, #4]
			}
			break;
 8000e88:	e024      	b.n	8000ed4 <ParseOnKomma+0x1c4>
		}
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000e8a:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d011      	beq.n	8000ebc <ParseOnKomma+0x1ac>
			inputStruct.line_rx_buffer[j] != ',') {
 8000e98:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000ea2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ea4:	d00a      	beq.n	8000ebc <ParseOnKomma+0x1ac>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	440a      	add	r2, r1
 8000eb0:	7811      	ldrb	r1, [r2, #0]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f77f af5e 	ble.w	8000d8a <ParseOnKomma+0x7a>
 8000ece:	e002      	b.n	8000ed6 <ParseOnKomma+0x1c6>
				break;
 8000ed0:	bf00      	nop
 8000ed2:	e000      	b.n	8000ed6 <ParseOnKomma+0x1c6>
			break;
 8000ed4:	bf00      	nop
 8000ed6:	46d5      	mov	sp, sl
		}
	}
}
 8000ed8:	bf00      	nop
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee4:	b004      	add	sp, #16
 8000ee6:	4770      	bx	lr

08000ee8 <CheckWhatCommand>:
 * @param incommingCommand
 * @param commandArray
 * @param inputStruct
 */
Error CheckWhatCommand(char incommingCommand[], CmdStruct *CmdBuf,
					   input_vars inputStruct) {
 8000ee8:	b082      	sub	sp, #8
 8000eea:	b580      	push	{r7, lr}
 8000eec:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000ef0:	f44f 6781 	mov.w	r7, #1032	; 0x408
 8000ef4:	446f      	add	r7, sp
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	f107 0118 	add.w	r1, r7, #24
 8000efe:	e881 000c 	stmia.w	r1, {r2, r3}
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e01e      	b.n	8000f46 <CheckWhatCommand+0x5e>
		if (strcmp(incommingCommand, possibleCommands[i]) == 0) {
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <CheckWhatCommand+0x74>)
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	4619      	mov	r1, r3
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff f958 	bl	80001c8 <strcmp>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d110      	bne.n	8000f40 <CheckWhatCommand+0x58>
			CmdBuf->commandNummer = i;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	601a      	str	r2, [r3, #0]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageCommand, sizeof(debugMessageCommand),
						&huart2);
#endif
			DoOnCommand(CmdBuf, inputStruct);
 8000f24:	4668      	mov	r0, sp
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f004 face 	bl	80054d0 <memcpy>
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f000 f840 	bl	8000fc0 <DoOnCommand>
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	3301      	adds	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d9dd      	bls.n	8000f08 <CheckWhatCommand+0x20>
		}
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f58:	b002      	add	sp, #8
 8000f5a:	4770      	bx	lr
 8000f5c:	20000004 	.word	0x20000004

08000f60 <CheckWhatColor>:
 * @param incommingColor
 * @param commandArray
 * @param argPlace
 */
Error CheckWhatColor(char incommingColor[], CmdStruct *CmdBuf,
					 uint8_t argPlace) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	75fb      	strb	r3, [r7, #23]
 8000f72:	e018      	b.n	8000fa6 <CheckWhatColor+0x46>
		if (strcmp(incommingColor, possibleColors[i]) == 0) {
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <CheckWhatColor+0x58>)
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f7ff f922 	bl	80001c8 <strcmp>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10a      	bne.n	8000fa0 <CheckWhatColor+0x40>
			CmdBuf->argBuf[argPlace] = colorCodes[i];
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <CheckWhatColor+0x5c>)
 8000f8e:	5cd2      	ldrb	r2, [r2, r3]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	b291      	uxth	r1, r2
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	809a      	strh	r2, [r3, #4]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageColor, sizeof(debugMessageColor), &huart2);
#endif
			break;
 8000f9e:	e005      	b.n	8000fac <CheckWhatColor+0x4c>
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	75fb      	strb	r3, [r7, #23]
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d9e3      	bls.n	8000f74 <CheckWhatColor+0x14>
		}
	}
}
 8000fac:	bf00      	nop
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	20000068 	.word	0x20000068

08000fc0 <DoOnCommand>:
 * of the args
 *
 * @param commandArray
 * @param inputStruct
 */
Error DoOnCommand(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	b590      	push	{r4, r7, lr}
 8000fc4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8000fc8:	f44f 6781 	mov.w	r7, #1032	; 0x408
 8000fcc:	446f      	add	r7, sp
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	f107 001c 	add.w	r0, r7, #28
 8000fd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	switch (CmdBuf->commandNummer) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	f200 80a5 	bhi.w	800112c <DoOnCommand+0x16c>
 8000fe2:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <DoOnCommand+0x28>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	0800100d 	.word	0x0800100d
 8000fec:	0800102d 	.word	0x0800102d
 8000ff0:	0800104d 	.word	0x0800104d
 8000ff4:	0800106d 	.word	0x0800106d
 8000ff8:	0800108d 	.word	0x0800108d
 8000ffc:	080010ad 	.word	0x080010ad
 8001000:	080010cd 	.word	0x080010cd
 8001004:	080010ed 	.word	0x080010ed
 8001008:	0800110d 	.word	0x0800110d
		case 0:
			// lijn
			RecieveCommandLijn(&CmdBuf, inputStruct);
 800100c:	1d3c      	adds	r4, r7, #4
 800100e:	4668      	mov	r0, sp
 8001010:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001014:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001018:	4619      	mov	r1, r3
 800101a:	f004 fa59 	bl	80054d0 <memcpy>
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff fca7 	bl	8000978 <RecieveCommandLijn>
			break;
 800102a:	e07f      	b.n	800112c <DoOnCommand+0x16c>
		case 1:
			// clearscherm
			RecieveCommandClear(&CmdBuf, inputStruct);
 800102c:	1d3c      	adds	r4, r7, #4
 800102e:	4668      	mov	r0, sp
 8001030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001034:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001038:	4619      	mov	r1, r3
 800103a:	f004 fa49 	bl	80054d0 <memcpy>
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff fcf9 	bl	8000a3c <RecieveCommandClear>
			break;
 800104a:	e06f      	b.n	800112c <DoOnCommand+0x16c>
		case 2:
			// rechthoek
			RecieveCommandRechthoek(&CmdBuf, inputStruct);
 800104c:	1d3c      	adds	r4, r7, #4
 800104e:	4668      	mov	r0, sp
 8001050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001054:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001058:	4619      	mov	r1, r3
 800105a:	f004 fa39 	bl	80054d0 <memcpy>
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001064:	4620      	mov	r0, r4
 8001066:	f7ff fd1b 	bl	8000aa0 <RecieveCommandRechthoek>
			break;
 800106a:	e05f      	b.n	800112c <DoOnCommand+0x16c>
		case 3:
			// wacht
			RecieveCommandWacht(&CmdBuf, inputStruct);
 800106c:	1d3c      	adds	r4, r7, #4
 800106e:	4668      	mov	r0, sp
 8001070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001074:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001078:	4619      	mov	r1, r3
 800107a:	f004 fa29 	bl	80054d0 <memcpy>
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff fdb9 	bl	8000bfc <RecieveCommandWacht>
			break;
 800108a:	e04f      	b.n	800112c <DoOnCommand+0x16c>
		case 4:
			// tekst
			RecieveCommandTekst(&CmdBuf, inputStruct);
 800108c:	1d3c      	adds	r4, r7, #4
 800108e:	4668      	mov	r0, sp
 8001090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001094:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001098:	4619      	mov	r1, r3
 800109a:	f004 fa19 	bl	80054d0 <memcpy>
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff fd5d 	bl	8000b64 <RecieveCommandTekst>
			break;
 80010aa:	e03f      	b.n	800112c <DoOnCommand+0x16c>
		case 5:
			// bitmap
			RecieveCommandBitmap(&CmdBuf, inputStruct);
 80010ac:	1d3c      	adds	r4, r7, #4
 80010ae:	4668      	mov	r0, sp
 80010b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b4:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010b8:	4619      	mov	r1, r3
 80010ba:	f004 fa09 	bl	80054d0 <memcpy>
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff fd5e 	bl	8000b86 <RecieveCommandBitmap>
			break;
 80010ca:	e02f      	b.n	800112c <DoOnCommand+0x16c>
		case 6:
			// cirkel
			RecieveCommandCirkel(&CmdBuf, inputStruct);
 80010cc:	1d3c      	adds	r4, r7, #4
 80010ce:	4668      	mov	r0, sp
 80010d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d4:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010d8:	4619      	mov	r1, r3
 80010da:	f004 f9f9 	bl	80054d0 <memcpy>
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e4:	4620      	mov	r0, r4
 80010e6:	f7ff fe02 	bl	8000cee <RecieveCommandCirkel>
			break;
 80010ea:	e01f      	b.n	800112c <DoOnCommand+0x16c>
		case 7:
			// figuur
			RecieveCommandFiguur(&CmdBuf, inputStruct);
 80010ec:	1d3c      	adds	r4, r7, #4
 80010ee:	4668      	mov	r0, sp
 80010f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f4:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010f8:	4619      	mov	r1, r3
 80010fa:	f004 f9e9 	bl	80054d0 <memcpy>
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff fde1 	bl	8000ccc <RecieveCommandFiguur>
			break;
 800110a:	e00f      	b.n	800112c <DoOnCommand+0x16c>
		case 8:
			// herhaal
			RecieveCommandHerhaal(&CmdBuf, inputStruct);
 800110c:	1d3c      	adds	r4, r7, #4
 800110e:	4668      	mov	r0, sp
 8001110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001114:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8001118:	4619      	mov	r1, r3
 800111a:	f004 f9d9 	bl	80054d0 <memcpy>
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff fd96 	bl	8000c56 <RecieveCommandHerhaal>
			break;
 800112a:	bf00      	nop
	}
}
 800112c:	bf00      	nop
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001138:	b004      	add	sp, #16
 800113a:	4770      	bx	lr

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_DMA_Init+0x3c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <MX_DMA_Init+0x3c>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_DMA_Init+0x3c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2044      	movs	r0, #68	; 0x44
 8001164:	f001 f829 	bl	80021ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001168:	2044      	movs	r0, #68	; 0x44
 800116a:	f001 f842 	bl	80021f2 <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <MX_GPIO_Init+0xe4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a31      	ldr	r2, [pc, #196]	; (8001260 <MX_GPIO_Init+0xe4>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a2a      	ldr	r2, [pc, #168]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a23      	ldr	r2, [pc, #140]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011d4:	f043 0310 	orr.w	r3, r3, #16
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001208:	4816      	ldr	r0, [pc, #88]	; (8001264 <MX_GPIO_Init+0xe8>)
 800120a:	f001 fd3b 	bl	8002c84 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	4814      	ldr	r0, [pc, #80]	; (8001268 <MX_GPIO_Init+0xec>)
 8001216:	f001 fd35 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800121a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800121e:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_GPIO_Init+0xe8>)
 8001234:	f001 fb8a 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_GPIO_Init+0xec>)
 8001252:	f001 fb7b 	bl	800294c <HAL_GPIO_Init>

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40021000 	.word	0x40021000
 8001268:	40020400 	.word	0x40020400

0800126c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800126c:	b5b0      	push	{r4, r5, r7, lr}
 800126e:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
 8001272:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8001276:	446f      	add	r7, sp

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8001278:	f000 fe52 	bl	8001f20 <HAL_Init>
  CmdStruct arg_struct;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f8ae 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f7ff ff7c 	bl	800117c <MX_GPIO_Init>
  MX_DMA_Init();
 8001284:	f7ff ff5a 	bl	800113c <MX_DMA_Init>
  MX_TIM1_Init();
 8001288:	f000 fa50 	bl	800172c <MX_TIM1_Init>
  MX_TIM2_Init();
 800128c:	f000 fa9e 	bl	80017cc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001290:	f000 fbb4 	bl	80019fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init();  // Init VGA-Screen
 8001294:	f000 fda6 	bl	8001de4 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8001298:	2000      	movs	r0, #0
 800129a:	f000 fdf5 	bl	8001e88 <UB_VGA_FillScreen>
  UB_VGA_FillScreen(VGA_COL_WHITE);
 800129e:	20ff      	movs	r0, #255	; 0xff
 80012a0:	f000 fdf2 	bl	8001e88 <UB_VGA_FillScreen>
  int i;

  for (i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80012aa:	e00b      	b.n	80012c4 <main+0x58>
 80012ac:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <main+0x168>)
 80012ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012b2:	4413      	add	r3, r2
 80012b4:	3301      	adds	r3, #1
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012be:	3301      	adds	r3, #1
 80012c0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80012c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012cc:	dbee      	blt.n	80012ac <main+0x40>

  //  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <main+0x168>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 80012d4:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <main+0x168>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  input.command_execute_flag = FALSE;
 80012dc:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <main+0x168>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

  // HAl wants a memory location to store the charachter it receives from the
  // UART We will pass it an array, but we will not use it. We declare our own
  // variable in the interupt handler See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 80012e4:	2201      	movs	r2, #1
 80012e6:	493b      	ldr	r1, [pc, #236]	; (80013d4 <main+0x168>)
 80012e8:	483b      	ldr	r0, [pc, #236]	; (80013d8 <main+0x16c>)
 80012ea:	f003 f960 	bl	80045ae <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  CmdStruct temp;
  while (1) {
    if (input.command_execute_flag == TRUE) {
 80012ee:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <main+0x168>)
 80012f0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80012f4:	2bff      	cmp	r3, #255	; 0xff
 80012f6:	d1fa      	bne.n	80012ee <main+0x82>
      // Do some stuff
      ParseOnKomma(input, 0, 0, 0, &arg_struct);
 80012f8:	4c36      	ldr	r4, [pc, #216]	; (80013d4 <main+0x168>)
 80012fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012fe:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8001302:	2300      	movs	r3, #0
 8001304:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8001308:	2300      	movs	r3, #0
 800130a:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 800130e:	2300      	movs	r3, #0
 8001310:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8001314:	4668      	mov	r0, sp
 8001316:	f104 0310 	add.w	r3, r4, #16
 800131a:	f240 4204 	movw	r2, #1028	; 0x404
 800131e:	4619      	mov	r1, r3
 8001320:	f004 f8d6 	bl	80054d0 <memcpy>
 8001324:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001328:	f7ff fcf2 	bl	8000d10 <ParseOnKomma>
      switch(arg_struct.commandNummer)
 800132c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001330:	2b02      	cmp	r3, #2
 8001332:	d02d      	beq.n	8001390 <main+0x124>
 8001334:	2b02      	cmp	r3, #2
 8001336:	dc47      	bgt.n	80013c8 <main+0x15c>
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <main+0xd6>
 800133c:	2b01      	cmp	r3, #1
 800133e:	d01c      	beq.n	800137a <main+0x10e>
 8001340:	e042      	b.n	80013c8 <main+0x15c>
      {
      case 0:
    	  DrawLine(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3], arg_struct.argBuf[4], arg_struct.argBuf[5], arg_struct.argBuf[6]);
 8001342:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001346:	4618      	mov	r0, r3
 8001348:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800134c:	4619      	mov	r1, r3
 800134e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001352:	461c      	mov	r4, r3
 8001354:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001358:	461d      	mov	r5, r3
 800135a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800135e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	462b      	mov	r3, r5
 8001368:	4622      	mov	r2, r4
 800136a:	f000 fc83 	bl	8001c74 <DrawLine>
    	  CircBufPush(&arg_struct);
 800136e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fac0 	bl	80008f8 <CircBufPush>
    	  break;
 8001378:	e026      	b.n	80013c8 <main+0x15c>
      case 1:
    	  ClearScreen(arg_struct.argBuf[1]);
 800137a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fd22 	bl	8001dc8 <ClearScreen>
    	  CircBufPush(&arg_struct);
 8001384:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fab5 	bl	80008f8 <CircBufPush>
    	  break;
 800138e:	e01b      	b.n	80013c8 <main+0x15c>
      case 2:
    	  DrawRectangle(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3], arg_struct.argBuf[4], arg_struct.argBuf[5], arg_struct.argBuf[6]);
 8001390:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001394:	4618      	mov	r0, r3
 8001396:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800139a:	4619      	mov	r1, r3
 800139c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80013a0:	461c      	mov	r4, r3
 80013a2:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80013a6:	461d      	mov	r5, r3
 80013a8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80013ac:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	462b      	mov	r3, r5
 80013b6:	4622      	mov	r2, r4
 80013b8:	f000 fbc3 	bl	8001b42 <DrawRectangle>
    	  CircBufPush(&arg_struct);
 80013bc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fa99 	bl	80008f8 <CircBufPush>
    	  break;
 80013c6:	bf00      	nop
      }


      // When finished reset the flag
      input.command_execute_flag = FALSE;
 80013c8:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <main+0x168>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    if (input.command_execute_flag == TRUE) {
 80013d0:	e78d      	b.n	80012ee <main+0x82>
 80013d2:	bf00      	nop
 80013d4:	20002808 	.word	0x20002808
 80013d8:	20002cfc 	.word	0x20002cfc

080013dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	; 0x50
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	2230      	movs	r2, #48	; 0x30
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f004 f87e 	bl	80054ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <SystemClock_Config+0xcc>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <SystemClock_Config+0xcc>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <SystemClock_Config+0xcc>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <SystemClock_Config+0xd0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a21      	ldr	r2, [pc, #132]	; (80014ac <SystemClock_Config+0xd0>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <SystemClock_Config+0xd0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001446:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800144c:	2304      	movs	r3, #4
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001450:	23a8      	movs	r3, #168	; 0xa8
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001454:	2302      	movs	r3, #2
 8001456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001458:	2304      	movs	r3, #4
 800145a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fc29 	bl	8002cb8 <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x94>
    Error_Handler();
 800146c:	f000 f820 	bl	80014b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001470:	230f      	movs	r3, #15
 8001472:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001474:	2302      	movs	r3, #2
 8001476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800147c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2105      	movs	r1, #5
 800148e:	4618      	mov	r0, r3
 8001490:	f001 fe80 	bl	8003194 <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0xc2>
    Error_Handler();
 800149a:	f000 f809 	bl	80014b0 <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3750      	adds	r7, #80	; 0x50
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000

080014b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_MspInit+0x4c>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_MspInit+0x4c>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 fd2e 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001570:	4828      	ldr	r0, [pc, #160]	; (8001614 <TIM2_IRQHandler+0xa8>)
 8001572:	f002 f96b 	bl	800384c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <TIM2_IRQHandler+0xa8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f06f 0208 	mvn.w	r2, #8
 800157e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <TIM2_IRQHandler+0xac>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <TIM2_IRQHandler+0xac>)
 800158a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <TIM2_IRQHandler+0xac>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001594:	d905      	bls.n	80015a2 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <TIM2_IRQHandler+0xac>)
 8001598:	2200      	movs	r2, #0
 800159a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 800159c:	4a1f      	ldr	r2, [pc, #124]	; (800161c <TIM2_IRQHandler+0xb0>)
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <TIM2_IRQHandler+0xac>)
 80015a0:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <TIM2_IRQHandler+0xac>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d802      	bhi.n	80015b0 <TIM2_IRQHandler+0x44>
 80015aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015ae:	e001      	b.n	80015b4 <TIM2_IRQHandler+0x48>
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <TIM2_IRQHandler+0xb4>)
 80015b6:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <TIM2_IRQHandler+0xac>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	2b23      	cmp	r3, #35	; 0x23
 80015be:	d927      	bls.n	8001610 <TIM2_IRQHandler+0xa4>
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <TIM2_IRQHandler+0xac>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	f240 2202 	movw	r2, #514	; 0x202
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d821      	bhi.n	8001610 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80015cc:	4a15      	ldr	r2, [pc, #84]	; (8001624 <TIM2_IRQHandler+0xb8>)
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <TIM2_IRQHandler+0xac>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80015d4:	4a13      	ldr	r2, [pc, #76]	; (8001624 <TIM2_IRQHandler+0xb8>)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <TIM2_IRQHandler+0xac>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <TIM2_IRQHandler+0xbc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <TIM2_IRQHandler+0xbc>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <TIM2_IRQHandler+0xc0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <TIM2_IRQHandler+0xc0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <TIM2_IRQHandler+0xac>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <TIM2_IRQHandler+0xac>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f203 1341 	addw	r3, r3, #321	; 0x141
 800160c:	4a02      	ldr	r2, [pc, #8]	; (8001618 <TIM2_IRQHandler+0xac>)
 800160e:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20002c5c 	.word	0x20002c5c
 8001618:	20015a2c 	.word	0x20015a2c
 800161c:	20002d3c 	.word	0x20002d3c
 8001620:	40020400 	.word	0x40020400
 8001624:	40026488 	.word	0x40026488
 8001628:	40010000 	.word	0x40010000
 800162c:	20002c9c 	.word	0x20002c9c

08001630 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <USART2_IRQHandler+0x70>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2b0a      	cmp	r3, #10
 8001640:	d026      	beq.n	8001690 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b0d      	cmp	r3, #13
 8001646:	d002      	beq.n	800164e <USART2_IRQHandler+0x1e>
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b2e      	cmp	r3, #46	; 0x2e
 800164c:	d10e      	bne.n	800166c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <USART2_IRQHandler+0x74>)
 8001650:	22ff      	movs	r2, #255	; 0xff
 8001652:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			// Store the message length for processing
			input.msglen = input.char_counter;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <USART2_IRQHandler+0x74>)
 8001658:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <USART2_IRQHandler+0x74>)
 800165e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <USART2_IRQHandler+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 800166a:	e011      	b.n	8001690 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <USART2_IRQHandler+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <USART2_IRQHandler+0x74>)
 8001676:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <USART2_IRQHandler+0x74>)
 800167c:	4413      	add	r3, r2
 800167e:	79fa      	ldrb	r2, [r7, #7]
 8001680:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <USART2_IRQHandler+0x74>)
 8001684:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001688:	3301      	adds	r3, #1
 800168a:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <USART2_IRQHandler+0x74>)
 800168c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <USART2_IRQHandler+0x78>)
 8001692:	f002 ffe1 	bl	8004658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40004400 	.word	0x40004400
 80016a4:	20002808 	.word	0x20002808
 80016a8:	20002cfc 	.word	0x20002cfc

080016ac <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <DMA2_Stream5_IRQHandler+0x48>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a1a      	ldr	r2, [r3, #32]
 80016b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <DMA2_Stream5_IRQHandler+0x34>
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <DMA2_Stream5_IRQHandler+0x48>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	f240 4344 	movw	r3, #1092	; 0x444
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <DMA2_Stream5_IRQHandler+0x34>
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <DMA2_Stream5_IRQHandler+0x48>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <DMA2_Stream5_IRQHandler+0x48>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <DMA2_Stream5_IRQHandler+0x4c>)
 80016e2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80016e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <DMA2_Stream5_IRQHandler+0x50>)
 80016ea:	f000 fec5 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20002c1c 	.word	0x20002c1c
 80016f8:	40021000 	.word	0x40021000
 80016fc:	20002c9c 	.word	0x20002c9c

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <SystemInit+0x28>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	4a07      	ldr	r2, [pc, #28]	; (8001728 <SystemInit+0x28>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SystemInit+0x28>)
 8001716:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800171a:	609a      	str	r2, [r3, #8]
#endif
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	463b      	mov	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <MX_TIM1_Init+0x98>)
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <MX_TIM1_Init+0x9c>)
 800174c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <MX_TIM1_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_TIM1_Init+0x98>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <MX_TIM1_Init+0x98>)
 800175c:	220b      	movs	r2, #11
 800175e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_TIM1_Init+0x98>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_TIM1_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_TIM1_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <MX_TIM1_Init+0x98>)
 8001774:	f001 ff2e 	bl	80035d4 <HAL_TIM_Base_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800177e:	f7ff fe97 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4619      	mov	r1, r3
 800178e:	480d      	ldr	r0, [pc, #52]	; (80017c4 <MX_TIM1_Init+0x98>)
 8001790:	f002 fa2a 	bl	8003be8 <HAL_TIM_ConfigClockSource>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800179a:	f7ff fe89 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017a6:	463b      	mov	r3, r7
 80017a8:	4619      	mov	r1, r3
 80017aa:	4806      	ldr	r0, [pc, #24]	; (80017c4 <MX_TIM1_Init+0x98>)
 80017ac:	f002 fe22 	bl	80043f4 <HAL_TIMEx_MasterConfigSynchronization>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80017b6:	f7ff fe7b 	bl	80014b0 <Error_Handler>
  }

}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20002c1c 	.word	0x20002c1c
 80017c8:	40010000 	.word	0x40010000

080017cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <MX_TIM2_Init+0xcc>)
 80017f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80017f6:	4b28      	ldr	r3, [pc, #160]	; (8001898 <MX_TIM2_Init+0xcc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <MX_TIM2_Init+0xcc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <MX_TIM2_Init+0xcc>)
 8001804:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <MX_TIM2_Init+0xcc>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_TIM2_Init+0xcc>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001816:	4820      	ldr	r0, [pc, #128]	; (8001898 <MX_TIM2_Init+0xcc>)
 8001818:	f001 ff2b 	bl	8003672 <HAL_TIM_PWM_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001822:	f7ff fe45 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	4619      	mov	r1, r3
 8001834:	4818      	ldr	r0, [pc, #96]	; (8001898 <MX_TIM2_Init+0xcc>)
 8001836:	f002 fddd 	bl	80043f4 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001840:	f7ff fe36 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001844:	2360      	movs	r3, #96	; 0x60
 8001846:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001848:	f240 13bb 	movw	r3, #443	; 0x1bb
 800184c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800184e:	2302      	movs	r3, #2
 8001850:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2208      	movs	r2, #8
 800185a:	4619      	mov	r1, r3
 800185c:	480e      	ldr	r0, [pc, #56]	; (8001898 <MX_TIM2_Init+0xcc>)
 800185e:	f002 f8fd 	bl	8003a5c <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001868:	f7ff fe22 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 800186c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	220c      	movs	r2, #12
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_TIM2_Init+0xcc>)
 800187a:	f002 f8ef 	bl	8003a5c <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001884:	f7ff fe14 	bl	80014b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <MX_TIM2_Init+0xcc>)
 800188a:	f000 f87f 	bl	800198c <HAL_TIM_MspPostInit>

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20002c5c 	.word	0x20002c5c

0800189c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a21      	ldr	r2, [pc, #132]	; (8001930 <HAL_TIM_Base_MspInit+0x94>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d13c      	bne.n	8001928 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_TIM_Base_MspInit+0x98>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a1f      	ldr	r2, [pc, #124]	; (8001934 <HAL_TIM_Base_MspInit+0x98>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <HAL_TIM_Base_MspInit+0x98>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <HAL_TIM_Base_MspInit+0xa0>)
 80018ce:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 80018d2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80018d6:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 80018e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ea:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 8001900:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001904:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 8001908:	2200      	movs	r2, #0
 800190a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800190c:	480a      	ldr	r0, [pc, #40]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 800190e:	f000 fc8b 	bl	8002228 <HAL_DMA_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001918:	f7ff fdca 	bl	80014b0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a06      	ldr	r2, [pc, #24]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 8001920:	621a      	str	r2, [r3, #32]
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <HAL_TIM_Base_MspInit+0x9c>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010000 	.word	0x40010000
 8001934:	40023800 	.word	0x40023800
 8001938:	20002c9c 	.word	0x20002c9c
 800193c:	40026488 	.word	0x40026488

08001940 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d115      	bne.n	800197e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_TIM_PWM_MspInit+0x48>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <HAL_TIM_PWM_MspInit+0x48>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_TIM_PWM_MspInit+0x48>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	201c      	movs	r0, #28
 8001974:	f000 fc21 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001978:	201c      	movs	r0, #28
 800197a:	f000 fc3a 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ac:	d11e      	bne.n	80019ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_TIM_MspPostInit+0x68>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <HAL_TIM_MspPostInit+0x68>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_TIM_MspPostInit+0x68>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 80019ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019dc:	2301      	movs	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	4619      	mov	r1, r3
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <HAL_TIM_MspPostInit+0x6c>)
 80019e8:	f000 ffb0 	bl	800294c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020400 	.word	0x40020400

080019fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_USART2_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a34:	f002 fd6e 	bl	8004514 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f7ff fd37 	bl	80014b0 <Error_Handler>
  }

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20002cfc 	.word	0x20002cfc
 8001a4c:	40004400 	.word	0x40004400

08001a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <HAL_UART_MspInit+0x94>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d133      	bne.n	8001ada <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_UART_MspInit+0x98>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aba:	2307      	movs	r3, #7
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_UART_MspInit+0x9c>)
 8001ac6:	f000 ff41 	bl	800294c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2026      	movs	r0, #38	; 0x26
 8001ad0:	f000 fb73 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ad4:	2026      	movs	r0, #38	; 0x26
 8001ad6:	f000 fb8c 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40004400 	.word	0x40004400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020000 	.word	0x40020000

08001af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001af6:	e003      	b.n	8001b00 <LoopCopyDataInit>

08001af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001afe:	3104      	adds	r1, #4

08001b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b08:	d3f6      	bcc.n	8001af8 <CopyDataInit>
  ldr  r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b0c:	e002      	b.n	8001b14 <LoopFillZerobss>

08001b0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b10:	f842 3b04 	str.w	r3, [r2], #4

08001b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b18:	d3f9      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b1a:	f7ff fdf1 	bl	8001700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f003 fcb3 	bl	8005488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7ff fba3 	bl	800126c <main>
  bx  lr    
 8001b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b2c:	0800595c 	.word	0x0800595c
  ldr  r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b34:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 8001b38:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 8001b3c:	20015a3c 	.word	0x20015a3c

08001b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC_IRQHandler>

08001b42 <DrawRectangle>:
 * @param color
 * @param filled
 * @return
 */
int DrawRectangle(uint8_t xp, uint8_t yp, uint8_t Width, uint8_t Heigth,
		uint8_t color, uint8_t filled) {
 8001b42:	b590      	push	{r4, r7, lr}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4604      	mov	r4, r0
 8001b4a:	4608      	mov	r0, r1
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4623      	mov	r3, r4
 8001b52:	71fb      	strb	r3, [r7, #7]
 8001b54:	4603      	mov	r3, r0
 8001b56:	71bb      	strb	r3, [r7, #6]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	717b      	strb	r3, [r7, #5]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	713b      	strb	r3, [r7, #4]
	if (filled == 0) {
 8001b60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d120      	bne.n	8001baa <DrawRectangle+0x68>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e017      	b.n	8001b9e <DrawRectangle+0x5c>
			for (uint8_t x = xp; x < xp + Width; x++) {
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	73bb      	strb	r3, [r7, #14]
 8001b72:	e00b      	b.n	8001b8c <DrawRectangle+0x4a>
				UB_VGA_SetPixel(x, y, color);
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	b291      	uxth	r1, r2
 8001b7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 f9a5 	bl	8001ed0 <UB_VGA_SetPixel>
			for (uint8_t x = xp; x < xp + Width; x++) {
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	73bb      	strb	r3, [r7, #14]
 8001b8c:	7bba      	ldrb	r2, [r7, #14]
 8001b8e:	79f9      	ldrb	r1, [r7, #7]
 8001b90:	797b      	ldrb	r3, [r7, #5]
 8001b92:	440b      	add	r3, r1
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbed      	blt.n	8001b74 <DrawRectangle+0x32>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	79b9      	ldrb	r1, [r7, #6]
 8001ba2:	793b      	ldrb	r3, [r7, #4]
 8001ba4:	440b      	add	r3, r1
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbe1      	blt.n	8001b6e <DrawRectangle+0x2c>
			}
		}
	}
	//rectangle not filled, only lines
	if (filled == 1) {
 8001baa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d15b      	bne.n	8001c6a <DrawRectangle+0x128>
		//top line
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	737b      	strb	r3, [r7, #13]
 8001bb6:	e00b      	b.n	8001bd0 <DrawRectangle+0x8e>
			UB_VGA_SetPixel(x, yp, color);
 8001bb8:	7b7b      	ldrb	r3, [r7, #13]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	79ba      	ldrb	r2, [r7, #6]
 8001bbe:	b291      	uxth	r1, r2
 8001bc0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f983 	bl	8001ed0 <UB_VGA_SetPixel>
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001bca:	7b7b      	ldrb	r3, [r7, #13]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	737b      	strb	r3, [r7, #13]
 8001bd0:	7b7a      	ldrb	r2, [r7, #13]
 8001bd2:	79f9      	ldrb	r1, [r7, #7]
 8001bd4:	797b      	ldrb	r3, [r7, #5]
 8001bd6:	440b      	add	r3, r1
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbed      	blt.n	8001bb8 <DrawRectangle+0x76>
		}
		//bottom line
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	733b      	strb	r3, [r7, #12]
 8001be0:	e00f      	b.n	8001c02 <DrawRectangle+0xc0>
			UB_VGA_SetPixel(x, yp + Heigth, color);
 8001be2:	7b3b      	ldrb	r3, [r7, #12]
 8001be4:	b298      	uxth	r0, r3
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	793b      	ldrb	r3, [r7, #4]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f000 f96a 	bl	8001ed0 <UB_VGA_SetPixel>
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001bfc:	7b3b      	ldrb	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	733b      	strb	r3, [r7, #12]
 8001c02:	7b3a      	ldrb	r2, [r7, #12]
 8001c04:	79f9      	ldrb	r1, [r7, #7]
 8001c06:	797b      	ldrb	r3, [r7, #5]
 8001c08:	440b      	add	r3, r1
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dbe9      	blt.n	8001be2 <DrawRectangle+0xa0>
		}

		//Left vertical line
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001c0e:	79bb      	ldrb	r3, [r7, #6]
 8001c10:	72fb      	strb	r3, [r7, #11]
 8001c12:	e00b      	b.n	8001c2c <DrawRectangle+0xea>
			UB_VGA_SetPixel(xp, y, color);
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	7afa      	ldrb	r2, [r7, #11]
 8001c1a:	b291      	uxth	r1, r2
 8001c1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f955 	bl	8001ed0 <UB_VGA_SetPixel>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	72fb      	strb	r3, [r7, #11]
 8001c2c:	7afa      	ldrb	r2, [r7, #11]
 8001c2e:	79b9      	ldrb	r1, [r7, #6]
 8001c30:	793b      	ldrb	r3, [r7, #4]
 8001c32:	440b      	add	r3, r1
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbed      	blt.n	8001c14 <DrawRectangle+0xd2>

		}
		//Right vertical line
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	72bb      	strb	r3, [r7, #10]
 8001c3c:	e00f      	b.n	8001c5e <DrawRectangle+0x11c>
			UB_VGA_SetPixel(xp + Width, y, color);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	797b      	ldrb	r3, [r7, #5]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	7aba      	ldrb	r2, [r7, #10]
 8001c4c:	b291      	uxth	r1, r2
 8001c4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f93c 	bl	8001ed0 <UB_VGA_SetPixel>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001c58:	7abb      	ldrb	r3, [r7, #10]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	72bb      	strb	r3, [r7, #10]
 8001c5e:	7aba      	ldrb	r2, [r7, #10]
 8001c60:	79b9      	ldrb	r1, [r7, #6]
 8001c62:	793b      	ldrb	r3, [r7, #4]
 8001c64:	440b      	add	r3, r1
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbe9      	blt.n	8001c3e <DrawRectangle+0xfc>
		}
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}

08001c74 <DrawLine>:
 * @param color
 * @param thickness
 * @return
 */
int DrawLine(uint8_t xp1, uint8_t yp1, uint8_t xp2, uint8_t yp2, uint8_t color,
		uint8_t thickness) {
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b08d      	sub	sp, #52	; 0x34
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4623      	mov	r3, r4
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	4603      	mov	r3, r0
 8001c88:	71bb      	strb	r3, [r7, #6]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	717b      	strb	r3, [r7, #5]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	713b      	strb	r3, [r7, #4]
	int dx = xp2 - xp1;
 8001c92:	797a      	ldrb	r2, [r7, #5]
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	61fb      	str	r3, [r7, #28]
	int dy = yp2 - yp1;
 8001c9a:	793a      	ldrb	r2, [r7, #4]
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	61bb      	str	r3, [r7, #24]

	// calculate steps required for generating pixels
	int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ca8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bfb8      	it	lt
 8001cb2:	425b      	neglt	r3, r3
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	bfb8      	it	lt
 8001cb8:	4613      	movlt	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

	// calculate increment in x & y for each steps
	float Xinc = dx / (float) steps;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cd4:	edc7 7a04 	vstr	s15, [r7, #16]
	float Yinc = dy / (float) steps;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf0:	edc7 7a03 	vstr	s15, [r7, #12]

	// Put pixel for each step
	for (int j = 0 - abs(thickness / 2); j <= abs(thickness / 2); j++) {
 8001cf4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d00:	e053      	b.n	8001daa <DrawLine+0x136>
		float X = xp1 + 0.5;
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fbbb 	bl	8000480 <__aeabi_i2d>
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <DrawLine+0x150>)
 8001d10:	f7fe fa6a 	bl	80001e8 <__adddf3>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe fc1a 	bl	8000554 <__aeabi_d2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
		float Y = yp1 + j + 0.5;
 8001d24:	79ba      	ldrb	r2, [r7, #6]
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	4413      	add	r3, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fba8 	bl	8000480 <__aeabi_i2d>
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <DrawLine+0x150>)
 8001d36:	f7fe fa57 	bl	80001e8 <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe fc07 	bl	8000554 <__aeabi_d2f>
 8001d46:	4603      	mov	r3, r0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i <= steps; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	e025      	b.n	8001d9c <DrawLine+0x128>
			UB_VGA_SetPixel(X, Y, color);
 8001d50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d58:	ee17 3a90 	vmov	r3, s15
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d66:	ee17 2a90 	vmov	r2, s15
 8001d6a:	b291      	uxth	r1, r2
 8001d6c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f8ad 	bl	8001ed0 <UB_VGA_SetPixel>
			X += Xinc; // increment in x at each step
 8001d76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001d7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d82:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			Y += Yinc;
 8001d86:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (int i = 0; i <= steps; i++) {
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
 8001d9c:	6a3a      	ldr	r2, [r7, #32]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	ddd5      	ble.n	8001d50 <DrawLine+0xdc>
	for (int j = 0 - abs(thickness / 2); j <= abs(thickness / 2); j++) {
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	3301      	adds	r3, #1
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001daa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	4293      	cmp	r3, r2
 8001db8:	dda3      	ble.n	8001d02 <DrawLine+0x8e>
		}
	}
}
 8001dba:	bf00      	nop
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3734      	adds	r7, #52	; 0x34
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	3fe00000 	.word	0x3fe00000

08001dc8 <ClearScreen>:
 * @brief Clears the screen in the specified color
 *
 * @param color
 * @return
 */
int ClearScreen(uint8_t color) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f857 	bl	8001e88 <UB_VGA_FillScreen>
}
 8001dda:	bf00      	nop
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <UB_VGA_Screen_Init+0x84>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <UB_VGA_Screen_Init+0x84>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <UB_VGA_Screen_Init+0x84>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <UB_VGA_Screen_Init+0x88>)
 8001dfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e00:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001e02:	481b      	ldr	r0, [pc, #108]	; (8001e70 <UB_VGA_Screen_Init+0x8c>)
 8001e04:	f001 fc11 	bl	800362a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e08:	210c      	movs	r1, #12
 8001e0a:	4819      	ldr	r0, [pc, #100]	; (8001e70 <UB_VGA_Screen_Init+0x8c>)
 8001e0c:	f001 fc5c 	bl	80036c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001e10:	2108      	movs	r1, #8
 8001e12:	4817      	ldr	r0, [pc, #92]	; (8001e70 <UB_VGA_Screen_Init+0x8c>)
 8001e14:	f001 fc96 	bl	8003744 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <UB_VGA_Screen_Init+0x90>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <UB_VGA_Screen_Init+0x90>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e26:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <UB_VGA_Screen_Init+0x90>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <UB_VGA_Screen_Init+0x90>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001e38:	490f      	ldr	r1, [pc, #60]	; (8001e78 <UB_VGA_Screen_Init+0x94>)
 8001e3a:	f240 1341 	movw	r3, #321	; 0x141
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <UB_VGA_Screen_Init+0x98>)
 8001e40:	480f      	ldr	r0, [pc, #60]	; (8001e80 <UB_VGA_Screen_Init+0x9c>)
 8001e42:	f000 fa9f 	bl	8002384 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001e46:	480e      	ldr	r0, [pc, #56]	; (8001e80 <UB_VGA_Screen_Init+0x9c>)
 8001e48:	f000 f9ee 	bl	8002228 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <UB_VGA_Screen_Init+0x9c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <UB_VGA_Screen_Init+0x9c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0210 	orr.w	r2, r2, #16
 8001e5a:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <UB_VGA_Screen_Init+0xa0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a01      	ldr	r2, [pc, #4]	; (8001e68 <UB_VGA_Screen_Init+0x84>)
 8001e62:	6093      	str	r3, [r2, #8]
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20015a2c 	.word	0x20015a2c
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	20002c5c 	.word	0x20002c5c
 8001e74:	20002c1c 	.word	0x20002c1c
 8001e78:	20002d3c 	.word	0x20002d3c
 8001e7c:	40021015 	.word	0x40021015
 8001e80:	20002c9c 	.word	0x20002c9c
 8001e84:	40026488 	.word	0x40026488

08001e88 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001e92:	2300      	movs	r3, #0
 8001e94:	81bb      	strh	r3, [r7, #12]
 8001e96:	e012      	b.n	8001ebe <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001e98:	2300      	movs	r3, #0
 8001e9a:	81fb      	strh	r3, [r7, #14]
 8001e9c:	e008      	b.n	8001eb0 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001e9e:	79fa      	ldrb	r2, [r7, #7]
 8001ea0:	89b9      	ldrh	r1, [r7, #12]
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f813 	bl	8001ed0 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001eaa:	89fb      	ldrh	r3, [r7, #14]
 8001eac:	3301      	adds	r3, #1
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001eb6:	d3f2      	bcc.n	8001e9e <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001eb8:	89bb      	ldrh	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	81bb      	strh	r3, [r7, #12]
 8001ebe:	89bb      	ldrh	r3, [r7, #12]
 8001ec0:	2bef      	cmp	r3, #239	; 0xef
 8001ec2:	d9e9      	bls.n	8001e98 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
 8001eda:	460b      	mov	r3, r1
 8001edc:	80bb      	strh	r3, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ee8:	d301      	bcc.n	8001eee <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001eee:	88bb      	ldrh	r3, [r7, #4]
 8001ef0:	2bef      	cmp	r3, #239	; 0xef
 8001ef2:	d901      	bls.n	8001ef8 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001ef8:	88ba      	ldrh	r2, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	019b      	lsls	r3, r3, #6
 8001f02:	441a      	add	r2, r3
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	4413      	add	r3, r2
 8001f08:	4904      	ldr	r1, [pc, #16]	; (8001f1c <UB_VGA_SetPixel+0x4c>)
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	54ca      	strb	r2, [r1, r3]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20002d3c 	.word	0x20002d3c

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_Init+0x40>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_Init+0x40>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_Init+0x40>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 f92b 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fab4 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f943 	bl	800220e <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 f90b 	bl	80021ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000078 	.word	0x20000078
 8001fbc:	20000080 	.word	0x20000080
 8001fc0:	2000007c 	.word	0x2000007c

08001fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000080 	.word	0x20000080
 8001fe8:	20015a38 	.word	0x20015a38

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20015a38 	.word	0x20015a38

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4907      	ldr	r1, [pc, #28]	; (80020a0 <__NVIC_EnableIRQ+0x38>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
         );
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002170:	d301      	bcc.n	8002176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <SysTick_Config+0x40>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217e:	210f      	movs	r1, #15
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f7ff ff8e 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <SysTick_Config+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <SysTick_Config+0x40>)
 8002190:	2207      	movs	r2, #7
 8002192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff29 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff3e 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff8e 	bl	80020f8 <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5d 	bl	80020a4 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff31 	bl	8002068 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff feda 	bl	8001fec <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e099      	b.n	8002378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002264:	e00f      	b.n	8002286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002266:	f7ff fec1 	bl	8001fec <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d908      	bls.n	8002286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e078      	b.n	8002378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e8      	bne.n	8002266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_DMA_Init+0x158>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4313      	orrs	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b04      	cmp	r3, #4
 8002318:	d117      	bne.n	800234a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fa91 	bl	8002854 <DMA_CheckFifoParam>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002346:	2301      	movs	r3, #1
 8002348:	e016      	b.n	8002378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa48 	bl	80027e8 <DMA_CalcBaseAndBitshift>
 8002358:	4603      	mov	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	f010803f 	.word	0xf010803f

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_DMA_Start_IT+0x26>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e040      	b.n	800242c <HAL_DMA_Start_IT+0xa8>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d12f      	bne.n	800241e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f9da 	bl	800278c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	223f      	movs	r2, #63	; 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0216 	orr.w	r2, r2, #22
 80023f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0208 	orr.w	r2, r2, #8
 800240a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e005      	b.n	800242a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d004      	beq.n	8002452 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00c      	b.n	800246c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2205      	movs	r2, #5
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002484:	4b8e      	ldr	r3, [pc, #568]	; (80026c0 <HAL_DMA_IRQHandler+0x248>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a8e      	ldr	r2, [pc, #568]	; (80026c4 <HAL_DMA_IRQHandler+0x24c>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	2208      	movs	r2, #8
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01a      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	2208      	movs	r2, #8
 80024d2:	409a      	lsls	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2201      	movs	r2, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2201      	movs	r2, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2204      	movs	r2, #4
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	2204      	movs	r2, #4
 800253e:	409a      	lsls	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0204 	orr.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	2210      	movs	r2, #16
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d043      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03c      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2210      	movs	r2, #16
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d018      	beq.n	80025ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d024      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
 80025a6:	e01f      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0208 	bic.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2220      	movs	r2, #32
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 808f 	beq.w	8002718 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8087 	beq.w	8002718 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2220      	movs	r2, #32
 8002610:	409a      	lsls	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b05      	cmp	r3, #5
 8002620:	d136      	bne.n	8002690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0216 	bic.w	r2, r2, #22
 8002630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_DMA_IRQHandler+0x1da>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0208 	bic.w	r2, r2, #8
 8002660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	223f      	movs	r2, #63	; 0x3f
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d07e      	beq.n	8002784 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
        }
        return;
 800268e:	e079      	b.n	8002784 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01d      	beq.n	80026da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d031      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e02c      	b.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
 80026be:	bf00      	nop
 80026c0:	20000078 	.word	0x20000078
 80026c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e01e      	b.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10f      	bne.n	8002708 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0210 	bic.w	r2, r2, #16
 80026f6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	2b00      	cmp	r3, #0
 800271e:	d032      	beq.n	8002786 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d022      	beq.n	8002772 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2205      	movs	r2, #5
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3301      	adds	r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	d307      	bcc.n	8002760 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f2      	bne.n	8002744 <HAL_DMA_IRQHandler+0x2cc>
 800275e:	e000      	b.n	8002762 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002760:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	e000      	b.n	8002786 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002784:	bf00      	nop
    }
  }
}
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d108      	bne.n	80027cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ca:	e007      	b.n	80027dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	3b10      	subs	r3, #16
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <DMA_CalcBaseAndBitshift+0x64>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <DMA_CalcBaseAndBitshift+0x68>)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d909      	bls.n	800282a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	1d1a      	adds	r2, r3, #4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58
 8002828:	e007      	b.n	800283a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	aaaaaaab 	.word	0xaaaaaaab
 8002850:	080057e0 	.word	0x080057e0

08002854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11f      	bne.n	80028ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d856      	bhi.n	8002922 <DMA_CheckFifoParam+0xce>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <DMA_CheckFifoParam+0x28>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	0800288d 	.word	0x0800288d
 8002880:	0800289f 	.word	0x0800289f
 8002884:	0800288d 	.word	0x0800288d
 8002888:	08002923 	.word	0x08002923
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d046      	beq.n	8002926 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289c:	e043      	b.n	8002926 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a6:	d140      	bne.n	800292a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e03d      	b.n	800292a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	d121      	bne.n	80028fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d837      	bhi.n	800292e <DMA_CheckFifoParam+0xda>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <DMA_CheckFifoParam+0x70>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028db 	.word	0x080028db
 80028cc:	080028d5 	.word	0x080028d5
 80028d0:	080028ed 	.word	0x080028ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e030      	b.n	800293c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d025      	beq.n	8002932 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ea:	e022      	b.n	8002932 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028f4:	d11f      	bne.n	8002936 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028fa:	e01c      	b.n	8002936 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d903      	bls.n	800290a <DMA_CheckFifoParam+0xb6>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d003      	beq.n	8002910 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002908:	e018      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
      break;
 800290e:	e015      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      break;
 8002920:	e00b      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;
 8002922:	bf00      	nop
 8002924:	e00a      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
 8002928:	e008      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800292a:	bf00      	nop
 800292c:	e006      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800292e:	bf00      	nop
 8002930:	e004      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;   
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
    }
  } 
  
  return status; 
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e16b      	b.n	8002c40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	f040 815a 	bne.w	8002c3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d00b      	beq.n	80029a6 <HAL_GPIO_Init+0x5a>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d007      	beq.n	80029a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800299a:	2b11      	cmp	r3, #17
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b12      	cmp	r3, #18
 80029a4:	d130      	bne.n	8002a08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029dc:	2201      	movs	r2, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 0201 	and.w	r2, r3, #1
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0xfc>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b12      	cmp	r3, #18
 8002a46:	d123      	bne.n	8002a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	08da      	lsrs	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3208      	adds	r2, #8
 8002a8a:	69b9      	ldr	r1, [r7, #24]
 8002a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0203 	and.w	r2, r3, #3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80b4 	beq.w	8002c3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b60      	ldr	r3, [pc, #384]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a5f      	ldr	r2, [pc, #380]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aee:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <HAL_GPIO_Init+0x310>)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_GPIO_Init+0x314>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02b      	beq.n	8002b72 <HAL_GPIO_Init+0x226>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a51      	ldr	r2, [pc, #324]	; (8002c64 <HAL_GPIO_Init+0x318>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d025      	beq.n	8002b6e <HAL_GPIO_Init+0x222>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_GPIO_Init+0x31c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01f      	beq.n	8002b6a <HAL_GPIO_Init+0x21e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4f      	ldr	r2, [pc, #316]	; (8002c6c <HAL_GPIO_Init+0x320>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d019      	beq.n	8002b66 <HAL_GPIO_Init+0x21a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4e      	ldr	r2, [pc, #312]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_GPIO_Init+0x216>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4d      	ldr	r2, [pc, #308]	; (8002c74 <HAL_GPIO_Init+0x328>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00d      	beq.n	8002b5e <HAL_GPIO_Init+0x212>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4c      	ldr	r2, [pc, #304]	; (8002c78 <HAL_GPIO_Init+0x32c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <HAL_GPIO_Init+0x20e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4b      	ldr	r2, [pc, #300]	; (8002c7c <HAL_GPIO_Init+0x330>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_GPIO_Init+0x20a>
 8002b52:	2307      	movs	r3, #7
 8002b54:	e00e      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e00c      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	e00a      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b72:	2300      	movs	r3, #0
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x310>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b92:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb6:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bbc:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002be0:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c34:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	f67f ae90 	bls.w	8002968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40021400 	.word	0x40021400
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	40021c00 	.word	0x40021c00
 8002c80:	40013c00 	.word	0x40013c00

08002c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
 8002c90:	4613      	mov	r3, r2
 8002c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ca0:	e003      	b.n	8002caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ca2:	887b      	ldrh	r3, [r7, #2]
 8002ca4:	041a      	lsls	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	619a      	str	r2, [r3, #24]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e25e      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d075      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd6:	4b88      	ldr	r3, [pc, #544]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d00c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce2:	4b85      	ldr	r3, [pc, #532]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d112      	bne.n	8002d14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cee:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfa:	d10b      	bne.n	8002d14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d05b      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x108>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d157      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e239      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCC_OscConfig+0x74>
 8002d1e:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a75      	ldr	r2, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e01d      	b.n	8002d68 <HAL_RCC_OscConfig+0xb0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x98>
 8002d36:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6f      	ldr	r2, [pc, #444]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4b6d      	ldr	r3, [pc, #436]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6c      	ldr	r2, [pc, #432]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0xb0>
 8002d50:	4b69      	ldr	r3, [pc, #420]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a68      	ldr	r2, [pc, #416]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a65      	ldr	r2, [pc, #404]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7ff f93c 	bl	8001fec <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d78:	f7ff f938 	bl	8001fec <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1fe      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0xc0>
 8002d96:	e014      	b.n	8002dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff f928 	bl	8001fec <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da0:	f7ff f924 	bl	8001fec <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1ea      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db2:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0xe8>
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d063      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d11c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de6:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d116      	bne.n	8002e20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_RCC_OscConfig+0x152>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d001      	beq.n	8002e0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e1be      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4937      	ldr	r1, [pc, #220]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1e:	e03a      	b.n	8002e96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e28:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_OscConfig+0x244>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7ff f8dd 	bl	8001fec <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e36:	f7ff f8d9 	bl	8001fec <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e19f      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4925      	ldr	r1, [pc, #148]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]
 8002e68:	e015      	b.n	8002e96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_OscConfig+0x244>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7ff f8bc 	bl	8001fec <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e78:	f7ff f8b8 	bl	8001fec <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e17e      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d036      	beq.n	8002f10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d016      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_RCC_OscConfig+0x248>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7ff f89c 	bl	8001fec <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7ff f898 	bl	8001fec <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e15e      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x200>
 8002ed6:	e01b      	b.n	8002f10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_OscConfig+0x248>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ede:	f7ff f885 	bl	8001fec <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	e00e      	b.n	8002f04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7ff f881 	bl	8001fec <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d907      	bls.n	8002f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e147      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	42470000 	.word	0x42470000
 8002f00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f04:	4b88      	ldr	r3, [pc, #544]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ea      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8097 	beq.w	800304c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f22:	4b81      	ldr	r3, [pc, #516]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10f      	bne.n	8002f4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4b7d      	ldr	r3, [pc, #500]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a7c      	ldr	r2, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b7a      	ldr	r3, [pc, #488]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4e:	4b77      	ldr	r3, [pc, #476]	; (800312c <HAL_RCC_OscConfig+0x474>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d118      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5a:	4b74      	ldr	r3, [pc, #464]	; (800312c <HAL_RCC_OscConfig+0x474>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a73      	ldr	r2, [pc, #460]	; (800312c <HAL_RCC_OscConfig+0x474>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f66:	f7ff f841 	bl	8001fec <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6e:	f7ff f83d 	bl	8001fec <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e103      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b6a      	ldr	r3, [pc, #424]	; (800312c <HAL_RCC_OscConfig+0x474>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x2ea>
 8002f94:	4b64      	ldr	r3, [pc, #400]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a63      	ldr	r2, [pc, #396]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	e01c      	b.n	8002fdc <HAL_RCC_OscConfig+0x324>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x30c>
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a5e      	ldr	r2, [pc, #376]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb6:	4b5c      	ldr	r3, [pc, #368]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a5b      	ldr	r2, [pc, #364]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCC_OscConfig+0x324>
 8002fc4:	4b58      	ldr	r3, [pc, #352]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd0:	4b55      	ldr	r3, [pc, #340]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a54      	ldr	r2, [pc, #336]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f023 0304 	bic.w	r3, r3, #4
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d015      	beq.n	8003010 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7ff f802 	bl	8001fec <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fe fffe 	bl	8001fec <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0c2      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	4b49      	ldr	r3, [pc, #292]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0ee      	beq.n	8002fec <HAL_RCC_OscConfig+0x334>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe ffec 	bl	8001fec <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	e00a      	b.n	800302e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f7fe ffe8 	bl	8001fec <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	; 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e0ac      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302e:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ee      	bne.n	8003018 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	4a38      	ldr	r2, [pc, #224]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8098 	beq.w	8003186 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b08      	cmp	r3, #8
 8003060:	d05c      	beq.n	800311c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d141      	bne.n	80030ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_RCC_OscConfig+0x478>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe ffbc 	bl	8001fec <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003078:	f7fe ffb8 	bl	8001fec <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e07e      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	019b      	lsls	r3, r3, #6
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	3b01      	subs	r3, #1
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	491b      	ldr	r1, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x478>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe ff91 	bl	8001fec <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fe ff8d 	bl	8001fec <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e053      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x416>
 80030ec:	e04b      	b.n	8003186 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_RCC_OscConfig+0x478>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe ff7a 	bl	8001fec <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe ff76 	bl	8001fec <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e03c      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x444>
 800311a:	e034      	b.n	8003186 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d107      	bne.n	8003134 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e02f      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000
 8003130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_RCC_OscConfig+0x4d8>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	429a      	cmp	r2, r3
 8003146:	d11c      	bne.n	8003182 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d115      	bne.n	8003182 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800315c:	4013      	ands	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003162:	4293      	cmp	r3, r2
 8003164:	d10d      	bne.n	8003182 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cc      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b68      	ldr	r3, [pc, #416]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d90c      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b65      	ldr	r3, [pc, #404]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d044      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e067      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4934      	ldr	r1, [pc, #208]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fe feb2 	bl	8001fec <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fe feae 	bl	8001fec <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d20c      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fe12 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	080057c8 	.word	0x080057c8
 8003358:	20000078 	.word	0x20000078
 800335c:	2000007c 	.word	0x2000007c

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b094      	sub	sp, #80	; 0x50
 8003366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	647b      	str	r3, [r7, #68]	; 0x44
 800336c:	2300      	movs	r3, #0
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003370:	2300      	movs	r3, #0
 8003372:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003378:	4b79      	ldr	r3, [pc, #484]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d00d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003384:	2b08      	cmp	r3, #8
 8003386:	f200 80e1 	bhi.w	800354c <HAL_RCC_GetSysClockFreq+0x1ec>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e0db      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_RCC_GetSysClockFreq+0x204>)
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003398:	e0db      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_GetSysClockFreq+0x208>)
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339e:	e0d8      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033aa:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	2200      	movs	r2, #0
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
 80033ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033d2:	4622      	mov	r2, r4
 80033d4:	462b      	mov	r3, r5
 80033d6:	f04f 0000 	mov.w	r0, #0
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	0159      	lsls	r1, r3, #5
 80033e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e4:	0150      	lsls	r0, r2, #5
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4621      	mov	r1, r4
 80033ec:	1a51      	subs	r1, r2, r1
 80033ee:	6139      	str	r1, [r7, #16]
 80033f0:	4629      	mov	r1, r5
 80033f2:	eb63 0301 	sbc.w	r3, r3, r1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003404:	4659      	mov	r1, fp
 8003406:	018b      	lsls	r3, r1, #6
 8003408:	4651      	mov	r1, sl
 800340a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340e:	4651      	mov	r1, sl
 8003410:	018a      	lsls	r2, r1, #6
 8003412:	4651      	mov	r1, sl
 8003414:	ebb2 0801 	subs.w	r8, r2, r1
 8003418:	4659      	mov	r1, fp
 800341a:	eb63 0901 	sbc.w	r9, r3, r1
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003432:	4690      	mov	r8, r2
 8003434:	4699      	mov	r9, r3
 8003436:	4623      	mov	r3, r4
 8003438:	eb18 0303 	adds.w	r3, r8, r3
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	462b      	mov	r3, r5
 8003440:	eb49 0303 	adc.w	r3, r9, r3
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003452:	4629      	mov	r1, r5
 8003454:	024b      	lsls	r3, r1, #9
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800345c:	4621      	mov	r1, r4
 800345e:	024a      	lsls	r2, r1, #9
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003466:	2200      	movs	r2, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
 800346a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800346c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003470:	f7fd f8c0 	bl	80005f4 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800347c:	e058      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b38      	ldr	r3, [pc, #224]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	2200      	movs	r2, #0
 8003486:	4618      	mov	r0, r3
 8003488:	4611      	mov	r1, r2
 800348a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
 8003494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	f04f 0000 	mov.w	r0, #0
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	0159      	lsls	r1, r3, #5
 80034a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034aa:	0150      	lsls	r0, r2, #5
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4641      	mov	r1, r8
 80034b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d0:	ebb2 040a 	subs.w	r4, r2, sl
 80034d4:	eb63 050b 	sbc.w	r5, r3, fp
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	00eb      	lsls	r3, r5, #3
 80034e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e6:	00e2      	lsls	r2, r4, #3
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	4643      	mov	r3, r8
 80034ee:	18e3      	adds	r3, r4, r3
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	464b      	mov	r3, r9
 80034f4:	eb45 0303 	adc.w	r3, r5, r3
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003506:	4629      	mov	r1, r5
 8003508:	028b      	lsls	r3, r1, #10
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003510:	4621      	mov	r1, r4
 8003512:	028a      	lsls	r2, r1, #10
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	2200      	movs	r2, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	61fa      	str	r2, [r7, #28]
 8003520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003524:	f7fd f866 	bl	80005f4 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	3301      	adds	r3, #1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354a:	e002      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetSysClockFreq+0x204>)
 800354e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003554:	4618      	mov	r0, r3
 8003556:	3750      	adds	r7, #80	; 0x50
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_RCC_GetHCLKFreq+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000078 	.word	0x20000078

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003588:	f7ff fff0 	bl	800356c <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0a9b      	lsrs	r3, r3, #10
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	080057d8 	.word	0x080057d8

080035ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035b0:	f7ff ffdc 	bl	800356c <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	0b5b      	lsrs	r3, r3, #13
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4903      	ldr	r1, [pc, #12]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40023800 	.word	0x40023800
 80035d0:	080057d8 	.word	0x080057d8

080035d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e01d      	b.n	8003622 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fe f94e 	bl	800189c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f000 fbde 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b06      	cmp	r3, #6
 800364a:	d007      	beq.n	800365c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e01d      	b.n	80036c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d106      	bne.n	800369e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fe f951 	bl	8001940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3304      	adds	r3, #4
 80036ae:	4619      	mov	r1, r3
 80036b0:	4610      	mov	r0, r2
 80036b2:	f000 fb8f 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	6839      	ldr	r1, [r7, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fe64 	bl	80043a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_TIM_PWM_Start+0x74>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <HAL_TIM_PWM_Start+0x2c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a14      	ldr	r2, [pc, #80]	; (8003740 <HAL_TIM_PWM_Start+0x78>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_TIM_PWM_Start+0x30>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <HAL_TIM_PWM_Start+0x32>
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b06      	cmp	r3, #6
 800371e:	d007      	beq.n	8003730 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40010000 	.word	0x40010000
 8003740:	40010400 	.word	0x40010400

08003744 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b0c      	cmp	r3, #12
 8003752:	d841      	bhi.n	80037d8 <HAL_TIM_PWM_Start_IT+0x94>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <HAL_TIM_PWM_Start_IT+0x18>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	08003791 	.word	0x08003791
 8003760:	080037d9 	.word	0x080037d9
 8003764:	080037d9 	.word	0x080037d9
 8003768:	080037d9 	.word	0x080037d9
 800376c:	080037a3 	.word	0x080037a3
 8003770:	080037d9 	.word	0x080037d9
 8003774:	080037d9 	.word	0x080037d9
 8003778:	080037d9 	.word	0x080037d9
 800377c:	080037b5 	.word	0x080037b5
 8003780:	080037d9 	.word	0x080037d9
 8003784:	080037d9 	.word	0x080037d9
 8003788:	080037d9 	.word	0x080037d9
 800378c:	080037c7 	.word	0x080037c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0202 	orr.w	r2, r2, #2
 800379e:	60da      	str	r2, [r3, #12]
      break;
 80037a0:	e01b      	b.n	80037da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0204 	orr.w	r2, r2, #4
 80037b0:	60da      	str	r2, [r3, #12]
      break;
 80037b2:	e012      	b.n	80037da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0208 	orr.w	r2, r2, #8
 80037c2:	60da      	str	r2, [r3, #12]
      break;
 80037c4:	e009      	b.n	80037da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0210 	orr.w	r2, r2, #16
 80037d4:	60da      	str	r2, [r3, #12]
      break;
 80037d6:	e000      	b.n	80037da <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80037d8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2201      	movs	r2, #1
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fde0 	bl	80043a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_TIM_PWM_Start_IT+0x100>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_TIM_PWM_Start_IT+0xb8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a14      	ldr	r2, [pc, #80]	; (8003848 <HAL_TIM_PWM_Start_IT+0x104>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_TIM_PWM_Start_IT+0xbc>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_TIM_PWM_Start_IT+0xbe>
 8003800:	2300      	movs	r3, #0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b06      	cmp	r3, #6
 8003826:	d007      	beq.n	8003838 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d122      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d11b      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0202 	mvn.w	r2, #2
 8003878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fa82 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa74 	bl	8003d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fa85 	bl	8003dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d122      	bne.n	80038fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d11b      	bne.n	80038fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0204 	mvn.w	r2, #4
 80038cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fa58 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fa4a 	bl	8003d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fa5b 	bl	8003dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d122      	bne.n	8003950 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b08      	cmp	r3, #8
 8003916:	d11b      	bne.n	8003950 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0208 	mvn.w	r2, #8
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2204      	movs	r2, #4
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa2e 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fa20 	bl	8003d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fa31 	bl	8003dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b10      	cmp	r3, #16
 800395c:	d122      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b10      	cmp	r3, #16
 800396a:	d11b      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0210 	mvn.w	r2, #16
 8003974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2208      	movs	r2, #8
 800397a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa04 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 8003990:	e005      	b.n	800399e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f9f6 	bl	8003d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fa07 	bl	8003dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0201 	mvn.w	r2, #1
 80039c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9d0 	bl	8003d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	d10e      	bne.n	80039fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b80      	cmp	r3, #128	; 0x80
 80039ea:	d107      	bne.n	80039fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fd82 	bl	8004500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d10e      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d107      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9cc 	bl	8003dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d10e      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d107      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0220 	mvn.w	r2, #32
 8003a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fd4c 	bl	80044ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0b4      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	f200 809f 	bhi.w	8003bcc <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a8e:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003bcd 	.word	0x08003bcd
 8003a9c:	08003bcd 	.word	0x08003bcd
 8003aa0:	08003bcd 	.word	0x08003bcd
 8003aa4:	08003b09 	.word	0x08003b09
 8003aa8:	08003bcd 	.word	0x08003bcd
 8003aac:	08003bcd 	.word	0x08003bcd
 8003ab0:	08003bcd 	.word	0x08003bcd
 8003ab4:	08003b4b 	.word	0x08003b4b
 8003ab8:	08003bcd 	.word	0x08003bcd
 8003abc:	08003bcd 	.word	0x08003bcd
 8003ac0:	08003bcd 	.word	0x08003bcd
 8003ac4:	08003b8b 	.word	0x08003b8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fa20 	bl	8003f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0208 	orr.w	r2, r2, #8
 8003ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0204 	bic.w	r2, r2, #4
 8003af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6999      	ldr	r1, [r3, #24]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	619a      	str	r2, [r3, #24]
      break;
 8003b06:	e062      	b.n	8003bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fa70 	bl	8003ff4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6999      	ldr	r1, [r3, #24]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	021a      	lsls	r2, r3, #8
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	619a      	str	r2, [r3, #24]
      break;
 8003b48:	e041      	b.n	8003bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fac5 	bl	80040e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0208 	orr.w	r2, r2, #8
 8003b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0204 	bic.w	r2, r2, #4
 8003b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69d9      	ldr	r1, [r3, #28]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	61da      	str	r2, [r3, #28]
      break;
 8003b88:	e021      	b.n	8003bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fb19 	bl	80041c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69d9      	ldr	r1, [r3, #28]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	021a      	lsls	r2, r3, #8
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	61da      	str	r2, [r3, #28]
      break;
 8003bca:	e000      	b.n	8003bce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003bcc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIM_ConfigClockSource+0x18>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0b3      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x180>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c38:	d03e      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0xd0>
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3e:	f200 8087 	bhi.w	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	f000 8085 	beq.w	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d87f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c50:	2b70      	cmp	r3, #112	; 0x70
 8003c52:	d01a      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xa2>
 8003c54:	2b70      	cmp	r3, #112	; 0x70
 8003c56:	d87b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c58:	2b60      	cmp	r3, #96	; 0x60
 8003c5a:	d050      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x116>
 8003c5c:	2b60      	cmp	r3, #96	; 0x60
 8003c5e:	d877      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c60:	2b50      	cmp	r3, #80	; 0x50
 8003c62:	d03c      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0xf6>
 8003c64:	2b50      	cmp	r3, #80	; 0x50
 8003c66:	d873      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d058      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x136>
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d86f      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c70:	2b30      	cmp	r3, #48	; 0x30
 8003c72:	d064      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x156>
 8003c74:	2b30      	cmp	r3, #48	; 0x30
 8003c76:	d86b      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d060      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x156>
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d867      	bhi.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05c      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x156>
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d05a      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c88:	e062      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6899      	ldr	r1, [r3, #8]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f000 fb65 	bl	8004368 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	609a      	str	r2, [r3, #8]
      break;
 8003cb6:	e04e      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6899      	ldr	r1, [r3, #8]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f000 fb4e 	bl	8004368 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cda:	609a      	str	r2, [r3, #8]
      break;
 8003cdc:	e03b      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 fac2 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2150      	movs	r1, #80	; 0x50
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fb1b 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e02b      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 fae1 	bl	80042d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2160      	movs	r1, #96	; 0x60
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fb0b 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e01b      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f000 faa2 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2140      	movs	r1, #64	; 0x40
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fafb 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e00b      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4619      	mov	r1, r3
 8003d48:	4610      	mov	r0, r2
 8003d4a:	f000 faf2 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003d4e:	e002      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d50:	bf00      	nop
 8003d52:	e000      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d00f      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3d      	ldr	r2, [pc, #244]	; (8003eec <TIM_Base_SetConfig+0x118>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <TIM_Base_SetConfig+0x11c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3b      	ldr	r2, [pc, #236]	; (8003ef4 <TIM_Base_SetConfig+0x120>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d108      	bne.n	8003e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2f      	ldr	r2, [pc, #188]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02b      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d027      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <TIM_Base_SetConfig+0x118>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d023      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <TIM_Base_SetConfig+0x11c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01f      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <TIM_Base_SetConfig+0x120>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01b      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d017      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <TIM_Base_SetConfig+0x128>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <TIM_Base_SetConfig+0x12c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00f      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <TIM_Base_SetConfig+0x130>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00b      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a25      	ldr	r2, [pc, #148]	; (8003f08 <TIM_Base_SetConfig+0x134>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a24      	ldr	r2, [pc, #144]	; (8003f0c <TIM_Base_SetConfig+0x138>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d003      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a23      	ldr	r2, [pc, #140]	; (8003f10 <TIM_Base_SetConfig+0x13c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d108      	bne.n	8003e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0xf8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d103      	bne.n	8003ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	615a      	str	r2, [r3, #20]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40010400 	.word	0x40010400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800
 8003f08:	40001800 	.word	0x40001800
 8003f0c:	40001c00 	.word	0x40001c00
 8003f10:	40002000 	.word	0x40002000

08003f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0201 	bic.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 0302 	bic.w	r3, r3, #2
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a20      	ldr	r2, [pc, #128]	; (8003fec <TIM_OC1_SetConfig+0xd8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC1_SetConfig+0x64>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <TIM_OC1_SetConfig+0xdc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10c      	bne.n	8003f92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0308 	bic.w	r3, r3, #8
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 0304 	bic.w	r3, r3, #4
 8003f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a15      	ldr	r2, [pc, #84]	; (8003fec <TIM_OC1_SetConfig+0xd8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_OC1_SetConfig+0x8e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <TIM_OC1_SetConfig+0xdc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d111      	bne.n	8003fc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	621a      	str	r2, [r3, #32]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0320 	bic.w	r3, r3, #32
 800403e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <TIM_OC2_SetConfig+0xe4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_OC2_SetConfig+0x68>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a21      	ldr	r2, [pc, #132]	; (80040dc <TIM_OC2_SetConfig+0xe8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d10d      	bne.n	8004078 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <TIM_OC2_SetConfig+0xe4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_OC2_SetConfig+0x94>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a16      	ldr	r2, [pc, #88]	; (80040dc <TIM_OC2_SetConfig+0xe8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d113      	bne.n	80040b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800408e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400

080040e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <TIM_OC3_SetConfig+0xe0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_OC3_SetConfig+0x66>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <TIM_OC3_SetConfig+0xe4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10d      	bne.n	8004162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800414c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <TIM_OC3_SetConfig+0xe0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <TIM_OC3_SetConfig+0x92>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <TIM_OC3_SetConfig+0xe4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d113      	bne.n	800419a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40010000 	.word	0x40010000
 80041c4:	40010400 	.word	0x40010400

080041c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <TIM_OC4_SetConfig+0xa4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_OC4_SetConfig+0x68>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a11      	ldr	r2, [pc, #68]	; (8004270 <TIM_OC4_SetConfig+0xa8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d109      	bne.n	8004244 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000
 8004270:	40010400 	.word	0x40010400

08004274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 030a 	bic.w	r3, r3, #10
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800430e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	f043 0307 	orr.w	r3, r3, #7
 8004354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	431a      	orrs	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2201      	movs	r2, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	401a      	ands	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1a      	ldr	r2, [r3, #32]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004408:	2302      	movs	r3, #2
 800440a:	e05a      	b.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d022      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d01d      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d018      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10c      	bne.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40010400 	.word	0x40010400
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40001800 	.word	0x40001800

080044ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e03f      	b.n	80045a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fd fa88 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fabd 	bl	8004ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800456c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800457c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	4613      	mov	r3, r2
 80045ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d140      	bne.n	800464a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Receive_IT+0x26>
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e039      	b.n	800464c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Receive_IT+0x38>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e032      	b.n	800464c <HAL_UART_Receive_IT+0x9e>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	88fa      	ldrh	r2, [r7, #6]
 80045fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2222      	movs	r2, #34	; 0x22
 800460a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004624:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0201 	orr.w	r2, r2, #1
 8004634:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0220 	orr.w	r2, r2, #32
 8004644:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e000      	b.n	800464c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800464a:	2302      	movs	r3, #2
  }
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_UART_IRQHandler+0x52>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f996 	bl	80049d4 <UART_Receive_IT>
      return;
 80046a8:	e0d0      	b.n	800484c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80b0 	beq.w	8004812 <HAL_UART_IRQHandler+0x1ba>
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_UART_IRQHandler+0x70>
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80a5 	beq.w	8004812 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_UART_IRQHandler+0x90>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_UART_IRQHandler+0xb0>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	f043 0202 	orr.w	r2, r3, #2
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_UART_IRQHandler+0xd0>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	f043 0204 	orr.w	r2, r3, #4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00f      	beq.n	8004752 <HAL_UART_IRQHandler+0xfa>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <HAL_UART_IRQHandler+0xee>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	f043 0208 	orr.w	r2, r3, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d077      	beq.n	800484a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <HAL_UART_IRQHandler+0x11c>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f930 	bl	80049d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <HAL_UART_IRQHandler+0x144>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d031      	beq.n	8004800 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f879 	bl	8004894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d123      	bne.n	80047f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d013      	beq.n	80047f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	4a21      	ldr	r2, [pc, #132]	; (8004854 <HAL_UART_IRQHandler+0x1fc>)
 80047ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fd fe2d 	bl	8002434 <HAL_DMA_Abort_IT>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d016      	beq.n	800480e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047ea:	4610      	mov	r0, r2
 80047ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ee:	e00e      	b.n	800480e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f845 	bl	8004880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f6:	e00a      	b.n	800480e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f841 	bl	8004880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fe:	e006      	b.n	800480e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f83d 	bl	8004880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800480c:	e01d      	b.n	800484a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480e:	bf00      	nop
    return;
 8004810:	e01b      	b.n	800484a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_UART_IRQHandler+0x1d6>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f866 	bl	80048f8 <UART_Transmit_IT>
    return;
 800482c:	e00e      	b.n	800484c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <HAL_UART_IRQHandler+0x1f4>
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f8ae 	bl	80049a4 <UART_EndTransmit_IT>
    return;
 8004848:	e000      	b.n	800484c <HAL_UART_IRQHandler+0x1f4>
    return;
 800484a:	bf00      	nop
  }
}
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	080048d1 	.word	0x080048d1

08004858 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff ffc8 	bl	8004880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b21      	cmp	r3, #33	; 0x21
 800490a:	d144      	bne.n	8004996 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004914:	d11a      	bne.n	800494c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	1c9a      	adds	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]
 800493e:	e00e      	b.n	800495e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	621a      	str	r2, [r3, #32]
 800494a:	e008      	b.n	800495e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	1c59      	adds	r1, r3, #1
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6211      	str	r1, [r2, #32]
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4619      	mov	r1, r3
 800496c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004980:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004990:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff ff47 	bl	8004858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b22      	cmp	r3, #34	; 0x22
 80049e6:	d171      	bne.n	8004acc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d123      	bne.n	8004a3a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10e      	bne.n	8004a1e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	1c9a      	adds	r2, r3, #2
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a1c:	e029      	b.n	8004a72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
 8004a38:	e01b      	b.n	8004a72 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6858      	ldr	r0, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6291      	str	r1, [r2, #40]	; 0x28
 8004a52:	b2c2      	uxtb	r2, r0
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	e00c      	b.n	8004a72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	1c58      	adds	r0, r3, #1
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	6288      	str	r0, [r1, #40]	; 0x28
 8004a6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d120      	bne.n	8004ac8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0220 	bic.w	r2, r2, #32
 8004a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff fed4 	bl	800486c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e002      	b.n	8004ace <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004af6:	68d9      	ldr	r1, [r3, #12]
 8004af8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	ea40 0301 	orr.w	r3, r0, r1
 8004b02:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	431a      	orrs	r2, r3
 8004b12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004b26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b32:	f021 010c 	bic.w	r1, r1, #12
 8004b36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004b40:	430b      	orrs	r3, r1
 8004b42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	ea40 0301 	orr.w	r3, r0, r1
 8004b60:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6c:	f040 824a 	bne.w	8005004 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b96      	ldr	r3, [pc, #600]	; (8004dd0 <UART_SetConfig+0x2f8>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d006      	beq.n	8004b8a <UART_SetConfig+0xb2>
 8004b7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b94      	ldr	r3, [pc, #592]	; (8004dd4 <UART_SetConfig+0x2fc>)
 8004b84:	429a      	cmp	r2, r3
 8004b86:	f040 8129 	bne.w	8004ddc <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b8a:	f7fe fd0f 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8004b8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004b9c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004ba0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004bae:	415b      	adcs	r3, r3
 8004bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004bb4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004bb8:	4621      	mov	r1, r4
 8004bba:	1851      	adds	r1, r2, r1
 8004bbc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	414b      	adcs	r3, r1
 8004bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	00cb      	lsls	r3, r1, #3
 8004bd8:	4641      	mov	r1, r8
 8004bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bde:	4641      	mov	r1, r8
 8004be0:	00ca      	lsls	r2, r1, #3
 8004be2:	4610      	mov	r0, r2
 8004be4:	4619      	mov	r1, r3
 8004be6:	4603      	mov	r3, r0
 8004be8:	4622      	mov	r2, r4
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	460a      	mov	r2, r1
 8004bf4:	eb42 0303 	adc.w	r3, r2, r3
 8004bf8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004bfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004c08:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004c0c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004c10:	460b      	mov	r3, r1
 8004c12:	18db      	adds	r3, r3, r3
 8004c14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c18:	4613      	mov	r3, r2
 8004c1a:	eb42 0303 	adc.w	r3, r2, r3
 8004c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c22:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004c26:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004c2a:	f7fb fce3 	bl	80005f4 <__aeabi_uldivmod>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4b69      	ldr	r3, [pc, #420]	; (8004dd8 <UART_SetConfig+0x300>)
 8004c34:	fba3 2302 	umull	r2, r3, r3, r2
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	011c      	lsls	r4, r3, #4
 8004c3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004c46:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004c4a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004c4e:	4642      	mov	r2, r8
 8004c50:	464b      	mov	r3, r9
 8004c52:	1891      	adds	r1, r2, r2
 8004c54:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004c58:	415b      	adcs	r3, r3
 8004c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c5e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004c62:	4641      	mov	r1, r8
 8004c64:	1851      	adds	r1, r2, r1
 8004c66:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	414b      	adcs	r3, r1
 8004c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004c7e:	4659      	mov	r1, fp
 8004c80:	00cb      	lsls	r3, r1, #3
 8004c82:	4651      	mov	r1, sl
 8004c84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c88:	4651      	mov	r1, sl
 8004c8a:	00ca      	lsls	r2, r1, #3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4603      	mov	r3, r0
 8004c92:	4642      	mov	r2, r8
 8004c94:	189b      	adds	r3, r3, r2
 8004c96:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ca2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004ca6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004cb2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004cb6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004cba:	460b      	mov	r3, r1
 8004cbc:	18db      	adds	r3, r3, r3
 8004cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ccc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004cd0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004cd4:	f7fb fc8e 	bl	80005f4 <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <UART_SetConfig+0x300>)
 8004ce0:	fba3 2301 	umull	r2, r3, r3, r1
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	2264      	movs	r2, #100	; 0x64
 8004ce8:	fb02 f303 	mul.w	r3, r2, r3
 8004cec:	1acb      	subs	r3, r1, r3
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cf4:	4b38      	ldr	r3, [pc, #224]	; (8004dd8 <UART_SetConfig+0x300>)
 8004cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d02:	441c      	add	r4, r3
 8004d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004d0e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004d12:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004d16:	4642      	mov	r2, r8
 8004d18:	464b      	mov	r3, r9
 8004d1a:	1891      	adds	r1, r2, r2
 8004d1c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004d20:	415b      	adcs	r3, r3
 8004d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d26:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	1851      	adds	r1, r2, r1
 8004d2e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004d32:	4649      	mov	r1, r9
 8004d34:	414b      	adcs	r3, r1
 8004d36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004d46:	4659      	mov	r1, fp
 8004d48:	00cb      	lsls	r3, r1, #3
 8004d4a:	4651      	mov	r1, sl
 8004d4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d50:	4651      	mov	r1, sl
 8004d52:	00ca      	lsls	r2, r1, #3
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4642      	mov	r2, r8
 8004d5c:	189b      	adds	r3, r3, r2
 8004d5e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004d62:	464b      	mov	r3, r9
 8004d64:	460a      	mov	r2, r1
 8004d66:	eb42 0303 	adc.w	r3, r2, r3
 8004d6a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004d6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004d7a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004d7e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004d82:	460b      	mov	r3, r1
 8004d84:	18db      	adds	r3, r3, r3
 8004d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	eb42 0303 	adc.w	r3, r2, r3
 8004d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d94:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004d98:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004d9c:	f7fb fc2a 	bl	80005f4 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <UART_SetConfig+0x300>)
 8004da6:	fba3 1302 	umull	r1, r3, r3, r2
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2164      	movs	r1, #100	; 0x64
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	3332      	adds	r3, #50	; 0x32
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <UART_SetConfig+0x300>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	f003 0207 	and.w	r2, r3, #7
 8004dc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4422      	add	r2, r4
 8004dcc:	609a      	str	r2, [r3, #8]
 8004dce:	e349      	b.n	8005464 <UART_SetConfig+0x98c>
 8004dd0:	40011000 	.word	0x40011000
 8004dd4:	40011400 	.word	0x40011400
 8004dd8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ddc:	f7fe fbd2 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8004de0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004dee:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004df2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004df6:	4622      	mov	r2, r4
 8004df8:	462b      	mov	r3, r5
 8004dfa:	1891      	adds	r1, r2, r2
 8004dfc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004e00:	415b      	adcs	r3, r3
 8004e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e06:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	eb12 0a01 	adds.w	sl, r2, r1
 8004e10:	4629      	mov	r1, r5
 8004e12:	eb43 0b01 	adc.w	fp, r3, r1
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e2a:	4692      	mov	sl, r2
 8004e2c:	469b      	mov	fp, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	eb1a 0303 	adds.w	r3, sl, r3
 8004e34:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004e38:	462b      	mov	r3, r5
 8004e3a:	eb4b 0303 	adc.w	r3, fp, r3
 8004e3e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004e42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004e4e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004e52:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004e56:	460b      	mov	r3, r1
 8004e58:	18db      	adds	r3, r3, r3
 8004e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e5e:	4613      	mov	r3, r2
 8004e60:	eb42 0303 	adc.w	r3, r2, r3
 8004e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e68:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004e6c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004e70:	f7fb fbc0 	bl	80005f4 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4b61      	ldr	r3, [pc, #388]	; (8005000 <UART_SetConfig+0x528>)
 8004e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	011c      	lsls	r4, r3, #4
 8004e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004e8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004e90:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	1891      	adds	r1, r2, r2
 8004e9a:	67b9      	str	r1, [r7, #120]	; 0x78
 8004e9c:	415b      	adcs	r3, r3
 8004e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ea0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	1851      	adds	r1, r2, r1
 8004ea8:	6739      	str	r1, [r7, #112]	; 0x70
 8004eaa:	4649      	mov	r1, r9
 8004eac:	414b      	adcs	r3, r1
 8004eae:	677b      	str	r3, [r7, #116]	; 0x74
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	00cb      	lsls	r3, r1, #3
 8004ec0:	4651      	mov	r1, sl
 8004ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ec6:	4651      	mov	r1, sl
 8004ec8:	00ca      	lsls	r2, r1, #3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004ed8:	464b      	mov	r3, r9
 8004eda:	460a      	mov	r2, r1
 8004edc:	eb42 0303 	adc.w	r3, r2, r3
 8004ee0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004ee4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ef0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004ef4:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004ef8:	460b      	mov	r3, r1
 8004efa:	18db      	adds	r3, r3, r3
 8004efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004efe:	4613      	mov	r3, r2
 8004f00:	eb42 0303 	adc.w	r3, r2, r3
 8004f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f06:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004f0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004f0e:	f7fb fb71 	bl	80005f4 <__aeabi_uldivmod>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	4b39      	ldr	r3, [pc, #228]	; (8005000 <UART_SetConfig+0x528>)
 8004f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	2264      	movs	r2, #100	; 0x64
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	1acb      	subs	r3, r1, r3
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f2e:	4b34      	ldr	r3, [pc, #208]	; (8005000 <UART_SetConfig+0x528>)
 8004f30:	fba3 2302 	umull	r2, r3, r3, r2
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f3c:	441c      	add	r4, r3
 8004f3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004f48:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004f4c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004f50:	4642      	mov	r2, r8
 8004f52:	464b      	mov	r3, r9
 8004f54:	1891      	adds	r1, r2, r2
 8004f56:	6639      	str	r1, [r7, #96]	; 0x60
 8004f58:	415b      	adcs	r3, r3
 8004f5a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f5c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004f60:	4641      	mov	r1, r8
 8004f62:	1851      	adds	r1, r2, r1
 8004f64:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f66:	4649      	mov	r1, r9
 8004f68:	414b      	adcs	r3, r1
 8004f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004f78:	4659      	mov	r1, fp
 8004f7a:	00cb      	lsls	r3, r1, #3
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f82:	4651      	mov	r1, sl
 8004f84:	00ca      	lsls	r2, r1, #3
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004f94:	464b      	mov	r3, r9
 8004f96:	460a      	mov	r2, r1
 8004f98:	eb42 0303 	adc.w	r3, r2, r3
 8004f9c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004fa0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004fac:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004fb0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	18db      	adds	r3, r3, r3
 8004fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8004fba:	4613      	mov	r3, r2
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8004fc2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fc6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004fca:	f7fb fb13 	bl	80005f4 <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <UART_SetConfig+0x528>)
 8004fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	2164      	movs	r1, #100	; 0x64
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	3332      	adds	r3, #50	; 0x32
 8004fe6:	4a06      	ldr	r2, [pc, #24]	; (8005000 <UART_SetConfig+0x528>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	f003 0207 	and.w	r2, r3, #7
 8004ff2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4422      	add	r2, r4
 8004ffa:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ffc:	e232      	b.n	8005464 <UART_SetConfig+0x98c>
 8004ffe:	bf00      	nop
 8005000:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005004:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b8d      	ldr	r3, [pc, #564]	; (8005240 <UART_SetConfig+0x768>)
 800500c:	429a      	cmp	r2, r3
 800500e:	d006      	beq.n	800501e <UART_SetConfig+0x546>
 8005010:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b8b      	ldr	r3, [pc, #556]	; (8005244 <UART_SetConfig+0x76c>)
 8005018:	429a      	cmp	r2, r3
 800501a:	f040 8117 	bne.w	800524c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800501e:	f7fe fac5 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8005022:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005026:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8005030:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005034:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005038:	4622      	mov	r2, r4
 800503a:	462b      	mov	r3, r5
 800503c:	1891      	adds	r1, r2, r2
 800503e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005040:	415b      	adcs	r3, r3
 8005042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005048:	4621      	mov	r1, r4
 800504a:	eb12 0801 	adds.w	r8, r2, r1
 800504e:	4629      	mov	r1, r5
 8005050:	eb43 0901 	adc.w	r9, r3, r1
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005060:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005064:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005068:	4690      	mov	r8, r2
 800506a:	4699      	mov	r9, r3
 800506c:	4623      	mov	r3, r4
 800506e:	eb18 0303 	adds.w	r3, r8, r3
 8005072:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005076:	462b      	mov	r3, r5
 8005078:	eb49 0303 	adc.w	r3, r9, r3
 800507c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005080:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800508c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800509c:	4629      	mov	r1, r5
 800509e:	008b      	lsls	r3, r1, #2
 80050a0:	4621      	mov	r1, r4
 80050a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a6:	4621      	mov	r1, r4
 80050a8:	008a      	lsls	r2, r1, #2
 80050aa:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80050ae:	f7fb faa1 	bl	80005f4 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4b64      	ldr	r3, [pc, #400]	; (8005248 <UART_SetConfig+0x770>)
 80050b8:	fba3 2302 	umull	r2, r3, r3, r2
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	011c      	lsls	r4, r3, #4
 80050c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80050ca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80050ce:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80050d2:	4642      	mov	r2, r8
 80050d4:	464b      	mov	r3, r9
 80050d6:	1891      	adds	r1, r2, r2
 80050d8:	6439      	str	r1, [r7, #64]	; 0x40
 80050da:	415b      	adcs	r3, r3
 80050dc:	647b      	str	r3, [r7, #68]	; 0x44
 80050de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050e2:	4641      	mov	r1, r8
 80050e4:	1851      	adds	r1, r2, r1
 80050e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80050e8:	4649      	mov	r1, r9
 80050ea:	414b      	adcs	r3, r1
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80050fa:	4659      	mov	r1, fp
 80050fc:	00cb      	lsls	r3, r1, #3
 80050fe:	4651      	mov	r1, sl
 8005100:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005104:	4651      	mov	r1, sl
 8005106:	00ca      	lsls	r2, r1, #3
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	4603      	mov	r3, r0
 800510e:	4642      	mov	r2, r8
 8005110:	189b      	adds	r3, r3, r2
 8005112:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005116:	464b      	mov	r3, r9
 8005118:	460a      	mov	r2, r1
 800511a:	eb42 0303 	adc.w	r3, r2, r3
 800511e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005122:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800512e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800513e:	4649      	mov	r1, r9
 8005140:	008b      	lsls	r3, r1, #2
 8005142:	4641      	mov	r1, r8
 8005144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005148:	4641      	mov	r1, r8
 800514a:	008a      	lsls	r2, r1, #2
 800514c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005150:	f7fb fa50 	bl	80005f4 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4b3b      	ldr	r3, [pc, #236]	; (8005248 <UART_SetConfig+0x770>)
 800515a:	fba3 1302 	umull	r1, r3, r3, r2
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	2164      	movs	r1, #100	; 0x64
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	3332      	adds	r3, #50	; 0x32
 800516c:	4a36      	ldr	r2, [pc, #216]	; (8005248 <UART_SetConfig+0x770>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005178:	441c      	add	r4, r3
 800517a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800517e:	2200      	movs	r2, #0
 8005180:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005184:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005188:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	1891      	adds	r1, r2, r2
 8005192:	6339      	str	r1, [r7, #48]	; 0x30
 8005194:	415b      	adcs	r3, r3
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
 8005198:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800519c:	4641      	mov	r1, r8
 800519e:	1851      	adds	r1, r2, r1
 80051a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80051a2:	4649      	mov	r1, r9
 80051a4:	414b      	adcs	r3, r1
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80051b4:	4659      	mov	r1, fp
 80051b6:	00cb      	lsls	r3, r1, #3
 80051b8:	4651      	mov	r1, sl
 80051ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051be:	4651      	mov	r1, sl
 80051c0:	00ca      	lsls	r2, r1, #3
 80051c2:	4610      	mov	r0, r2
 80051c4:	4619      	mov	r1, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	4642      	mov	r2, r8
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051d0:	464b      	mov	r3, r9
 80051d2:	460a      	mov	r2, r1
 80051d4:	eb42 0303 	adc.w	r3, r2, r3
 80051d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80051dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80051e8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80051f8:	4649      	mov	r1, r9
 80051fa:	008b      	lsls	r3, r1, #2
 80051fc:	4641      	mov	r1, r8
 80051fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005202:	4641      	mov	r1, r8
 8005204:	008a      	lsls	r2, r1, #2
 8005206:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800520a:	f7fb f9f3 	bl	80005f4 <__aeabi_uldivmod>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <UART_SetConfig+0x770>)
 8005214:	fba3 1302 	umull	r1, r3, r3, r2
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	2164      	movs	r1, #100	; 0x64
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	3332      	adds	r3, #50	; 0x32
 8005226:	4a08      	ldr	r2, [pc, #32]	; (8005248 <UART_SetConfig+0x770>)
 8005228:	fba2 2303 	umull	r2, r3, r2, r3
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	f003 020f 	and.w	r2, r3, #15
 8005232:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4422      	add	r2, r4
 800523a:	609a      	str	r2, [r3, #8]
 800523c:	e112      	b.n	8005464 <UART_SetConfig+0x98c>
 800523e:	bf00      	nop
 8005240:	40011000 	.word	0x40011000
 8005244:	40011400 	.word	0x40011400
 8005248:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800524c:	f7fe f99a 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005250:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005254:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005258:	2200      	movs	r2, #0
 800525a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800525e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005262:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8005266:	4642      	mov	r2, r8
 8005268:	464b      	mov	r3, r9
 800526a:	1891      	adds	r1, r2, r2
 800526c:	6239      	str	r1, [r7, #32]
 800526e:	415b      	adcs	r3, r3
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
 8005272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005276:	4641      	mov	r1, r8
 8005278:	1854      	adds	r4, r2, r1
 800527a:	4649      	mov	r1, r9
 800527c:	eb43 0501 	adc.w	r5, r3, r1
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	00eb      	lsls	r3, r5, #3
 800528a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528e:	00e2      	lsls	r2, r4, #3
 8005290:	4614      	mov	r4, r2
 8005292:	461d      	mov	r5, r3
 8005294:	4643      	mov	r3, r8
 8005296:	18e3      	adds	r3, r4, r3
 8005298:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800529c:	464b      	mov	r3, r9
 800529e:	eb45 0303 	adc.w	r3, r5, r3
 80052a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80052a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80052b2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80052c2:	4629      	mov	r1, r5
 80052c4:	008b      	lsls	r3, r1, #2
 80052c6:	4621      	mov	r1, r4
 80052c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052cc:	4621      	mov	r1, r4
 80052ce:	008a      	lsls	r2, r1, #2
 80052d0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80052d4:	f7fb f98e 	bl	80005f4 <__aeabi_uldivmod>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4b64      	ldr	r3, [pc, #400]	; (8005470 <UART_SetConfig+0x998>)
 80052de:	fba3 2302 	umull	r2, r3, r3, r2
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	011c      	lsls	r4, r3, #4
 80052e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052f0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80052f4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80052f8:	4642      	mov	r2, r8
 80052fa:	464b      	mov	r3, r9
 80052fc:	1891      	adds	r1, r2, r2
 80052fe:	61b9      	str	r1, [r7, #24]
 8005300:	415b      	adcs	r3, r3
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005308:	4641      	mov	r1, r8
 800530a:	1851      	adds	r1, r2, r1
 800530c:	6139      	str	r1, [r7, #16]
 800530e:	4649      	mov	r1, r9
 8005310:	414b      	adcs	r3, r1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005320:	4659      	mov	r1, fp
 8005322:	00cb      	lsls	r3, r1, #3
 8005324:	4651      	mov	r1, sl
 8005326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800532a:	4651      	mov	r1, sl
 800532c:	00ca      	lsls	r2, r1, #3
 800532e:	4610      	mov	r0, r2
 8005330:	4619      	mov	r1, r3
 8005332:	4603      	mov	r3, r0
 8005334:	4642      	mov	r2, r8
 8005336:	189b      	adds	r3, r3, r2
 8005338:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800533c:	464b      	mov	r3, r9
 800533e:	460a      	mov	r2, r1
 8005340:	eb42 0303 	adc.w	r3, r2, r3
 8005344:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005348:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005354:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8005364:	4649      	mov	r1, r9
 8005366:	008b      	lsls	r3, r1, #2
 8005368:	4641      	mov	r1, r8
 800536a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800536e:	4641      	mov	r1, r8
 8005370:	008a      	lsls	r2, r1, #2
 8005372:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005376:	f7fb f93d 	bl	80005f4 <__aeabi_uldivmod>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4b3c      	ldr	r3, [pc, #240]	; (8005470 <UART_SetConfig+0x998>)
 8005380:	fba3 1302 	umull	r1, r3, r3, r2
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	2164      	movs	r1, #100	; 0x64
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	3332      	adds	r3, #50	; 0x32
 8005392:	4a37      	ldr	r2, [pc, #220]	; (8005470 <UART_SetConfig+0x998>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800539e:	441c      	add	r4, r3
 80053a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053ae:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80053b2:	4642      	mov	r2, r8
 80053b4:	464b      	mov	r3, r9
 80053b6:	1891      	adds	r1, r2, r2
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	415b      	adcs	r3, r3
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053c2:	4641      	mov	r1, r8
 80053c4:	1851      	adds	r1, r2, r1
 80053c6:	6039      	str	r1, [r7, #0]
 80053c8:	4649      	mov	r1, r9
 80053ca:	414b      	adcs	r3, r1
 80053cc:	607b      	str	r3, [r7, #4]
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053da:	4659      	mov	r1, fp
 80053dc:	00cb      	lsls	r3, r1, #3
 80053de:	4651      	mov	r1, sl
 80053e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053e4:	4651      	mov	r1, sl
 80053e6:	00ca      	lsls	r2, r1, #3
 80053e8:	4610      	mov	r0, r2
 80053ea:	4619      	mov	r1, r3
 80053ec:	4603      	mov	r3, r0
 80053ee:	4642      	mov	r2, r8
 80053f0:	189b      	adds	r3, r3, r2
 80053f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053f6:	464b      	mov	r3, r9
 80053f8:	460a      	mov	r2, r1
 80053fa:	eb42 0303 	adc.w	r3, r2, r3
 80053fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005402:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800540e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800541e:	4649      	mov	r1, r9
 8005420:	008b      	lsls	r3, r1, #2
 8005422:	4641      	mov	r1, r8
 8005424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005428:	4641      	mov	r1, r8
 800542a:	008a      	lsls	r2, r1, #2
 800542c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005430:	f7fb f8e0 	bl	80005f4 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <UART_SetConfig+0x998>)
 800543a:	fba3 1302 	umull	r1, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2164      	movs	r1, #100	; 0x64
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	3332      	adds	r3, #50	; 0x32
 800544c:	4a08      	ldr	r2, [pc, #32]	; (8005470 <UART_SetConfig+0x998>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	f003 020f 	and.w	r2, r3, #15
 8005458:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4422      	add	r2, r4
 8005460:	609a      	str	r2, [r3, #8]
}
 8005462:	e7ff      	b.n	8005464 <UART_SetConfig+0x98c>
 8005464:	bf00      	nop
 8005466:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800546a:	46bd      	mov	sp, r7
 800546c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005470:	51eb851f 	.word	0x51eb851f

08005474 <atoi>:
 8005474:	220a      	movs	r2, #10
 8005476:	2100      	movs	r1, #0
 8005478:	f000 b8c2 	b.w	8005600 <strtol>

0800547c <__errno>:
 800547c:	4b01      	ldr	r3, [pc, #4]	; (8005484 <__errno+0x8>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000084 	.word	0x20000084

08005488 <__libc_init_array>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4d0d      	ldr	r5, [pc, #52]	; (80054c0 <__libc_init_array+0x38>)
 800548c:	4c0d      	ldr	r4, [pc, #52]	; (80054c4 <__libc_init_array+0x3c>)
 800548e:	1b64      	subs	r4, r4, r5
 8005490:	10a4      	asrs	r4, r4, #2
 8005492:	2600      	movs	r6, #0
 8005494:	42a6      	cmp	r6, r4
 8005496:	d109      	bne.n	80054ac <__libc_init_array+0x24>
 8005498:	4d0b      	ldr	r5, [pc, #44]	; (80054c8 <__libc_init_array+0x40>)
 800549a:	4c0c      	ldr	r4, [pc, #48]	; (80054cc <__libc_init_array+0x44>)
 800549c:	f000 f8ba 	bl	8005614 <_init>
 80054a0:	1b64      	subs	r4, r4, r5
 80054a2:	10a4      	asrs	r4, r4, #2
 80054a4:	2600      	movs	r6, #0
 80054a6:	42a6      	cmp	r6, r4
 80054a8:	d105      	bne.n	80054b6 <__libc_init_array+0x2e>
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b0:	4798      	blx	r3
 80054b2:	3601      	adds	r6, #1
 80054b4:	e7ee      	b.n	8005494 <__libc_init_array+0xc>
 80054b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ba:	4798      	blx	r3
 80054bc:	3601      	adds	r6, #1
 80054be:	e7f2      	b.n	80054a6 <__libc_init_array+0x1e>
 80054c0:	08005954 	.word	0x08005954
 80054c4:	08005954 	.word	0x08005954
 80054c8:	08005954 	.word	0x08005954
 80054cc:	08005958 	.word	0x08005958

080054d0 <memcpy>:
 80054d0:	440a      	add	r2, r1
 80054d2:	4291      	cmp	r1, r2
 80054d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80054d8:	d100      	bne.n	80054dc <memcpy+0xc>
 80054da:	4770      	bx	lr
 80054dc:	b510      	push	{r4, lr}
 80054de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e6:	4291      	cmp	r1, r2
 80054e8:	d1f9      	bne.n	80054de <memcpy+0xe>
 80054ea:	bd10      	pop	{r4, pc}

080054ec <memset>:
 80054ec:	4402      	add	r2, r0
 80054ee:	4603      	mov	r3, r0
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d100      	bne.n	80054f6 <memset+0xa>
 80054f4:	4770      	bx	lr
 80054f6:	f803 1b01 	strb.w	r1, [r3], #1
 80054fa:	e7f9      	b.n	80054f0 <memset+0x4>

080054fc <_strtol_l.constprop.0>:
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005502:	d001      	beq.n	8005508 <_strtol_l.constprop.0+0xc>
 8005504:	2b24      	cmp	r3, #36	; 0x24
 8005506:	d906      	bls.n	8005516 <_strtol_l.constprop.0+0x1a>
 8005508:	f7ff ffb8 	bl	800547c <__errno>
 800550c:	2316      	movs	r3, #22
 800550e:	6003      	str	r3, [r0, #0]
 8005510:	2000      	movs	r0, #0
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80055fc <_strtol_l.constprop.0+0x100>
 800551a:	460d      	mov	r5, r1
 800551c:	462e      	mov	r6, r5
 800551e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005522:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005526:	f017 0708 	ands.w	r7, r7, #8
 800552a:	d1f7      	bne.n	800551c <_strtol_l.constprop.0+0x20>
 800552c:	2c2d      	cmp	r4, #45	; 0x2d
 800552e:	d132      	bne.n	8005596 <_strtol_l.constprop.0+0x9a>
 8005530:	782c      	ldrb	r4, [r5, #0]
 8005532:	2701      	movs	r7, #1
 8005534:	1cb5      	adds	r5, r6, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d05b      	beq.n	80055f2 <_strtol_l.constprop.0+0xf6>
 800553a:	2b10      	cmp	r3, #16
 800553c:	d109      	bne.n	8005552 <_strtol_l.constprop.0+0x56>
 800553e:	2c30      	cmp	r4, #48	; 0x30
 8005540:	d107      	bne.n	8005552 <_strtol_l.constprop.0+0x56>
 8005542:	782c      	ldrb	r4, [r5, #0]
 8005544:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005548:	2c58      	cmp	r4, #88	; 0x58
 800554a:	d14d      	bne.n	80055e8 <_strtol_l.constprop.0+0xec>
 800554c:	786c      	ldrb	r4, [r5, #1]
 800554e:	2310      	movs	r3, #16
 8005550:	3502      	adds	r5, #2
 8005552:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005556:	f108 38ff 	add.w	r8, r8, #4294967295
 800555a:	f04f 0c00 	mov.w	ip, #0
 800555e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005562:	4666      	mov	r6, ip
 8005564:	fb03 8a19 	mls	sl, r3, r9, r8
 8005568:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800556c:	f1be 0f09 	cmp.w	lr, #9
 8005570:	d816      	bhi.n	80055a0 <_strtol_l.constprop.0+0xa4>
 8005572:	4674      	mov	r4, lr
 8005574:	42a3      	cmp	r3, r4
 8005576:	dd24      	ble.n	80055c2 <_strtol_l.constprop.0+0xc6>
 8005578:	f1bc 0f00 	cmp.w	ip, #0
 800557c:	db1e      	blt.n	80055bc <_strtol_l.constprop.0+0xc0>
 800557e:	45b1      	cmp	r9, r6
 8005580:	d31c      	bcc.n	80055bc <_strtol_l.constprop.0+0xc0>
 8005582:	d101      	bne.n	8005588 <_strtol_l.constprop.0+0x8c>
 8005584:	45a2      	cmp	sl, r4
 8005586:	db19      	blt.n	80055bc <_strtol_l.constprop.0+0xc0>
 8005588:	fb06 4603 	mla	r6, r6, r3, r4
 800558c:	f04f 0c01 	mov.w	ip, #1
 8005590:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005594:	e7e8      	b.n	8005568 <_strtol_l.constprop.0+0x6c>
 8005596:	2c2b      	cmp	r4, #43	; 0x2b
 8005598:	bf04      	itt	eq
 800559a:	782c      	ldrbeq	r4, [r5, #0]
 800559c:	1cb5      	addeq	r5, r6, #2
 800559e:	e7ca      	b.n	8005536 <_strtol_l.constprop.0+0x3a>
 80055a0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80055a4:	f1be 0f19 	cmp.w	lr, #25
 80055a8:	d801      	bhi.n	80055ae <_strtol_l.constprop.0+0xb2>
 80055aa:	3c37      	subs	r4, #55	; 0x37
 80055ac:	e7e2      	b.n	8005574 <_strtol_l.constprop.0+0x78>
 80055ae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80055b2:	f1be 0f19 	cmp.w	lr, #25
 80055b6:	d804      	bhi.n	80055c2 <_strtol_l.constprop.0+0xc6>
 80055b8:	3c57      	subs	r4, #87	; 0x57
 80055ba:	e7db      	b.n	8005574 <_strtol_l.constprop.0+0x78>
 80055bc:	f04f 3cff 	mov.w	ip, #4294967295
 80055c0:	e7e6      	b.n	8005590 <_strtol_l.constprop.0+0x94>
 80055c2:	f1bc 0f00 	cmp.w	ip, #0
 80055c6:	da05      	bge.n	80055d4 <_strtol_l.constprop.0+0xd8>
 80055c8:	2322      	movs	r3, #34	; 0x22
 80055ca:	6003      	str	r3, [r0, #0]
 80055cc:	4646      	mov	r6, r8
 80055ce:	b942      	cbnz	r2, 80055e2 <_strtol_l.constprop.0+0xe6>
 80055d0:	4630      	mov	r0, r6
 80055d2:	e79e      	b.n	8005512 <_strtol_l.constprop.0+0x16>
 80055d4:	b107      	cbz	r7, 80055d8 <_strtol_l.constprop.0+0xdc>
 80055d6:	4276      	negs	r6, r6
 80055d8:	2a00      	cmp	r2, #0
 80055da:	d0f9      	beq.n	80055d0 <_strtol_l.constprop.0+0xd4>
 80055dc:	f1bc 0f00 	cmp.w	ip, #0
 80055e0:	d000      	beq.n	80055e4 <_strtol_l.constprop.0+0xe8>
 80055e2:	1e69      	subs	r1, r5, #1
 80055e4:	6011      	str	r1, [r2, #0]
 80055e6:	e7f3      	b.n	80055d0 <_strtol_l.constprop.0+0xd4>
 80055e8:	2430      	movs	r4, #48	; 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1b1      	bne.n	8005552 <_strtol_l.constprop.0+0x56>
 80055ee:	2308      	movs	r3, #8
 80055f0:	e7af      	b.n	8005552 <_strtol_l.constprop.0+0x56>
 80055f2:	2c30      	cmp	r4, #48	; 0x30
 80055f4:	d0a5      	beq.n	8005542 <_strtol_l.constprop.0+0x46>
 80055f6:	230a      	movs	r3, #10
 80055f8:	e7ab      	b.n	8005552 <_strtol_l.constprop.0+0x56>
 80055fa:	bf00      	nop
 80055fc:	080057e9 	.word	0x080057e9

08005600 <strtol>:
 8005600:	4613      	mov	r3, r2
 8005602:	460a      	mov	r2, r1
 8005604:	4601      	mov	r1, r0
 8005606:	4802      	ldr	r0, [pc, #8]	; (8005610 <strtol+0x10>)
 8005608:	6800      	ldr	r0, [r0, #0]
 800560a:	f7ff bf77 	b.w	80054fc <_strtol_l.constprop.0>
 800560e:	bf00      	nop
 8005610:	20000084 	.word	0x20000084

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
