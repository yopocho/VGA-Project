
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000960c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a044  0800a044  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a044  0800a044  0001a044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a04c  0800a04c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a04c  0800a04c  0001a04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a050  0800a050  0001a050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013764  20000088  0800a0dc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200137ec  0800a0dc  000237ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fc6  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ba  00000000  00000000  0003507e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00038a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bd0  00000000  00000000  0003ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af97  00000000  00000000  00060a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf239  00000000  00000000  0007b9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ac18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055cc  00000000  00000000  0014ac68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009784 	.word	0x08009784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009784 	.word	0x08009784

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <TransmitError>:
 *
 * @param ErrorCode
 * @return Error
 */
Error TransmitError(Error ErrorCode)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	ErrorHandle* Error = GetError(ErrorCode);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f811 	bl	80005b8 <GetError>
 8000596:	60f8      	str	r0, [r7, #12]
	printf("[%d]%s", Error->Severity, Error->Msg);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	4619      	mov	r1, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <TransmitError+0x30>)
 80005a6:	f008 f891 	bl	80086cc <iprintf>
	return ERR_NONE;
 80005aa:	2304      	movs	r3, #4
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08009940 	.word	0x08009940

080005b8 <GetError>:
 *
 * @param ErrorCode
 * @return ErrorHandle
 */
ErrorHandle* GetError(Error ErrorCode)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	size_t SizeOfErrorList = sizeof(ErrorList)/sizeof(ErrorList[0]);
 80005c2:	230e      	movs	r3, #14
 80005c4:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < SizeOfErrorList; i++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e00e      	b.n	80005ea <GetError+0x32>
		if(ErrorList[i].ErrorCode == ErrorCode){
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <GetError+0x48>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d104      	bne.n	80005e4 <GetError+0x2c>
			return &ErrorList[i];
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <GetError+0x48>)
 80005e0:	4413      	add	r3, r2
 80005e2:	e007      	b.n	80005f4 <GetError+0x3c>
	for(size_t i = 0; i < SizeOfErrorList; i++){
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3ec      	bcc.n	80005cc <GetError+0x14>
		}
	}
	return ERR_UNKNOWN_ERR;
 80005f2:	2307      	movs	r3, #7
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	08009d74 	.word	0x08009d74

08000604 <SDCardInit>:
 * @brief Initializes the SD card
 *
 * @return Error
 */
Error SDCardInit()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800060a:	2201      	movs	r2, #1
 800060c:	491f      	ldr	r1, [pc, #124]	; (800068c <SDCardInit+0x88>)
 800060e:	4820      	ldr	r0, [pc, #128]	; (8000690 <SDCardInit+0x8c>)
 8000610:	f007 f906 	bl	8007820 <f_mount>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SDCardInit+0x90>)
 800061a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SDCardInit+0x90>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SDCardInit+0x24>
		return ERR_SDCARD_MOUNT;
 8000624:	2308      	movs	r3, #8
 8000626:	e02d      	b.n	8000684 <SDCardInit+0x80>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors, used_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	4619      	mov	r1, r3
 8000630:	4816      	ldr	r0, [pc, #88]	; (800068c <SDCardInit+0x88>)
 8000632:	f007 fee9 	bl	8008408 <f_getfree>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <SDCardInit+0x90>)
 800063c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <SDCardInit+0x90>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SDCardInit+0x46>
		return ERR_SDCARD_GETFREE;
 8000646:	2309      	movs	r3, #9
 8000648:	e01c      	b.n	8000684 <SDCardInit+0x80>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	3b02      	subs	r3, #2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	8952      	ldrh	r2, [r2, #10]
 8000654:	fb02 f303 	mul.w	r3, r2, r3
 8000658:	617b      	str	r3, [r7, #20]
	free_sectors = free_clusters * getFreeFs->csize;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	895b      	ldrh	r3, [r3, #10]
 800065e:	461a      	mov	r2, r3
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	613b      	str	r3, [r7, #16]
	used_sectors = total_sectors - free_sectors;
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	60fb      	str	r3, [r7, #12]
	printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n%10ul KiB used.\r\n", total_sectors / 2, free_sectors / 2, used_sectors / 2);
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	0859      	lsrs	r1, r3, #1
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	085a      	lsrs	r2, r3, #1
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	085b      	lsrs	r3, r3, #1
 800067c:	4806      	ldr	r0, [pc, #24]	; (8000698 <SDCardInit+0x94>)
 800067e:	f008 f825 	bl	80086cc <iprintf>
	return ERR_NONE;
 8000682:	2304      	movs	r3, #4
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08009aec 	.word	0x08009aec
 8000690:	200000a4 	.word	0x200000a4
 8000694:	20000504 	.word	0x20000504
 8000698:	08009af0 	.word	0x08009af0

0800069c <DrawBitmapFromSDCard>:
 * @param selector
 * @param xp
 * @param yp
 * @return Error
 */
Error DrawBitmapFromSDCard(uint16_t xp, uint16_t yp, uint8_t selector) {
 800069c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a0:	b092      	sub	sp, #72	; 0x48
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4603      	mov	r3, r0
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	460b      	mov	r3, r1
 80006aa:	80bb      	strh	r3, [r7, #4]
 80006ac:	4613      	mov	r3, r2
 80006ae:	70fb      	strb	r3, [r7, #3]
 80006b0:	466b      	mov	r3, sp
 80006b2:	469a      	mov	sl, r3

	if(xp > VGA_DISPLAY_X || yp > VGA_DISPLAY_Y) {
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ba:	d802      	bhi.n	80006c2 <DrawBitmapFromSDCard+0x26>
 80006bc:	88bb      	ldrh	r3, [r7, #4]
 80006be:	2bf0      	cmp	r3, #240	; 0xf0
 80006c0:	d901      	bls.n	80006c6 <DrawBitmapFromSDCard+0x2a>
		return ERR_ARG_OOB;
 80006c2:	2302      	movs	r3, #2
 80006c4:	e125      	b.n	8000912 <DrawBitmapFromSDCard+0x276>
	}

	if(fres != FR_OK){
 80006c6:	4b96      	ldr	r3, [pc, #600]	; (8000920 <DrawBitmapFromSDCard+0x284>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <DrawBitmapFromSDCard+0x36>
		return ERR_SDCARD_UNAVAILABLE;
 80006ce:	230d      	movs	r3, #13
 80006d0:	e11f      	b.n	8000912 <DrawBitmapFromSDCard+0x276>
	}

	//Convert asked-for bitmap to the name of the .txt file its saved in on the SD card
	char filename[20] = "";
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
	itoa(selector, filename, 10);
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	f107 0118 	add.w	r1, r7, #24
 80006ea:	220a      	movs	r2, #10
 80006ec:	4618      	mov	r0, r3
 80006ee:	f007 ffe3 	bl	80086b8 <itoa>
	strcat(filename, ".txt");
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd6a 	bl	80001d0 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4413      	add	r3, r2
 8000706:	4a87      	ldr	r2, [pc, #540]	; (8000924 <DrawBitmapFromSDCard+0x288>)
 8000708:	6810      	ldr	r0, [r2, #0]
 800070a:	6018      	str	r0, [r3, #0]
 800070c:	7912      	ldrb	r2, [r2, #4]
 800070e:	711a      	strb	r2, [r3, #4]
	fres = f_open(&fil, filename, FA_READ);
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	4883      	ldr	r0, [pc, #524]	; (8000928 <DrawBitmapFromSDCard+0x28c>)
 800071a:	f007 f8c7 	bl	80078ac <f_open>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b7f      	ldr	r3, [pc, #508]	; (8000920 <DrawBitmapFromSDCard+0x284>)
 8000724:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000726:	4b7e      	ldr	r3, [pc, #504]	; (8000920 <DrawBitmapFromSDCard+0x284>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <DrawBitmapFromSDCard+0x96>
		return ERR_SDCARD_OPEN;
 800072e:	230c      	movs	r3, #12
 8000730:	e0ef      	b.n	8000912 <DrawBitmapFromSDCard+0x276>
	}

	unsigned char preambleBuf[9];
	uint8_t bufLen = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	72fb      	strb	r3, [r7, #11]

	f_read(&fil, (void*)preambleBuf, 9, &bufLen);
 8000736:	f107 030b 	add.w	r3, r7, #11
 800073a:	f107 010c 	add.w	r1, r7, #12
 800073e:	2209      	movs	r2, #9
 8000740:	4879      	ldr	r0, [pc, #484]	; (8000928 <DrawBitmapFromSDCard+0x28c>)
 8000742:	f007 fa71 	bl	8007c28 <f_read>
	if(bufLen != 0) {
 8000746:	7afb      	ldrb	r3, [r7, #11]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d064      	beq.n	8000816 <DrawBitmapFromSDCard+0x17a>
		printf("Read string from '%s' contents: %s\n\r", filename, preambleBuf);
 800074c:	f107 020c 	add.w	r2, r7, #12
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4619      	mov	r1, r3
 8000756:	4875      	ldr	r0, [pc, #468]	; (800092c <DrawBitmapFromSDCard+0x290>)
 8000758:	f007 ffb8 	bl	80086cc <iprintf>
	}
	else if(preambleBuf[3] != 'x') return ERR_BITMAP_FORMAT;
	else return ERR_SDCARD_GETS;

	uint16_t width = atoi(preambleBuf);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4618      	mov	r0, r3
 8000762:	f007 ff62 	bl	800862a <atoi>
 8000766:	4603      	mov	r3, r0
 8000768:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t height = atoi(preambleBuf+4);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	3304      	adds	r3, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f007 ff59 	bl	800862a <atoi>
 8000778:	4603      	mov	r3, r0
 800077a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	printf("%d, %d\n\r", width, height);
 800077c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000780:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000782:	4619      	mov	r1, r3
 8000784:	486a      	ldr	r0, [pc, #424]	; (8000930 <DrawBitmapFromSDCard+0x294>)
 8000786:	f007 ffa1 	bl	80086cc <iprintf>
	uint8_t packetSize = 5; //chars (0x..,) pixeldata + comma
 800078a:	2305      	movs	r3, #5
 800078c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t readBuf[packetSize];
 8000790:	f897 603d 	ldrb.w	r6, [r7, #61]	; 0x3d
 8000794:	4633      	mov	r3, r6
 8000796:	3b01      	subs	r3, #1
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
 800079a:	b2f3      	uxtb	r3, r6
 800079c:	2200      	movs	r2, #0
 800079e:	4698      	mov	r8, r3
 80007a0:	4691      	mov	r9, r2
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	f04f 0300 	mov.w	r3, #0
 80007aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007b6:	b2f3      	uxtb	r3, r6
 80007b8:	2200      	movs	r2, #0
 80007ba:	461c      	mov	r4, r3
 80007bc:	4615      	mov	r5, r2
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	f04f 0300 	mov.w	r3, #0
 80007c6:	00eb      	lsls	r3, r5, #3
 80007c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007cc:	00e2      	lsls	r2, r4, #3
 80007ce:	4633      	mov	r3, r6
 80007d0:	3307      	adds	r3, #7
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	ebad 0d03 	sub.w	sp, sp, r3
 80007da:	466b      	mov	r3, sp
 80007dc:	3300      	adds	r3, #0
 80007de:	637b      	str	r3, [r7, #52]	; 0x34

	// Check if bitmap will be written off-screen
	uint16_t limitY = (yp+height)<VGA_DISPLAY_Y?(yp+height):VGA_DISPLAY_Y;
 80007e0:	88ba      	ldrh	r2, [r7, #4]
 80007e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80007e4:	4413      	add	r3, r2
 80007e6:	2bf0      	cmp	r3, #240	; 0xf0
 80007e8:	bfa8      	it	ge
 80007ea:	23f0      	movge	r3, #240	; 0xf0
 80007ec:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t limitX = (xp+width)<VGA_DISPLAY_X?(xp+width):VGA_DISPLAY_X;
 80007ee:	88fa      	ldrh	r2, [r7, #6]
 80007f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80007f4:	4413      	add	r3, r2
 80007f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80007fa:	bfa8      	it	ge
 80007fc:	f44f 73a0 	movge.w	r3, #320	; 0x140
 8000800:	863b      	strh	r3, [r7, #48]	; 0x30

	uint8_t pixelColor = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	uint16_t counter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	for(uint16_t y = yp; y < limitY; y++)
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000814:	e074      	b.n	8000900 <DrawBitmapFromSDCard+0x264>
	else if(preambleBuf[3] != 'x') return ERR_BITMAP_FORMAT;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	2b78      	cmp	r3, #120	; 0x78
 800081a:	d001      	beq.n	8000820 <DrawBitmapFromSDCard+0x184>
 800081c:	230e      	movs	r3, #14
 800081e:	e078      	b.n	8000912 <DrawBitmapFromSDCard+0x276>
	else return ERR_SDCARD_GETS;
 8000820:	230a      	movs	r3, #10
 8000822:	e076      	b.n	8000912 <DrawBitmapFromSDCard+0x276>
	{
		for(uint16_t x = xp; x < limitX; x++)
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800082a:	e035      	b.n	8000898 <DrawBitmapFromSDCard+0x1fc>
		{
			f_read(&fil, (void*)readBuf, packetSize, &bufLen);
 800082c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000830:	f107 030b 	add.w	r3, r7, #11
 8000834:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000836:	483c      	ldr	r0, [pc, #240]	; (8000928 <DrawBitmapFromSDCard+0x28c>)
 8000838:	f007 f9f6 	bl	8007c28 <f_read>
//			printf(readBuf);
			readBuf[strlen(readBuf)-1] = '\0';
 800083c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800083e:	f7ff fcc7 	bl	80001d0 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	3b01      	subs	r3, #1
 8000846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	54d1      	strb	r1, [r2, r3]
			uint8_t pixelColor = (uint8_t)strtol(readBuf, NULL, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000852:	f007 ffd5 	bl	8008800 <strtol>
 8000856:	4603      	mov	r3, r0
 8000858:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			memset(readBuf ,0, sizeof(readBuf));
 800085c:	4633      	mov	r3, r6
 800085e:	461a      	mov	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000864:	f007 ff2a 	bl	80086bc <memset>
//			UB_VGA_SetPixel(x, y, pixelColor);
			VGA_RAM1[(y * (VGA_DISPLAY_X + 1)) + x] = pixelColor;
 8000868:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	019b      	lsls	r3, r3, #6
 8000874:	441a      	add	r2, r3
 8000876:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800087a:	4413      	add	r3, r2
 800087c:	492d      	ldr	r1, [pc, #180]	; (8000934 <DrawBitmapFromSDCard+0x298>)
 800087e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000882:	54ca      	strb	r2, [r1, r3]
			++counter;
 8000884:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000888:	3301      	adds	r3, #1
 800088a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		for(uint16_t x = xp; x < limitX; x++)
 800088e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000892:	3301      	adds	r3, #1
 8000894:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000898:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800089c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800089e:	429a      	cmp	r2, r3
 80008a0:	d3c4      	bcc.n	800082c <DrawBitmapFromSDCard+0x190>
		}
		if(((xp + width) > (VGA_DISPLAY_X + 1)) && ((counter + width) > (VGA_DISPLAY_X + 1))) {
 80008a2:	88fa      	ldrh	r2, [r7, #6]
 80008a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80008a8:	4413      	add	r3, r2
 80008aa:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 80008ae:	db17      	blt.n	80008e0 <DrawBitmapFromSDCard+0x244>
 80008b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80008b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80008b8:	4413      	add	r3, r2
 80008ba:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 80008be:	db0f      	blt.n	80008e0 <DrawBitmapFromSDCard+0x244>
			f_lseek(fil.fptr, (packetSize * (xp + width - VGA_DISPLAY_X)));
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <DrawBitmapFromSDCard+0x28c>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80008ca:	88f9      	ldrh	r1, [r7, #6]
 80008cc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80008d0:	440a      	add	r2, r1
 80008d2:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 80008d6:	fb02 f303 	mul.w	r3, r2, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	f007 fb8b 	bl	8007ff6 <f_lseek>
		}
		counter = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		if(fil.fptr > 327689) printf("ohkut");
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <DrawBitmapFromSDCard+0x28c>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <DrawBitmapFromSDCard+0x29c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d902      	bls.n	80008f6 <DrawBitmapFromSDCard+0x25a>
 80008f0:	4812      	ldr	r0, [pc, #72]	; (800093c <DrawBitmapFromSDCard+0x2a0>)
 80008f2:	f007 feeb 	bl	80086cc <iprintf>
	for(uint16_t y = yp; y < limitY; y++)
 80008f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80008fa:	3301      	adds	r3, #1
 80008fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000900:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000904:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000906:	429a      	cmp	r2, r3
 8000908:	d38c      	bcc.n	8000824 <DrawBitmapFromSDCard+0x188>
//		fil.fptr = 9;
	}

	f_close(&fil);
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <DrawBitmapFromSDCard+0x28c>)
 800090c:	f007 fb49 	bl	8007fa2 <f_close>
	return ERR_NONE;
 8000910:	2304      	movs	r3, #4
 8000912:	46d5      	mov	sp, sl
}
 8000914:	4618      	mov	r0, r3
 8000916:	3748      	adds	r7, #72	; 0x48
 8000918:	46bd      	mov	sp, r7
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	bf00      	nop
 8000920:	20000504 	.word	0x20000504
 8000924:	08009b48 	.word	0x08009b48
 8000928:	200002d4 	.word	0x200002d4
 800092c:	08009b50 	.word	0x08009b50
 8000930:	08009b78 	.word	0x08009b78
 8000934:	20000a94 	.word	0x20000a94
 8000938:	00050009 	.word	0x00050009
 800093c:	08009b84 	.word	0x08009b84

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <MX_DMA_Init+0x3c>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2044      	movs	r0, #68	; 0x44
 8000968:	f000 ffd9 	bl	800191e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800096c:	2044      	movs	r0, #68	; 0x44
 800096e:	f000 fff2 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <MX_GPIO_Init+0x108>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a3a      	ldr	r2, [pc, #232]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b38      	ldr	r3, [pc, #224]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a33      	ldr	r2, [pc, #204]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a25      	ldr	r2, [pc, #148]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <MX_GPIO_Init+0x108>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4820      	ldr	r0, [pc, #128]	; (8000a8c <MX_GPIO_Init+0x10c>)
 8000a0c:	f001 fcec 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000a16:	481e      	ldr	r0, [pc, #120]	; (8000a90 <MX_GPIO_Init+0x110>)
 8000a18:	f001 fce6 	bl	80023e8 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <MX_GPIO_Init+0x114>)
 8000a24:	f001 fce0 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4813      	ldr	r0, [pc, #76]	; (8000a8c <MX_GPIO_Init+0x10c>)
 8000a40:	f001 fb36 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000a44:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000a48:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_GPIO_Init+0x110>)
 8000a5e:	f001 fb27 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <MX_GPIO_Init+0x114>)
 8000a7c:	f001 fb18 	bl	80020b0 <HAL_GPIO_Init>

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40020400 	.word	0x40020400

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 fdf1 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f853 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f7ff ff6b 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aaa:	f7ff ff49 	bl	8000940 <MX_DMA_Init>
  MX_TIM1_Init();
 8000aae:	f000 fb3f 	bl	8001130 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ab2:	f000 fb8d 	bl	80011d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ab6:	f000 fca3 	bl	8001400 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000aba:	f000 f8cb 	bl	8000c54 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000abe:	f004 fc21 	bl	8005304 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  Error tempError = SDCardInit(); //Init SD Card
 8000ac2:	f7ff fd9f 	bl	8000604 <SDCardInit>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	70fb      	strb	r3, [r7, #3]
  if(tempError != ERR_NONE)
 8000aca:	78fb      	ldrb	r3, [r7, #3]
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d003      	beq.n	8000ad8 <main+0x40>
  {
	  TransmitError(tempError);
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd56 	bl	8000584 <TransmitError>
  }

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000ad8:	f000 fd36 	bl	8001548 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 fd85 	bl	80015ec <UB_VGA_FillScreen>
//  UB_VGA_SetPixel(10,16,VGA_COL_BLUE);
//  UB_VGA_SetPixel(0,0,0x00);
//  UB_VGA_SetPixel(319,,0x00);
  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	e008      	b.n	8000afa <main+0x62>
	  input.line_rx_buffer[i] = 0;
 8000ae8:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <main+0xac>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	3301      	adds	r3, #1
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b00:	dbf2      	blt.n	8000ae8 <main+0x50>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <main+0xac>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <main+0xac>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <main+0xac>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	490a      	ldr	r1, [pc, #40]	; (8000b44 <main+0xac>)
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <main+0xb0>)
 8000b1e:	f003 fc43 	bl	80043a8 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 8000b22:	23ff      	movs	r3, #255	; 0xff
 8000b24:	70bb      	strb	r3, [r7, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <main+0xac>)
 8000b28:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000b2c:	2bff      	cmp	r3, #255	; 0xff
 8000b2e:	d1fa      	bne.n	8000b26 <main+0x8e>
	  {
//		  // Do some stuff
//		  printf("yes\n");
//		  colorTest = ~colorTest; // Toggle screen color
//		  UB_VGA_FillScreen(colorTest);
		  DrawBitmapFromSDCard(100,100,1);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2164      	movs	r1, #100	; 0x64
 8000b34:	2064      	movs	r0, #100	; 0x64
 8000b36:	f7ff fdb1 	bl	800069c <DrawBitmapFromSDCard>

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8000b3a:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <main+0xac>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8000b42:	e7f0      	b.n	8000b26 <main+0x8e>
 8000b44:	20000508 	.word	0x20000508
 8000b48:	20000a54 	.word	0x20000a54

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	2230      	movs	r2, #48	; 0x30
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f007 fdae 	bl	80086bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <SystemClock_Config+0xcc>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <SystemClock_Config+0xcc>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <SystemClock_Config+0xcc>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bc0:	23a8      	movs	r3, #168	; 0xa8
 8000bc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fc23 	bl	800241c <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bdc:	f000 f832 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2302      	movs	r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2105      	movs	r1, #5
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fe7a 	bl	80028f8 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c0a:	f000 f81b 	bl	8000c44 <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3750      	adds	r7, #80	; 0x50
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40007000 	.word	0x40007000

08000c20 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000c28:	1d39      	adds	r1, r7, #4
 8000c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <__io_putchar+0x20>)
 8000c32:	f003 fb20 	bl	8004276 <HAL_UART_Transmit>
	return ch;												//Return the character
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000a54 	.word	0x20000a54

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c5a:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <MX_SPI1_Init+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c88:	2238      	movs	r2, #56	; 0x38
 8000c8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000ca0:	220a      	movs	r2, #10
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_SPI1_Init+0x64>)
 8000ca6:	f002 f847 	bl	8002d38 <HAL_SPI_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cb0:	f7ff ffc8 	bl	8000c44 <Error_Handler>
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000918 	.word	0x20000918
 8000cbc:	40013000 	.word	0x40013000

08000cc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <HAL_SPI_MspInit+0xc0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d149      	bne.n	8000d76 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <HAL_SPI_MspInit+0xc4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d36:	23c0      	movs	r3, #192	; 0xc0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d46:	2305      	movs	r3, #5
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <HAL_SPI_MspInit+0xc8>)
 8000d52:	f001 f9ad 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CS_Pin;
 8000d56:	2308      	movs	r3, #8
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d66:	2305      	movs	r3, #5
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <HAL_SPI_MspInit+0xcc>)
 8000d72:	f001 f99d 	bl	80020b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40013000 	.word	0x40013000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 fc78 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e40:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <TIM2_IRQHandler+0xa8>)
 8000e42:	f002 fb67 	bl	8003514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <TIM2_IRQHandler+0xa8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f06f 0208 	mvn.w	r2, #8
 8000e4e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000e5a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000e64:	d905      	bls.n	8000e72 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000e66:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <TIM2_IRQHandler+0xb0>)
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000e70:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d802      	bhi.n	8000e80 <TIM2_IRQHandler+0x44>
 8000e7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e7e:	e001      	b.n	8000e84 <TIM2_IRQHandler+0x48>
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <TIM2_IRQHandler+0xb4>)
 8000e86:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	2b23      	cmp	r3, #35	; 0x23
 8000e8e:	d927      	bls.n	8000ee0 <TIM2_IRQHandler+0xa4>
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	f240 2202 	movw	r2, #514	; 0x202
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d821      	bhi.n	8000ee0 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000e9c:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <TIM2_IRQHandler+0xb8>)
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <TIM2_IRQHandler+0xb8>)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <TIM2_IRQHandler+0xbc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <TIM2_IRQHandler+0xbc>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <TIM2_IRQHandler+0xc0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <TIM2_IRQHandler+0xc0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d005      	beq.n	8000ee0 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000edc:	4a02      	ldr	r2, [pc, #8]	; (8000ee8 <TIM2_IRQHandler+0xac>)
 8000ede:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200009b4 	.word	0x200009b4
 8000ee8:	20013784 	.word	0x20013784
 8000eec:	20000a94 	.word	0x20000a94
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40026488 	.word	0x40026488
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	200009f4 	.word	0x200009f4

08000f00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <USART2_IRQHandler+0x70>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b0a      	cmp	r3, #10
 8000f10:	d026      	beq.n	8000f60 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b0d      	cmp	r3, #13
 8000f16:	d002      	beq.n	8000f1e <USART2_IRQHandler+0x1e>
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8000f1c:	d10e      	bne.n	8000f3c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <USART2_IRQHandler+0x74>)
 8000f20:	22ff      	movs	r2, #255	; 0xff
 8000f22:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <USART2_IRQHandler+0x74>)
 8000f28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f2c:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <USART2_IRQHandler+0x74>)
 8000f2e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <USART2_IRQHandler+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000f3a:	e011      	b.n	8000f60 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <USART2_IRQHandler+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <USART2_IRQHandler+0x74>)
 8000f46:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <USART2_IRQHandler+0x74>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	79fa      	ldrb	r2, [r7, #7]
 8000f50:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <USART2_IRQHandler+0x74>)
 8000f54:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <USART2_IRQHandler+0x74>)
 8000f5c:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <USART2_IRQHandler+0x78>)
 8000f62:	f003 fa77 	bl	8004454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40004400 	.word	0x40004400
 8000f74:	20000508 	.word	0x20000508
 8000f78:	20000a54 	.word	0x20000a54

08000f7c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <DMA2_Stream5_IRQHandler+0x48>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6a1a      	ldr	r2, [r3, #32]
 8000f86:	f241 1311 	movw	r3, #4369	; 0x1111
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10f      	bne.n	8000fb0 <DMA2_Stream5_IRQHandler+0x34>
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <DMA2_Stream5_IRQHandler+0x48>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	f240 4344 	movw	r3, #1092	; 0x444
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <DMA2_Stream5_IRQHandler+0x34>
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <DMA2_Stream5_IRQHandler+0x48>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <DMA2_Stream5_IRQHandler+0x48>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <DMA2_Stream5_IRQHandler+0x4c>)
 8000fb2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <DMA2_Stream5_IRQHandler+0x50>)
 8000fba:	f000 fe0f 	bl	8001bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000974 	.word	0x20000974
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	200009f4 	.word	0x200009f4

08000fd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e00a      	b.n	8000ff8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fe2:	f3af 8000 	nop.w
 8000fe6:	4601      	mov	r1, r0
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	60ba      	str	r2, [r7, #8]
 8000fee:	b2ca      	uxtb	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf0      	blt.n	8000fe2 <_read+0x12>
	}

return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e009      	b.n	8001030 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fdfb 	bl	8000c20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbf1      	blt.n	800101c <_write+0x12>
	}
	return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_close>:

int _close(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	return -1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106a:	605a      	str	r2, [r3, #4]
	return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_isatty>:

int _isatty(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	return 1;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <_sbrk+0x50>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x16>
		heap_end = &end;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <_sbrk+0x50>)
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <_sbrk+0x54>)
 80010c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <_sbrk+0x50>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <_sbrk+0x50>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	466a      	mov	r2, sp
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d907      	bls.n	80010e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010d6:	f007 faad 	bl	8008634 <__errno>
 80010da:	4603      	mov	r3, r0
 80010dc:	220c      	movs	r2, #12
 80010de:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	e006      	b.n	80010f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <_sbrk+0x50>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a03      	ldr	r2, [pc, #12]	; (80010fc <_sbrk+0x50>)
 80010f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000970 	.word	0x20000970
 8001100:	200137f0 	.word	0x200137f0

08001104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <SystemInit+0x28>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <SystemInit+0x28>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <SystemInit+0x28>)
 800111a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800111e:	609a      	str	r2, [r3, #8]
#endif
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM1_Init+0x98>)
 800114e:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <MX_TIM1_Init+0x9c>)
 8001150:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM1_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_TIM1_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_TIM1_Init+0x98>)
 8001160:	220b      	movs	r2, #11
 8001162:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_TIM1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_TIM1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_TIM1_Init+0x98>)
 8001178:	f002 f890 	bl	800329c <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001182:	f7ff fd5f 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_TIM1_Init+0x98>)
 8001194:	f002 fb8c 	bl	80038b0 <HAL_TIM_ConfigClockSource>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800119e:	f7ff fd51 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM1_Init+0x98>)
 80011b0:	f002 ff84 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80011ba:	f7ff fd43 	bl	8000c44 <Error_Handler>
  }

}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000974 	.word	0x20000974
 80011cc:	40010000 	.word	0x40010000

080011d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <MX_TIM2_Init+0xcc>)
 80011f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <MX_TIM2_Init+0xcc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <MX_TIM2_Init+0xcc>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <MX_TIM2_Init+0xcc>)
 8001208:	f640 226b 	movw	r2, #2667	; 0xa6b
 800120c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <MX_TIM2_Init+0xcc>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_TIM2_Init+0xcc>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800121a:	4820      	ldr	r0, [pc, #128]	; (800129c <MX_TIM2_Init+0xcc>)
 800121c:	f002 f88d 	bl	800333a <HAL_TIM_PWM_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001226:	f7ff fd0d 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	4619      	mov	r1, r3
 8001238:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_TIM2_Init+0xcc>)
 800123a:	f002 ff3f 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001244:	f7ff fcfe 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001248:	2360      	movs	r3, #96	; 0x60
 800124a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 800124c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001250:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001252:	2302      	movs	r3, #2
 8001254:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2208      	movs	r2, #8
 800125e:	4619      	mov	r1, r3
 8001260:	480e      	ldr	r0, [pc, #56]	; (800129c <MX_TIM2_Init+0xcc>)
 8001262:	f002 fa5f 	bl	8003724 <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800126c:	f7ff fcea 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001270:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	220c      	movs	r2, #12
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM2_Init+0xcc>)
 800127e:	f002 fa51 	bl	8003724 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001288:	f7ff fcdc 	bl	8000c44 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM2_Init+0xcc>)
 800128e:	f000 f87f 	bl	8001390 <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200009b4 	.word	0x200009b4

080012a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_TIM_Base_MspInit+0x94>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d13c      	bne.n	800132c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_TIM_Base_MspInit+0x98>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_TIM_Base_MspInit+0x98>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_TIM_Base_MspInit+0x98>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_TIM_Base_MspInit+0xa0>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 80012d6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80012da:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 8001304:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001308:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 8001312:	f000 fb3b 	bl	800198c <HAL_DMA_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 800131c:	f7ff fc92 	bl	8000c44 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 8001324:	621a      	str	r2, [r3, #32]
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <HAL_TIM_Base_MspInit+0x9c>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010000 	.word	0x40010000
 8001338:	40023800 	.word	0x40023800
 800133c:	200009f4 	.word	0x200009f4
 8001340:	40026488 	.word	0x40026488

08001344 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d115      	bne.n	8001382 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_TIM_PWM_MspInit+0x48>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <HAL_TIM_PWM_MspInit+0x48>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_TIM_PWM_MspInit+0x48>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	201c      	movs	r0, #28
 8001378:	f000 fad1 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800137c:	201c      	movs	r0, #28
 800137e:	f000 faea 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b0:	d11e      	bne.n	80013f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_TIM_MspPostInit+0x68>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_TIM_MspPostInit+0x68>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_TIM_MspPostInit+0x68>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 80013ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <HAL_TIM_MspPostInit+0x6c>)
 80013ec:	f000 fe60 	bl	80020b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400

08001400 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_USART2_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_USART2_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001438:	f002 fed0 	bl	80041dc <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f7ff fbff 	bl	8000c44 <Error_Handler>
  }

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000a54 	.word	0x20000a54
 8001450:	40004400 	.word	0x40004400

08001454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_UART_MspInit+0x94>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d133      	bne.n	80014de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_UART_MspInit+0x98>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <HAL_UART_MspInit+0x98>)
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_UART_MspInit+0x98>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_UART_MspInit+0x98>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_UART_MspInit+0x98>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_UART_MspInit+0x98>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ae:	230c      	movs	r3, #12
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014be:	2307      	movs	r3, #7
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4809      	ldr	r0, [pc, #36]	; (80014f0 <HAL_UART_MspInit+0x9c>)
 80014ca:	f000 fdf1 	bl	80020b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2026      	movs	r0, #38	; 0x26
 80014d4:	f000 fa23 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014d8:	2026      	movs	r0, #38	; 0x26
 80014da:	f000 fa3c 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40004400 	.word	0x40004400
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014fa:	e003      	b.n	8001504 <LoopCopyDataInit>

080014fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001500:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001502:	3104      	adds	r1, #4

08001504 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001508:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800150a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800150c:	d3f6      	bcc.n	80014fc <CopyDataInit>
  ldr  r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001510:	e002      	b.n	8001518 <LoopFillZerobss>

08001512 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001512:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001514:	f842 3b04 	str.w	r3, [r2], #4

08001518 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800151a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800151c:	d3f9      	bcc.n	8001512 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800151e:	f7ff fdf1 	bl	8001104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f007 f88d 	bl	8008640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7ff fab7 	bl	8000a98 <main>
  bx  lr    
 800152a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800152c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001530:	0800a054 	.word	0x0800a054
  ldr  r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001538:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 800153c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001540:	200137ec 	.word	0x200137ec

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <UB_VGA_Screen_Init+0x84>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <UB_VGA_Screen_Init+0x84>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <UB_VGA_Screen_Init+0x84>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <UB_VGA_Screen_Init+0x88>)
 8001560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001564:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001566:	481b      	ldr	r0, [pc, #108]	; (80015d4 <UB_VGA_Screen_Init+0x8c>)
 8001568:	f001 fec3 	bl	80032f2 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800156c:	210c      	movs	r1, #12
 800156e:	4819      	ldr	r0, [pc, #100]	; (80015d4 <UB_VGA_Screen_Init+0x8c>)
 8001570:	f001 ff0e 	bl	8003390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001574:	2108      	movs	r1, #8
 8001576:	4817      	ldr	r0, [pc, #92]	; (80015d4 <UB_VGA_Screen_Init+0x8c>)
 8001578:	f001 ff48 	bl	800340c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <UB_VGA_Screen_Init+0x90>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <UB_VGA_Screen_Init+0x90>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800158a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <UB_VGA_Screen_Init+0x90>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <UB_VGA_Screen_Init+0x90>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 800159c:	490f      	ldr	r1, [pc, #60]	; (80015dc <UB_VGA_Screen_Init+0x94>)
 800159e:	f240 1341 	movw	r3, #321	; 0x141
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <UB_VGA_Screen_Init+0x98>)
 80015a4:	480f      	ldr	r0, [pc, #60]	; (80015e4 <UB_VGA_Screen_Init+0x9c>)
 80015a6:	f000 fa9f 	bl	8001ae8 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <UB_VGA_Screen_Init+0x9c>)
 80015ac:	f000 f9ee 	bl	800198c <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <UB_VGA_Screen_Init+0x9c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <UB_VGA_Screen_Init+0x9c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0210 	orr.w	r2, r2, #16
 80015be:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <UB_VGA_Screen_Init+0xa0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a01      	ldr	r2, [pc, #4]	; (80015cc <UB_VGA_Screen_Init+0x84>)
 80015c6:	6093      	str	r3, [r2, #8]
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20013784 	.word	0x20013784
 80015d0:	40020400 	.word	0x40020400
 80015d4:	200009b4 	.word	0x200009b4
 80015d8:	20000974 	.word	0x20000974
 80015dc:	20000a94 	.word	0x20000a94
 80015e0:	40021015 	.word	0x40021015
 80015e4:	200009f4 	.word	0x200009f4
 80015e8:	40026488 	.word	0x40026488

080015ec <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	81bb      	strh	r3, [r7, #12]
 80015fa:	e012      	b.n	8001622 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	81fb      	strh	r3, [r7, #14]
 8001600:	e008      	b.n	8001614 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001602:	79fa      	ldrb	r2, [r7, #7]
 8001604:	89b9      	ldrh	r1, [r7, #12]
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f813 	bl	8001634 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	3301      	adds	r3, #1
 8001612:	81fb      	strh	r3, [r7, #14]
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800161a:	d3f2      	bcc.n	8001602 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	81bb      	strh	r3, [r7, #12]
 8001622:	89bb      	ldrh	r3, [r7, #12]
 8001624:	2bef      	cmp	r3, #239	; 0xef
 8001626:	d9e9      	bls.n	80015fc <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
 800163e:	460b      	mov	r3, r1
 8001640:	80bb      	strh	r3, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800164c:	d301      	bcc.n	8001652 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	2bef      	cmp	r3, #239	; 0xef
 8001656:	d901      	bls.n	800165c <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 800165c:	88ba      	ldrh	r2, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	019b      	lsls	r3, r3, #6
 8001666:	441a      	add	r2, r3
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	4413      	add	r3, r2
 800166c:	4904      	ldr	r1, [pc, #16]	; (8001680 <UB_VGA_SetPixel+0x4c>)
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	54ca      	strb	r2, [r1, r3]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000a94 	.word	0x20000a94

08001684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_Init+0x40>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_Init+0x40>)
 800169a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x40>)
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f92b 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fb6a 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023c00 	.word	0x40023c00

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f943 	bl	8001972 <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f90b 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008
 800174c:	20013790 	.word	0x20013790

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20013790 	.word	0x20013790

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff29 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff3e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff31 	bl	80017cc <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff feda 	bl	8001750 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e099      	b.n	8001adc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c8:	e00f      	b.n	80019ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ca:	f7ff fec1 	bl	8001750 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d908      	bls.n	80019ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e078      	b.n	8001adc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e8      	bne.n	80019ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_DMA_Init+0x158>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d107      	bne.n	8001a54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f023 0307 	bic.w	r3, r3, #7
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d117      	bne.n	8001aae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00e      	beq.n	8001aae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fa91 	bl	8001fb8 <DMA_CheckFifoParam>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2240      	movs	r2, #64	; 0x40
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e016      	b.n	8001adc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fa48 	bl	8001f4c <DMA_CalcBaseAndBitshift>
 8001abc:	4603      	mov	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	223f      	movs	r2, #63	; 0x3f
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	f010803f 	.word	0xf010803f

08001ae8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_DMA_Start_IT+0x26>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e040      	b.n	8001b90 <HAL_DMA_Start_IT+0xa8>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d12f      	bne.n	8001b82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f9da 	bl	8001ef0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	223f      	movs	r2, #63	; 0x3f
 8001b42:	409a      	lsls	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0216 	orr.w	r2, r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e005      	b.n	8001b8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00c      	b.n	8001bd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2205      	movs	r2, #5
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001be8:	4b8e      	ldr	r3, [pc, #568]	; (8001e24 <HAL_DMA_IRQHandler+0x248>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a8e      	ldr	r2, [pc, #568]	; (8001e28 <HAL_DMA_IRQHandler+0x24c>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0a9b      	lsrs	r3, r3, #10
 8001bf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2208      	movs	r2, #8
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d01a      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0204 	bic.w	r2, r2, #4
 8001c2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2208      	movs	r2, #8
 8001c36:	409a      	lsls	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d012      	beq.n	8001c7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	2204      	movs	r2, #4
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2210      	movs	r2, #16
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d043      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d03c      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d018      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d108      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e01f      	b.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01b      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
 8001d1c:	e016      	b.n	8001d4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0208 	bic.w	r2, r2, #8
 8001d3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	2220      	movs	r2, #32
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 808f 	beq.w	8001e7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8087 	beq.w	8001e7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2220      	movs	r2, #32
 8001d74:	409a      	lsls	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d136      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0216 	bic.w	r2, r2, #22
 8001d94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_DMA_IRQHandler+0x1da>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0208 	bic.w	r2, r2, #8
 8001dc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	223f      	movs	r2, #63	; 0x3f
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d07e      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
        }
        return;
 8001df2:	e079      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01d      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d031      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
 8001e20:	e02c      	b.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000
 8001e28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d023      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
 8001e3c:	e01e      	b.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10f      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0210 	bic.w	r2, r2, #16
 8001e5a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d032      	beq.n	8001eea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d022      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2205      	movs	r2, #5
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d307      	bcc.n	8001ec4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f2      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x2cc>
 8001ec2:	e000      	b.n	8001ec6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ec4:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
 8001ee6:	e000      	b.n	8001eea <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ee8:	bf00      	nop
    }
  }
}
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
 8001f1c:	d108      	bne.n	8001f30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f2e:	e007      	b.n	8001f40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	60da      	str	r2, [r3, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	3b10      	subs	r3, #16
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d909      	bls.n	8001f8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	1d1a      	adds	r2, r3, #4
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f8c:	e007      	b.n	8001f9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	aaaaaaab 	.word	0xaaaaaaab
 8001fb4:	08009dfc 	.word	0x08009dfc

08001fb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11f      	bne.n	8002012 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d856      	bhi.n	8002086 <DMA_CheckFifoParam+0xce>
 8001fd8:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <DMA_CheckFifoParam+0x28>)
 8001fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fde:	bf00      	nop
 8001fe0:	08001ff1 	.word	0x08001ff1
 8001fe4:	08002003 	.word	0x08002003
 8001fe8:	08001ff1 	.word	0x08001ff1
 8001fec:	08002087 	.word	0x08002087
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d046      	beq.n	800208a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002000:	e043      	b.n	800208a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800200a:	d140      	bne.n	800208e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002010:	e03d      	b.n	800208e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800201a:	d121      	bne.n	8002060 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d837      	bhi.n	8002092 <DMA_CheckFifoParam+0xda>
 8002022:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <DMA_CheckFifoParam+0x70>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002039 	.word	0x08002039
 800202c:	0800203f 	.word	0x0800203f
 8002030:	08002039 	.word	0x08002039
 8002034:	08002051 	.word	0x08002051
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      break;
 800203c:	e030      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d025      	beq.n	8002096 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204e:	e022      	b.n	8002096 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002058:	d11f      	bne.n	800209a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800205e:	e01c      	b.n	800209a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d903      	bls.n	800206e <DMA_CheckFifoParam+0xb6>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d003      	beq.n	8002074 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800206c:	e018      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
      break;
 8002072:	e015      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00e      	beq.n	800209e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
      break;
 8002084:	e00b      	b.n	800209e <DMA_CheckFifoParam+0xe6>
      break;
 8002086:	bf00      	nop
 8002088:	e00a      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
 800208c:	e008      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 800208e:	bf00      	nop
 8002090:	e006      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002092:	bf00      	nop
 8002094:	e004      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002096:	bf00      	nop
 8002098:	e002      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800209a:	bf00      	nop
 800209c:	e000      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
    }
  } 
  
  return status; 
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e16b      	b.n	80023a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 815a 	bne.w	800239e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d00b      	beq.n	800210a <HAL_GPIO_Init+0x5a>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020fe:	2b11      	cmp	r3, #17
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b12      	cmp	r3, #18
 8002108:	d130      	bne.n	800216c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002140:	2201      	movs	r2, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 0201 	and.w	r2, r3, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0xfc>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b12      	cmp	r3, #18
 80021aa:	d123      	bne.n	80021f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80b4 	beq.w	800239e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b60      	ldr	r3, [pc, #384]	; (80023bc <HAL_GPIO_Init+0x30c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a5f      	ldr	r2, [pc, #380]	; (80023bc <HAL_GPIO_Init+0x30c>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <HAL_GPIO_Init+0x30c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <HAL_GPIO_Init+0x310>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a52      	ldr	r2, [pc, #328]	; (80023c4 <HAL_GPIO_Init+0x314>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02b      	beq.n	80022d6 <HAL_GPIO_Init+0x226>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a51      	ldr	r2, [pc, #324]	; (80023c8 <HAL_GPIO_Init+0x318>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x222>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a50      	ldr	r2, [pc, #320]	; (80023cc <HAL_GPIO_Init+0x31c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x21e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4f      	ldr	r2, [pc, #316]	; (80023d0 <HAL_GPIO_Init+0x320>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x21a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4e      	ldr	r2, [pc, #312]	; (80023d4 <HAL_GPIO_Init+0x324>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x216>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4d      	ldr	r2, [pc, #308]	; (80023d8 <HAL_GPIO_Init+0x328>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x212>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4c      	ldr	r2, [pc, #304]	; (80023dc <HAL_GPIO_Init+0x32c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x20e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4b      	ldr	r2, [pc, #300]	; (80023e0 <HAL_GPIO_Init+0x330>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x20a>
 80022b6:	2307      	movs	r3, #7
 80022b8:	e00e      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022ba:	2308      	movs	r3, #8
 80022bc:	e00c      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022be:	2306      	movs	r3, #6
 80022c0:	e00a      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022c2:	2305      	movs	r3, #5
 80022c4:	e008      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022c6:	2304      	movs	r3, #4
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e004      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x228>
 80022d6:	2300      	movs	r3, #0
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f002 0203 	and.w	r2, r2, #3
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4093      	lsls	r3, r2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	4935      	ldr	r1, [pc, #212]	; (80023c0 <HAL_GPIO_Init+0x310>)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f6:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <HAL_GPIO_Init+0x334>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231a:	4a32      	ldr	r2, [pc, #200]	; (80023e4 <HAL_GPIO_Init+0x334>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_GPIO_Init+0x334>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002344:	4a27      	ldr	r2, [pc, #156]	; (80023e4 <HAL_GPIO_Init+0x334>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_GPIO_Init+0x334>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236e:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_GPIO_Init+0x334>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_GPIO_Init+0x334>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002398:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <HAL_GPIO_Init+0x334>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	f67f ae90 	bls.w	80020cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020c00 	.word	0x40020c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40021400 	.word	0x40021400
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40021c00 	.word	0x40021c00
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e25e      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d075      	beq.n	8002526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b82      	ldr	r3, [pc, #520]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b7e      	ldr	r3, [pc, #504]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05b      	beq.n	8002524 <HAL_RCC_OscConfig+0x108>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d157      	bne.n	8002524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e239      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x74>
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a75      	ldr	r2, [pc, #468]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b70      	ldr	r3, [pc, #448]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6f      	ldr	r2, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b6d      	ldr	r3, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6c      	ldr	r2, [pc, #432]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 80024b4:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a68      	ldr	r2, [pc, #416]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a65      	ldr	r2, [pc, #404]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff f93c 	bl	8001750 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f938 	bl	8001750 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1fe      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xc0>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff f928 	bl	8001750 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff f924 	bl	8001750 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1ea      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b51      	ldr	r3, [pc, #324]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0xe8>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d063      	beq.n	80025fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002546:	2b08      	cmp	r3, #8
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b44      	ldr	r3, [pc, #272]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1be      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4937      	ldr	r1, [pc, #220]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	e03a      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCC_OscConfig+0x244>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff f8dd 	bl	8001750 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff f8d9 	bl	8001750 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e19f      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4925      	ldr	r1, [pc, #148]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_RCC_OscConfig+0x244>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff f8bc 	bl	8001750 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025dc:	f7ff f8b8 	bl	8001750 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e17e      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d036      	beq.n	8002674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_RCC_OscConfig+0x248>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7ff f89c 	bl	8001750 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261c:	f7ff f898 	bl	8001750 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e15e      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x200>
 800263a:	e01b      	b.n	8002674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_OscConfig+0x248>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7ff f885 	bl	8001750 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	e00e      	b.n	8002668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264a:	f7ff f881 	bl	8001750 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d907      	bls.n	8002668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e147      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
 800265c:	40023800 	.word	0x40023800
 8002660:	42470000 	.word	0x42470000
 8002664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800266a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ea      	bne.n	800264a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8097 	beq.w	80027b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b7d      	ldr	r3, [pc, #500]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	4a7c      	ldr	r2, [pc, #496]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	; 0x40
 80026a2:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b77      	ldr	r3, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b74      	ldr	r3, [pc, #464]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a73      	ldr	r2, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7ff f841 	bl	8001750 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7ff f83d 	bl	8001750 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e103      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x2ea>
 80026f8:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a63      	ldr	r2, [pc, #396]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x324>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x30c>
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a5e      	ldr	r2, [pc, #376]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a5b      	ldr	r2, [pc, #364]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0x324>
 8002728:	4b58      	ldr	r3, [pc, #352]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6713      	str	r3, [r2, #112]	; 0x70
 8002734:	4b55      	ldr	r3, [pc, #340]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a54      	ldr	r2, [pc, #336]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff f802 	bl	8001750 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fffe 	bl	8001750 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0c2      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ee      	beq.n	8002750 <HAL_RCC_OscConfig+0x334>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7fe ffec 	bl	8001750 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe ffe8 	bl	8001750 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0ac      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	4b3e      	ldr	r3, [pc, #248]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ee      	bne.n	800277c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4a38      	ldr	r2, [pc, #224]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8098 	beq.w	80028ea <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d05c      	beq.n	8002880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d141      	bne.n	8002852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_RCC_OscConfig+0x478>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe ffbc 	bl	8001750 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe ffb8 	bl	8001750 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e07e      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	3b01      	subs	r3, #1
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	491b      	ldr	r1, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x478>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe ff91 	bl	8001750 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe ff8d 	bl	8001750 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e053      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x416>
 8002850:	e04b      	b.n	80028ea <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCC_OscConfig+0x478>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe ff7a 	bl	8001750 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe ff76 	bl	8001750 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e03c      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x444>
 800287e:	e034      	b.n	80028ea <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e02f      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000
 8002894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HAL_RCC_OscConfig+0x4d8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d11c      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d115      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10d      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0cc      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d90c      	bls.n	8002934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b8      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800296e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	494d      	ldr	r1, [pc, #308]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d044      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d119      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e067      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d6:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4934      	ldr	r1, [pc, #208]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe feb2 	bl	8001750 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7fe feae 	bl	8001750 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e04f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 020c 	and.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1eb      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d20c      	bcs.n	8002a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e032      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a7e:	f000 f821 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	490a      	ldr	r1, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	fa22 f303 	lsr.w	r3, r2, r3
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fe12 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023c00 	.word	0x40023c00
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08009de4 	.word	0x08009de4
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac8:	b094      	sub	sp, #80	; 0x50
 8002aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002adc:	4b79      	ldr	r3, [pc, #484]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d00d      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	f200 80e1 	bhi.w	8002cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x34>
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x3a>
 8002af6:	e0db      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002afc:	e0db      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afe:	4b73      	ldr	r3, [pc, #460]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x208>)
 8002b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b02:	e0d8      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b04:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0e:	4b6d      	ldr	r3, [pc, #436]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	099b      	lsrs	r3, r3, #6
 8002b20:	2200      	movs	r2, #0
 8002b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
 8002b32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b36:	4622      	mov	r2, r4
 8002b38:	462b      	mov	r3, r5
 8002b3a:	f04f 0000 	mov.w	r0, #0
 8002b3e:	f04f 0100 	mov.w	r1, #0
 8002b42:	0159      	lsls	r1, r3, #5
 8002b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b48:	0150      	lsls	r0, r2, #5
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4621      	mov	r1, r4
 8002b50:	1a51      	subs	r1, r2, r1
 8002b52:	6139      	str	r1, [r7, #16]
 8002b54:	4629      	mov	r1, r5
 8002b56:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b68:	4659      	mov	r1, fp
 8002b6a:	018b      	lsls	r3, r1, #6
 8002b6c:	4651      	mov	r1, sl
 8002b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b72:	4651      	mov	r1, sl
 8002b74:	018a      	lsls	r2, r1, #6
 8002b76:	4651      	mov	r1, sl
 8002b78:	ebb2 0801 	subs.w	r8, r2, r1
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b96:	4690      	mov	r8, r2
 8002b98:	4699      	mov	r9, r3
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	eb18 0303 	adds.w	r3, r8, r3
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	462b      	mov	r3, r5
 8002ba4:	eb49 0303 	adc.w	r3, r9, r3
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	024b      	lsls	r3, r1, #9
 8002bba:	4621      	mov	r1, r4
 8002bbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	024a      	lsls	r2, r1, #9
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bca:	2200      	movs	r2, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bd4:	f7fd fb54 	bl	8000280 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be0:	e058      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	2200      	movs	r2, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	4611      	mov	r1, r2
 8002bee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	464b      	mov	r3, r9
 8002c00:	f04f 0000 	mov.w	r0, #0
 8002c04:	f04f 0100 	mov.w	r1, #0
 8002c08:	0159      	lsls	r1, r3, #5
 8002c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0e:	0150      	lsls	r0, r2, #5
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4641      	mov	r1, r8
 8002c16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c34:	ebb2 040a 	subs.w	r4, r2, sl
 8002c38:	eb63 050b 	sbc.w	r5, r3, fp
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	00eb      	lsls	r3, r5, #3
 8002c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c4a:	00e2      	lsls	r2, r4, #3
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	4643      	mov	r3, r8
 8002c52:	18e3      	adds	r3, r4, r3
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	464b      	mov	r3, r9
 8002c58:	eb45 0303 	adc.w	r3, r5, r3
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	028b      	lsls	r3, r1, #10
 8002c6e:	4621      	mov	r1, r4
 8002c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c74:	4621      	mov	r1, r4
 8002c76:	028a      	lsls	r2, r1, #10
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	61fa      	str	r2, [r7, #28]
 8002c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c88:	f7fd fafa 	bl	8000280 <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4613      	mov	r3, r2
 8002c92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ca4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cae:	e002      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3750      	adds	r7, #80	; 0x50
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	007a1200 	.word	0x007a1200

08002cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000000 	.word	0x20000000

08002ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cec:	f7ff fff0 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0a9b      	lsrs	r3, r3, #10
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08009df4 	.word	0x08009df4

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d14:	f7ff ffdc 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0b5b      	lsrs	r3, r3, #13
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08009df4 	.word	0x08009df4

08002d38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e056      	b.n	8002df8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fd ffab 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	ea42 0103 	orr.w	r1, r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	f003 0104 	and.w	r1, r3, #4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	; 0x30
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x26>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e18a      	b.n	800313c <HAL_SPI_TransmitReceive+0x33c>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e2e:	f7fe fc8f 	bl	8001750 <HAL_GetTick>
 8002e32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d00f      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x70>
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e56:	d107      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x68>
 8002e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d003      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e6e:	e15b      	b.n	8003128 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_SPI_TransmitReceive+0x82>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_SPI_TransmitReceive+0x82>
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e88:	e14e      	b.n	8003128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d003      	beq.n	8002e9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2205      	movs	r2, #5
 8002e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	887a      	ldrh	r2, [r7, #2]
 8002eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	887a      	ldrh	r2, [r7, #2]
 8002ec6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d007      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efa:	d178      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_TransmitReceive+0x10a>
 8002f04:	8b7b      	ldrh	r3, [r7, #26]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d166      	bne.n	8002fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	1c9a      	adds	r2, r3, #2
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f2e:	e053      	b.n	8002fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d11b      	bne.n	8002f76 <HAL_SPI_TransmitReceive+0x176>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d016      	beq.n	8002f76 <HAL_SPI_TransmitReceive+0x176>
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d113      	bne.n	8002f76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	881a      	ldrh	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	1c9a      	adds	r2, r3, #2
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d119      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x1b8>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d014      	beq.n	8002fb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	b292      	uxth	r2, r2
 8002f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	1c9a      	adds	r2, r3, #2
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fb8:	f7fe fbca 	bl	8001750 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d807      	bhi.n	8002fd8 <HAL_SPI_TransmitReceive+0x1d8>
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fce:	d003      	beq.n	8002fd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fd6:	e0a7      	b.n	8003128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1a6      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x130>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1a1      	bne.n	8002f30 <HAL_SPI_TransmitReceive+0x130>
 8002fec:	e07c      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <HAL_SPI_TransmitReceive+0x1fc>
 8002ff6:	8b7b      	ldrh	r3, [r7, #26]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d16b      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	7812      	ldrb	r2, [r2, #0]
 8003008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003022:	e057      	b.n	80030d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d11c      	bne.n	800306c <HAL_SPI_TransmitReceive+0x26c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d017      	beq.n	800306c <HAL_SPI_TransmitReceive+0x26c>
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	2b01      	cmp	r3, #1
 8003040:	d114      	bne.n	800306c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	330c      	adds	r3, #12
 800304c:	7812      	ldrb	r2, [r2, #0]
 800304e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d119      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x2ae>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d014      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030aa:	2301      	movs	r3, #1
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030ae:	f7fe fb4f 	bl	8001750 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d803      	bhi.n	80030c6 <HAL_SPI_TransmitReceive+0x2c6>
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d102      	bne.n	80030cc <HAL_SPI_TransmitReceive+0x2cc>
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d103      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030d2:	e029      	b.n	8003128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1a2      	bne.n	8003024 <HAL_SPI_TransmitReceive+0x224>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d19d      	bne.n	8003024 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f893 	bl	8003218 <SPI_EndRxTxTransaction>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003104:	e010      	b.n	8003128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10b      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	e000      	b.n	8003128 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003126:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800313c:	4618      	mov	r0, r3
 800313e:	3730      	adds	r7, #48	; 0x30
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003154:	e04c      	b.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d048      	beq.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800315e:	f7fe faf7 	bl	8001750 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d902      	bls.n	8003174 <SPI_WaitFlagStateUntilTimeout+0x30>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d13d      	bne.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003182:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318c:	d111      	bne.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003196:	d004      	beq.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a0:	d107      	bne.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ba:	d10f      	bne.n	80031dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e00f      	b.n	8003210 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	429a      	cmp	r2, r3
 800320c:	d1a3      	bne.n	8003156 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <SPI_EndRxTxTransaction+0x7c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <SPI_EndRxTxTransaction+0x80>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0d5b      	lsrs	r3, r3, #21
 8003230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003242:	d112      	bne.n	800326a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7ff ff78 	bl	8003144 <SPI_WaitFlagStateUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e00f      	b.n	800328a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3b01      	subs	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b80      	cmp	r3, #128	; 0x80
 8003282:	d0f2      	beq.n	800326a <SPI_EndRxTxTransaction+0x52>
 8003284:	e000      	b.n	8003288 <SPI_EndRxTxTransaction+0x70>
        break;
 8003286:	bf00      	nop
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000000 	.word	0x20000000
 8003298:	165e9f81 	.word	0x165e9f81

0800329c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e01d      	b.n	80032ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd ffec 	bl	80012a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f000 fbde 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d007      	beq.n	8003324 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e01d      	b.n	8003388 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d106      	bne.n	8003366 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fd ffef 	bl	8001344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f000 fb8f 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	6839      	ldr	r1, [r7, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fe64 	bl	8004070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a15      	ldr	r2, [pc, #84]	; (8003404 <HAL_TIM_PWM_Start+0x74>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_TIM_PWM_Start+0x2c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a14      	ldr	r2, [pc, #80]	; (8003408 <HAL_TIM_PWM_Start+0x78>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_TIM_PWM_Start+0x30>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_TIM_PWM_Start+0x32>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d007      	beq.n	80033f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000
 8003408:	40010400 	.word	0x40010400

0800340c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d841      	bhi.n	80034a0 <HAL_TIM_PWM_Start_IT+0x94>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <HAL_TIM_PWM_Start_IT+0x18>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003459 	.word	0x08003459
 8003428:	080034a1 	.word	0x080034a1
 800342c:	080034a1 	.word	0x080034a1
 8003430:	080034a1 	.word	0x080034a1
 8003434:	0800346b 	.word	0x0800346b
 8003438:	080034a1 	.word	0x080034a1
 800343c:	080034a1 	.word	0x080034a1
 8003440:	080034a1 	.word	0x080034a1
 8003444:	0800347d 	.word	0x0800347d
 8003448:	080034a1 	.word	0x080034a1
 800344c:	080034a1 	.word	0x080034a1
 8003450:	080034a1 	.word	0x080034a1
 8003454:	0800348f 	.word	0x0800348f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0202 	orr.w	r2, r2, #2
 8003466:	60da      	str	r2, [r3, #12]
      break;
 8003468:	e01b      	b.n	80034a2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0204 	orr.w	r2, r2, #4
 8003478:	60da      	str	r2, [r3, #12]
      break;
 800347a:	e012      	b.n	80034a2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0208 	orr.w	r2, r2, #8
 800348a:	60da      	str	r2, [r3, #12]
      break;
 800348c:	e009      	b.n	80034a2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0210 	orr.w	r2, r2, #16
 800349c:	60da      	str	r2, [r3, #12]
      break;
 800349e:	e000      	b.n	80034a2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80034a0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2201      	movs	r2, #1
 80034a8:	6839      	ldr	r1, [r7, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fde0 	bl	8004070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_TIM_PWM_Start_IT+0x100>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_TIM_PWM_Start_IT+0xb8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a14      	ldr	r2, [pc, #80]	; (8003510 <HAL_TIM_PWM_Start_IT+0x104>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_TIM_PWM_Start_IT+0xbc>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_TIM_PWM_Start_IT+0xbe>
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d007      	beq.n	8003500 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d122      	bne.n	8003570 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b02      	cmp	r3, #2
 8003536:	d11b      	bne.n	8003570 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0202 	mvn.w	r2, #2
 8003540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa82 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa74 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fa85 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b04      	cmp	r3, #4
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0204 	mvn.w	r2, #4
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fa58 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa4a 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fa5b 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d122      	bne.n	8003618 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0208 	mvn.w	r2, #8
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fa2e 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fa20 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fa31 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b10      	cmp	r3, #16
 8003624:	d122      	bne.n	800366c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b10      	cmp	r3, #16
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0210 	mvn.w	r2, #16
 800363c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2208      	movs	r2, #8
 8003642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fa04 	bl	8003a60 <HAL_TIM_IC_CaptureCallback>
 8003658:	e005      	b.n	8003666 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9f6 	bl	8003a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fa07 	bl	8003a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0201 	mvn.w	r2, #1
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9d0 	bl	8003a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d10e      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b80      	cmp	r3, #128	; 0x80
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fd82 	bl	80041c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d10e      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d107      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9cc 	bl	8003a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d10e      	bne.n	800371c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b20      	cmp	r3, #32
 800370a:	d107      	bne.n	800371c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0220 	mvn.w	r2, #32
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fd4c 	bl	80041b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800373a:	2302      	movs	r3, #2
 800373c:	e0b4      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b0c      	cmp	r3, #12
 8003752:	f200 809f 	bhi.w	8003894 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003756:	a201      	add	r2, pc, #4	; (adr r2, 800375c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	08003791 	.word	0x08003791
 8003760:	08003895 	.word	0x08003895
 8003764:	08003895 	.word	0x08003895
 8003768:	08003895 	.word	0x08003895
 800376c:	080037d1 	.word	0x080037d1
 8003770:	08003895 	.word	0x08003895
 8003774:	08003895 	.word	0x08003895
 8003778:	08003895 	.word	0x08003895
 800377c:	08003813 	.word	0x08003813
 8003780:	08003895 	.word	0x08003895
 8003784:	08003895 	.word	0x08003895
 8003788:	08003895 	.word	0x08003895
 800378c:	08003853 	.word	0x08003853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fa20 	bl	8003bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0208 	orr.w	r2, r2, #8
 80037aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0204 	bic.w	r2, r2, #4
 80037ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6999      	ldr	r1, [r3, #24]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	619a      	str	r2, [r3, #24]
      break;
 80037ce:	e062      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fa70 	bl	8003cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6999      	ldr	r1, [r3, #24]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	021a      	lsls	r2, r3, #8
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	619a      	str	r2, [r3, #24]
      break;
 8003810:	e041      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fac5 	bl	8003da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0208 	orr.w	r2, r2, #8
 800382c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0204 	bic.w	r2, r2, #4
 800383c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69d9      	ldr	r1, [r3, #28]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	61da      	str	r2, [r3, #28]
      break;
 8003850:	e021      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fb19 	bl	8003e90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800386c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69d9      	ldr	r1, [r3, #28]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	021a      	lsls	r2, r3, #8
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	61da      	str	r2, [r3, #28]
      break;
 8003892:	e000      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003894:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_TIM_ConfigClockSource+0x18>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e0b3      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x180>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003900:	d03e      	beq.n	8003980 <HAL_TIM_ConfigClockSource+0xd0>
 8003902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003906:	f200 8087 	bhi.w	8003a18 <HAL_TIM_ConfigClockSource+0x168>
 800390a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390e:	f000 8085 	beq.w	8003a1c <HAL_TIM_ConfigClockSource+0x16c>
 8003912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003916:	d87f      	bhi.n	8003a18 <HAL_TIM_ConfigClockSource+0x168>
 8003918:	2b70      	cmp	r3, #112	; 0x70
 800391a:	d01a      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0xa2>
 800391c:	2b70      	cmp	r3, #112	; 0x70
 800391e:	d87b      	bhi.n	8003a18 <HAL_TIM_ConfigClockSource+0x168>
 8003920:	2b60      	cmp	r3, #96	; 0x60
 8003922:	d050      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x116>
 8003924:	2b60      	cmp	r3, #96	; 0x60
 8003926:	d877      	bhi.n	8003a18 <HAL_TIM_ConfigClockSource+0x168>
 8003928:	2b50      	cmp	r3, #80	; 0x50
 800392a:	d03c      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0xf6>
 800392c:	2b50      	cmp	r3, #80	; 0x50
 800392e:	d873      	bhi.n	8003a18 <HAL_TIM_ConfigClockSource+0x168>
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d058      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0x136>
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d86f      	bhi.n	8003a18 <HAL_TIM_ConfigClockSource+0x168>
 8003938:	2b30      	cmp	r3, #48	; 0x30
 800393a:	d064      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0x156>
 800393c:	2b30      	cmp	r3, #48	; 0x30
 800393e:	d86b      	bhi.n	8003a18 <HAL_TIM_ConfigClockSource+0x168>
 8003940:	2b20      	cmp	r3, #32
 8003942:	d060      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0x156>
 8003944:	2b20      	cmp	r3, #32
 8003946:	d867      	bhi.n	8003a18 <HAL_TIM_ConfigClockSource+0x168>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d05c      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0x156>
 800394c:	2b10      	cmp	r3, #16
 800394e:	d05a      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003950:	e062      	b.n	8003a18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6899      	ldr	r1, [r3, #8]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f000 fb65 	bl	8004030 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003974:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	609a      	str	r2, [r3, #8]
      break;
 800397e:	e04e      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f000 fb4e 	bl	8004030 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039a2:	609a      	str	r2, [r3, #8]
      break;
 80039a4:	e03b      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f000 fac2 	bl	8003f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2150      	movs	r1, #80	; 0x50
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fb1b 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 80039c4:	e02b      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f000 fae1 	bl	8003f9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2160      	movs	r1, #96	; 0x60
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fb0b 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 80039e4:	e01b      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	461a      	mov	r2, r3
 80039f4:	f000 faa2 	bl	8003f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2140      	movs	r1, #64	; 0x40
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fafb 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003a04:	e00b      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f000 faf2 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a40      	ldr	r2, [pc, #256]	; (8003bb0 <TIM_Base_SetConfig+0x114>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d00f      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3d      	ldr	r2, [pc, #244]	; (8003bb4 <TIM_Base_SetConfig+0x118>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <TIM_Base_SetConfig+0x11c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a3b      	ldr	r2, [pc, #236]	; (8003bbc <TIM_Base_SetConfig+0x120>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_Base_SetConfig+0x40>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a3a      	ldr	r2, [pc, #232]	; (8003bc0 <TIM_Base_SetConfig+0x124>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d108      	bne.n	8003aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2f      	ldr	r2, [pc, #188]	; (8003bb0 <TIM_Base_SetConfig+0x114>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02b      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afc:	d027      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2c      	ldr	r2, [pc, #176]	; (8003bb4 <TIM_Base_SetConfig+0x118>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d023      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2b      	ldr	r2, [pc, #172]	; (8003bb8 <TIM_Base_SetConfig+0x11c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01f      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <TIM_Base_SetConfig+0x120>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01b      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <TIM_Base_SetConfig+0x124>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d017      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a28      	ldr	r2, [pc, #160]	; (8003bc4 <TIM_Base_SetConfig+0x128>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <TIM_Base_SetConfig+0x12c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00f      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <TIM_Base_SetConfig+0x130>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <TIM_Base_SetConfig+0x134>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a24      	ldr	r2, [pc, #144]	; (8003bd4 <TIM_Base_SetConfig+0x138>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <TIM_Base_SetConfig+0x13c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <TIM_Base_SetConfig+0x114>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <TIM_Base_SetConfig+0xf8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <TIM_Base_SetConfig+0x124>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d103      	bne.n	8003b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	615a      	str	r2, [r3, #20]
}
 8003ba2:	bf00      	nop
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	40010400 	.word	0x40010400
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	40014800 	.word	0x40014800
 8003bd0:	40001800 	.word	0x40001800
 8003bd4:	40001c00 	.word	0x40001c00
 8003bd8:	40002000 	.word	0x40002000

08003bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f023 0201 	bic.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f023 0302 	bic.w	r3, r3, #2
 8003c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <TIM_OC1_SetConfig+0xd8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC1_SetConfig+0x64>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <TIM_OC1_SetConfig+0xdc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d10c      	bne.n	8003c5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f023 0308 	bic.w	r3, r3, #8
 8003c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <TIM_OC1_SetConfig+0xd8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_OC1_SetConfig+0x8e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <TIM_OC1_SetConfig+0xdc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d111      	bne.n	8003c8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	621a      	str	r2, [r3, #32]
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40010400 	.word	0x40010400

08003cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0210 	bic.w	r2, r3, #16
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0320 	bic.w	r3, r3, #32
 8003d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <TIM_OC2_SetConfig+0xe4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_OC2_SetConfig+0x68>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <TIM_OC2_SetConfig+0xe8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d10d      	bne.n	8003d40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <TIM_OC2_SetConfig+0xe4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC2_SetConfig+0x94>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <TIM_OC2_SetConfig+0xe8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d113      	bne.n	8003d78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40010400 	.word	0x40010400

08003da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <TIM_OC3_SetConfig+0xe0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_OC3_SetConfig+0x66>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <TIM_OC3_SetConfig+0xe4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d10d      	bne.n	8003e2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <TIM_OC3_SetConfig+0xe0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_OC3_SetConfig+0x92>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <TIM_OC3_SetConfig+0xe4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d113      	bne.n	8003e62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40010400 	.word	0x40010400

08003e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	031b      	lsls	r3, r3, #12
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <TIM_OC4_SetConfig+0xa4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_OC4_SetConfig+0x68>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a11      	ldr	r2, [pc, #68]	; (8003f38 <TIM_OC4_SetConfig+0xa8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d109      	bne.n	8003f0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	019b      	lsls	r3, r3, #6
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40010400 	.word	0x40010400

08003f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f023 0201 	bic.w	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f023 030a 	bic.w	r3, r3, #10
 8003f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b087      	sub	sp, #28
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0210 	bic.w	r2, r3, #16
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	031b      	lsls	r3, r3, #12
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	f043 0307 	orr.w	r3, r3, #7
 800401c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800404a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	021a      	lsls	r2, r3, #8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	431a      	orrs	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4313      	orrs	r3, r2
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	609a      	str	r2, [r3, #8]
}
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2201      	movs	r2, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1a      	ldr	r2, [r3, #32]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	43db      	mvns	r3, r3
 8004092:	401a      	ands	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	431a      	orrs	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e05a      	b.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d022      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004120:	d01d      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d018      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1a      	ldr	r2, [pc, #104]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d009      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a17      	ldr	r2, [pc, #92]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10c      	bne.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	4313      	orrs	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40000c00 	.word	0x40000c00
 80041a8:	40010400 	.word	0x40010400
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40001800 	.word	0x40001800

080041b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e03f      	b.n	800426e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd f926 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	; 0x24
 800420c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800421e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fba1 	bl	8004968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004244:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004254:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b088      	sub	sp, #32
 800427a:	af02      	add	r7, sp, #8
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b20      	cmp	r3, #32
 8004294:	f040 8083 	bne.w	800439e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Transmit+0x2e>
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e07b      	b.n	80043a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_UART_Transmit+0x40>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e074      	b.n	80043a0 <HAL_UART_Transmit+0x12a>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2221      	movs	r2, #33	; 0x21
 80042c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042cc:	f7fd fa40 	bl	8001750 <HAL_GetTick>
 80042d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	88fa      	ldrh	r2, [r7, #6]
 80042d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80042e6:	e042      	b.n	800436e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fe:	d122      	bne.n	8004346 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2200      	movs	r2, #0
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f9c0 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e042      	b.n	80043a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3302      	adds	r3, #2
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	e017      	b.n	800436e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3301      	adds	r3, #1
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	e013      	b.n	800436e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2200      	movs	r2, #0
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f99d 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e01f      	b.n	80043a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	60ba      	str	r2, [r7, #8]
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1b7      	bne.n	80042e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2200      	movs	r2, #0
 8004380:	2140      	movs	r1, #64	; 0x40
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f984 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e006      	b.n	80043a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800439e:	2302      	movs	r3, #2
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d140      	bne.n	8004444 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_UART_Receive_IT+0x26>
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e039      	b.n	8004446 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_UART_Receive_IT+0x38>
 80043dc:	2302      	movs	r3, #2
 80043de:	e032      	b.n	8004446 <HAL_UART_Receive_IT+0x9e>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	88fa      	ldrh	r2, [r7, #6]
 80043f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2222      	movs	r2, #34	; 0x22
 8004404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0220 	orr.w	r2, r2, #32
 800443e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	e000      	b.n	8004446 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004444:	2302      	movs	r3, #2
  }
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004474:	2300      	movs	r3, #0
 8004476:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_UART_IRQHandler+0x52>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9e0 	bl	8004864 <UART_Receive_IT>
      return;
 80044a4:	e0d0      	b.n	8004648 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80b0 	beq.w	800460e <HAL_UART_IRQHandler+0x1ba>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_UART_IRQHandler+0x70>
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80a5 	beq.w	800460e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_UART_IRQHandler+0x90>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	f043 0201 	orr.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_UART_IRQHandler+0xb0>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	f043 0202 	orr.w	r2, r3, #2
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_UART_IRQHandler+0xd0>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00f      	beq.n	800454e <HAL_UART_IRQHandler+0xfa>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d104      	bne.n	8004542 <HAL_UART_IRQHandler+0xee>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	f043 0208 	orr.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d077      	beq.n	8004646 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_UART_IRQHandler+0x11c>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f97a 	bl	8004864 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	bf0c      	ite	eq
 800457e:	2301      	moveq	r3, #1
 8004580:	2300      	movne	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <HAL_UART_IRQHandler+0x144>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d031      	beq.n	80045fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8c3 	bl	8004724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d123      	bne.n	80045f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	4a21      	ldr	r2, [pc, #132]	; (8004650 <HAL_UART_IRQHandler+0x1fc>)
 80045ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fd fae1 	bl	8001b98 <HAL_DMA_Abort_IT>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d016      	beq.n	800460a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045e6:	4610      	mov	r0, r2
 80045e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ea:	e00e      	b.n	800460a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f845 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f2:	e00a      	b.n	800460a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f841 	bl	800467c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fa:	e006      	b.n	800460a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f83d 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004608:	e01d      	b.n	8004646 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460a:	bf00      	nop
    return;
 800460c:	e01b      	b.n	8004646 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_UART_IRQHandler+0x1d6>
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8b0 	bl	8004788 <UART_Transmit_IT>
    return;
 8004628:	e00e      	b.n	8004648 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <HAL_UART_IRQHandler+0x1f4>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8f8 	bl	8004834 <UART_EndTransmit_IT>
    return;
 8004644:	e000      	b.n	8004648 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004646:	bf00      	nop
  }
}
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	08004761 	.word	0x08004761

08004654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a0:	e02c      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d028      	beq.n	80046fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046b0:	f7fd f84e 	bl	8001750 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d21d      	bcs.n	80046fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e00f      	b.n	800471c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d0c3      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800473a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff ff7e 	bl	800467c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b21      	cmp	r3, #33	; 0x21
 800479a:	d144      	bne.n	8004826 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a4:	d11a      	bne.n	80047dc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	1c9a      	adds	r2, r3, #2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	621a      	str	r2, [r3, #32]
 80047ce:	e00e      	b.n	80047ee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	621a      	str	r2, [r3, #32]
 80047da:	e008      	b.n	80047ee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	1c59      	adds	r1, r3, #1
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6211      	str	r1, [r2, #32]
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4619      	mov	r1, r3
 80047fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004810:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004820:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e000      	b.n	8004828 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
  }
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fefd 	bl	8004654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b22      	cmp	r3, #34	; 0x22
 8004876:	d171      	bne.n	800495c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004880:	d123      	bne.n	80048ca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10e      	bne.n	80048ae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	1c9a      	adds	r2, r3, #2
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
 80048ac:	e029      	b.n	8004902 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
 80048c8:	e01b      	b.n	8004902 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6858      	ldr	r0, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	1c59      	adds	r1, r3, #1
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6291      	str	r1, [r2, #40]	; 0x28
 80048e2:	b2c2      	uxtb	r2, r0
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e00c      	b.n	8004902 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	1c58      	adds	r0, r3, #1
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	6288      	str	r0, [r1, #40]	; 0x28
 80048fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29b      	uxth	r3, r3
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4619      	mov	r1, r3
 8004910:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004912:	2b00      	cmp	r3, #0
 8004914:	d120      	bne.n	8004958 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0220 	bic.w	r2, r2, #32
 8004924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004934:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fe8a 	bl	8004668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	e002      	b.n	800495e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800496c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004970:	af00      	add	r7, sp, #0
 8004972:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004976:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004982:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004986:	68d9      	ldr	r1, [r3, #12]
 8004988:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	ea40 0301 	orr.w	r3, r0, r1
 8004992:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004994:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80049b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049c2:	f021 010c 	bic.w	r1, r1, #12
 80049c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80049d0:	430b      	orrs	r3, r1
 80049d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049e4:	6999      	ldr	r1, [r3, #24]
 80049e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	ea40 0301 	orr.w	r3, r0, r1
 80049f0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fc:	f040 824a 	bne.w	8004e94 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4b96      	ldr	r3, [pc, #600]	; (8004c60 <UART_SetConfig+0x2f8>)
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d006      	beq.n	8004a1a <UART_SetConfig+0xb2>
 8004a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b94      	ldr	r3, [pc, #592]	; (8004c64 <UART_SetConfig+0x2fc>)
 8004a14:	429a      	cmp	r2, r3
 8004a16:	f040 8129 	bne.w	8004c6c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a1a:	f7fe f979 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8004a1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004a2c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004a30:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004a34:	4622      	mov	r2, r4
 8004a36:	462b      	mov	r3, r5
 8004a38:	1891      	adds	r1, r2, r2
 8004a3a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004a3e:	415b      	adcs	r3, r3
 8004a40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a44:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004a48:	4621      	mov	r1, r4
 8004a4a:	1851      	adds	r1, r2, r1
 8004a4c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004a50:	4629      	mov	r1, r5
 8004a52:	414b      	adcs	r3, r1
 8004a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004a64:	4649      	mov	r1, r9
 8004a66:	00cb      	lsls	r3, r1, #3
 8004a68:	4641      	mov	r1, r8
 8004a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6e:	4641      	mov	r1, r8
 8004a70:	00ca      	lsls	r2, r1, #3
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	4622      	mov	r2, r4
 8004a7a:	189b      	adds	r3, r3, r2
 8004a7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004a80:	462b      	mov	r3, r5
 8004a82:	460a      	mov	r2, r1
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004a8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a98:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004a9c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	18db      	adds	r3, r3, r3
 8004aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	eb42 0303 	adc.w	r3, r2, r3
 8004aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ab2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004ab6:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004aba:	f7fb fbe1 	bl	8000280 <__aeabi_uldivmod>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4b69      	ldr	r3, [pc, #420]	; (8004c68 <UART_SetConfig+0x300>)
 8004ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	011c      	lsls	r4, r3, #4
 8004acc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004ad6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004ada:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004ade:	4642      	mov	r2, r8
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	1891      	adds	r1, r2, r2
 8004ae4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004ae8:	415b      	adcs	r3, r3
 8004aea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004aee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004af2:	4641      	mov	r1, r8
 8004af4:	1851      	adds	r1, r2, r1
 8004af6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004afa:	4649      	mov	r1, r9
 8004afc:	414b      	adcs	r3, r1
 8004afe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004b0e:	4659      	mov	r1, fp
 8004b10:	00cb      	lsls	r3, r1, #3
 8004b12:	4651      	mov	r1, sl
 8004b14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b18:	4651      	mov	r1, sl
 8004b1a:	00ca      	lsls	r2, r1, #3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4603      	mov	r3, r0
 8004b22:	4642      	mov	r2, r8
 8004b24:	189b      	adds	r3, r3, r2
 8004b26:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	460a      	mov	r2, r1
 8004b2e:	eb42 0303 	adc.w	r3, r2, r3
 8004b32:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004b36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004b42:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004b46:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	18db      	adds	r3, r3, r3
 8004b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b52:	4613      	mov	r3, r2
 8004b54:	eb42 0303 	adc.w	r3, r2, r3
 8004b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b5c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004b60:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004b64:	f7fb fb8c 	bl	8000280 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4b3e      	ldr	r3, [pc, #248]	; (8004c68 <UART_SetConfig+0x300>)
 8004b70:	fba3 2301 	umull	r2, r3, r3, r1
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2264      	movs	r2, #100	; 0x64
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
 8004b7c:	1acb      	subs	r3, r1, r3
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b84:	4b38      	ldr	r3, [pc, #224]	; (8004c68 <UART_SetConfig+0x300>)
 8004b86:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b92:	441c      	add	r4, r3
 8004b94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b9e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004ba2:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	464b      	mov	r3, r9
 8004baa:	1891      	adds	r1, r2, r2
 8004bac:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004bb0:	415b      	adcs	r3, r3
 8004bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bb6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004bba:	4641      	mov	r1, r8
 8004bbc:	1851      	adds	r1, r2, r1
 8004bbe:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	414b      	adcs	r3, r1
 8004bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004bd6:	4659      	mov	r1, fp
 8004bd8:	00cb      	lsls	r3, r1, #3
 8004bda:	4651      	mov	r1, sl
 8004bdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004be0:	4651      	mov	r1, sl
 8004be2:	00ca      	lsls	r2, r1, #3
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	4603      	mov	r3, r0
 8004bea:	4642      	mov	r2, r8
 8004bec:	189b      	adds	r3, r3, r2
 8004bee:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	460a      	mov	r2, r1
 8004bf6:	eb42 0303 	adc.w	r3, r2, r3
 8004bfa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004bfe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004c0a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004c0e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004c12:	460b      	mov	r3, r1
 8004c14:	18db      	adds	r3, r3, r3
 8004c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	eb42 0303 	adc.w	r3, r2, r3
 8004c20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c24:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004c28:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004c2c:	f7fb fb28 	bl	8000280 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <UART_SetConfig+0x300>)
 8004c36:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	2164      	movs	r1, #100	; 0x64
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	3332      	adds	r3, #50	; 0x32
 8004c48:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <UART_SetConfig+0x300>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	f003 0207 	and.w	r2, r3, #7
 8004c54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4422      	add	r2, r4
 8004c5c:	609a      	str	r2, [r3, #8]
 8004c5e:	e349      	b.n	80052f4 <UART_SetConfig+0x98c>
 8004c60:	40011000 	.word	0x40011000
 8004c64:	40011400 	.word	0x40011400
 8004c68:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c6c:	f7fe f83c 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 8004c70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004c7e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004c82:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	1891      	adds	r1, r2, r2
 8004c8c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004c90:	415b      	adcs	r3, r3
 8004c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c96:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	eb12 0a01 	adds.w	sl, r2, r1
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cba:	4692      	mov	sl, r2
 8004cbc:	469b      	mov	fp, r3
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	eb1a 0303 	adds.w	r3, sl, r3
 8004cc4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004cc8:	462b      	mov	r3, r5
 8004cca:	eb4b 0303 	adc.w	r3, fp, r3
 8004cce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004cd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004cde:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004ce2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	18db      	adds	r3, r3, r3
 8004cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cee:	4613      	mov	r3, r2
 8004cf0:	eb42 0303 	adc.w	r3, r2, r3
 8004cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cf8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004cfc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004d00:	f7fb fabe 	bl	8000280 <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4b61      	ldr	r3, [pc, #388]	; (8004e90 <UART_SetConfig+0x528>)
 8004d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	011c      	lsls	r4, r3, #4
 8004d12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004d1c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004d20:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004d24:	4642      	mov	r2, r8
 8004d26:	464b      	mov	r3, r9
 8004d28:	1891      	adds	r1, r2, r2
 8004d2a:	67b9      	str	r1, [r7, #120]	; 0x78
 8004d2c:	415b      	adcs	r3, r3
 8004d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d30:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004d34:	4641      	mov	r1, r8
 8004d36:	1851      	adds	r1, r2, r1
 8004d38:	6739      	str	r1, [r7, #112]	; 0x70
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	414b      	adcs	r3, r1
 8004d3e:	677b      	str	r3, [r7, #116]	; 0x74
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	00cb      	lsls	r3, r1, #3
 8004d50:	4651      	mov	r1, sl
 8004d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d56:	4651      	mov	r1, sl
 8004d58:	00ca      	lsls	r2, r1, #3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4642      	mov	r2, r8
 8004d62:	189b      	adds	r3, r3, r2
 8004d64:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004d68:	464b      	mov	r3, r9
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	eb42 0303 	adc.w	r3, r2, r3
 8004d70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004d74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d80:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004d84:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004d88:	460b      	mov	r3, r1
 8004d8a:	18db      	adds	r3, r3, r3
 8004d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d8e:	4613      	mov	r3, r2
 8004d90:	eb42 0303 	adc.w	r3, r2, r3
 8004d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d96:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004d9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004d9e:	f7fb fa6f 	bl	8000280 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	4b39      	ldr	r3, [pc, #228]	; (8004e90 <UART_SetConfig+0x528>)
 8004daa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2264      	movs	r2, #100	; 0x64
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	1acb      	subs	r3, r1, r3
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dbe:	4b34      	ldr	r3, [pc, #208]	; (8004e90 <UART_SetConfig+0x528>)
 8004dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dcc:	441c      	add	r4, r3
 8004dce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004dd8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004ddc:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	6639      	str	r1, [r7, #96]	; 0x60
 8004de8:	415b      	adcs	r3, r3
 8004dea:	667b      	str	r3, [r7, #100]	; 0x64
 8004dec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004e24:	464b      	mov	r3, r9
 8004e26:	460a      	mov	r2, r1
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004e30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004e3c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004e40:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004e44:	460b      	mov	r3, r1
 8004e46:	18db      	adds	r3, r3, r3
 8004e48:	653b      	str	r3, [r7, #80]	; 0x50
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	657b      	str	r3, [r7, #84]	; 0x54
 8004e52:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e56:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004e5a:	f7fb fa11 	bl	8000280 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <UART_SetConfig+0x528>)
 8004e64:	fba3 1302 	umull	r1, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	2164      	movs	r1, #100	; 0x64
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3332      	adds	r3, #50	; 0x32
 8004e76:	4a06      	ldr	r2, [pc, #24]	; (8004e90 <UART_SetConfig+0x528>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f003 0207 	and.w	r2, r3, #7
 8004e82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4422      	add	r2, r4
 8004e8a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e8c:	e232      	b.n	80052f4 <UART_SetConfig+0x98c>
 8004e8e:	bf00      	nop
 8004e90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4b8d      	ldr	r3, [pc, #564]	; (80050d0 <UART_SetConfig+0x768>)
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d006      	beq.n	8004eae <UART_SetConfig+0x546>
 8004ea0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b8b      	ldr	r3, [pc, #556]	; (80050d4 <UART_SetConfig+0x76c>)
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	f040 8117 	bne.w	80050dc <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eae:	f7fd ff2f 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8004eb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004ec0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004ec4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004ec8:	4622      	mov	r2, r4
 8004eca:	462b      	mov	r3, r5
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ed8:	4621      	mov	r1, r4
 8004eda:	eb12 0801 	adds.w	r8, r2, r1
 8004ede:	4629      	mov	r1, r5
 8004ee0:	eb43 0901 	adc.w	r9, r3, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ef0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ef8:	4690      	mov	r8, r2
 8004efa:	4699      	mov	r9, r3
 8004efc:	4623      	mov	r3, r4
 8004efe:	eb18 0303 	adds.w	r3, r8, r3
 8004f02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004f06:	462b      	mov	r3, r5
 8004f08:	eb49 0303 	adc.w	r3, r9, r3
 8004f0c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004f10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004f1c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	008b      	lsls	r3, r1, #2
 8004f30:	4621      	mov	r1, r4
 8004f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f36:	4621      	mov	r1, r4
 8004f38:	008a      	lsls	r2, r1, #2
 8004f3a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004f3e:	f7fb f99f 	bl	8000280 <__aeabi_uldivmod>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4b64      	ldr	r3, [pc, #400]	; (80050d8 <UART_SetConfig+0x770>)
 8004f48:	fba3 2302 	umull	r2, r3, r3, r2
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	011c      	lsls	r4, r3, #4
 8004f50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004f5a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004f5e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004f62:	4642      	mov	r2, r8
 8004f64:	464b      	mov	r3, r9
 8004f66:	1891      	adds	r1, r2, r2
 8004f68:	6439      	str	r1, [r7, #64]	; 0x40
 8004f6a:	415b      	adcs	r3, r3
 8004f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f72:	4641      	mov	r1, r8
 8004f74:	1851      	adds	r1, r2, r1
 8004f76:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f78:	4649      	mov	r1, r9
 8004f7a:	414b      	adcs	r3, r1
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004f8a:	4659      	mov	r1, fp
 8004f8c:	00cb      	lsls	r3, r1, #3
 8004f8e:	4651      	mov	r1, sl
 8004f90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f94:	4651      	mov	r1, sl
 8004f96:	00ca      	lsls	r2, r1, #3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4642      	mov	r2, r8
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	460a      	mov	r2, r1
 8004faa:	eb42 0303 	adc.w	r3, r2, r3
 8004fae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004fb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004fbe:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004fce:	4649      	mov	r1, r9
 8004fd0:	008b      	lsls	r3, r1, #2
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd8:	4641      	mov	r1, r8
 8004fda:	008a      	lsls	r2, r1, #2
 8004fdc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004fe0:	f7fb f94e 	bl	8000280 <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4b3b      	ldr	r3, [pc, #236]	; (80050d8 <UART_SetConfig+0x770>)
 8004fea:	fba3 1302 	umull	r1, r3, r3, r2
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2164      	movs	r1, #100	; 0x64
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	3332      	adds	r3, #50	; 0x32
 8004ffc:	4a36      	ldr	r2, [pc, #216]	; (80050d8 <UART_SetConfig+0x770>)
 8004ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005008:	441c      	add	r4, r3
 800500a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800500e:	2200      	movs	r2, #0
 8005010:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005014:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005018:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800501c:	4642      	mov	r2, r8
 800501e:	464b      	mov	r3, r9
 8005020:	1891      	adds	r1, r2, r2
 8005022:	6339      	str	r1, [r7, #48]	; 0x30
 8005024:	415b      	adcs	r3, r3
 8005026:	637b      	str	r3, [r7, #52]	; 0x34
 8005028:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800502c:	4641      	mov	r1, r8
 800502e:	1851      	adds	r1, r2, r1
 8005030:	62b9      	str	r1, [r7, #40]	; 0x28
 8005032:	4649      	mov	r1, r9
 8005034:	414b      	adcs	r3, r1
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8005044:	4659      	mov	r1, fp
 8005046:	00cb      	lsls	r3, r1, #3
 8005048:	4651      	mov	r1, sl
 800504a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800504e:	4651      	mov	r1, sl
 8005050:	00ca      	lsls	r2, r1, #3
 8005052:	4610      	mov	r0, r2
 8005054:	4619      	mov	r1, r3
 8005056:	4603      	mov	r3, r0
 8005058:	4642      	mov	r2, r8
 800505a:	189b      	adds	r3, r3, r2
 800505c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005060:	464b      	mov	r3, r9
 8005062:	460a      	mov	r2, r1
 8005064:	eb42 0303 	adc.w	r3, r2, r3
 8005068:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800506c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005078:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8005088:	4649      	mov	r1, r9
 800508a:	008b      	lsls	r3, r1, #2
 800508c:	4641      	mov	r1, r8
 800508e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005092:	4641      	mov	r1, r8
 8005094:	008a      	lsls	r2, r1, #2
 8005096:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800509a:	f7fb f8f1 	bl	8000280 <__aeabi_uldivmod>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <UART_SetConfig+0x770>)
 80050a4:	fba3 1302 	umull	r1, r3, r3, r2
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	2164      	movs	r1, #100	; 0x64
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	3332      	adds	r3, #50	; 0x32
 80050b6:	4a08      	ldr	r2, [pc, #32]	; (80050d8 <UART_SetConfig+0x770>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	f003 020f 	and.w	r2, r3, #15
 80050c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4422      	add	r2, r4
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	e112      	b.n	80052f4 <UART_SetConfig+0x98c>
 80050ce:	bf00      	nop
 80050d0:	40011000 	.word	0x40011000
 80050d4:	40011400 	.word	0x40011400
 80050d8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80050dc:	f7fd fe04 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 80050e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80050ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80050f2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80050f6:	4642      	mov	r2, r8
 80050f8:	464b      	mov	r3, r9
 80050fa:	1891      	adds	r1, r2, r2
 80050fc:	6239      	str	r1, [r7, #32]
 80050fe:	415b      	adcs	r3, r3
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
 8005102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005106:	4641      	mov	r1, r8
 8005108:	1854      	adds	r4, r2, r1
 800510a:	4649      	mov	r1, r9
 800510c:	eb43 0501 	adc.w	r5, r3, r1
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	00eb      	lsls	r3, r5, #3
 800511a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800511e:	00e2      	lsls	r2, r4, #3
 8005120:	4614      	mov	r4, r2
 8005122:	461d      	mov	r5, r3
 8005124:	4643      	mov	r3, r8
 8005126:	18e3      	adds	r3, r4, r3
 8005128:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800512c:	464b      	mov	r3, r9
 800512e:	eb45 0303 	adc.w	r3, r5, r3
 8005132:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005136:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005142:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005152:	4629      	mov	r1, r5
 8005154:	008b      	lsls	r3, r1, #2
 8005156:	4621      	mov	r1, r4
 8005158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800515c:	4621      	mov	r1, r4
 800515e:	008a      	lsls	r2, r1, #2
 8005160:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8005164:	f7fb f88c 	bl	8000280 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4b64      	ldr	r3, [pc, #400]	; (8005300 <UART_SetConfig+0x998>)
 800516e:	fba3 2302 	umull	r2, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	011c      	lsls	r4, r3, #4
 8005176:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005180:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005184:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	1891      	adds	r1, r2, r2
 800518e:	61b9      	str	r1, [r7, #24]
 8005190:	415b      	adcs	r3, r3
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005198:	4641      	mov	r1, r8
 800519a:	1851      	adds	r1, r2, r1
 800519c:	6139      	str	r1, [r7, #16]
 800519e:	4649      	mov	r1, r9
 80051a0:	414b      	adcs	r3, r1
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051b0:	4659      	mov	r1, fp
 80051b2:	00cb      	lsls	r3, r1, #3
 80051b4:	4651      	mov	r1, sl
 80051b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ba:	4651      	mov	r1, sl
 80051bc:	00ca      	lsls	r2, r1, #3
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	4603      	mov	r3, r0
 80051c4:	4642      	mov	r2, r8
 80051c6:	189b      	adds	r3, r3, r2
 80051c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051cc:	464b      	mov	r3, r9
 80051ce:	460a      	mov	r2, r1
 80051d0:	eb42 0303 	adc.w	r3, r2, r3
 80051d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80051e4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80051f4:	4649      	mov	r1, r9
 80051f6:	008b      	lsls	r3, r1, #2
 80051f8:	4641      	mov	r1, r8
 80051fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051fe:	4641      	mov	r1, r8
 8005200:	008a      	lsls	r2, r1, #2
 8005202:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005206:	f7fb f83b 	bl	8000280 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4b3c      	ldr	r3, [pc, #240]	; (8005300 <UART_SetConfig+0x998>)
 8005210:	fba3 1302 	umull	r1, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	2164      	movs	r1, #100	; 0x64
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	3332      	adds	r3, #50	; 0x32
 8005222:	4a37      	ldr	r2, [pc, #220]	; (8005300 <UART_SetConfig+0x998>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800522e:	441c      	add	r4, r3
 8005230:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005234:	2200      	movs	r2, #0
 8005236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800523a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800523e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005242:	4642      	mov	r2, r8
 8005244:	464b      	mov	r3, r9
 8005246:	1891      	adds	r1, r2, r2
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	415b      	adcs	r3, r3
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005252:	4641      	mov	r1, r8
 8005254:	1851      	adds	r1, r2, r1
 8005256:	6039      	str	r1, [r7, #0]
 8005258:	4649      	mov	r1, r9
 800525a:	414b      	adcs	r3, r1
 800525c:	607b      	str	r3, [r7, #4]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800526a:	4659      	mov	r1, fp
 800526c:	00cb      	lsls	r3, r1, #3
 800526e:	4651      	mov	r1, sl
 8005270:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005274:	4651      	mov	r1, sl
 8005276:	00ca      	lsls	r2, r1, #3
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	4603      	mov	r3, r0
 800527e:	4642      	mov	r2, r8
 8005280:	189b      	adds	r3, r3, r2
 8005282:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005286:	464b      	mov	r3, r9
 8005288:	460a      	mov	r2, r1
 800528a:	eb42 0303 	adc.w	r3, r2, r3
 800528e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005292:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800529e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80052ae:	4649      	mov	r1, r9
 80052b0:	008b      	lsls	r3, r1, #2
 80052b2:	4641      	mov	r1, r8
 80052b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b8:	4641      	mov	r1, r8
 80052ba:	008a      	lsls	r2, r1, #2
 80052bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052c0:	f7fa ffde 	bl	8000280 <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <UART_SetConfig+0x998>)
 80052ca:	fba3 1302 	umull	r1, r3, r3, r2
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2164      	movs	r1, #100	; 0x64
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	3332      	adds	r3, #50	; 0x32
 80052dc:	4a08      	ldr	r2, [pc, #32]	; (8005300 <UART_SetConfig+0x998>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4422      	add	r2, r4
 80052f0:	609a      	str	r2, [r3, #8]
}
 80052f2:	e7ff      	b.n	80052f4 <UART_SetConfig+0x98c>
 80052f4:	bf00      	nop
 80052f6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80052fa:	46bd      	mov	sp, r7
 80052fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005300:	51eb851f 	.word	0x51eb851f

08005304 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005308:	4904      	ldr	r1, [pc, #16]	; (800531c <MX_FATFS_Init+0x18>)
 800530a:	4805      	ldr	r0, [pc, #20]	; (8005320 <MX_FATFS_Init+0x1c>)
 800530c:	f003 f97e 	bl	800860c <FATFS_LinkDriver>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	4b03      	ldr	r3, [pc, #12]	; (8005324 <MX_FATFS_Init+0x20>)
 8005316:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005318:	bf00      	nop
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20013798 	.word	0x20013798
 8005320:	2000000c 	.word	0x2000000c
 8005324:	20013794 	.word	0x20013794

08005328 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800532c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800532e:	4618      	mov	r0, r3
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f9d9 	bl	80056fc <USER_SPI_initialize>
 800534a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fab7 	bl	80058d4 <USER_SPI_status>
 8005366:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8005380:	7bf8      	ldrb	r0, [r7, #15]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	f000 faba 	bl	8005900 <USER_SPI_read>
 800538c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
 80053a2:	4603      	mov	r3, r0
 80053a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80053a6:	7bf8      	ldrb	r0, [r7, #15]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	f000 fb0d 	bl	80059cc <USER_SPI_write>
 80053b2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	603a      	str	r2, [r7, #0]
 80053c6:	71fb      	strb	r3, [r7, #7]
 80053c8:	460b      	mov	r3, r1
 80053ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80053cc:	79b9      	ldrb	r1, [r7, #6]
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fb76 	bl	8005ac4 <USER_SPI_ioctl>
 80053d8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80053ec:	f7fc f9b0 	bl	8001750 <HAL_GetTick>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <SPI_Timer_On+0x20>)
 80053f4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80053f6:	4a04      	ldr	r2, [pc, #16]	; (8005408 <SPI_Timer_On+0x24>)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6013      	str	r3, [r2, #0]
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200137a0 	.word	0x200137a0
 8005408:	200137a4 	.word	0x200137a4

0800540c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005410:	f7fc f99e 	bl	8001750 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <SPI_Timer_Status+0x24>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <SPI_Timer_Status+0x28>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	bf34      	ite	cc
 8005424:	2301      	movcc	r3, #1
 8005426:	2300      	movcs	r3, #0
 8005428:	b2db      	uxtb	r3, r3
}
 800542a:	4618      	mov	r0, r3
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	200137a0 	.word	0x200137a0
 8005434:	200137a4 	.word	0x200137a4

08005438 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af02      	add	r7, sp, #8
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005442:	f107 020f 	add.w	r2, r7, #15
 8005446:	1df9      	adds	r1, r7, #7
 8005448:	2332      	movs	r3, #50	; 0x32
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	2301      	movs	r3, #1
 800544e:	4804      	ldr	r0, [pc, #16]	; (8005460 <xchg_spi+0x28>)
 8005450:	f7fd fcd6 	bl	8002e00 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000918 	.word	0x20000918

08005464 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	e00a      	b.n	800548a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	18d4      	adds	r4, r2, r3
 800547a:	20ff      	movs	r0, #255	; 0xff
 800547c:	f7ff ffdc 	bl	8005438 <xchg_spi>
 8005480:	4603      	mov	r3, r0
 8005482:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d3f0      	bcc.n	8005474 <rcvr_spi_multi+0x10>
	}
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bd90      	pop	{r4, r7, pc}

0800549c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e009      	b.n	80054c0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff ffbf 	bl	8005438 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3301      	adds	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3f1      	bcc.n	80054ac <xmit_spi_multi+0x10>
	}
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80054da:	f7fc f939 	bl	8001750 <HAL_GetTick>
 80054de:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80054e4:	20ff      	movs	r0, #255	; 0xff
 80054e6:	f7ff ffa7 	bl	8005438 <xchg_spi>
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2bff      	cmp	r3, #255	; 0xff
 80054f2:	d007      	beq.n	8005504 <wait_ready+0x32>
 80054f4:	f7fc f92c 	bl	8001750 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	429a      	cmp	r2, r3
 8005502:	d8ef      	bhi.n	80054e4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2bff      	cmp	r3, #255	; 0xff
 8005508:	bf0c      	ite	eq
 800550a:	2301      	moveq	r3, #1
 800550c:	2300      	movne	r3, #0
 800550e:	b2db      	uxtb	r3, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800551c:	2201      	movs	r2, #1
 800551e:	2108      	movs	r1, #8
 8005520:	4803      	ldr	r0, [pc, #12]	; (8005530 <despiselect+0x18>)
 8005522:	f7fc ff61 	bl	80023e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005526:	20ff      	movs	r0, #255	; 0xff
 8005528:	f7ff ff86 	bl	8005438 <xchg_spi>

}
 800552c:	bf00      	nop
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40020400 	.word	0x40020400

08005534 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005538:	2200      	movs	r2, #0
 800553a:	2108      	movs	r1, #8
 800553c:	4809      	ldr	r0, [pc, #36]	; (8005564 <spiselect+0x30>)
 800553e:	f7fc ff53 	bl	80023e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005542:	20ff      	movs	r0, #255	; 0xff
 8005544:	f7ff ff78 	bl	8005438 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800554c:	f7ff ffc1 	bl	80054d2 <wait_ready>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <spiselect+0x26>
 8005556:	2301      	movs	r3, #1
 8005558:	e002      	b.n	8005560 <spiselect+0x2c>

	despiselect();
 800555a:	f7ff ffdd 	bl	8005518 <despiselect>
	return 0;	/* Timeout */
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40020400 	.word	0x40020400

08005568 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005572:	20c8      	movs	r0, #200	; 0xc8
 8005574:	f7ff ff36 	bl	80053e4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005578:	20ff      	movs	r0, #255	; 0xff
 800557a:	f7ff ff5d 	bl	8005438 <xchg_spi>
 800557e:	4603      	mov	r3, r0
 8005580:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	2bff      	cmp	r3, #255	; 0xff
 8005586:	d104      	bne.n	8005592 <rcvr_datablock+0x2a>
 8005588:	f7ff ff40 	bl	800540c <SPI_Timer_Status>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f2      	bne.n	8005578 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2bfe      	cmp	r3, #254	; 0xfe
 8005596:	d001      	beq.n	800559c <rcvr_datablock+0x34>
 8005598:	2300      	movs	r3, #0
 800559a:	e00a      	b.n	80055b2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ff60 	bl	8005464 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80055a4:	20ff      	movs	r0, #255	; 0xff
 80055a6:	f7ff ff47 	bl	8005438 <xchg_spi>
 80055aa:	20ff      	movs	r0, #255	; 0xff
 80055ac:	f7ff ff44 	bl	8005438 <xchg_spi>

	return 1;						/* Function succeeded */
 80055b0:	2301      	movs	r3, #1
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	460b      	mov	r3, r1
 80055c4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80055c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80055ca:	f7ff ff82 	bl	80054d2 <wait_ready>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <xmit_datablock+0x1e>
 80055d4:	2300      	movs	r3, #0
 80055d6:	e01e      	b.n	8005616 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff ff2c 	bl	8005438 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	2bfd      	cmp	r3, #253	; 0xfd
 80055e4:	d016      	beq.n	8005614 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80055e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ff56 	bl	800549c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80055f0:	20ff      	movs	r0, #255	; 0xff
 80055f2:	f7ff ff21 	bl	8005438 <xchg_spi>
 80055f6:	20ff      	movs	r0, #255	; 0xff
 80055f8:	f7ff ff1e 	bl	8005438 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80055fc:	20ff      	movs	r0, #255	; 0xff
 80055fe:	f7ff ff1b 	bl	8005438 <xchg_spi>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	f003 031f 	and.w	r3, r3, #31
 800560c:	2b05      	cmp	r3, #5
 800560e:	d001      	beq.n	8005614 <xmit_datablock+0x5a>
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <xmit_datablock+0x5c>
	}
	return 1;
 8005614:	2301      	movs	r3, #1
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	4603      	mov	r3, r0
 8005626:	6039      	str	r1, [r7, #0]
 8005628:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	2b00      	cmp	r3, #0
 8005630:	da0e      	bge.n	8005650 <send_cmd+0x32>
		cmd &= 0x7F;
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005638:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800563a:	2100      	movs	r1, #0
 800563c:	2037      	movs	r0, #55	; 0x37
 800563e:	f7ff ffee 	bl	800561e <send_cmd>
 8005642:	4603      	mov	r3, r0
 8005644:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005646:	7bbb      	ldrb	r3, [r7, #14]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d901      	bls.n	8005650 <send_cmd+0x32>
 800564c:	7bbb      	ldrb	r3, [r7, #14]
 800564e:	e051      	b.n	80056f4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	2b0c      	cmp	r3, #12
 8005654:	d008      	beq.n	8005668 <send_cmd+0x4a>
		despiselect();
 8005656:	f7ff ff5f 	bl	8005518 <despiselect>
		if (!spiselect()) return 0xFF;
 800565a:	f7ff ff6b 	bl	8005534 <spiselect>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <send_cmd+0x4a>
 8005664:	23ff      	movs	r3, #255	; 0xff
 8005666:	e045      	b.n	80056f4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800566e:	b2db      	uxtb	r3, r3
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fee1 	bl	8005438 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	0e1b      	lsrs	r3, r3, #24
 800567a:	b2db      	uxtb	r3, r3
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fedb 	bl	8005438 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fed5 	bl	8005438 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	b2db      	uxtb	r3, r3
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff fecf 	bl	8005438 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff feca 	bl	8005438 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <send_cmd+0x94>
 80056ae:	2395      	movs	r3, #149	; 0x95
 80056b0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d101      	bne.n	80056bc <send_cmd+0x9e>
 80056b8:	2387      	movs	r3, #135	; 0x87
 80056ba:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff feba 	bl	8005438 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d102      	bne.n	80056d0 <send_cmd+0xb2>
 80056ca:	20ff      	movs	r0, #255	; 0xff
 80056cc:	f7ff feb4 	bl	8005438 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80056d0:	230a      	movs	r3, #10
 80056d2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80056d4:	20ff      	movs	r0, #255	; 0xff
 80056d6:	f7ff feaf 	bl	8005438 <xchg_spi>
 80056da:	4603      	mov	r3, r0
 80056dc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80056de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	da05      	bge.n	80056f2 <send_cmd+0xd4>
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80056f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <USER_SPI_initialize+0x14>
 800570c:	2301      	movs	r3, #1
 800570e:	e0d6      	b.n	80058be <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005710:	4b6d      	ldr	r3, [pc, #436]	; (80058c8 <USER_SPI_initialize+0x1cc>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <USER_SPI_initialize+0x2a>
 800571e:	4b6a      	ldr	r3, [pc, #424]	; (80058c8 <USER_SPI_initialize+0x1cc>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e0cb      	b.n	80058be <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005726:	4b69      	ldr	r3, [pc, #420]	; (80058cc <USER_SPI_initialize+0x1d0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005730:	4b66      	ldr	r3, [pc, #408]	; (80058cc <USER_SPI_initialize+0x1d0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8005738:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800573a:	230a      	movs	r3, #10
 800573c:	73fb      	strb	r3, [r7, #15]
 800573e:	e005      	b.n	800574c <USER_SPI_initialize+0x50>
 8005740:	20ff      	movs	r0, #255	; 0xff
 8005742:	f7ff fe79 	bl	8005438 <xchg_spi>
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	3b01      	subs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f6      	bne.n	8005740 <USER_SPI_initialize+0x44>

	ty = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005756:	2100      	movs	r1, #0
 8005758:	2000      	movs	r0, #0
 800575a:	f7ff ff60 	bl	800561e <send_cmd>
 800575e:	4603      	mov	r3, r0
 8005760:	2b01      	cmp	r3, #1
 8005762:	f040 808b 	bne.w	800587c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800576a:	f7ff fe3b 	bl	80053e4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800576e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005772:	2008      	movs	r0, #8
 8005774:	f7ff ff53 	bl	800561e <send_cmd>
 8005778:	4603      	mov	r3, r0
 800577a:	2b01      	cmp	r3, #1
 800577c:	d151      	bne.n	8005822 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800577e:	2300      	movs	r3, #0
 8005780:	73fb      	strb	r3, [r7, #15]
 8005782:	e00d      	b.n	80057a0 <USER_SPI_initialize+0xa4>
 8005784:	7bfc      	ldrb	r4, [r7, #15]
 8005786:	20ff      	movs	r0, #255	; 0xff
 8005788:	f7ff fe56 	bl	8005438 <xchg_spi>
 800578c:	4603      	mov	r3, r0
 800578e:	461a      	mov	r2, r3
 8005790:	f104 0310 	add.w	r3, r4, #16
 8005794:	443b      	add	r3, r7
 8005796:	f803 2c08 	strb.w	r2, [r3, #-8]
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	3301      	adds	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d9ee      	bls.n	8005784 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80057a6:	7abb      	ldrb	r3, [r7, #10]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d167      	bne.n	800587c <USER_SPI_initialize+0x180>
 80057ac:	7afb      	ldrb	r3, [r7, #11]
 80057ae:	2baa      	cmp	r3, #170	; 0xaa
 80057b0:	d164      	bne.n	800587c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80057b2:	bf00      	nop
 80057b4:	f7ff fe2a 	bl	800540c <SPI_Timer_Status>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <USER_SPI_initialize+0xd2>
 80057be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057c2:	20a9      	movs	r0, #169	; 0xa9
 80057c4:	f7ff ff2b 	bl	800561e <send_cmd>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f2      	bne.n	80057b4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80057ce:	f7ff fe1d 	bl	800540c <SPI_Timer_Status>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d051      	beq.n	800587c <USER_SPI_initialize+0x180>
 80057d8:	2100      	movs	r1, #0
 80057da:	203a      	movs	r0, #58	; 0x3a
 80057dc:	f7ff ff1f 	bl	800561e <send_cmd>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d14a      	bne.n	800587c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
 80057ea:	e00d      	b.n	8005808 <USER_SPI_initialize+0x10c>
 80057ec:	7bfc      	ldrb	r4, [r7, #15]
 80057ee:	20ff      	movs	r0, #255	; 0xff
 80057f0:	f7ff fe22 	bl	8005438 <xchg_spi>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461a      	mov	r2, r3
 80057f8:	f104 0310 	add.w	r3, r4, #16
 80057fc:	443b      	add	r3, r7
 80057fe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	3301      	adds	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b03      	cmp	r3, #3
 800580c:	d9ee      	bls.n	80057ec <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800580e:	7a3b      	ldrb	r3, [r7, #8]
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <USER_SPI_initialize+0x120>
 8005818:	230c      	movs	r3, #12
 800581a:	e000      	b.n	800581e <USER_SPI_initialize+0x122>
 800581c:	2304      	movs	r3, #4
 800581e:	737b      	strb	r3, [r7, #13]
 8005820:	e02c      	b.n	800587c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005822:	2100      	movs	r1, #0
 8005824:	20a9      	movs	r0, #169	; 0xa9
 8005826:	f7ff fefa 	bl	800561e <send_cmd>
 800582a:	4603      	mov	r3, r0
 800582c:	2b01      	cmp	r3, #1
 800582e:	d804      	bhi.n	800583a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005830:	2302      	movs	r3, #2
 8005832:	737b      	strb	r3, [r7, #13]
 8005834:	23a9      	movs	r3, #169	; 0xa9
 8005836:	73bb      	strb	r3, [r7, #14]
 8005838:	e003      	b.n	8005842 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800583a:	2301      	movs	r3, #1
 800583c:	737b      	strb	r3, [r7, #13]
 800583e:	2301      	movs	r3, #1
 8005840:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005842:	bf00      	nop
 8005844:	f7ff fde2 	bl	800540c <SPI_Timer_Status>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <USER_SPI_initialize+0x162>
 800584e:	7bbb      	ldrb	r3, [r7, #14]
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fee3 	bl	800561e <send_cmd>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f2      	bne.n	8005844 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800585e:	f7ff fdd5 	bl	800540c <SPI_Timer_Status>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <USER_SPI_initialize+0x17c>
 8005868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800586c:	2010      	movs	r0, #16
 800586e:	f7ff fed6 	bl	800561e <send_cmd>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <USER_SPI_initialize+0x180>
				ty = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800587c:	4a14      	ldr	r2, [pc, #80]	; (80058d0 <USER_SPI_initialize+0x1d4>)
 800587e:	7b7b      	ldrb	r3, [r7, #13]
 8005880:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005882:	f7ff fe49 	bl	8005518 <despiselect>

	if (ty) {			/* OK */
 8005886:	7b7b      	ldrb	r3, [r7, #13]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d012      	beq.n	80058b2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800588c:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <USER_SPI_initialize+0x1d0>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <USER_SPI_initialize+0x1d0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0210 	orr.w	r2, r2, #16
 800589e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80058a0:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <USER_SPI_initialize+0x1cc>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <USER_SPI_initialize+0x1cc>)
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	e002      	b.n	80058b8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <USER_SPI_initialize+0x1cc>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80058b8:	4b03      	ldr	r3, [pc, #12]	; (80058c8 <USER_SPI_initialize+0x1cc>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd90      	pop	{r4, r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000020 	.word	0x20000020
 80058cc:	20000918 	.word	0x20000918
 80058d0:	2001379c 	.word	0x2001379c

080058d4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <USER_SPI_status+0x14>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e002      	b.n	80058ee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80058e8:	4b04      	ldr	r3, [pc, #16]	; (80058fc <USER_SPI_status+0x28>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000020 	.word	0x20000020

08005900 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <USER_SPI_read+0x1c>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <USER_SPI_read+0x20>
 800591c:	2304      	movs	r3, #4
 800591e:	e04d      	b.n	80059bc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005920:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <USER_SPI_read+0xc4>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <USER_SPI_read+0x32>
 800592e:	2303      	movs	r3, #3
 8005930:	e044      	b.n	80059bc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <USER_SPI_read+0xc8>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <USER_SPI_read+0x44>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	025b      	lsls	r3, r3, #9
 8005942:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d111      	bne.n	800596e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	2011      	movs	r0, #17
 800594e:	f7ff fe66 	bl	800561e <send_cmd>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d129      	bne.n	80059ac <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800595c:	68b8      	ldr	r0, [r7, #8]
 800595e:	f7ff fe03 	bl	8005568 <rcvr_datablock>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d021      	beq.n	80059ac <USER_SPI_read+0xac>
			count = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	e01e      	b.n	80059ac <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	2012      	movs	r0, #18
 8005972:	f7ff fe54 	bl	800561e <send_cmd>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d117      	bne.n	80059ac <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800597c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005980:	68b8      	ldr	r0, [r7, #8]
 8005982:	f7ff fdf1 	bl	8005568 <rcvr_datablock>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <USER_SPI_read+0xa2>
				buff += 512;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005992:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	3b01      	subs	r3, #1
 8005998:	603b      	str	r3, [r7, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ed      	bne.n	800597c <USER_SPI_read+0x7c>
 80059a0:	e000      	b.n	80059a4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80059a2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80059a4:	2100      	movs	r1, #0
 80059a6:	200c      	movs	r0, #12
 80059a8:	f7ff fe39 	bl	800561e <send_cmd>
		}
	}
	despiselect();
 80059ac:	f7ff fdb4 	bl	8005518 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf14      	ite	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	2300      	moveq	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000020 	.word	0x20000020
 80059c8:	2001379c 	.word	0x2001379c

080059cc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4603      	mov	r3, r0
 80059da:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <USER_SPI_write+0x1c>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <USER_SPI_write+0x20>
 80059e8:	2304      	movs	r3, #4
 80059ea:	e063      	b.n	8005ab4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80059ec:	4b33      	ldr	r3, [pc, #204]	; (8005abc <USER_SPI_write+0xf0>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <USER_SPI_write+0x32>
 80059fa:	2303      	movs	r3, #3
 80059fc:	e05a      	b.n	8005ab4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80059fe:	4b2f      	ldr	r3, [pc, #188]	; (8005abc <USER_SPI_write+0xf0>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <USER_SPI_write+0x44>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e051      	b.n	8005ab4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005a10:	4b2b      	ldr	r3, [pc, #172]	; (8005ac0 <USER_SPI_write+0xf4>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <USER_SPI_write+0x56>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	025b      	lsls	r3, r3, #9
 8005a20:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d110      	bne.n	8005a4a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	2018      	movs	r0, #24
 8005a2c:	f7ff fdf7 	bl	800561e <send_cmd>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d136      	bne.n	8005aa4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005a36:	21fe      	movs	r1, #254	; 0xfe
 8005a38:	68b8      	ldr	r0, [r7, #8]
 8005a3a:	f7ff fdbe 	bl	80055ba <xmit_datablock>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02f      	beq.n	8005aa4 <USER_SPI_write+0xd8>
			count = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	e02c      	b.n	8005aa4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <USER_SPI_write+0xf4>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	f003 0306 	and.w	r3, r3, #6
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <USER_SPI_write+0x92>
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	2097      	movs	r0, #151	; 0x97
 8005a5a:	f7ff fde0 	bl	800561e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	2019      	movs	r0, #25
 8005a62:	f7ff fddc 	bl	800561e <send_cmd>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11b      	bne.n	8005aa4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005a6c:	21fc      	movs	r1, #252	; 0xfc
 8005a6e:	68b8      	ldr	r0, [r7, #8]
 8005a70:	f7ff fda3 	bl	80055ba <xmit_datablock>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <USER_SPI_write+0xc4>
				buff += 512;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005a80:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1ee      	bne.n	8005a6c <USER_SPI_write+0xa0>
 8005a8e:	e000      	b.n	8005a92 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005a90:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005a92:	21fd      	movs	r1, #253	; 0xfd
 8005a94:	2000      	movs	r0, #0
 8005a96:	f7ff fd90 	bl	80055ba <xmit_datablock>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <USER_SPI_write+0xd8>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005aa4:	f7ff fd38 	bl	8005518 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	bf14      	ite	ne
 8005aae:	2301      	movne	r3, #1
 8005ab0:	2300      	moveq	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000020 	.word	0x20000020
 8005ac0:	2001379c 	.word	0x2001379c

08005ac4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08c      	sub	sp, #48	; 0x30
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	603a      	str	r2, [r7, #0]
 8005ace:	71fb      	strb	r3, [r7, #7]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <USER_SPI_ioctl+0x1a>
 8005ada:	2304      	movs	r3, #4
 8005adc:	e15a      	b.n	8005d94 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005ade:	4baf      	ldr	r3, [pc, #700]	; (8005d9c <USER_SPI_ioctl+0x2d8>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <USER_SPI_ioctl+0x2c>
 8005aec:	2303      	movs	r3, #3
 8005aee:	e151      	b.n	8005d94 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005af6:	79bb      	ldrb	r3, [r7, #6]
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	f200 8136 	bhi.w	8005d6a <USER_SPI_ioctl+0x2a6>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <USER_SPI_ioctl+0x40>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b19 	.word	0x08005b19
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005d6b 	.word	0x08005d6b
 8005b10:	08005bd9 	.word	0x08005bd9
 8005b14:	08005ccf 	.word	0x08005ccf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005b18:	f7ff fd0c 	bl	8005534 <spiselect>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8127 	beq.w	8005d72 <USER_SPI_ioctl+0x2ae>
 8005b24:	2300      	movs	r3, #0
 8005b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005b2a:	e122      	b.n	8005d72 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	2009      	movs	r0, #9
 8005b30:	f7ff fd75 	bl	800561e <send_cmd>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 811d 	bne.w	8005d76 <USER_SPI_ioctl+0x2b2>
 8005b3c:	f107 030c 	add.w	r3, r7, #12
 8005b40:	2110      	movs	r1, #16
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff fd10 	bl	8005568 <rcvr_datablock>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8113 	beq.w	8005d76 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005b50:	7b3b      	ldrb	r3, [r7, #12]
 8005b52:	099b      	lsrs	r3, r3, #6
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d111      	bne.n	8005b7e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005b5a:	7d7b      	ldrb	r3, [r7, #21]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	7d3b      	ldrb	r3, [r7, #20]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	4413      	add	r3, r2
 8005b64:	461a      	mov	r2, r3
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
 8005b68:	041b      	lsls	r3, r3, #16
 8005b6a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005b6e:	4413      	add	r3, r2
 8005b70:	3301      	adds	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	029a      	lsls	r2, r3, #10
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e028      	b.n	8005bd0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005b7e:	7c7b      	ldrb	r3, [r7, #17]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	7dbb      	ldrb	r3, [r7, #22]
 8005b88:	09db      	lsrs	r3, r3, #7
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	7d7b      	ldrb	r3, [r7, #21]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f003 0306 	and.w	r3, r3, #6
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005ba6:	7d3b      	ldrb	r3, [r7, #20]
 8005ba8:	099b      	lsrs	r3, r3, #6
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	7cfb      	ldrb	r3, [r7, #19]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	7cbb      	ldrb	r3, [r7, #18]
 8005bb6:	029b      	lsls	r3, r3, #10
 8005bb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005bc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005bc6:	3b09      	subs	r3, #9
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005bd6:	e0ce      	b.n	8005d76 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005bd8:	4b71      	ldr	r3, [pc, #452]	; (8005da0 <USER_SPI_ioctl+0x2dc>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d031      	beq.n	8005c48 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005be4:	2100      	movs	r1, #0
 8005be6:	208d      	movs	r0, #141	; 0x8d
 8005be8:	f7ff fd19 	bl	800561e <send_cmd>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 80c3 	bne.w	8005d7a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005bf4:	20ff      	movs	r0, #255	; 0xff
 8005bf6:	f7ff fc1f 	bl	8005438 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005bfa:	f107 030c 	add.w	r3, r7, #12
 8005bfe:	2110      	movs	r1, #16
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fcb1 	bl	8005568 <rcvr_datablock>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80b6 	beq.w	8005d7a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005c0e:	2330      	movs	r3, #48	; 0x30
 8005c10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005c14:	e007      	b.n	8005c26 <USER_SPI_ioctl+0x162>
 8005c16:	20ff      	movs	r0, #255	; 0xff
 8005c18:	f7ff fc0e 	bl	8005438 <xchg_spi>
 8005c1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c20:	3b01      	subs	r3, #1
 8005c22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005c26:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f3      	bne.n	8005c16 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005c2e:	7dbb      	ldrb	r3, [r7, #22]
 8005c30:	091b      	lsrs	r3, r3, #4
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	2310      	movs	r3, #16
 8005c38:	fa03 f202 	lsl.w	r2, r3, r2
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005c46:	e098      	b.n	8005d7a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005c48:	2100      	movs	r1, #0
 8005c4a:	2009      	movs	r0, #9
 8005c4c:	f7ff fce7 	bl	800561e <send_cmd>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f040 8091 	bne.w	8005d7a <USER_SPI_ioctl+0x2b6>
 8005c58:	f107 030c 	add.w	r3, r7, #12
 8005c5c:	2110      	movs	r1, #16
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fc82 	bl	8005568 <rcvr_datablock>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8087 	beq.w	8005d7a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005c6c:	4b4c      	ldr	r3, [pc, #304]	; (8005da0 <USER_SPI_ioctl+0x2dc>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d012      	beq.n	8005c9e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005c78:	7dbb      	ldrb	r3, [r7, #22]
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005c80:	7dfa      	ldrb	r2, [r7, #23]
 8005c82:	09d2      	lsrs	r2, r2, #7
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	4413      	add	r3, r2
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	7e7b      	ldrb	r3, [r7, #25]
 8005c8c:	099b      	lsrs	r3, r3, #6
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	e013      	b.n	8005cc6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005c9e:	7dbb      	ldrb	r3, [r7, #22]
 8005ca0:	109b      	asrs	r3, r3, #2
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	3301      	adds	r3, #1
 8005caa:	7dfa      	ldrb	r2, [r7, #23]
 8005cac:	00d2      	lsls	r2, r2, #3
 8005cae:	f002 0218 	and.w	r2, r2, #24
 8005cb2:	7df9      	ldrb	r1, [r7, #23]
 8005cb4:	0949      	lsrs	r1, r1, #5
 8005cb6:	b2c9      	uxtb	r1, r1
 8005cb8:	440a      	add	r2, r1
 8005cba:	3201      	adds	r2, #1
 8005cbc:	fb02 f303 	mul.w	r3, r2, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005ccc:	e055      	b.n	8005d7a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005cce:	4b34      	ldr	r3, [pc, #208]	; (8005da0 <USER_SPI_ioctl+0x2dc>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	f003 0306 	and.w	r3, r3, #6
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d051      	beq.n	8005d7e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005cda:	f107 020c 	add.w	r2, r7, #12
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	210b      	movs	r1, #11
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff feee 	bl	8005ac4 <USER_SPI_ioctl>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d149      	bne.n	8005d82 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005cee:	7b3b      	ldrb	r3, [r7, #12]
 8005cf0:	099b      	lsrs	r3, r3, #6
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <USER_SPI_ioctl+0x23e>
 8005cf8:	7dbb      	ldrb	r3, [r7, #22]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d041      	beq.n	8005d86 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	623b      	str	r3, [r7, #32]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005d12:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <USER_SPI_ioctl+0x2dc>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	025b      	lsls	r3, r3, #9
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	025b      	lsls	r3, r3, #9
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d2c:	2020      	movs	r0, #32
 8005d2e:	f7ff fc76 	bl	800561e <send_cmd>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d128      	bne.n	8005d8a <USER_SPI_ioctl+0x2c6>
 8005d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d3a:	2021      	movs	r0, #33	; 0x21
 8005d3c:	f7ff fc6f 	bl	800561e <send_cmd>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d121      	bne.n	8005d8a <USER_SPI_ioctl+0x2c6>
 8005d46:	2100      	movs	r1, #0
 8005d48:	2026      	movs	r0, #38	; 0x26
 8005d4a:	f7ff fc68 	bl	800561e <send_cmd>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d11a      	bne.n	8005d8a <USER_SPI_ioctl+0x2c6>
 8005d54:	f247 5030 	movw	r0, #30000	; 0x7530
 8005d58:	f7ff fbbb 	bl	80054d2 <wait_ready>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d013      	beq.n	8005d8a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005d68:	e00f      	b.n	8005d8a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005d6a:	2304      	movs	r3, #4
 8005d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d70:	e00c      	b.n	8005d8c <USER_SPI_ioctl+0x2c8>
		break;
 8005d72:	bf00      	nop
 8005d74:	e00a      	b.n	8005d8c <USER_SPI_ioctl+0x2c8>
		break;
 8005d76:	bf00      	nop
 8005d78:	e008      	b.n	8005d8c <USER_SPI_ioctl+0x2c8>
		break;
 8005d7a:	bf00      	nop
 8005d7c:	e006      	b.n	8005d8c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005d7e:	bf00      	nop
 8005d80:	e004      	b.n	8005d8c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005d82:	bf00      	nop
 8005d84:	e002      	b.n	8005d8c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <USER_SPI_ioctl+0x2c8>
		break;
 8005d8a:	bf00      	nop
	}

	despiselect();
 8005d8c:	f7ff fbc4 	bl	8005518 <despiselect>

	return res;
 8005d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3730      	adds	r7, #48	; 0x30
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000020 	.word	0x20000020
 8005da0:	2001379c 	.word	0x2001379c

08005da4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005dae:	79fb      	ldrb	r3, [r7, #7]
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <disk_status+0x30>)
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	79fa      	ldrb	r2, [r7, #7]
 8005dbc:	4905      	ldr	r1, [pc, #20]	; (8005dd4 <disk_status+0x30>)
 8005dbe:	440a      	add	r2, r1
 8005dc0:	7a12      	ldrb	r2, [r2, #8]
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4798      	blx	r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	200137d0 	.word	0x200137d0

08005dd8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	4a0d      	ldr	r2, [pc, #52]	; (8005e20 <disk_initialize+0x48>)
 8005dea:	5cd3      	ldrb	r3, [r2, r3]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d111      	bne.n	8005e14 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <disk_initialize+0x48>)
 8005df4:	2101      	movs	r1, #1
 8005df6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <disk_initialize+0x48>)
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	79fa      	ldrb	r2, [r7, #7]
 8005e06:	4906      	ldr	r1, [pc, #24]	; (8005e20 <disk_initialize+0x48>)
 8005e08:	440a      	add	r2, r1
 8005e0a:	7a12      	ldrb	r2, [r2, #8]
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4798      	blx	r3
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	200137d0 	.word	0x200137d0

08005e24 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4603      	mov	r3, r0
 8005e32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <disk_read+0x3c>)
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	689c      	ldr	r4, [r3, #8]
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	4a07      	ldr	r2, [pc, #28]	; (8005e60 <disk_read+0x3c>)
 8005e44:	4413      	add	r3, r2
 8005e46:	7a18      	ldrb	r0, [r3, #8]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	47a0      	blx	r4
 8005e50:	4603      	mov	r3, r0
 8005e52:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd90      	pop	{r4, r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	200137d0 	.word	0x200137d0

08005e64 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e64:	b590      	push	{r4, r7, lr}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	4603      	mov	r3, r0
 8005e72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <disk_write+0x3c>)
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68dc      	ldr	r4, [r3, #12]
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	4a07      	ldr	r2, [pc, #28]	; (8005ea0 <disk_write+0x3c>)
 8005e84:	4413      	add	r3, r2
 8005e86:	7a18      	ldrb	r0, [r3, #8]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68b9      	ldr	r1, [r7, #8]
 8005e8e:	47a0      	blx	r4
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd90      	pop	{r4, r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	200137d0 	.word	0x200137d0

08005ea4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	603a      	str	r2, [r7, #0]
 8005eae:	71fb      	strb	r3, [r7, #7]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	4a09      	ldr	r2, [pc, #36]	; (8005edc <disk_ioctl+0x38>)
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	79fa      	ldrb	r2, [r7, #7]
 8005ec2:	4906      	ldr	r1, [pc, #24]	; (8005edc <disk_ioctl+0x38>)
 8005ec4:	440a      	add	r2, r1
 8005ec6:	7a10      	ldrb	r0, [r2, #8]
 8005ec8:	79b9      	ldrb	r1, [r7, #6]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4798      	blx	r3
 8005ece:	4603      	mov	r3, r0
 8005ed0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	200137d0 	.word	0x200137d0

08005ee0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3301      	adds	r3, #1
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005ef0:	89fb      	ldrh	r3, [r7, #14]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	b21a      	sxth	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	b21b      	sxth	r3, r3
 8005efc:	4313      	orrs	r3, r2
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f02:	89fb      	ldrh	r3, [r7, #14]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3303      	adds	r3, #3
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	3202      	adds	r2, #2
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	3201      	adds	r2, #1
 8005f36:	7812      	ldrb	r2, [r2, #0]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
	return rv;
 8005f48:	68fb      	ldr	r3, [r7, #12]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	887a      	ldrh	r2, [r7, #2]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	887b      	ldrh	r3, [r7, #2]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	0a1b      	lsrs	r3, r3, #8
 8005fca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00d      	beq.n	800601a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	1c53      	adds	r3, r2, #1
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	1c59      	adds	r1, r3, #1
 8006008:	6179      	str	r1, [r7, #20]
 800600a:	7812      	ldrb	r2, [r2, #0]
 800600c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3b01      	subs	r3, #1
 8006012:	607b      	str	r3, [r7, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f1      	bne.n	8005ffe <mem_cpy+0x1a>
	}
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006026:	b480      	push	{r7}
 8006028:	b087      	sub	sp, #28
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	617a      	str	r2, [r7, #20]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3b01      	subs	r3, #1
 8006046:	607b      	str	r3, [r7, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f3      	bne.n	8006036 <mem_set+0x10>
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800605c:	b480      	push	{r7}
 800605e:	b089      	sub	sp, #36	; 0x24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	61fa      	str	r2, [r7, #28]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	4619      	mov	r1, r3
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	61ba      	str	r2, [r7, #24]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	1acb      	subs	r3, r1, r3
 8006088:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3b01      	subs	r3, #1
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <mem_cmp+0x40>
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0eb      	beq.n	8006074 <mem_cmp+0x18>

	return r;
 800609c:	697b      	ldr	r3, [r7, #20]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3724      	adds	r7, #36	; 0x24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80060b4:	e002      	b.n	80060bc <chk_chr+0x12>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3301      	adds	r3, #1
 80060ba:	607b      	str	r3, [r7, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <chk_chr+0x26>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d1f2      	bne.n	80060b6 <chk_chr+0xc>
	return *str;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	781b      	ldrb	r3, [r3, #0]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e029      	b.n	8006148 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80060f4:	4a27      	ldr	r2, [pc, #156]	; (8006194 <chk_lock+0xb4>)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	4413      	add	r3, r2
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01d      	beq.n	800613e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006102:	4a24      	ldr	r2, [pc, #144]	; (8006194 <chk_lock+0xb4>)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	4413      	add	r3, r2
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d116      	bne.n	8006142 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006114:	4a1f      	ldr	r2, [pc, #124]	; (8006194 <chk_lock+0xb4>)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	4413      	add	r3, r2
 800611c:	3304      	adds	r3, #4
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006124:	429a      	cmp	r2, r3
 8006126:	d10c      	bne.n	8006142 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006128:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <chk_lock+0xb4>)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	4413      	add	r3, r2
 8006130:	3308      	adds	r3, #8
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006138:	429a      	cmp	r2, r3
 800613a:	d102      	bne.n	8006142 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800613c:	e007      	b.n	800614e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d9d2      	bls.n	80060f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d109      	bne.n	8006168 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d102      	bne.n	8006160 <chk_lock+0x80>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d101      	bne.n	8006164 <chk_lock+0x84>
 8006160:	2300      	movs	r3, #0
 8006162:	e010      	b.n	8006186 <chk_lock+0xa6>
 8006164:	2312      	movs	r3, #18
 8006166:	e00e      	b.n	8006186 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d108      	bne.n	8006180 <chk_lock+0xa0>
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <chk_lock+0xb4>)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	4413      	add	r3, r2
 8006176:	330c      	adds	r3, #12
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617e:	d101      	bne.n	8006184 <chk_lock+0xa4>
 8006180:	2310      	movs	r3, #16
 8006182:	e000      	b.n	8006186 <chk_lock+0xa6>
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	200137b0 	.word	0x200137b0

08006198 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	e002      	b.n	80061aa <enq_lock+0x12>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3301      	adds	r3, #1
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d806      	bhi.n	80061be <enq_lock+0x26>
 80061b0:	4a09      	ldr	r2, [pc, #36]	; (80061d8 <enq_lock+0x40>)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	4413      	add	r3, r2
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f2      	bne.n	80061a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	bf14      	ite	ne
 80061c4:	2301      	movne	r3, #1
 80061c6:	2300      	moveq	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	200137b0 	.word	0x200137b0

080061dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	e01f      	b.n	800622c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80061ec:	4a41      	ldr	r2, [pc, #260]	; (80062f4 <inc_lock+0x118>)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	4413      	add	r3, r2
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d113      	bne.n	8006226 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80061fe:	4a3d      	ldr	r2, [pc, #244]	; (80062f4 <inc_lock+0x118>)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	4413      	add	r3, r2
 8006206:	3304      	adds	r3, #4
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800620e:	429a      	cmp	r2, r3
 8006210:	d109      	bne.n	8006226 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006212:	4a38      	ldr	r2, [pc, #224]	; (80062f4 <inc_lock+0x118>)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	4413      	add	r3, r2
 800621a:	3308      	adds	r3, #8
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006222:	429a      	cmp	r2, r3
 8006224:	d006      	beq.n	8006234 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d9dc      	bls.n	80061ec <inc_lock+0x10>
 8006232:	e000      	b.n	8006236 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006234:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d132      	bne.n	80062a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e002      	b.n	8006248 <inc_lock+0x6c>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3301      	adds	r3, #1
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d806      	bhi.n	800625c <inc_lock+0x80>
 800624e:	4a29      	ldr	r2, [pc, #164]	; (80062f4 <inc_lock+0x118>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	4413      	add	r3, r2
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f2      	bne.n	8006242 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d101      	bne.n	8006266 <inc_lock+0x8a>
 8006262:	2300      	movs	r3, #0
 8006264:	e040      	b.n	80062e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4922      	ldr	r1, [pc, #136]	; (80062f4 <inc_lock+0x118>)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	440b      	add	r3, r1
 8006272:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	491e      	ldr	r1, [pc, #120]	; (80062f4 <inc_lock+0x118>)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	440b      	add	r3, r1
 8006280:	3304      	adds	r3, #4
 8006282:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	491a      	ldr	r1, [pc, #104]	; (80062f4 <inc_lock+0x118>)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	440b      	add	r3, r1
 8006290:	3308      	adds	r3, #8
 8006292:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006294:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <inc_lock+0x118>)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	4413      	add	r3, r2
 800629c:	330c      	adds	r3, #12
 800629e:	2200      	movs	r2, #0
 80062a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <inc_lock+0xe0>
 80062a8:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <inc_lock+0x118>)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	4413      	add	r3, r2
 80062b0:	330c      	adds	r3, #12
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <inc_lock+0xe0>
 80062b8:	2300      	movs	r3, #0
 80062ba:	e015      	b.n	80062e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d108      	bne.n	80062d4 <inc_lock+0xf8>
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <inc_lock+0x118>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	4413      	add	r3, r2
 80062ca:	330c      	adds	r3, #12
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	3301      	adds	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	e001      	b.n	80062d8 <inc_lock+0xfc>
 80062d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062d8:	4906      	ldr	r1, [pc, #24]	; (80062f4 <inc_lock+0x118>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	440b      	add	r3, r1
 80062e0:	330c      	adds	r3, #12
 80062e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	200137b0 	.word	0x200137b0

080062f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3b01      	subs	r3, #1
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d825      	bhi.n	8006358 <dec_lock+0x60>
		n = Files[i].ctr;
 800630c:	4a17      	ldr	r2, [pc, #92]	; (800636c <dec_lock+0x74>)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	4413      	add	r3, r2
 8006314:	330c      	adds	r3, #12
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800631a:	89fb      	ldrh	r3, [r7, #14]
 800631c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006320:	d101      	bne.n	8006326 <dec_lock+0x2e>
 8006322:	2300      	movs	r3, #0
 8006324:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006326:	89fb      	ldrh	r3, [r7, #14]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <dec_lock+0x3a>
 800632c:	89fb      	ldrh	r3, [r7, #14]
 800632e:	3b01      	subs	r3, #1
 8006330:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006332:	4a0e      	ldr	r2, [pc, #56]	; (800636c <dec_lock+0x74>)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	4413      	add	r3, r2
 800633a:	330c      	adds	r3, #12
 800633c:	89fa      	ldrh	r2, [r7, #14]
 800633e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006340:	89fb      	ldrh	r3, [r7, #14]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d105      	bne.n	8006352 <dec_lock+0x5a>
 8006346:	4a09      	ldr	r2, [pc, #36]	; (800636c <dec_lock+0x74>)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	4413      	add	r3, r2
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	737b      	strb	r3, [r7, #13]
 8006356:	e001      	b.n	800635c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006358:	2302      	movs	r3, #2
 800635a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800635c:	7b7b      	ldrb	r3, [r7, #13]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	200137b0 	.word	0x200137b0

08006370 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	e010      	b.n	80063a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800637e:	4a0d      	ldr	r2, [pc, #52]	; (80063b4 <clear_lock+0x44>)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	4413      	add	r3, r2
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	429a      	cmp	r2, r3
 800638c:	d105      	bne.n	800639a <clear_lock+0x2a>
 800638e:	4a09      	ldr	r2, [pc, #36]	; (80063b4 <clear_lock+0x44>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	4413      	add	r3, r2
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d9eb      	bls.n	800637e <clear_lock+0xe>
	}
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	200137b0 	.word	0x200137b0

080063b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	78db      	ldrb	r3, [r3, #3]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d034      	beq.n	8006436 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	7858      	ldrb	r0, [r3, #1]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063dc:	2301      	movs	r3, #1
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	f7ff fd40 	bl	8005e64 <disk_write>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
 80063ee:	e022      	b.n	8006436 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	1ad2      	subs	r2, r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	429a      	cmp	r2, r3
 8006404:	d217      	bcs.n	8006436 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	789b      	ldrb	r3, [r3, #2]
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	e010      	b.n	8006430 <sync_window+0x78>
					wsect += fs->fsize;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4413      	add	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7858      	ldrb	r0, [r3, #1]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006422:	2301      	movs	r3, #1
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	f7ff fd1d 	bl	8005e64 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	3b01      	subs	r3, #1
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d8eb      	bhi.n	800640e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d01b      	beq.n	8006490 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff ffad 	bl	80063b8 <sync_window>
 800645e:	4603      	mov	r3, r0
 8006460:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d113      	bne.n	8006490 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	7858      	ldrb	r0, [r3, #1]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006472:	2301      	movs	r3, #1
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	f7ff fcd5 	bl	8005e24 <disk_read>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006480:	f04f 33ff 	mov.w	r3, #4294967295
 8006484:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006486:	2301      	movs	r3, #1
 8006488:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff87 	bl	80063b8 <sync_window>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d158      	bne.n	8006566 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d148      	bne.n	800654e <sync_fs+0xb2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	791b      	ldrb	r3, [r3, #4]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d144      	bne.n	800654e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3330      	adds	r3, #48	; 0x30
 80064c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064cc:	2100      	movs	r1, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fda9 	bl	8006026 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3330      	adds	r3, #48	; 0x30
 80064d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fd38 	bl	8005f56 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3330      	adds	r3, #48	; 0x30
 80064ea:	4921      	ldr	r1, [pc, #132]	; (8006570 <sync_fs+0xd4>)
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fd4d 	bl	8005f8c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3330      	adds	r3, #48	; 0x30
 80064f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80064fa:	491e      	ldr	r1, [pc, #120]	; (8006574 <sync_fs+0xd8>)
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff fd45 	bl	8005f8c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3330      	adds	r3, #48	; 0x30
 8006506:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7ff fd3b 	bl	8005f8c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3330      	adds	r3, #48	; 0x30
 800651a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7ff fd31 	bl	8005f8c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	7858      	ldrb	r0, [r3, #1]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	2301      	movs	r3, #1
 8006544:	f7ff fc8e 	bl	8005e64 <disk_write>
			fs->fsi_flag = 0;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2200      	movs	r2, #0
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fca4 	bl	8005ea4 <disk_ioctl>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <sync_fs+0xca>
 8006562:	2301      	movs	r3, #1
 8006564:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	41615252 	.word	0x41615252
 8006574:	61417272 	.word	0x61417272

08006578 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	3b02      	subs	r3, #2
 8006586:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	3b02      	subs	r3, #2
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d301      	bcc.n	8006598 <clust2sect+0x20>
 8006594:	2300      	movs	r3, #0
 8006596:	e008      	b.n	80065aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	895b      	ldrh	r3, [r3, #10]
 800659c:	461a      	mov	r2, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	fb03 f202 	mul.w	r2, r3, r2
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a8:	4413      	add	r3, r2
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d904      	bls.n	80065d6 <get_fat+0x20>
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d302      	bcc.n	80065dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80065d6:	2301      	movs	r3, #1
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	e08f      	b.n	80066fc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295
 80065e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d062      	beq.n	80066b0 <get_fat+0xfa>
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	dc7c      	bgt.n	80066e8 <get_fat+0x132>
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d002      	beq.n	80065f8 <get_fat+0x42>
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d042      	beq.n	800667c <get_fat+0xc6>
 80065f6:	e077      	b.n	80066e8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6a1a      	ldr	r2, [r3, #32]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	0a5b      	lsrs	r3, r3, #9
 800660e:	4413      	add	r3, r2
 8006610:	4619      	mov	r1, r3
 8006612:	6938      	ldr	r0, [r7, #16]
 8006614:	f7ff ff14 	bl	8006440 <move_window>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d167      	bne.n	80066ee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	60fa      	str	r2, [r7, #12]
 8006624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4413      	add	r3, r2
 800662c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006630:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6a1a      	ldr	r2, [r3, #32]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	0a5b      	lsrs	r3, r3, #9
 800663a:	4413      	add	r3, r2
 800663c:	4619      	mov	r1, r3
 800663e:	6938      	ldr	r0, [r7, #16]
 8006640:	f7ff fefe 	bl	8006440 <move_window>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d153      	bne.n	80066f2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4413      	add	r3, r2
 8006654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	461a      	mov	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4313      	orrs	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <get_fat+0xbc>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	091b      	lsrs	r3, r3, #4
 8006670:	e002      	b.n	8006678 <get_fat+0xc2>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006678:	617b      	str	r3, [r7, #20]
			break;
 800667a:	e03f      	b.n	80066fc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	6a1a      	ldr	r2, [r3, #32]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	4413      	add	r3, r2
 8006686:	4619      	mov	r1, r3
 8006688:	6938      	ldr	r0, [r7, #16]
 800668a:	f7ff fed9 	bl	8006440 <move_window>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d130      	bne.n	80066f6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80066a2:	4413      	add	r3, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fc1b 	bl	8005ee0 <ld_word>
 80066aa:	4603      	mov	r3, r0
 80066ac:	617b      	str	r3, [r7, #20]
			break;
 80066ae:	e025      	b.n	80066fc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6a1a      	ldr	r2, [r3, #32]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	09db      	lsrs	r3, r3, #7
 80066b8:	4413      	add	r3, r2
 80066ba:	4619      	mov	r1, r3
 80066bc:	6938      	ldr	r0, [r7, #16]
 80066be:	f7ff febf 	bl	8006440 <move_window>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d118      	bne.n	80066fa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80066d6:	4413      	add	r3, r2
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff fc19 	bl	8005f10 <ld_dword>
 80066de:	4603      	mov	r3, r0
 80066e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066e4:	617b      	str	r3, [r7, #20]
			break;
 80066e6:	e009      	b.n	80066fc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e006      	b.n	80066fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066ee:	bf00      	nop
 80066f0:	e004      	b.n	80066fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066f2:	bf00      	nop
 80066f4:	e002      	b.n	80066fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066f6:	bf00      	nop
 80066f8:	e000      	b.n	80066fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80066fa:	bf00      	nop
		}
	}

	return val;
 80066fc:	697b      	ldr	r3, [r7, #20]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006706:	b590      	push	{r4, r7, lr}
 8006708:	b089      	sub	sp, #36	; 0x24
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006712:	2302      	movs	r3, #2
 8006714:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b01      	cmp	r3, #1
 800671a:	f240 80d2 	bls.w	80068c2 <put_fat+0x1bc>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	429a      	cmp	r2, r3
 8006726:	f080 80cc 	bcs.w	80068c2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b03      	cmp	r3, #3
 8006730:	f000 8096 	beq.w	8006860 <put_fat+0x15a>
 8006734:	2b03      	cmp	r3, #3
 8006736:	f300 80cd 	bgt.w	80068d4 <put_fat+0x1ce>
 800673a:	2b01      	cmp	r3, #1
 800673c:	d002      	beq.n	8006744 <put_fat+0x3e>
 800673e:	2b02      	cmp	r3, #2
 8006740:	d06e      	beq.n	8006820 <put_fat+0x11a>
 8006742:	e0c7      	b.n	80068d4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4413      	add	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1a      	ldr	r2, [r3, #32]
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	0a5b      	lsrs	r3, r3, #9
 800675a:	4413      	add	r3, r2
 800675c:	4619      	mov	r1, r3
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fe6e 	bl	8006440 <move_window>
 8006764:	4603      	mov	r3, r0
 8006766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006768:	7ffb      	ldrb	r3, [r7, #31]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 80ab 	bne.w	80068c6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	1c59      	adds	r1, r3, #1
 800677a:	61b9      	str	r1, [r7, #24]
 800677c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006780:	4413      	add	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00d      	beq.n	80067aa <put_fat+0xa4>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	b25b      	sxtb	r3, r3
 8006794:	f003 030f 	and.w	r3, r3, #15
 8006798:	b25a      	sxtb	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	b25b      	sxtb	r3, r3
 80067a2:	4313      	orrs	r3, r2
 80067a4:	b25b      	sxtb	r3, r3
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	e001      	b.n	80067ae <put_fat+0xa8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a1a      	ldr	r2, [r3, #32]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	0a5b      	lsrs	r3, r3, #9
 80067c0:	4413      	add	r3, r2
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff fe3b 	bl	8006440 <move_window>
 80067ca:	4603      	mov	r3, r0
 80067cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067ce:	7ffb      	ldrb	r3, [r7, #31]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d17a      	bne.n	80068ca <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e0:	4413      	add	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <put_fat+0xf0>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	091b      	lsrs	r3, r3, #4
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	e00e      	b.n	8006814 <put_fat+0x10e>
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	b25b      	sxtb	r3, r3
 80067fc:	f023 030f 	bic.w	r3, r3, #15
 8006800:	b25a      	sxtb	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0a1b      	lsrs	r3, r3, #8
 8006806:	b25b      	sxtb	r3, r3
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	b25b      	sxtb	r3, r3
 800680e:	4313      	orrs	r3, r2
 8006810:	b25b      	sxtb	r3, r3
 8006812:	b2db      	uxtb	r3, r3
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	70da      	strb	r2, [r3, #3]
			break;
 800681e:	e059      	b.n	80068d4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1a      	ldr	r2, [r3, #32]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	4413      	add	r3, r2
 800682a:	4619      	mov	r1, r3
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f7ff fe07 	bl	8006440 <move_window>
 8006832:	4603      	mov	r3, r0
 8006834:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006836:	7ffb      	ldrb	r3, [r7, #31]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d148      	bne.n	80068ce <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800684a:	4413      	add	r3, r2
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	b292      	uxth	r2, r2
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fb7f 	bl	8005f56 <st_word>
			fs->wflag = 1;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	70da      	strb	r2, [r3, #3]
			break;
 800685e:	e039      	b.n	80068d4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1a      	ldr	r2, [r3, #32]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	09db      	lsrs	r3, r3, #7
 8006868:	4413      	add	r3, r2
 800686a:	4619      	mov	r1, r3
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff fde7 	bl	8006440 <move_window>
 8006872:	4603      	mov	r3, r0
 8006874:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006876:	7ffb      	ldrb	r3, [r7, #31]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d12a      	bne.n	80068d2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006890:	4413      	add	r3, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fb3c 	bl	8005f10 <ld_dword>
 8006898:	4603      	mov	r3, r0
 800689a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800689e:	4323      	orrs	r3, r4
 80068a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80068b0:	4413      	add	r3, r2
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fb69 	bl	8005f8c <st_dword>
			fs->wflag = 1;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	70da      	strb	r2, [r3, #3]
			break;
 80068c0:	e008      	b.n	80068d4 <put_fat+0x1ce>
		}
	}
 80068c2:	bf00      	nop
 80068c4:	e006      	b.n	80068d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80068c6:	bf00      	nop
 80068c8:	e004      	b.n	80068d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80068ca:	bf00      	nop
 80068cc:	e002      	b.n	80068d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80068ce:	bf00      	nop
 80068d0:	e000      	b.n	80068d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80068d2:	bf00      	nop
	return res;
 80068d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3724      	adds	r7, #36	; 0x24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd90      	pop	{r4, r7, pc}

080068de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b088      	sub	sp, #32
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d904      	bls.n	8006904 <remove_chain+0x26>
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	429a      	cmp	r2, r3
 8006902:	d301      	bcc.n	8006908 <remove_chain+0x2a>
 8006904:	2302      	movs	r3, #2
 8006906:	e04b      	b.n	80069a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00c      	beq.n	8006928 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	69b8      	ldr	r0, [r7, #24]
 8006916:	f7ff fef6 	bl	8006706 <put_fat>
 800691a:	4603      	mov	r3, r0
 800691c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800691e:	7ffb      	ldrb	r3, [r7, #31]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <remove_chain+0x4a>
 8006924:	7ffb      	ldrb	r3, [r7, #31]
 8006926:	e03b      	b.n	80069a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff fe43 	bl	80065b6 <get_fat>
 8006930:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d031      	beq.n	800699c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <remove_chain+0x64>
 800693e:	2302      	movs	r3, #2
 8006940:	e02e      	b.n	80069a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d101      	bne.n	800694e <remove_chain+0x70>
 800694a:	2301      	movs	r3, #1
 800694c:	e028      	b.n	80069a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800694e:	2200      	movs	r2, #0
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	69b8      	ldr	r0, [r7, #24]
 8006954:	f7ff fed7 	bl	8006706 <put_fat>
 8006958:	4603      	mov	r3, r0
 800695a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800695c:	7ffb      	ldrb	r3, [r7, #31]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <remove_chain+0x88>
 8006962:	7ffb      	ldrb	r3, [r7, #31]
 8006964:	e01c      	b.n	80069a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	691a      	ldr	r2, [r3, #16]
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	3b02      	subs	r3, #2
 8006970:	429a      	cmp	r2, r3
 8006972:	d20b      	bcs.n	800698c <remove_chain+0xae>
			fs->free_clst++;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	791b      	ldrb	r3, [r3, #4]
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	b2da      	uxtb	r2, r3
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	429a      	cmp	r2, r3
 8006998:	d3c6      	bcc.n	8006928 <remove_chain+0x4a>
 800699a:	e000      	b.n	800699e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800699c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3720      	adds	r7, #32
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10d      	bne.n	80069da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <create_chain+0x2c>
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d31b      	bcc.n	8006a0c <create_chain+0x64>
 80069d4:	2301      	movs	r3, #1
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	e018      	b.n	8006a0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff fdea 	bl	80065b6 <get_fat>
 80069e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d801      	bhi.n	80069ee <create_chain+0x46>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e070      	b.n	8006ad0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d101      	bne.n	80069fa <create_chain+0x52>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	e06a      	b.n	8006ad0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d201      	bcs.n	8006a08 <create_chain+0x60>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	e063      	b.n	8006ad0 <create_chain+0x128>
		scl = clst;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	3301      	adds	r3, #1
 8006a14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d307      	bcc.n	8006a30 <create_chain+0x88>
				ncl = 2;
 8006a20:	2302      	movs	r3, #2
 8006a22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d901      	bls.n	8006a30 <create_chain+0x88>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e04f      	b.n	8006ad0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006a30:	69f9      	ldr	r1, [r7, #28]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fdbf 	bl	80065b6 <get_fat>
 8006a38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00e      	beq.n	8006a5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d003      	beq.n	8006a4e <create_chain+0xa6>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d101      	bne.n	8006a52 <create_chain+0xaa>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	e03e      	b.n	8006ad0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d1da      	bne.n	8006a10 <create_chain+0x68>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e038      	b.n	8006ad0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006a5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295
 8006a64:	69f9      	ldr	r1, [r7, #28]
 8006a66:	6938      	ldr	r0, [r7, #16]
 8006a68:	f7ff fe4d 	bl	8006706 <put_fat>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <create_chain+0xe2>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d006      	beq.n	8006a8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6938      	ldr	r0, [r7, #16]
 8006a82:	f7ff fe40 	bl	8006706 <put_fat>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d116      	bne.n	8006abe <create_chain+0x116>
		fs->last_clst = ncl;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	691a      	ldr	r2, [r3, #16]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	3b02      	subs	r3, #2
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d804      	bhi.n	8006aae <create_chain+0x106>
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	1e5a      	subs	r2, r3, #1
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	791b      	ldrb	r3, [r3, #4]
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	711a      	strb	r2, [r3, #4]
 8006abc:	e007      	b.n	8006ace <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d102      	bne.n	8006aca <create_chain+0x122>
 8006ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac8:	e000      	b.n	8006acc <create_chain+0x124>
 8006aca:	2301      	movs	r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ace:	69fb      	ldr	r3, [r7, #28]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	3304      	adds	r3, #4
 8006aee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	0a5b      	lsrs	r3, r3, #9
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	8952      	ldrh	r2, [r2, #10]
 8006af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1d1a      	adds	r2, r3, #4
 8006b02:	613a      	str	r2, [r7, #16]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <clmt_clust+0x3a>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e010      	b.n	8006b34 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d307      	bcc.n	8006b2a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	3304      	adds	r3, #4
 8006b26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b28:	e7e9      	b.n	8006afe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006b2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	4413      	add	r3, r2
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b56:	d204      	bcs.n	8006b62 <dir_sdi+0x22>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f003 031f 	and.w	r3, r3, #31
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006b62:	2302      	movs	r3, #2
 8006b64:	e063      	b.n	8006c2e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <dir_sdi+0x46>
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d902      	bls.n	8006b86 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10c      	bne.n	8006ba6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	8912      	ldrh	r2, [r2, #8]
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d301      	bcc.n	8006b9c <dir_sdi+0x5c>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e048      	b.n	8006c2e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	61da      	str	r2, [r3, #28]
 8006ba4:	e029      	b.n	8006bfa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	895b      	ldrh	r3, [r3, #10]
 8006baa:	025b      	lsls	r3, r3, #9
 8006bac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006bae:	e019      	b.n	8006be4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6979      	ldr	r1, [r7, #20]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fcfe 	bl	80065b6 <get_fat>
 8006bba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d101      	bne.n	8006bc8 <dir_sdi+0x88>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e032      	b.n	8006c2e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d904      	bls.n	8006bd8 <dir_sdi+0x98>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d301      	bcc.n	8006bdc <dir_sdi+0x9c>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e028      	b.n	8006c2e <dir_sdi+0xee>
			ofs -= csz;
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d2e1      	bcs.n	8006bb0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006bec:	6979      	ldr	r1, [r7, #20]
 8006bee:	6938      	ldr	r0, [r7, #16]
 8006bf0:	f7ff fcc2 	bl	8006578 <clust2sect>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <dir_sdi+0xcc>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e010      	b.n	8006c2e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	0a5b      	lsrs	r3, r3, #9
 8006c14:	441a      	add	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	441a      	add	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	3320      	adds	r3, #32
 8006c4c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <dir_next+0x28>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c5c:	d301      	bcc.n	8006c62 <dir_next+0x2c>
 8006c5e:	2304      	movs	r3, #4
 8006c60:	e0aa      	b.n	8006db8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 8098 	bne.w	8006d9e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10b      	bne.n	8006c98 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	8912      	ldrh	r2, [r2, #8]
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	f0c0 8088 	bcc.w	8006d9e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	61da      	str	r2, [r3, #28]
 8006c94:	2304      	movs	r3, #4
 8006c96:	e08f      	b.n	8006db8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	0a5b      	lsrs	r3, r3, #9
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	8952      	ldrh	r2, [r2, #10]
 8006ca0:	3a01      	subs	r2, #1
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d17a      	bne.n	8006d9e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f7ff fc80 	bl	80065b6 <get_fat>
 8006cb6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d801      	bhi.n	8006cc2 <dir_next+0x8c>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e07a      	b.n	8006db8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d101      	bne.n	8006cce <dir_next+0x98>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e074      	b.n	8006db8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d358      	bcc.n	8006d8a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	61da      	str	r2, [r3, #28]
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	e067      	b.n	8006db8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7ff fe59 	bl	80069a8 <create_chain>
 8006cf6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <dir_next+0xcc>
 8006cfe:	2307      	movs	r3, #7
 8006d00:	e05a      	b.n	8006db8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <dir_next+0xd6>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e055      	b.n	8006db8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d12:	d101      	bne.n	8006d18 <dir_next+0xe2>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e04f      	b.n	8006db8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7ff fb4d 	bl	80063b8 <sync_window>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <dir_next+0xf2>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e047      	b.n	8006db8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3330      	adds	r3, #48	; 0x30
 8006d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff f977 	bl	8006026 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d38:	2300      	movs	r3, #0
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	6979      	ldr	r1, [r7, #20]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7ff fc1a 	bl	8006578 <clust2sect>
 8006d44:	4602      	mov	r2, r0
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d4a:	e012      	b.n	8006d72 <dir_next+0x13c>
						fs->wflag = 1;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fb30 	bl	80063b8 <sync_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <dir_next+0x12c>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e02a      	b.n	8006db8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3301      	adds	r3, #1
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	895b      	ldrh	r3, [r3, #10]
 8006d76:	461a      	mov	r2, r3
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d3e6      	bcc.n	8006d4c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad2      	subs	r2, r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006d90:	6979      	ldr	r1, [r7, #20]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff fbf0 	bl	8006578 <clust2sect>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db0:	441a      	add	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff feb4 	bl	8006b40 <dir_sdi>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d12b      	bne.n	8006e3a <dir_alloc+0x7a>
		n = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	4619      	mov	r1, r3
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7ff fb27 	bl	8006440 <move_window>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11d      	bne.n	8006e38 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2be5      	cmp	r3, #229	; 0xe5
 8006e04:	d004      	beq.n	8006e10 <dir_alloc+0x50>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d107      	bne.n	8006e20 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	3301      	adds	r3, #1
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d102      	bne.n	8006e24 <dir_alloc+0x64>
 8006e1e:	e00c      	b.n	8006e3a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006e24:	2101      	movs	r1, #1
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff ff05 	bl	8006c36 <dir_next>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0d7      	beq.n	8006de6 <dir_alloc+0x26>
 8006e36:	e000      	b.n	8006e3a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006e38:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d101      	bne.n	8006e44 <dir_alloc+0x84>
 8006e40:	2307      	movs	r3, #7
 8006e42:	75fb      	strb	r3, [r7, #23]
	return res;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	331a      	adds	r3, #26
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff f83f 	bl	8005ee0 <ld_word>
 8006e62:	4603      	mov	r3, r0
 8006e64:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d109      	bne.n	8006e82 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	3314      	adds	r3, #20
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff f834 	bl	8005ee0 <ld_word>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e82:	68fb      	ldr	r3, [r7, #12]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	331a      	adds	r3, #26
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	b292      	uxth	r2, r2
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff f857 	bl	8005f56 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d109      	bne.n	8006ec4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f103 0214 	add.w	r2, r3, #20
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	0c1b      	lsrs	r3, r3, #16
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7ff f849 	bl	8005f56 <st_word>
	}
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006eda:	2100      	movs	r1, #0
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff fe2f 	bl	8006b40 <dir_sdi>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <dir_find+0x24>
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	e03e      	b.n	8006f6e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6938      	ldr	r0, [r7, #16]
 8006ef8:	f7ff faa2 	bl	8006440 <move_window>
 8006efc:	4603      	mov	r3, r0
 8006efe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d12f      	bne.n	8006f66 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <dir_find+0x4e>
 8006f14:	2304      	movs	r3, #4
 8006f16:	75fb      	strb	r3, [r7, #23]
 8006f18:	e028      	b.n	8006f6c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	330b      	adds	r3, #11
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	330b      	adds	r3, #11
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <dir_find+0x86>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a18      	ldr	r0, [r3, #32]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3324      	adds	r3, #36	; 0x24
 8006f44:	220b      	movs	r2, #11
 8006f46:	4619      	mov	r1, r3
 8006f48:	f7ff f888 	bl	800605c <mem_cmp>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00b      	beq.n	8006f6a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006f52:	2100      	movs	r1, #0
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fe6e 	bl	8006c36 <dir_next>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0c5      	beq.n	8006ef0 <dir_find+0x24>
 8006f64:	e002      	b.n	8006f6c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006f66:	bf00      	nop
 8006f68:	e000      	b.n	8006f6c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f6a:	bf00      	nop

	return res;
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006f84:	2101      	movs	r1, #1
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff ff1a 	bl	8006dc0 <dir_alloc>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d11c      	bne.n	8006fd0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	68b8      	ldr	r0, [r7, #8]
 8006f9e:	f7ff fa4f 	bl	8006440 <move_window>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d111      	bne.n	8006fd0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff f836 	bl	8006026 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a18      	ldr	r0, [r3, #32]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3324      	adds	r3, #36	; 0x24
 8006fc2:	220b      	movs	r2, #11
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f7ff f80d 	bl	8005fe4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3324      	adds	r3, #36	; 0x24
 8006ff0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006ff2:	220b      	movs	r2, #11
 8006ff4:	2120      	movs	r1, #32
 8006ff6:	68b8      	ldr	r0, [r7, #8]
 8006ff8:	f7ff f815 	bl	8006026 <mem_set>
	si = i = 0; ni = 8;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	2308      	movs	r3, #8
 8007006:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	61fa      	str	r2, [r7, #28]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007016:	7efb      	ldrb	r3, [r7, #27]
 8007018:	2b20      	cmp	r3, #32
 800701a:	d94e      	bls.n	80070ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800701c:	7efb      	ldrb	r3, [r7, #27]
 800701e:	2b2f      	cmp	r3, #47	; 0x2f
 8007020:	d006      	beq.n	8007030 <create_name+0x54>
 8007022:	7efb      	ldrb	r3, [r7, #27]
 8007024:	2b5c      	cmp	r3, #92	; 0x5c
 8007026:	d110      	bne.n	800704a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007028:	e002      	b.n	8007030 <create_name+0x54>
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	3301      	adds	r3, #1
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b2f      	cmp	r3, #47	; 0x2f
 800703a:	d0f6      	beq.n	800702a <create_name+0x4e>
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b5c      	cmp	r3, #92	; 0x5c
 8007046:	d0f0      	beq.n	800702a <create_name+0x4e>
			break;
 8007048:	e038      	b.n	80070bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800704a:	7efb      	ldrb	r3, [r7, #27]
 800704c:	2b2e      	cmp	r3, #46	; 0x2e
 800704e:	d003      	beq.n	8007058 <create_name+0x7c>
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	429a      	cmp	r2, r3
 8007056:	d30c      	bcc.n	8007072 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b0b      	cmp	r3, #11
 800705c:	d002      	beq.n	8007064 <create_name+0x88>
 800705e:	7efb      	ldrb	r3, [r7, #27]
 8007060:	2b2e      	cmp	r3, #46	; 0x2e
 8007062:	d001      	beq.n	8007068 <create_name+0x8c>
 8007064:	2306      	movs	r3, #6
 8007066:	e044      	b.n	80070f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007068:	2308      	movs	r3, #8
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	230b      	movs	r3, #11
 800706e:	617b      	str	r3, [r7, #20]
			continue;
 8007070:	e022      	b.n	80070b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007072:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007076:	2b00      	cmp	r3, #0
 8007078:	da04      	bge.n	8007084 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800707a:	7efb      	ldrb	r3, [r7, #27]
 800707c:	3b80      	subs	r3, #128	; 0x80
 800707e:	4a1f      	ldr	r2, [pc, #124]	; (80070fc <create_name+0x120>)
 8007080:	5cd3      	ldrb	r3, [r2, r3]
 8007082:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007084:	7efb      	ldrb	r3, [r7, #27]
 8007086:	4619      	mov	r1, r3
 8007088:	481d      	ldr	r0, [pc, #116]	; (8007100 <create_name+0x124>)
 800708a:	f7ff f80e 	bl	80060aa <chk_chr>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <create_name+0xbc>
 8007094:	2306      	movs	r3, #6
 8007096:	e02c      	b.n	80070f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007098:	7efb      	ldrb	r3, [r7, #27]
 800709a:	2b60      	cmp	r3, #96	; 0x60
 800709c:	d905      	bls.n	80070aa <create_name+0xce>
 800709e:	7efb      	ldrb	r3, [r7, #27]
 80070a0:	2b7a      	cmp	r3, #122	; 0x7a
 80070a2:	d802      	bhi.n	80070aa <create_name+0xce>
 80070a4:	7efb      	ldrb	r3, [r7, #27]
 80070a6:	3b20      	subs	r3, #32
 80070a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	613a      	str	r2, [r7, #16]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	4413      	add	r3, r2
 80070b4:	7efa      	ldrb	r2, [r7, #27]
 80070b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80070b8:	e7a6      	b.n	8007008 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80070ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	441a      	add	r2, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <create_name+0xf4>
 80070cc:	2306      	movs	r3, #6
 80070ce:	e010      	b.n	80070f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2be5      	cmp	r3, #229	; 0xe5
 80070d6:	d102      	bne.n	80070de <create_name+0x102>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2205      	movs	r2, #5
 80070dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80070de:	7efb      	ldrb	r3, [r7, #27]
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d801      	bhi.n	80070e8 <create_name+0x10c>
 80070e4:	2204      	movs	r2, #4
 80070e6:	e000      	b.n	80070ea <create_name+0x10e>
 80070e8:	2200      	movs	r2, #0
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	330b      	adds	r3, #11
 80070ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80070f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3720      	adds	r7, #32
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	08009e04 	.word	0x08009e04
 8007100:	08009d30 	.word	0x08009d30

08007104 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007118:	e002      	b.n	8007120 <follow_path+0x1c>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	3301      	adds	r3, #1
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b2f      	cmp	r3, #47	; 0x2f
 8007126:	d0f8      	beq.n	800711a <follow_path+0x16>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b5c      	cmp	r3, #92	; 0x5c
 800712e:	d0f4      	beq.n	800711a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	2200      	movs	r2, #0
 8007134:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b1f      	cmp	r3, #31
 800713c:	d80a      	bhi.n	8007154 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2280      	movs	r2, #128	; 0x80
 8007142:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007146:	2100      	movs	r1, #0
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff fcf9 	bl	8006b40 <dir_sdi>
 800714e:	4603      	mov	r3, r0
 8007150:	75fb      	strb	r3, [r7, #23]
 8007152:	e043      	b.n	80071dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007154:	463b      	mov	r3, r7
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff ff3f 	bl	8006fdc <create_name>
 800715e:	4603      	mov	r3, r0
 8007160:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d134      	bne.n	80071d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff feaf 	bl	8006ecc <dir_find>
 800716e:	4603      	mov	r3, r0
 8007170:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007178:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	2b04      	cmp	r3, #4
 8007184:	d127      	bne.n	80071d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d122      	bne.n	80071d6 <follow_path+0xd2>
 8007190:	2305      	movs	r3, #5
 8007192:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007194:	e01f      	b.n	80071d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007196:	7afb      	ldrb	r3, [r7, #11]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d11c      	bne.n	80071da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	799b      	ldrb	r3, [r3, #6]
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d102      	bne.n	80071b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80071ac:	2305      	movs	r3, #5
 80071ae:	75fb      	strb	r3, [r7, #23]
 80071b0:	e014      	b.n	80071dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c0:	4413      	add	r3, r2
 80071c2:	4619      	mov	r1, r3
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fe42 	bl	8006e4e <ld_clust>
 80071ca:	4602      	mov	r2, r0
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071d0:	e7c0      	b.n	8007154 <follow_path+0x50>
			if (res != FR_OK) break;
 80071d2:	bf00      	nop
 80071d4:	e002      	b.n	80071dc <follow_path+0xd8>
				break;
 80071d6:	bf00      	nop
 80071d8:	e000      	b.n	80071dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071da:	bf00      	nop
			}
		}
	}

	return res;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b087      	sub	sp, #28
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80071ee:	f04f 33ff 	mov.w	r3, #4294967295
 80071f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d031      	beq.n	8007260 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	e002      	b.n	800720a <get_ldnumber+0x24>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3301      	adds	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b20      	cmp	r3, #32
 8007210:	d903      	bls.n	800721a <get_ldnumber+0x34>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b3a      	cmp	r3, #58	; 0x3a
 8007218:	d1f4      	bne.n	8007204 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b3a      	cmp	r3, #58	; 0x3a
 8007220:	d11c      	bne.n	800725c <get_ldnumber+0x76>
			tp = *path;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	60fa      	str	r2, [r7, #12]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	3b30      	subs	r3, #48	; 0x30
 8007232:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b09      	cmp	r3, #9
 8007238:	d80e      	bhi.n	8007258 <get_ldnumber+0x72>
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	429a      	cmp	r2, r3
 8007240:	d10a      	bne.n	8007258 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d107      	bne.n	8007258 <get_ldnumber+0x72>
					vol = (int)i;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	3301      	adds	r3, #1
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	e002      	b.n	8007262 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800725c:	2300      	movs	r3, #0
 800725e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007260:	693b      	ldr	r3, [r7, #16]
}
 8007262:	4618      	mov	r0, r3
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	70da      	strb	r2, [r3, #3]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f04f 32ff 	mov.w	r2, #4294967295
 8007286:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff f8d8 	bl	8006440 <move_window>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <check_fs+0x2a>
 8007296:	2304      	movs	r3, #4
 8007298:	e038      	b.n	800730c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3330      	adds	r3, #48	; 0x30
 800729e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fe1c 	bl	8005ee0 <ld_word>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d001      	beq.n	80072b8 <check_fs+0x48>
 80072b4:	2303      	movs	r3, #3
 80072b6:	e029      	b.n	800730c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072be:	2be9      	cmp	r3, #233	; 0xe9
 80072c0:	d009      	beq.n	80072d6 <check_fs+0x66>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072c8:	2beb      	cmp	r3, #235	; 0xeb
 80072ca:	d11e      	bne.n	800730a <check_fs+0x9a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80072d2:	2b90      	cmp	r3, #144	; 0x90
 80072d4:	d119      	bne.n	800730a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3330      	adds	r3, #48	; 0x30
 80072da:	3336      	adds	r3, #54	; 0x36
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe fe17 	bl	8005f10 <ld_dword>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072e8:	4a0a      	ldr	r2, [pc, #40]	; (8007314 <check_fs+0xa4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d101      	bne.n	80072f2 <check_fs+0x82>
 80072ee:	2300      	movs	r3, #0
 80072f0:	e00c      	b.n	800730c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3330      	adds	r3, #48	; 0x30
 80072f6:	3352      	adds	r3, #82	; 0x52
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fe09 	bl	8005f10 <ld_dword>
 80072fe:	4603      	mov	r3, r0
 8007300:	4a05      	ldr	r2, [pc, #20]	; (8007318 <check_fs+0xa8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d101      	bne.n	800730a <check_fs+0x9a>
 8007306:	2300      	movs	r3, #0
 8007308:	e000      	b.n	800730c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800730a:	2302      	movs	r3, #2
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	00544146 	.word	0x00544146
 8007318:	33544146 	.word	0x33544146

0800731c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b096      	sub	sp, #88	; 0x58
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff ff58 	bl	80071e6 <get_ldnumber>
 8007336:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733a:	2b00      	cmp	r3, #0
 800733c:	da01      	bge.n	8007342 <find_volume+0x26>
 800733e:	230b      	movs	r3, #11
 8007340:	e22d      	b.n	800779e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007342:	4aa1      	ldr	r2, [pc, #644]	; (80075c8 <find_volume+0x2ac>)
 8007344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <find_volume+0x3a>
 8007352:	230c      	movs	r3, #12
 8007354:	e223      	b.n	800779e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800735a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01a      	beq.n	80073a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fd17 	bl	8005da4 <disk_status>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800737c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10c      	bne.n	80073a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007388:	79fb      	ldrb	r3, [r7, #7]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <find_volume+0x82>
 800738e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800739a:	230a      	movs	r3, #10
 800739c:	e1ff      	b.n	800779e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800739e:	2300      	movs	r3, #0
 80073a0:	e1fd      	b.n	800779e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80073a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	785b      	ldrb	r3, [r3, #1]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fd0f 	bl	8005dd8 <disk_initialize>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80073c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80073cc:	2303      	movs	r3, #3
 80073ce:	e1e6      	b.n	800779e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <find_volume+0xca>
 80073d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80073e2:	230a      	movs	r3, #10
 80073e4:	e1db      	b.n	800779e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80073ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073ee:	f7ff ff3f 	bl	8007270 <check_fs>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80073f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d149      	bne.n	8007494 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007400:	2300      	movs	r3, #0
 8007402:	643b      	str	r3, [r7, #64]	; 0x40
 8007404:	e01e      	b.n	8007444 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800740c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007414:	4413      	add	r3, r2
 8007416:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	3304      	adds	r3, #4
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d006      	beq.n	8007430 <find_volume+0x114>
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	3308      	adds	r3, #8
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fd72 	bl	8005f10 <ld_dword>
 800742c:	4602      	mov	r2, r0
 800742e:	e000      	b.n	8007432 <find_volume+0x116>
 8007430:	2200      	movs	r2, #0
 8007432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	3358      	adds	r3, #88	; 0x58
 8007438:	443b      	add	r3, r7
 800743a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800743e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007440:	3301      	adds	r3, #1
 8007442:	643b      	str	r3, [r7, #64]	; 0x40
 8007444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007446:	2b03      	cmp	r3, #3
 8007448:	d9dd      	bls.n	8007406 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800744a:	2300      	movs	r3, #0
 800744c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800744e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <find_volume+0x13e>
 8007454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007456:	3b01      	subs	r3, #1
 8007458:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800745a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	3358      	adds	r3, #88	; 0x58
 8007460:	443b      	add	r3, r7
 8007462:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007466:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <find_volume+0x15e>
 800746e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007470:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007472:	f7ff fefd 	bl	8007270 <check_fs>
 8007476:	4603      	mov	r3, r0
 8007478:	e000      	b.n	800747c <find_volume+0x160>
 800747a:	2303      	movs	r3, #3
 800747c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007484:	2b01      	cmp	r3, #1
 8007486:	d905      	bls.n	8007494 <find_volume+0x178>
 8007488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748a:	3301      	adds	r3, #1
 800748c:	643b      	str	r3, [r7, #64]	; 0x40
 800748e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007490:	2b03      	cmp	r3, #3
 8007492:	d9e2      	bls.n	800745a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007498:	2b04      	cmp	r3, #4
 800749a:	d101      	bne.n	80074a0 <find_volume+0x184>
 800749c:	2301      	movs	r3, #1
 800749e:	e17e      	b.n	800779e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80074a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d901      	bls.n	80074ac <find_volume+0x190>
 80074a8:	230d      	movs	r3, #13
 80074aa:	e178      	b.n	800779e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	3330      	adds	r3, #48	; 0x30
 80074b0:	330b      	adds	r3, #11
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fd14 	bl	8005ee0 <ld_word>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074be:	d001      	beq.n	80074c4 <find_volume+0x1a8>
 80074c0:	230d      	movs	r3, #13
 80074c2:	e16c      	b.n	800779e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	3330      	adds	r3, #48	; 0x30
 80074c8:	3316      	adds	r3, #22
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fd08 	bl	8005ee0 <ld_word>
 80074d0:	4603      	mov	r3, r0
 80074d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80074d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <find_volume+0x1cc>
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	3330      	adds	r3, #48	; 0x30
 80074de:	3324      	adds	r3, #36	; 0x24
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe fd15 	bl	8005f10 <ld_dword>
 80074e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	789b      	ldrb	r3, [r3, #2]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d005      	beq.n	800750c <find_volume+0x1f0>
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	789b      	ldrb	r3, [r3, #2]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d001      	beq.n	800750c <find_volume+0x1f0>
 8007508:	230d      	movs	r3, #13
 800750a:	e148      	b.n	800779e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	789b      	ldrb	r3, [r3, #2]
 8007510:	461a      	mov	r2, r3
 8007512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007514:	fb02 f303 	mul.w	r3, r2, r3
 8007518:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007520:	b29a      	uxth	r2, r3
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	895b      	ldrh	r3, [r3, #10]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <find_volume+0x224>
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	895b      	ldrh	r3, [r3, #10]
 8007532:	461a      	mov	r2, r3
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	895b      	ldrh	r3, [r3, #10]
 8007538:	3b01      	subs	r3, #1
 800753a:	4013      	ands	r3, r2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <find_volume+0x228>
 8007540:	230d      	movs	r3, #13
 8007542:	e12c      	b.n	800779e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	3330      	adds	r3, #48	; 0x30
 8007548:	3311      	adds	r3, #17
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe fcc8 	bl	8005ee0 <ld_word>
 8007550:	4603      	mov	r3, r0
 8007552:	461a      	mov	r2, r3
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	891b      	ldrh	r3, [r3, #8]
 800755c:	f003 030f 	and.w	r3, r3, #15
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <find_volume+0x24e>
 8007566:	230d      	movs	r3, #13
 8007568:	e119      	b.n	800779e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800756a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756c:	3330      	adds	r3, #48	; 0x30
 800756e:	3313      	adds	r3, #19
 8007570:	4618      	mov	r0, r3
 8007572:	f7fe fcb5 	bl	8005ee0 <ld_word>
 8007576:	4603      	mov	r3, r0
 8007578:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800757a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <find_volume+0x272>
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	3330      	adds	r3, #48	; 0x30
 8007584:	3320      	adds	r3, #32
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fcc2 	bl	8005f10 <ld_dword>
 800758c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	3330      	adds	r3, #48	; 0x30
 8007592:	330e      	adds	r3, #14
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fca3 	bl	8005ee0 <ld_word>
 800759a:	4603      	mov	r3, r0
 800759c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800759e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <find_volume+0x28c>
 80075a4:	230d      	movs	r3, #13
 80075a6:	e0fa      	b.n	800779e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80075a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80075aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ac:	4413      	add	r3, r2
 80075ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075b0:	8912      	ldrh	r2, [r2, #8]
 80075b2:	0912      	lsrs	r2, r2, #4
 80075b4:	b292      	uxth	r2, r2
 80075b6:	4413      	add	r3, r2
 80075b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80075ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	429a      	cmp	r2, r3
 80075c0:	d204      	bcs.n	80075cc <find_volume+0x2b0>
 80075c2:	230d      	movs	r3, #13
 80075c4:	e0eb      	b.n	800779e <find_volume+0x482>
 80075c6:	bf00      	nop
 80075c8:	200137a8 	.word	0x200137a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80075cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d4:	8952      	ldrh	r2, [r2, #10]
 80075d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <find_volume+0x2ca>
 80075e2:	230d      	movs	r3, #13
 80075e4:	e0db      	b.n	800779e <find_volume+0x482>
		fmt = FS_FAT32;
 80075e6:	2303      	movs	r3, #3
 80075e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d802      	bhi.n	80075fc <find_volume+0x2e0>
 80075f6:	2302      	movs	r3, #2
 80075f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007602:	4293      	cmp	r3, r2
 8007604:	d802      	bhi.n	800760c <find_volume+0x2f0>
 8007606:	2301      	movs	r3, #1
 8007608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007618:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800761a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800761c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800761e:	441a      	add	r2, r3
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007624:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	441a      	add	r2, r3
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800762e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007632:	2b03      	cmp	r3, #3
 8007634:	d11e      	bne.n	8007674 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	3330      	adds	r3, #48	; 0x30
 800763a:	332a      	adds	r3, #42	; 0x2a
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe fc4f 	bl	8005ee0 <ld_word>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <find_volume+0x330>
 8007648:	230d      	movs	r3, #13
 800764a:	e0a8      	b.n	800779e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	891b      	ldrh	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <find_volume+0x33c>
 8007654:	230d      	movs	r3, #13
 8007656:	e0a2      	b.n	800779e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	3330      	adds	r3, #48	; 0x30
 800765c:	332c      	adds	r3, #44	; 0x2c
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fc56 	bl	8005f10 <ld_dword>
 8007664:	4602      	mov	r2, r0
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	647b      	str	r3, [r7, #68]	; 0x44
 8007672:	e01f      	b.n	80076b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	891b      	ldrh	r3, [r3, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <find_volume+0x364>
 800767c:	230d      	movs	r3, #13
 800767e:	e08e      	b.n	800779e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007682:	6a1a      	ldr	r2, [r3, #32]
 8007684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007686:	441a      	add	r2, r3
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800768c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007690:	2b02      	cmp	r3, #2
 8007692:	d103      	bne.n	800769c <find_volume+0x380>
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	e00a      	b.n	80076b2 <find_volume+0x396>
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	695a      	ldr	r2, [r3, #20]
 80076a0:	4613      	mov	r3, r2
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	085a      	lsrs	r2, r3, #1
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80076b2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80076be:	0a5b      	lsrs	r3, r3, #9
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d201      	bcs.n	80076c8 <find_volume+0x3ac>
 80076c4:	230d      	movs	r3, #13
 80076c6:	e06a      	b.n	800779e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	f04f 32ff 	mov.w	r2, #4294967295
 80076ce:	611a      	str	r2, [r3, #16]
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	2280      	movs	r2, #128	; 0x80
 80076dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80076de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d149      	bne.n	800777a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	3330      	adds	r3, #48	; 0x30
 80076ea:	3330      	adds	r3, #48	; 0x30
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fbf7 	bl	8005ee0 <ld_word>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d140      	bne.n	800777a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80076f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fa:	3301      	adds	r3, #1
 80076fc:	4619      	mov	r1, r3
 80076fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007700:	f7fe fe9e 	bl	8006440 <move_window>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d137      	bne.n	800777a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	2200      	movs	r2, #0
 800770e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007712:	3330      	adds	r3, #48	; 0x30
 8007714:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fbe1 	bl	8005ee0 <ld_word>
 800771e:	4603      	mov	r3, r0
 8007720:	461a      	mov	r2, r3
 8007722:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007726:	429a      	cmp	r2, r3
 8007728:	d127      	bne.n	800777a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	3330      	adds	r3, #48	; 0x30
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fbee 	bl	8005f10 <ld_dword>
 8007734:	4603      	mov	r3, r0
 8007736:	4a1c      	ldr	r2, [pc, #112]	; (80077a8 <find_volume+0x48c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d11e      	bne.n	800777a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	3330      	adds	r3, #48	; 0x30
 8007740:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007744:	4618      	mov	r0, r3
 8007746:	f7fe fbe3 	bl	8005f10 <ld_dword>
 800774a:	4603      	mov	r3, r0
 800774c:	4a17      	ldr	r2, [pc, #92]	; (80077ac <find_volume+0x490>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d113      	bne.n	800777a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	3330      	adds	r3, #48	; 0x30
 8007756:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fbd8 	bl	8005f10 <ld_dword>
 8007760:	4602      	mov	r2, r0
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	3330      	adds	r3, #48	; 0x30
 800776a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fbce 	bl	8005f10 <ld_dword>
 8007774:	4602      	mov	r2, r0
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007780:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <find_volume+0x494>)
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	3301      	adds	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <find_volume+0x494>)
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <find_volume+0x494>)
 8007790:	881a      	ldrh	r2, [r3, #0]
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007796:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007798:	f7fe fdea 	bl	8006370 <clear_lock>
#endif
	return FR_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3758      	adds	r7, #88	; 0x58
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	41615252 	.word	0x41615252
 80077ac:	61417272 	.word	0x61417272
 80077b0:	200137ac 	.word	0x200137ac

080077b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80077be:	2309      	movs	r3, #9
 80077c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01c      	beq.n	8007802 <validate+0x4e>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d018      	beq.n	8007802 <validate+0x4e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d013      	beq.n	8007802 <validate+0x4e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	889a      	ldrh	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	88db      	ldrh	r3, [r3, #6]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d10c      	bne.n	8007802 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fad8 	bl	8005da4 <disk_status>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <validate+0x4e>
			res = FR_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <validate+0x5a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	e000      	b.n	8007810 <validate+0x5c>
 800780e:	2300      	movs	r3, #0
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	6013      	str	r3, [r2, #0]
	return res;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff fcd5 	bl	80071e6 <get_ldnumber>
 800783c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	2b00      	cmp	r3, #0
 8007842:	da01      	bge.n	8007848 <f_mount+0x28>
 8007844:	230b      	movs	r3, #11
 8007846:	e02b      	b.n	80078a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007848:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <f_mount+0x88>)
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007850:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007858:	69b8      	ldr	r0, [r7, #24]
 800785a:	f7fe fd89 	bl	8006370 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	490d      	ldr	r1, [pc, #52]	; (80078a8 <f_mount+0x88>)
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <f_mount+0x66>
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d001      	beq.n	800788a <f_mount+0x6a>
 8007886:	2300      	movs	r3, #0
 8007888:	e00a      	b.n	80078a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800788a:	f107 010c 	add.w	r1, r7, #12
 800788e:	f107 0308 	add.w	r3, r7, #8
 8007892:	2200      	movs	r2, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fd41 	bl	800731c <find_volume>
 800789a:	4603      	mov	r3, r0
 800789c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800789e:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3720      	adds	r7, #32
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	200137a8 	.word	0x200137a8

080078ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b098      	sub	sp, #96	; 0x60
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <f_open+0x18>
 80078c0:	2309      	movs	r3, #9
 80078c2:	e1ad      	b.n	8007c20 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80078cc:	79fa      	ldrb	r2, [r7, #7]
 80078ce:	f107 0110 	add.w	r1, r7, #16
 80078d2:	f107 0308 	add.w	r3, r7, #8
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff fd20 	bl	800731c <find_volume>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80078e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 8191 	bne.w	8007c0e <f_open+0x362>
		dj.obj.fs = fs;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	f107 0314 	add.w	r3, r7, #20
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fc03 	bl	8007104 <follow_path>
 80078fe:	4603      	mov	r3, r0
 8007900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007908:	2b00      	cmp	r3, #0
 800790a:	d11a      	bne.n	8007942 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800790c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007910:	b25b      	sxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	da03      	bge.n	800791e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007916:	2306      	movs	r3, #6
 8007918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800791c:	e011      	b.n	8007942 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	bf14      	ite	ne
 8007928:	2301      	movne	r3, #1
 800792a:	2300      	moveq	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	461a      	mov	r2, r3
 8007930:	f107 0314 	add.w	r3, r7, #20
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe fbd2 	bl	80060e0 <chk_lock>
 800793c:	4603      	mov	r3, r0
 800793e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	f003 031c 	and.w	r3, r3, #28
 8007948:	2b00      	cmp	r3, #0
 800794a:	d07f      	beq.n	8007a4c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800794c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007950:	2b00      	cmp	r3, #0
 8007952:	d017      	beq.n	8007984 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007958:	2b04      	cmp	r3, #4
 800795a:	d10e      	bne.n	800797a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800795c:	f7fe fc1c 	bl	8006198 <enq_lock>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d006      	beq.n	8007974 <f_open+0xc8>
 8007966:	f107 0314 	add.w	r3, r7, #20
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fb03 	bl	8006f76 <dir_register>
 8007970:	4603      	mov	r3, r0
 8007972:	e000      	b.n	8007976 <f_open+0xca>
 8007974:	2312      	movs	r3, #18
 8007976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	f043 0308 	orr.w	r3, r3, #8
 8007980:	71fb      	strb	r3, [r7, #7]
 8007982:	e010      	b.n	80079a6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007984:	7ebb      	ldrb	r3, [r7, #26]
 8007986:	f003 0311 	and.w	r3, r3, #17
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <f_open+0xea>
					res = FR_DENIED;
 800798e:	2307      	movs	r3, #7
 8007990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007994:	e007      	b.n	80079a6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <f_open+0xfa>
 80079a0:	2308      	movs	r3, #8
 80079a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80079a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d168      	bne.n	8007a80 <f_open+0x1d4>
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d063      	beq.n	8007a80 <f_open+0x1d4>
				dw = GET_FATTIME();
 80079b8:	f7fd fcb6 	bl	8005328 <get_fattime>
 80079bc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80079be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c0:	330e      	adds	r3, #14
 80079c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fae1 	bl	8005f8c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80079ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079cc:	3316      	adds	r3, #22
 80079ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fe fadb 	bl	8005f8c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80079d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d8:	330b      	adds	r3, #11
 80079da:	2220      	movs	r2, #32
 80079dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff fa32 	bl	8006e4e <ld_clust>
 80079ea:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079f0:	2200      	movs	r2, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fa4a 	bl	8006e8c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80079f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fa:	331c      	adds	r3, #28
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fac4 	bl	8005f8c <st_dword>
					fs->wflag = 1;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2201      	movs	r2, #1
 8007a08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d037      	beq.n	8007a80 <f_open+0x1d4>
						dw = fs->winsect;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007a16:	f107 0314 	add.w	r3, r7, #20
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe ff5d 	bl	80068de <remove_chain>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d126      	bne.n	8007a80 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fd02 	bl	8006440 <move_window>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a46:	3a01      	subs	r2, #1
 8007a48:	60da      	str	r2, [r3, #12]
 8007a4a:	e019      	b.n	8007a80 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d115      	bne.n	8007a80 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007a54:	7ebb      	ldrb	r3, [r7, #26]
 8007a56:	f003 0310 	and.w	r3, r3, #16
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007a5e:	2304      	movs	r3, #4
 8007a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007a64:	e00c      	b.n	8007a80 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <f_open+0x1d4>
 8007a70:	7ebb      	ldrb	r3, [r7, #26]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <f_open+0x1d4>
						res = FR_DENIED;
 8007a7a:	2307      	movs	r3, #7
 8007a7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d128      	bne.n	8007ada <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	f003 0308 	and.w	r3, r3, #8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	f023 0301 	bic.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bf14      	ite	ne
 8007ab2:	2301      	movne	r3, #1
 8007ab4:	2300      	moveq	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f107 0314 	add.w	r3, r7, #20
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fe fb8b 	bl	80061dc <inc_lock>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d102      	bne.n	8007ada <f_open+0x22e>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007ada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 8095 	bne.w	8007c0e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff f9af 	bl	8006e4e <ld_clust>
 8007af0:	4602      	mov	r2, r0
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af8:	331c      	adds	r3, #28
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fa08 	bl	8005f10 <ld_dword>
 8007b00:	4602      	mov	r2, r0
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	88da      	ldrh	r2, [r3, #6]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	79fa      	ldrb	r2, [r7, #7]
 8007b1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3330      	adds	r3, #48	; 0x30
 8007b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fa72 	bl	8006026 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	f003 0320 	and.w	r3, r3, #32
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d060      	beq.n	8007c0e <f_open+0x362>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d05c      	beq.n	8007c0e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	895b      	ldrh	r3, [r3, #10]
 8007b60:	025b      	lsls	r3, r3, #9
 8007b62:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b70:	e016      	b.n	8007ba0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fd1d 	bl	80065b6 <get_fat>
 8007b7c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d802      	bhi.n	8007b8a <f_open+0x2de>
 8007b84:	2302      	movs	r3, #2
 8007b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b90:	d102      	bne.n	8007b98 <f_open+0x2ec>
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8007ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d103      	bne.n	8007bb0 <f_open+0x304>
 8007ba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d8e0      	bhi.n	8007b72 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d127      	bne.n	8007c0e <f_open+0x362>
 8007bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d022      	beq.n	8007c0e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fcd3 	bl	8006578 <clust2sect>
 8007bd2:	6478      	str	r0, [r7, #68]	; 0x44
 8007bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <f_open+0x336>
						res = FR_INT_ERR;
 8007bda:	2302      	movs	r3, #2
 8007bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007be0:	e015      	b.n	8007c0e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be4:	0a5a      	lsrs	r2, r3, #9
 8007be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be8:	441a      	add	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	7858      	ldrb	r0, [r3, #1]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1a      	ldr	r2, [r3, #32]
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f7fe f911 	bl	8005e24 <disk_read>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <f_open+0x362>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <f_open+0x370>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3760      	adds	r7, #96	; 0x60
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08e      	sub	sp, #56	; 0x38
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f107 0214 	add.w	r2, r7, #20
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff fdb3 	bl	80077b4 <validate>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d107      	bne.n	8007c6c <f_read+0x44>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	7d5b      	ldrb	r3, [r3, #21]
 8007c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <f_read+0x4a>
 8007c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c70:	e115      	b.n	8007e9e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	7d1b      	ldrb	r3, [r3, #20]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <f_read+0x5a>
 8007c7e:	2307      	movs	r3, #7
 8007c80:	e10d      	b.n	8007e9e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	f240 80fe 	bls.w	8007e94 <f_read+0x26c>
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007c9c:	e0fa      	b.n	8007e94 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f040 80c6 	bne.w	8007e38 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	0a5b      	lsrs	r3, r3, #9
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	8952      	ldrh	r2, [r2, #10]
 8007cb6:	3a01      	subs	r2, #1
 8007cb8:	4013      	ands	r3, r2
 8007cba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d12f      	bne.n	8007d22 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd0:	e013      	b.n	8007cfa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7fe fef9 	bl	8006ad8 <clmt_clust>
 8007ce6:	6338      	str	r0, [r7, #48]	; 0x30
 8007ce8:	e007      	b.n	8007cfa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	f7fe fc5f 	bl	80065b6 <get_fat>
 8007cf8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d804      	bhi.n	8007d0a <f_read+0xe2>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2202      	movs	r2, #2
 8007d04:	755a      	strb	r2, [r3, #21]
 8007d06:	2302      	movs	r3, #2
 8007d08:	e0c9      	b.n	8007e9e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d104      	bne.n	8007d1c <f_read+0xf4>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	755a      	strb	r2, [r3, #21]
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e0c0      	b.n	8007e9e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d20:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f7fe fc24 	bl	8006578 <clust2sect>
 8007d30:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <f_read+0x11a>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	755a      	strb	r2, [r3, #21]
 8007d3e:	2302      	movs	r3, #2
 8007d40:	e0ad      	b.n	8007e9e <f_read+0x276>
			sect += csect;
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	0a5b      	lsrs	r3, r3, #9
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d039      	beq.n	8007dca <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	4413      	add	r3, r2
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	8952      	ldrh	r2, [r2, #10]
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d905      	bls.n	8007d70 <f_read+0x148>
					cc = fs->csize - csect;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	895b      	ldrh	r3, [r3, #10]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	7858      	ldrb	r0, [r3, #1]
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d7a:	f7fe f853 	bl	8005e24 <disk_read>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d004      	beq.n	8007d8e <f_read+0x166>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2201      	movs	r2, #1
 8007d88:	755a      	strb	r2, [r3, #21]
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e087      	b.n	8007e9e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	7d1b      	ldrb	r3, [r3, #20]
 8007d92:	b25b      	sxtb	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	da14      	bge.n	8007dc2 <f_read+0x19a>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6a1a      	ldr	r2, [r3, #32]
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d90d      	bls.n	8007dc2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a1a      	ldr	r2, [r3, #32]
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	025b      	lsls	r3, r3, #9
 8007db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db2:	18d0      	adds	r0, r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3330      	adds	r3, #48	; 0x30
 8007db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	f7fe f911 	bl	8005fe4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	025b      	lsls	r3, r3, #9
 8007dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007dc8:	e050      	b.n	8007e6c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d02e      	beq.n	8007e32 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	7d1b      	ldrb	r3, [r3, #20]
 8007dd8:	b25b      	sxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	da18      	bge.n	8007e10 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	7858      	ldrb	r0, [r3, #1]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a1a      	ldr	r2, [r3, #32]
 8007dec:	2301      	movs	r3, #1
 8007dee:	f7fe f839 	bl	8005e64 <disk_write>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d004      	beq.n	8007e02 <f_read+0x1da>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	755a      	strb	r2, [r3, #21]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e04d      	b.n	8007e9e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	7d1b      	ldrb	r3, [r3, #20]
 8007e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	7858      	ldrb	r0, [r3, #1]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	f7fe f801 	bl	8005e24 <disk_read>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <f_read+0x20a>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	755a      	strb	r2, [r3, #21]
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e035      	b.n	8007e9e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d901      	bls.n	8007e52 <f_read+0x22a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e60:	4413      	add	r3, r2
 8007e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e64:	4619      	mov	r1, r3
 8007e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e68:	f7fe f8bc 	bl	8005fe4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	4413      	add	r3, r2
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	699a      	ldr	r2, [r3, #24]
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	441a      	add	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	619a      	str	r2, [r3, #24]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	441a      	add	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f47f af01 	bne.w	8007c9e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3738      	adds	r7, #56	; 0x38
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b086      	sub	sp, #24
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f107 0208 	add.w	r2, r7, #8
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fc7c 	bl	80077b4 <validate>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d168      	bne.n	8007f98 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	7d1b      	ldrb	r3, [r3, #20]
 8007eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d062      	beq.n	8007f98 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7d1b      	ldrb	r3, [r3, #20]
 8007ed6:	b25b      	sxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	da15      	bge.n	8007f08 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	7858      	ldrb	r0, [r3, #1]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1a      	ldr	r2, [r3, #32]
 8007eea:	2301      	movs	r3, #1
 8007eec:	f7fd ffba 	bl	8005e64 <disk_write>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <f_sync+0x54>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e04f      	b.n	8007f9a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7d1b      	ldrb	r3, [r3, #20]
 8007efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f08:	f7fd fa0e 	bl	8005328 <get_fattime>
 8007f0c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f7fe fa92 	bl	8006440 <move_window>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d138      	bne.n	8007f98 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	330b      	adds	r3, #11
 8007f30:	781a      	ldrb	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	330b      	adds	r3, #11
 8007f36:	f042 0220 	orr.w	r2, r2, #32
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	461a      	mov	r2, r3
 8007f48:	68f9      	ldr	r1, [r7, #12]
 8007f4a:	f7fe ff9f 	bl	8006e8c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f103 021c 	add.w	r2, r3, #28
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7fe f816 	bl	8005f8c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3316      	adds	r3, #22
 8007f64:	6939      	ldr	r1, [r7, #16]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe f810 	bl	8005f8c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3312      	adds	r3, #18
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fd ffef 	bl	8005f56 <st_word>
					fs->wflag = 1;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fa8b 	bl	800649c <sync_fs>
 8007f86:	4603      	mov	r3, r0
 8007f88:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7d1b      	ldrb	r3, [r3, #20]
 8007f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff ff7b 	bl	8007ea6 <f_sync>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d118      	bne.n	8007fec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f107 0208 	add.w	r2, r7, #8
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff fbf6 	bl	80077b4 <validate>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10c      	bne.n	8007fec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe f98e 	bl	80062f8 <dec_lock>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b090      	sub	sp, #64	; 0x40
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f107 0208 	add.w	r2, r7, #8
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fbd3 	bl	80077b4 <validate>
 800800e:	4603      	mov	r3, r0
 8008010:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008014:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <f_lseek+0x2e>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	7d5b      	ldrb	r3, [r3, #21]
 8008020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008024:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <f_lseek+0x3c>
 800802c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008030:	e1e6      	b.n	8008400 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80d1 	beq.w	80081de <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008042:	d15a      	bne.n	80080fa <f_lseek+0x104>
			tbl = fp->cltbl;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	1d1a      	adds	r2, r3, #4
 800804e:	627a      	str	r2, [r7, #36]	; 0x24
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	617b      	str	r3, [r7, #20]
 8008054:	2302      	movs	r3, #2
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	2b00      	cmp	r3, #0
 8008062:	d03a      	beq.n	80080da <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	613b      	str	r3, [r7, #16]
 8008068:	2300      	movs	r3, #0
 800806a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	3302      	adds	r3, #2
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	3301      	adds	r3, #1
 800807a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe fa98 	bl	80065b6 <get_fat>
 8008086:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	2b01      	cmp	r3, #1
 800808c:	d804      	bhi.n	8008098 <f_lseek+0xa2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	755a      	strb	r2, [r3, #21]
 8008094:	2302      	movs	r3, #2
 8008096:	e1b3      	b.n	8008400 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d104      	bne.n	80080aa <f_lseek+0xb4>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	755a      	strb	r2, [r3, #21]
 80080a6:	2301      	movs	r3, #1
 80080a8:	e1aa      	b.n	8008400 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d0de      	beq.n	8008072 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80080b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d809      	bhi.n	80080d0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	1d1a      	adds	r2, r3, #4
 80080c0:	627a      	str	r2, [r7, #36]	; 0x24
 80080c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	1d1a      	adds	r2, r3, #4
 80080ca:	627a      	str	r2, [r7, #36]	; 0x24
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d3c4      	bcc.n	8008064 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80080e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d803      	bhi.n	80080f2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	e184      	b.n	80083fc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80080f2:	2311      	movs	r3, #17
 80080f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80080f8:	e180      	b.n	80083fc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d902      	bls.n	800810a <f_lseek+0x114>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 8172 	beq.w	80083fc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	3b01      	subs	r3, #1
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fe fcda 	bl	8006ad8 <clmt_clust>
 8008124:	4602      	mov	r2, r0
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7fe fa20 	bl	8006578 <clust2sect>
 8008138:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d104      	bne.n	800814a <f_lseek+0x154>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	755a      	strb	r2, [r3, #21]
 8008146:	2302      	movs	r3, #2
 8008148:	e15a      	b.n	8008400 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	3b01      	subs	r3, #1
 800814e:	0a5b      	lsrs	r3, r3, #9
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	8952      	ldrh	r2, [r2, #10]
 8008154:	3a01      	subs	r2, #1
 8008156:	4013      	ands	r3, r2
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	4413      	add	r3, r2
 800815c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8148 	beq.w	80083fc <f_lseek+0x406>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	429a      	cmp	r2, r3
 8008174:	f000 8142 	beq.w	80083fc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	7d1b      	ldrb	r3, [r3, #20]
 800817c:	b25b      	sxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	da18      	bge.n	80081b4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	7858      	ldrb	r0, [r3, #1]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a1a      	ldr	r2, [r3, #32]
 8008190:	2301      	movs	r3, #1
 8008192:	f7fd fe67 	bl	8005e64 <disk_write>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <f_lseek+0x1b0>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	755a      	strb	r2, [r3, #21]
 80081a2:	2301      	movs	r3, #1
 80081a4:	e12c      	b.n	8008400 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	7d1b      	ldrb	r3, [r3, #20]
 80081aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	7858      	ldrb	r0, [r3, #1]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081be:	2301      	movs	r3, #1
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	f7fd fe2f 	bl	8005e24 <disk_read>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <f_lseek+0x1e0>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	755a      	strb	r2, [r3, #21]
 80081d2:	2301      	movs	r3, #1
 80081d4:	e114      	b.n	8008400 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	621a      	str	r2, [r3, #32]
 80081dc:	e10e      	b.n	80083fc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d908      	bls.n	80081fa <f_lseek+0x204>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7d1b      	ldrb	r3, [r3, #20]
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	637b      	str	r3, [r7, #52]	; 0x34
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008208:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 80a7 	beq.w	8008360 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	895b      	ldrh	r3, [r3, #10]
 8008216:	025b      	lsls	r3, r3, #9
 8008218:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01b      	beq.n	8008258 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	1e5a      	subs	r2, r3, #1
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	fbb2 f2f3 	udiv	r2, r2, r3
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	1e59      	subs	r1, r3, #1
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008234:	429a      	cmp	r2, r3
 8008236:	d30f      	bcc.n	8008258 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	425b      	negs	r3, r3
 8008240:	401a      	ands	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	63bb      	str	r3, [r7, #56]	; 0x38
 8008256:	e022      	b.n	800829e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	2b00      	cmp	r3, #0
 8008262:	d119      	bne.n	8008298 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2100      	movs	r1, #0
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fb9d 	bl	80069a8 <create_chain>
 800826e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	2b01      	cmp	r3, #1
 8008274:	d104      	bne.n	8008280 <f_lseek+0x28a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	755a      	strb	r2, [r3, #21]
 800827c:	2302      	movs	r3, #2
 800827e:	e0bf      	b.n	8008400 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d104      	bne.n	8008292 <f_lseek+0x29c>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	755a      	strb	r2, [r3, #21]
 800828e:	2301      	movs	r3, #1
 8008290:	e0b6      	b.n	8008400 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008296:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800829c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d05d      	beq.n	8008360 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80082a4:	e03a      	b.n	800831c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	603b      	str	r3, [r7, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	441a      	add	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	7d1b      	ldrb	r3, [r3, #20]
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00b      	beq.n	80082de <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fb6c 	bl	80069a8 <create_chain>
 80082d0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d108      	bne.n	80082ea <f_lseek+0x2f4>
							ofs = 0; break;
 80082d8:	2300      	movs	r3, #0
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	e022      	b.n	8008324 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe f967 	bl	80065b6 <get_fat>
 80082e8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f0:	d104      	bne.n	80082fc <f_lseek+0x306>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	755a      	strb	r2, [r3, #21]
 80082f8:	2301      	movs	r3, #1
 80082fa:	e081      	b.n	8008400 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d904      	bls.n	800830c <f_lseek+0x316>
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008308:	429a      	cmp	r2, r3
 800830a:	d304      	bcc.n	8008316 <f_lseek+0x320>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	755a      	strb	r2, [r3, #21]
 8008312:	2302      	movs	r3, #2
 8008314:	e074      	b.n	8008400 <f_lseek+0x40a>
					fp->clust = clst;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800831a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	429a      	cmp	r2, r3
 8008322:	d8c0      	bhi.n	80082a6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	441a      	add	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008336:	2b00      	cmp	r3, #0
 8008338:	d012      	beq.n	8008360 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe f91a 	bl	8006578 <clust2sect>
 8008344:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <f_lseek+0x360>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	755a      	strb	r2, [r3, #21]
 8008352:	2302      	movs	r3, #2
 8008354:	e054      	b.n	8008400 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	0a5b      	lsrs	r3, r3, #9
 800835a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800835c:	4413      	add	r3, r2
 800835e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699a      	ldr	r2, [r3, #24]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	429a      	cmp	r2, r3
 800836a:	d90a      	bls.n	8008382 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7d1b      	ldrb	r3, [r3, #20]
 8008378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837c:	b2da      	uxtb	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	2b00      	cmp	r3, #0
 800838c:	d036      	beq.n	80083fc <f_lseek+0x406>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008394:	429a      	cmp	r2, r3
 8008396:	d031      	beq.n	80083fc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7d1b      	ldrb	r3, [r3, #20]
 800839c:	b25b      	sxtb	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	da18      	bge.n	80083d4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	7858      	ldrb	r0, [r3, #1]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1a      	ldr	r2, [r3, #32]
 80083b0:	2301      	movs	r3, #1
 80083b2:	f7fd fd57 	bl	8005e64 <disk_write>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <f_lseek+0x3d0>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	755a      	strb	r2, [r3, #21]
 80083c2:	2301      	movs	r3, #1
 80083c4:	e01c      	b.n	8008400 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	7d1b      	ldrb	r3, [r3, #20]
 80083ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	7858      	ldrb	r0, [r3, #1]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083de:	2301      	movs	r3, #1
 80083e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083e2:	f7fd fd1f 	bl	8005e24 <disk_read>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <f_lseek+0x400>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	755a      	strb	r2, [r3, #21]
 80083f2:	2301      	movs	r3, #1
 80083f4:	e004      	b.n	8008400 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083fa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80083fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008400:	4618      	mov	r0, r3
 8008402:	3740      	adds	r7, #64	; 0x40
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b092      	sub	sp, #72	; 0x48
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008414:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008418:	f107 030c 	add.w	r3, r7, #12
 800841c:	2200      	movs	r2, #0
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe ff7c 	bl	800731c <find_volume>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800842a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 8099 	bne.w	8008566 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	691a      	ldr	r2, [r3, #16]
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	3b02      	subs	r3, #2
 8008444:	429a      	cmp	r2, r3
 8008446:	d804      	bhi.n	8008452 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	e089      	b.n	8008566 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d128      	bne.n	80084b0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800845e:	2302      	movs	r3, #2
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008466:	f107 0314 	add.w	r3, r7, #20
 800846a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe f8a2 	bl	80065b6 <get_fat>
 8008472:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847a:	d103      	bne.n	8008484 <f_getfree+0x7c>
 800847c:	2301      	movs	r3, #1
 800847e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008482:	e063      	b.n	800854c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008486:	2b01      	cmp	r3, #1
 8008488:	d103      	bne.n	8008492 <f_getfree+0x8a>
 800848a:	2302      	movs	r3, #2
 800848c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008490:	e05c      	b.n	800854c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d102      	bne.n	800849e <f_getfree+0x96>
 8008498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800849a:	3301      	adds	r3, #1
 800849c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800849e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a0:	3301      	adds	r3, #1
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d3db      	bcc.n	8008466 <f_getfree+0x5e>
 80084ae:	e04d      	b.n	800854c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	637b      	str	r3, [r7, #52]	; 0x34
 80084c0:	2300      	movs	r3, #0
 80084c2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80084c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d113      	bne.n	80084f2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80084ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80084d2:	4619      	mov	r1, r3
 80084d4:	f7fd ffb4 	bl	8006440 <move_window>
 80084d8:	4603      	mov	r3, r0
 80084da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80084de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d131      	bne.n	800854a <f_getfree+0x142>
							p = fs->win;
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	3330      	adds	r3, #48	; 0x30
 80084ea:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80084ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084f0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d10f      	bne.n	800851a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80084fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084fc:	f7fd fcf0 	bl	8005ee0 <ld_word>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <f_getfree+0x104>
 8008506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008508:	3301      	adds	r3, #1
 800850a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	3302      	adds	r3, #2
 8008510:	633b      	str	r3, [r7, #48]	; 0x30
 8008512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008514:	3b02      	subs	r3, #2
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
 8008518:	e010      	b.n	800853c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800851a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800851c:	f7fd fcf8 	bl	8005f10 <ld_dword>
 8008520:	4603      	mov	r3, r0
 8008522:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <f_getfree+0x128>
 800852a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800852c:	3301      	adds	r3, #1
 800852e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	3304      	adds	r3, #4
 8008534:	633b      	str	r3, [r7, #48]	; 0x30
 8008536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008538:	3b04      	subs	r3, #4
 800853a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853e:	3b01      	subs	r3, #1
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1bd      	bne.n	80084c4 <f_getfree+0xbc>
 8008548:	e000      	b.n	800854c <f_getfree+0x144>
							if (res != FR_OK) break;
 800854a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008550:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008556:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	791a      	ldrb	r2, [r3, #4]
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008566:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800856a:	4618      	mov	r0, r3
 800856c:	3748      	adds	r7, #72	; 0x48
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008582:	2301      	movs	r3, #1
 8008584:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800858a:	4b1f      	ldr	r3, [pc, #124]	; (8008608 <FATFS_LinkDriverEx+0x94>)
 800858c:	7a5b      	ldrb	r3, [r3, #9]
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d131      	bne.n	80085f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008594:	4b1c      	ldr	r3, [pc, #112]	; (8008608 <FATFS_LinkDriverEx+0x94>)
 8008596:	7a5b      	ldrb	r3, [r3, #9]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	461a      	mov	r2, r3
 800859c:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <FATFS_LinkDriverEx+0x94>)
 800859e:	2100      	movs	r1, #0
 80085a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80085a2:	4b19      	ldr	r3, [pc, #100]	; (8008608 <FATFS_LinkDriverEx+0x94>)
 80085a4:	7a5b      	ldrb	r3, [r3, #9]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	4a17      	ldr	r2, [pc, #92]	; (8008608 <FATFS_LinkDriverEx+0x94>)
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80085b2:	4b15      	ldr	r3, [pc, #84]	; (8008608 <FATFS_LinkDriverEx+0x94>)
 80085b4:	7a5b      	ldrb	r3, [r3, #9]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	4b13      	ldr	r3, [pc, #76]	; (8008608 <FATFS_LinkDriverEx+0x94>)
 80085bc:	4413      	add	r3, r2
 80085be:	79fa      	ldrb	r2, [r7, #7]
 80085c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80085c2:	4b11      	ldr	r3, [pc, #68]	; (8008608 <FATFS_LinkDriverEx+0x94>)
 80085c4:	7a5b      	ldrb	r3, [r3, #9]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	b2d1      	uxtb	r1, r2
 80085cc:	4a0e      	ldr	r2, [pc, #56]	; (8008608 <FATFS_LinkDriverEx+0x94>)
 80085ce:	7251      	strb	r1, [r2, #9]
 80085d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80085d2:	7dbb      	ldrb	r3, [r7, #22]
 80085d4:	3330      	adds	r3, #48	; 0x30
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3301      	adds	r3, #1
 80085e0:	223a      	movs	r2, #58	; 0x3a
 80085e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	3302      	adds	r3, #2
 80085e8:	222f      	movs	r2, #47	; 0x2f
 80085ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	3303      	adds	r3, #3
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	200137d0 	.word	0x200137d0

0800860c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008616:	2200      	movs	r2, #0
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff ffaa 	bl	8008574 <FATFS_LinkDriverEx>
 8008620:	4603      	mov	r3, r0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <atoi>:
 800862a:	220a      	movs	r2, #10
 800862c:	2100      	movs	r1, #0
 800862e:	f000 b8e7 	b.w	8008800 <strtol>
	...

08008634 <__errno>:
 8008634:	4b01      	ldr	r3, [pc, #4]	; (800863c <__errno+0x8>)
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	20000024 	.word	0x20000024

08008640 <__libc_init_array>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	4d0d      	ldr	r5, [pc, #52]	; (8008678 <__libc_init_array+0x38>)
 8008644:	4c0d      	ldr	r4, [pc, #52]	; (800867c <__libc_init_array+0x3c>)
 8008646:	1b64      	subs	r4, r4, r5
 8008648:	10a4      	asrs	r4, r4, #2
 800864a:	2600      	movs	r6, #0
 800864c:	42a6      	cmp	r6, r4
 800864e:	d109      	bne.n	8008664 <__libc_init_array+0x24>
 8008650:	4d0b      	ldr	r5, [pc, #44]	; (8008680 <__libc_init_array+0x40>)
 8008652:	4c0c      	ldr	r4, [pc, #48]	; (8008684 <__libc_init_array+0x44>)
 8008654:	f001 f896 	bl	8009784 <_init>
 8008658:	1b64      	subs	r4, r4, r5
 800865a:	10a4      	asrs	r4, r4, #2
 800865c:	2600      	movs	r6, #0
 800865e:	42a6      	cmp	r6, r4
 8008660:	d105      	bne.n	800866e <__libc_init_array+0x2e>
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	f855 3b04 	ldr.w	r3, [r5], #4
 8008668:	4798      	blx	r3
 800866a:	3601      	adds	r6, #1
 800866c:	e7ee      	b.n	800864c <__libc_init_array+0xc>
 800866e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008672:	4798      	blx	r3
 8008674:	3601      	adds	r6, #1
 8008676:	e7f2      	b.n	800865e <__libc_init_array+0x1e>
 8008678:	0800a04c 	.word	0x0800a04c
 800867c:	0800a04c 	.word	0x0800a04c
 8008680:	0800a04c 	.word	0x0800a04c
 8008684:	0800a050 	.word	0x0800a050

08008688 <__itoa>:
 8008688:	1e93      	subs	r3, r2, #2
 800868a:	2b22      	cmp	r3, #34	; 0x22
 800868c:	b510      	push	{r4, lr}
 800868e:	460c      	mov	r4, r1
 8008690:	d904      	bls.n	800869c <__itoa+0x14>
 8008692:	2300      	movs	r3, #0
 8008694:	700b      	strb	r3, [r1, #0]
 8008696:	461c      	mov	r4, r3
 8008698:	4620      	mov	r0, r4
 800869a:	bd10      	pop	{r4, pc}
 800869c:	2a0a      	cmp	r2, #10
 800869e:	d109      	bne.n	80086b4 <__itoa+0x2c>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	da07      	bge.n	80086b4 <__itoa+0x2c>
 80086a4:	232d      	movs	r3, #45	; 0x2d
 80086a6:	700b      	strb	r3, [r1, #0]
 80086a8:	4240      	negs	r0, r0
 80086aa:	2101      	movs	r1, #1
 80086ac:	4421      	add	r1, r4
 80086ae:	f000 f8b1 	bl	8008814 <__utoa>
 80086b2:	e7f1      	b.n	8008698 <__itoa+0x10>
 80086b4:	2100      	movs	r1, #0
 80086b6:	e7f9      	b.n	80086ac <__itoa+0x24>

080086b8 <itoa>:
 80086b8:	f7ff bfe6 	b.w	8008688 <__itoa>

080086bc <memset>:
 80086bc:	4402      	add	r2, r0
 80086be:	4603      	mov	r3, r0
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d100      	bne.n	80086c6 <memset+0xa>
 80086c4:	4770      	bx	lr
 80086c6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ca:	e7f9      	b.n	80086c0 <memset+0x4>

080086cc <iprintf>:
 80086cc:	b40f      	push	{r0, r1, r2, r3}
 80086ce:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <iprintf+0x2c>)
 80086d0:	b513      	push	{r0, r1, r4, lr}
 80086d2:	681c      	ldr	r4, [r3, #0]
 80086d4:	b124      	cbz	r4, 80086e0 <iprintf+0x14>
 80086d6:	69a3      	ldr	r3, [r4, #24]
 80086d8:	b913      	cbnz	r3, 80086e0 <iprintf+0x14>
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 f934 	bl	8008948 <__sinit>
 80086e0:	ab05      	add	r3, sp, #20
 80086e2:	9a04      	ldr	r2, [sp, #16]
 80086e4:	68a1      	ldr	r1, [r4, #8]
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 fa8b 	bl	8008c04 <_vfiprintf_r>
 80086ee:	b002      	add	sp, #8
 80086f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f4:	b004      	add	sp, #16
 80086f6:	4770      	bx	lr
 80086f8:	20000024 	.word	0x20000024

080086fc <_strtol_l.constprop.0>:
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008702:	d001      	beq.n	8008708 <_strtol_l.constprop.0+0xc>
 8008704:	2b24      	cmp	r3, #36	; 0x24
 8008706:	d906      	bls.n	8008716 <_strtol_l.constprop.0+0x1a>
 8008708:	f7ff ff94 	bl	8008634 <__errno>
 800870c:	2316      	movs	r3, #22
 800870e:	6003      	str	r3, [r0, #0]
 8008710:	2000      	movs	r0, #0
 8008712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008716:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80087fc <_strtol_l.constprop.0+0x100>
 800871a:	460d      	mov	r5, r1
 800871c:	462e      	mov	r6, r5
 800871e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008722:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008726:	f017 0708 	ands.w	r7, r7, #8
 800872a:	d1f7      	bne.n	800871c <_strtol_l.constprop.0+0x20>
 800872c:	2c2d      	cmp	r4, #45	; 0x2d
 800872e:	d132      	bne.n	8008796 <_strtol_l.constprop.0+0x9a>
 8008730:	782c      	ldrb	r4, [r5, #0]
 8008732:	2701      	movs	r7, #1
 8008734:	1cb5      	adds	r5, r6, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d05b      	beq.n	80087f2 <_strtol_l.constprop.0+0xf6>
 800873a:	2b10      	cmp	r3, #16
 800873c:	d109      	bne.n	8008752 <_strtol_l.constprop.0+0x56>
 800873e:	2c30      	cmp	r4, #48	; 0x30
 8008740:	d107      	bne.n	8008752 <_strtol_l.constprop.0+0x56>
 8008742:	782c      	ldrb	r4, [r5, #0]
 8008744:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008748:	2c58      	cmp	r4, #88	; 0x58
 800874a:	d14d      	bne.n	80087e8 <_strtol_l.constprop.0+0xec>
 800874c:	786c      	ldrb	r4, [r5, #1]
 800874e:	2310      	movs	r3, #16
 8008750:	3502      	adds	r5, #2
 8008752:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008756:	f108 38ff 	add.w	r8, r8, #4294967295
 800875a:	f04f 0c00 	mov.w	ip, #0
 800875e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008762:	4666      	mov	r6, ip
 8008764:	fb03 8a19 	mls	sl, r3, r9, r8
 8008768:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800876c:	f1be 0f09 	cmp.w	lr, #9
 8008770:	d816      	bhi.n	80087a0 <_strtol_l.constprop.0+0xa4>
 8008772:	4674      	mov	r4, lr
 8008774:	42a3      	cmp	r3, r4
 8008776:	dd24      	ble.n	80087c2 <_strtol_l.constprop.0+0xc6>
 8008778:	f1bc 0f00 	cmp.w	ip, #0
 800877c:	db1e      	blt.n	80087bc <_strtol_l.constprop.0+0xc0>
 800877e:	45b1      	cmp	r9, r6
 8008780:	d31c      	bcc.n	80087bc <_strtol_l.constprop.0+0xc0>
 8008782:	d101      	bne.n	8008788 <_strtol_l.constprop.0+0x8c>
 8008784:	45a2      	cmp	sl, r4
 8008786:	db19      	blt.n	80087bc <_strtol_l.constprop.0+0xc0>
 8008788:	fb06 4603 	mla	r6, r6, r3, r4
 800878c:	f04f 0c01 	mov.w	ip, #1
 8008790:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008794:	e7e8      	b.n	8008768 <_strtol_l.constprop.0+0x6c>
 8008796:	2c2b      	cmp	r4, #43	; 0x2b
 8008798:	bf04      	itt	eq
 800879a:	782c      	ldrbeq	r4, [r5, #0]
 800879c:	1cb5      	addeq	r5, r6, #2
 800879e:	e7ca      	b.n	8008736 <_strtol_l.constprop.0+0x3a>
 80087a0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80087a4:	f1be 0f19 	cmp.w	lr, #25
 80087a8:	d801      	bhi.n	80087ae <_strtol_l.constprop.0+0xb2>
 80087aa:	3c37      	subs	r4, #55	; 0x37
 80087ac:	e7e2      	b.n	8008774 <_strtol_l.constprop.0+0x78>
 80087ae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80087b2:	f1be 0f19 	cmp.w	lr, #25
 80087b6:	d804      	bhi.n	80087c2 <_strtol_l.constprop.0+0xc6>
 80087b8:	3c57      	subs	r4, #87	; 0x57
 80087ba:	e7db      	b.n	8008774 <_strtol_l.constprop.0+0x78>
 80087bc:	f04f 3cff 	mov.w	ip, #4294967295
 80087c0:	e7e6      	b.n	8008790 <_strtol_l.constprop.0+0x94>
 80087c2:	f1bc 0f00 	cmp.w	ip, #0
 80087c6:	da05      	bge.n	80087d4 <_strtol_l.constprop.0+0xd8>
 80087c8:	2322      	movs	r3, #34	; 0x22
 80087ca:	6003      	str	r3, [r0, #0]
 80087cc:	4646      	mov	r6, r8
 80087ce:	b942      	cbnz	r2, 80087e2 <_strtol_l.constprop.0+0xe6>
 80087d0:	4630      	mov	r0, r6
 80087d2:	e79e      	b.n	8008712 <_strtol_l.constprop.0+0x16>
 80087d4:	b107      	cbz	r7, 80087d8 <_strtol_l.constprop.0+0xdc>
 80087d6:	4276      	negs	r6, r6
 80087d8:	2a00      	cmp	r2, #0
 80087da:	d0f9      	beq.n	80087d0 <_strtol_l.constprop.0+0xd4>
 80087dc:	f1bc 0f00 	cmp.w	ip, #0
 80087e0:	d000      	beq.n	80087e4 <_strtol_l.constprop.0+0xe8>
 80087e2:	1e69      	subs	r1, r5, #1
 80087e4:	6011      	str	r1, [r2, #0]
 80087e6:	e7f3      	b.n	80087d0 <_strtol_l.constprop.0+0xd4>
 80087e8:	2430      	movs	r4, #48	; 0x30
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1b1      	bne.n	8008752 <_strtol_l.constprop.0+0x56>
 80087ee:	2308      	movs	r3, #8
 80087f0:	e7af      	b.n	8008752 <_strtol_l.constprop.0+0x56>
 80087f2:	2c30      	cmp	r4, #48	; 0x30
 80087f4:	d0a5      	beq.n	8008742 <_strtol_l.constprop.0+0x46>
 80087f6:	230a      	movs	r3, #10
 80087f8:	e7ab      	b.n	8008752 <_strtol_l.constprop.0+0x56>
 80087fa:	bf00      	nop
 80087fc:	08009eae 	.word	0x08009eae

08008800 <strtol>:
 8008800:	4613      	mov	r3, r2
 8008802:	460a      	mov	r2, r1
 8008804:	4601      	mov	r1, r0
 8008806:	4802      	ldr	r0, [pc, #8]	; (8008810 <strtol+0x10>)
 8008808:	6800      	ldr	r0, [r0, #0]
 800880a:	f7ff bf77 	b.w	80086fc <_strtol_l.constprop.0>
 800880e:	bf00      	nop
 8008810:	20000024 	.word	0x20000024

08008814 <__utoa>:
 8008814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008816:	4c1f      	ldr	r4, [pc, #124]	; (8008894 <__utoa+0x80>)
 8008818:	b08b      	sub	sp, #44	; 0x2c
 800881a:	4605      	mov	r5, r0
 800881c:	460b      	mov	r3, r1
 800881e:	466e      	mov	r6, sp
 8008820:	f104 0c20 	add.w	ip, r4, #32
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	6861      	ldr	r1, [r4, #4]
 8008828:	4637      	mov	r7, r6
 800882a:	c703      	stmia	r7!, {r0, r1}
 800882c:	3408      	adds	r4, #8
 800882e:	4564      	cmp	r4, ip
 8008830:	463e      	mov	r6, r7
 8008832:	d1f7      	bne.n	8008824 <__utoa+0x10>
 8008834:	7921      	ldrb	r1, [r4, #4]
 8008836:	7139      	strb	r1, [r7, #4]
 8008838:	1e91      	subs	r1, r2, #2
 800883a:	6820      	ldr	r0, [r4, #0]
 800883c:	6038      	str	r0, [r7, #0]
 800883e:	2922      	cmp	r1, #34	; 0x22
 8008840:	f04f 0100 	mov.w	r1, #0
 8008844:	d904      	bls.n	8008850 <__utoa+0x3c>
 8008846:	7019      	strb	r1, [r3, #0]
 8008848:	460b      	mov	r3, r1
 800884a:	4618      	mov	r0, r3
 800884c:	b00b      	add	sp, #44	; 0x2c
 800884e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008850:	1e58      	subs	r0, r3, #1
 8008852:	4684      	mov	ip, r0
 8008854:	fbb5 f7f2 	udiv	r7, r5, r2
 8008858:	fb02 5617 	mls	r6, r2, r7, r5
 800885c:	3628      	adds	r6, #40	; 0x28
 800885e:	446e      	add	r6, sp
 8008860:	460c      	mov	r4, r1
 8008862:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008866:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800886a:	462e      	mov	r6, r5
 800886c:	42b2      	cmp	r2, r6
 800886e:	f101 0101 	add.w	r1, r1, #1
 8008872:	463d      	mov	r5, r7
 8008874:	d9ee      	bls.n	8008854 <__utoa+0x40>
 8008876:	2200      	movs	r2, #0
 8008878:	545a      	strb	r2, [r3, r1]
 800887a:	1919      	adds	r1, r3, r4
 800887c:	1aa5      	subs	r5, r4, r2
 800887e:	42aa      	cmp	r2, r5
 8008880:	dae3      	bge.n	800884a <__utoa+0x36>
 8008882:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008886:	780e      	ldrb	r6, [r1, #0]
 8008888:	7006      	strb	r6, [r0, #0]
 800888a:	3201      	adds	r2, #1
 800888c:	f801 5901 	strb.w	r5, [r1], #-1
 8008890:	e7f4      	b.n	800887c <__utoa+0x68>
 8008892:	bf00      	nop
 8008894:	08009e88 	.word	0x08009e88

08008898 <std>:
 8008898:	2300      	movs	r3, #0
 800889a:	b510      	push	{r4, lr}
 800889c:	4604      	mov	r4, r0
 800889e:	e9c0 3300 	strd	r3, r3, [r0]
 80088a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088a6:	6083      	str	r3, [r0, #8]
 80088a8:	8181      	strh	r1, [r0, #12]
 80088aa:	6643      	str	r3, [r0, #100]	; 0x64
 80088ac:	81c2      	strh	r2, [r0, #14]
 80088ae:	6183      	str	r3, [r0, #24]
 80088b0:	4619      	mov	r1, r3
 80088b2:	2208      	movs	r2, #8
 80088b4:	305c      	adds	r0, #92	; 0x5c
 80088b6:	f7ff ff01 	bl	80086bc <memset>
 80088ba:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <std+0x38>)
 80088bc:	6263      	str	r3, [r4, #36]	; 0x24
 80088be:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <std+0x3c>)
 80088c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <std+0x40>)
 80088c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <std+0x44>)
 80088c8:	6224      	str	r4, [r4, #32]
 80088ca:	6323      	str	r3, [r4, #48]	; 0x30
 80088cc:	bd10      	pop	{r4, pc}
 80088ce:	bf00      	nop
 80088d0:	080091ad 	.word	0x080091ad
 80088d4:	080091cf 	.word	0x080091cf
 80088d8:	08009207 	.word	0x08009207
 80088dc:	0800922b 	.word	0x0800922b

080088e0 <_cleanup_r>:
 80088e0:	4901      	ldr	r1, [pc, #4]	; (80088e8 <_cleanup_r+0x8>)
 80088e2:	f000 b8af 	b.w	8008a44 <_fwalk_reent>
 80088e6:	bf00      	nop
 80088e8:	08009505 	.word	0x08009505

080088ec <__sfmoreglue>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	2268      	movs	r2, #104	; 0x68
 80088f0:	1e4d      	subs	r5, r1, #1
 80088f2:	4355      	muls	r5, r2
 80088f4:	460e      	mov	r6, r1
 80088f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088fa:	f000 f8e5 	bl	8008ac8 <_malloc_r>
 80088fe:	4604      	mov	r4, r0
 8008900:	b140      	cbz	r0, 8008914 <__sfmoreglue+0x28>
 8008902:	2100      	movs	r1, #0
 8008904:	e9c0 1600 	strd	r1, r6, [r0]
 8008908:	300c      	adds	r0, #12
 800890a:	60a0      	str	r0, [r4, #8]
 800890c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008910:	f7ff fed4 	bl	80086bc <memset>
 8008914:	4620      	mov	r0, r4
 8008916:	bd70      	pop	{r4, r5, r6, pc}

08008918 <__sfp_lock_acquire>:
 8008918:	4801      	ldr	r0, [pc, #4]	; (8008920 <__sfp_lock_acquire+0x8>)
 800891a:	f000 b8b3 	b.w	8008a84 <__retarget_lock_acquire_recursive>
 800891e:	bf00      	nop
 8008920:	200137dd 	.word	0x200137dd

08008924 <__sfp_lock_release>:
 8008924:	4801      	ldr	r0, [pc, #4]	; (800892c <__sfp_lock_release+0x8>)
 8008926:	f000 b8ae 	b.w	8008a86 <__retarget_lock_release_recursive>
 800892a:	bf00      	nop
 800892c:	200137dd 	.word	0x200137dd

08008930 <__sinit_lock_acquire>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__sinit_lock_acquire+0x8>)
 8008932:	f000 b8a7 	b.w	8008a84 <__retarget_lock_acquire_recursive>
 8008936:	bf00      	nop
 8008938:	200137de 	.word	0x200137de

0800893c <__sinit_lock_release>:
 800893c:	4801      	ldr	r0, [pc, #4]	; (8008944 <__sinit_lock_release+0x8>)
 800893e:	f000 b8a2 	b.w	8008a86 <__retarget_lock_release_recursive>
 8008942:	bf00      	nop
 8008944:	200137de 	.word	0x200137de

08008948 <__sinit>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4604      	mov	r4, r0
 800894c:	f7ff fff0 	bl	8008930 <__sinit_lock_acquire>
 8008950:	69a3      	ldr	r3, [r4, #24]
 8008952:	b11b      	cbz	r3, 800895c <__sinit+0x14>
 8008954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008958:	f7ff bff0 	b.w	800893c <__sinit_lock_release>
 800895c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008960:	6523      	str	r3, [r4, #80]	; 0x50
 8008962:	4b13      	ldr	r3, [pc, #76]	; (80089b0 <__sinit+0x68>)
 8008964:	4a13      	ldr	r2, [pc, #76]	; (80089b4 <__sinit+0x6c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	62a2      	str	r2, [r4, #40]	; 0x28
 800896a:	42a3      	cmp	r3, r4
 800896c:	bf04      	itt	eq
 800896e:	2301      	moveq	r3, #1
 8008970:	61a3      	streq	r3, [r4, #24]
 8008972:	4620      	mov	r0, r4
 8008974:	f000 f820 	bl	80089b8 <__sfp>
 8008978:	6060      	str	r0, [r4, #4]
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f81c 	bl	80089b8 <__sfp>
 8008980:	60a0      	str	r0, [r4, #8]
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f818 	bl	80089b8 <__sfp>
 8008988:	2200      	movs	r2, #0
 800898a:	60e0      	str	r0, [r4, #12]
 800898c:	2104      	movs	r1, #4
 800898e:	6860      	ldr	r0, [r4, #4]
 8008990:	f7ff ff82 	bl	8008898 <std>
 8008994:	68a0      	ldr	r0, [r4, #8]
 8008996:	2201      	movs	r2, #1
 8008998:	2109      	movs	r1, #9
 800899a:	f7ff ff7d 	bl	8008898 <std>
 800899e:	68e0      	ldr	r0, [r4, #12]
 80089a0:	2202      	movs	r2, #2
 80089a2:	2112      	movs	r1, #18
 80089a4:	f7ff ff78 	bl	8008898 <std>
 80089a8:	2301      	movs	r3, #1
 80089aa:	61a3      	str	r3, [r4, #24]
 80089ac:	e7d2      	b.n	8008954 <__sinit+0xc>
 80089ae:	bf00      	nop
 80089b0:	08009e84 	.word	0x08009e84
 80089b4:	080088e1 	.word	0x080088e1

080089b8 <__sfp>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	4607      	mov	r7, r0
 80089bc:	f7ff ffac 	bl	8008918 <__sfp_lock_acquire>
 80089c0:	4b1e      	ldr	r3, [pc, #120]	; (8008a3c <__sfp+0x84>)
 80089c2:	681e      	ldr	r6, [r3, #0]
 80089c4:	69b3      	ldr	r3, [r6, #24]
 80089c6:	b913      	cbnz	r3, 80089ce <__sfp+0x16>
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7ff ffbd 	bl	8008948 <__sinit>
 80089ce:	3648      	adds	r6, #72	; 0x48
 80089d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089d4:	3b01      	subs	r3, #1
 80089d6:	d503      	bpl.n	80089e0 <__sfp+0x28>
 80089d8:	6833      	ldr	r3, [r6, #0]
 80089da:	b30b      	cbz	r3, 8008a20 <__sfp+0x68>
 80089dc:	6836      	ldr	r6, [r6, #0]
 80089de:	e7f7      	b.n	80089d0 <__sfp+0x18>
 80089e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089e4:	b9d5      	cbnz	r5, 8008a1c <__sfp+0x64>
 80089e6:	4b16      	ldr	r3, [pc, #88]	; (8008a40 <__sfp+0x88>)
 80089e8:	60e3      	str	r3, [r4, #12]
 80089ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089ee:	6665      	str	r5, [r4, #100]	; 0x64
 80089f0:	f000 f847 	bl	8008a82 <__retarget_lock_init_recursive>
 80089f4:	f7ff ff96 	bl	8008924 <__sfp_lock_release>
 80089f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a00:	6025      	str	r5, [r4, #0]
 8008a02:	61a5      	str	r5, [r4, #24]
 8008a04:	2208      	movs	r2, #8
 8008a06:	4629      	mov	r1, r5
 8008a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a0c:	f7ff fe56 	bl	80086bc <memset>
 8008a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a18:	4620      	mov	r0, r4
 8008a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1c:	3468      	adds	r4, #104	; 0x68
 8008a1e:	e7d9      	b.n	80089d4 <__sfp+0x1c>
 8008a20:	2104      	movs	r1, #4
 8008a22:	4638      	mov	r0, r7
 8008a24:	f7ff ff62 	bl	80088ec <__sfmoreglue>
 8008a28:	4604      	mov	r4, r0
 8008a2a:	6030      	str	r0, [r6, #0]
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d1d5      	bne.n	80089dc <__sfp+0x24>
 8008a30:	f7ff ff78 	bl	8008924 <__sfp_lock_release>
 8008a34:	230c      	movs	r3, #12
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	e7ee      	b.n	8008a18 <__sfp+0x60>
 8008a3a:	bf00      	nop
 8008a3c:	08009e84 	.word	0x08009e84
 8008a40:	ffff0001 	.word	0xffff0001

08008a44 <_fwalk_reent>:
 8008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	4606      	mov	r6, r0
 8008a4a:	4688      	mov	r8, r1
 8008a4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a50:	2700      	movs	r7, #0
 8008a52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a56:	f1b9 0901 	subs.w	r9, r9, #1
 8008a5a:	d505      	bpl.n	8008a68 <_fwalk_reent+0x24>
 8008a5c:	6824      	ldr	r4, [r4, #0]
 8008a5e:	2c00      	cmp	r4, #0
 8008a60:	d1f7      	bne.n	8008a52 <_fwalk_reent+0xe>
 8008a62:	4638      	mov	r0, r7
 8008a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a68:	89ab      	ldrh	r3, [r5, #12]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d907      	bls.n	8008a7e <_fwalk_reent+0x3a>
 8008a6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a72:	3301      	adds	r3, #1
 8008a74:	d003      	beq.n	8008a7e <_fwalk_reent+0x3a>
 8008a76:	4629      	mov	r1, r5
 8008a78:	4630      	mov	r0, r6
 8008a7a:	47c0      	blx	r8
 8008a7c:	4307      	orrs	r7, r0
 8008a7e:	3568      	adds	r5, #104	; 0x68
 8008a80:	e7e9      	b.n	8008a56 <_fwalk_reent+0x12>

08008a82 <__retarget_lock_init_recursive>:
 8008a82:	4770      	bx	lr

08008a84 <__retarget_lock_acquire_recursive>:
 8008a84:	4770      	bx	lr

08008a86 <__retarget_lock_release_recursive>:
 8008a86:	4770      	bx	lr

08008a88 <sbrk_aligned>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	4e0e      	ldr	r6, [pc, #56]	; (8008ac4 <sbrk_aligned+0x3c>)
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	6831      	ldr	r1, [r6, #0]
 8008a90:	4605      	mov	r5, r0
 8008a92:	b911      	cbnz	r1, 8008a9a <sbrk_aligned+0x12>
 8008a94:	f000 fb7a 	bl	800918c <_sbrk_r>
 8008a98:	6030      	str	r0, [r6, #0]
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f000 fb75 	bl	800918c <_sbrk_r>
 8008aa2:	1c43      	adds	r3, r0, #1
 8008aa4:	d00a      	beq.n	8008abc <sbrk_aligned+0x34>
 8008aa6:	1cc4      	adds	r4, r0, #3
 8008aa8:	f024 0403 	bic.w	r4, r4, #3
 8008aac:	42a0      	cmp	r0, r4
 8008aae:	d007      	beq.n	8008ac0 <sbrk_aligned+0x38>
 8008ab0:	1a21      	subs	r1, r4, r0
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f000 fb6a 	bl	800918c <_sbrk_r>
 8008ab8:	3001      	adds	r0, #1
 8008aba:	d101      	bne.n	8008ac0 <sbrk_aligned+0x38>
 8008abc:	f04f 34ff 	mov.w	r4, #4294967295
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	200137e4 	.word	0x200137e4

08008ac8 <_malloc_r>:
 8008ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008acc:	1ccd      	adds	r5, r1, #3
 8008ace:	f025 0503 	bic.w	r5, r5, #3
 8008ad2:	3508      	adds	r5, #8
 8008ad4:	2d0c      	cmp	r5, #12
 8008ad6:	bf38      	it	cc
 8008ad8:	250c      	movcc	r5, #12
 8008ada:	2d00      	cmp	r5, #0
 8008adc:	4607      	mov	r7, r0
 8008ade:	db01      	blt.n	8008ae4 <_malloc_r+0x1c>
 8008ae0:	42a9      	cmp	r1, r5
 8008ae2:	d905      	bls.n	8008af0 <_malloc_r+0x28>
 8008ae4:	230c      	movs	r3, #12
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	2600      	movs	r6, #0
 8008aea:	4630      	mov	r0, r6
 8008aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af0:	4e2e      	ldr	r6, [pc, #184]	; (8008bac <_malloc_r+0xe4>)
 8008af2:	f000 fdbb 	bl	800966c <__malloc_lock>
 8008af6:	6833      	ldr	r3, [r6, #0]
 8008af8:	461c      	mov	r4, r3
 8008afa:	bb34      	cbnz	r4, 8008b4a <_malloc_r+0x82>
 8008afc:	4629      	mov	r1, r5
 8008afe:	4638      	mov	r0, r7
 8008b00:	f7ff ffc2 	bl	8008a88 <sbrk_aligned>
 8008b04:	1c43      	adds	r3, r0, #1
 8008b06:	4604      	mov	r4, r0
 8008b08:	d14d      	bne.n	8008ba6 <_malloc_r+0xde>
 8008b0a:	6834      	ldr	r4, [r6, #0]
 8008b0c:	4626      	mov	r6, r4
 8008b0e:	2e00      	cmp	r6, #0
 8008b10:	d140      	bne.n	8008b94 <_malloc_r+0xcc>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	4631      	mov	r1, r6
 8008b16:	4638      	mov	r0, r7
 8008b18:	eb04 0803 	add.w	r8, r4, r3
 8008b1c:	f000 fb36 	bl	800918c <_sbrk_r>
 8008b20:	4580      	cmp	r8, r0
 8008b22:	d13a      	bne.n	8008b9a <_malloc_r+0xd2>
 8008b24:	6821      	ldr	r1, [r4, #0]
 8008b26:	3503      	adds	r5, #3
 8008b28:	1a6d      	subs	r5, r5, r1
 8008b2a:	f025 0503 	bic.w	r5, r5, #3
 8008b2e:	3508      	adds	r5, #8
 8008b30:	2d0c      	cmp	r5, #12
 8008b32:	bf38      	it	cc
 8008b34:	250c      	movcc	r5, #12
 8008b36:	4629      	mov	r1, r5
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff ffa5 	bl	8008a88 <sbrk_aligned>
 8008b3e:	3001      	adds	r0, #1
 8008b40:	d02b      	beq.n	8008b9a <_malloc_r+0xd2>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	442b      	add	r3, r5
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	e00e      	b.n	8008b68 <_malloc_r+0xa0>
 8008b4a:	6822      	ldr	r2, [r4, #0]
 8008b4c:	1b52      	subs	r2, r2, r5
 8008b4e:	d41e      	bmi.n	8008b8e <_malloc_r+0xc6>
 8008b50:	2a0b      	cmp	r2, #11
 8008b52:	d916      	bls.n	8008b82 <_malloc_r+0xba>
 8008b54:	1961      	adds	r1, r4, r5
 8008b56:	42a3      	cmp	r3, r4
 8008b58:	6025      	str	r5, [r4, #0]
 8008b5a:	bf18      	it	ne
 8008b5c:	6059      	strne	r1, [r3, #4]
 8008b5e:	6863      	ldr	r3, [r4, #4]
 8008b60:	bf08      	it	eq
 8008b62:	6031      	streq	r1, [r6, #0]
 8008b64:	5162      	str	r2, [r4, r5]
 8008b66:	604b      	str	r3, [r1, #4]
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f104 060b 	add.w	r6, r4, #11
 8008b6e:	f000 fd83 	bl	8009678 <__malloc_unlock>
 8008b72:	f026 0607 	bic.w	r6, r6, #7
 8008b76:	1d23      	adds	r3, r4, #4
 8008b78:	1af2      	subs	r2, r6, r3
 8008b7a:	d0b6      	beq.n	8008aea <_malloc_r+0x22>
 8008b7c:	1b9b      	subs	r3, r3, r6
 8008b7e:	50a3      	str	r3, [r4, r2]
 8008b80:	e7b3      	b.n	8008aea <_malloc_r+0x22>
 8008b82:	6862      	ldr	r2, [r4, #4]
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	bf0c      	ite	eq
 8008b88:	6032      	streq	r2, [r6, #0]
 8008b8a:	605a      	strne	r2, [r3, #4]
 8008b8c:	e7ec      	b.n	8008b68 <_malloc_r+0xa0>
 8008b8e:	4623      	mov	r3, r4
 8008b90:	6864      	ldr	r4, [r4, #4]
 8008b92:	e7b2      	b.n	8008afa <_malloc_r+0x32>
 8008b94:	4634      	mov	r4, r6
 8008b96:	6876      	ldr	r6, [r6, #4]
 8008b98:	e7b9      	b.n	8008b0e <_malloc_r+0x46>
 8008b9a:	230c      	movs	r3, #12
 8008b9c:	603b      	str	r3, [r7, #0]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	f000 fd6a 	bl	8009678 <__malloc_unlock>
 8008ba4:	e7a1      	b.n	8008aea <_malloc_r+0x22>
 8008ba6:	6025      	str	r5, [r4, #0]
 8008ba8:	e7de      	b.n	8008b68 <_malloc_r+0xa0>
 8008baa:	bf00      	nop
 8008bac:	200137e0 	.word	0x200137e0

08008bb0 <__sfputc_r>:
 8008bb0:	6893      	ldr	r3, [r2, #8]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	b410      	push	{r4}
 8008bb8:	6093      	str	r3, [r2, #8]
 8008bba:	da08      	bge.n	8008bce <__sfputc_r+0x1e>
 8008bbc:	6994      	ldr	r4, [r2, #24]
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	db01      	blt.n	8008bc6 <__sfputc_r+0x16>
 8008bc2:	290a      	cmp	r1, #10
 8008bc4:	d103      	bne.n	8008bce <__sfputc_r+0x1e>
 8008bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bca:	f000 bb33 	b.w	8009234 <__swbuf_r>
 8008bce:	6813      	ldr	r3, [r2, #0]
 8008bd0:	1c58      	adds	r0, r3, #1
 8008bd2:	6010      	str	r0, [r2, #0]
 8008bd4:	7019      	strb	r1, [r3, #0]
 8008bd6:	4608      	mov	r0, r1
 8008bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <__sfputs_r>:
 8008bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be0:	4606      	mov	r6, r0
 8008be2:	460f      	mov	r7, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	18d5      	adds	r5, r2, r3
 8008be8:	42ac      	cmp	r4, r5
 8008bea:	d101      	bne.n	8008bf0 <__sfputs_r+0x12>
 8008bec:	2000      	movs	r0, #0
 8008bee:	e007      	b.n	8008c00 <__sfputs_r+0x22>
 8008bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf4:	463a      	mov	r2, r7
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7ff ffda 	bl	8008bb0 <__sfputc_r>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d1f3      	bne.n	8008be8 <__sfputs_r+0xa>
 8008c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c04 <_vfiprintf_r>:
 8008c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	460d      	mov	r5, r1
 8008c0a:	b09d      	sub	sp, #116	; 0x74
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	4698      	mov	r8, r3
 8008c10:	4606      	mov	r6, r0
 8008c12:	b118      	cbz	r0, 8008c1c <_vfiprintf_r+0x18>
 8008c14:	6983      	ldr	r3, [r0, #24]
 8008c16:	b90b      	cbnz	r3, 8008c1c <_vfiprintf_r+0x18>
 8008c18:	f7ff fe96 	bl	8008948 <__sinit>
 8008c1c:	4b89      	ldr	r3, [pc, #548]	; (8008e44 <_vfiprintf_r+0x240>)
 8008c1e:	429d      	cmp	r5, r3
 8008c20:	d11b      	bne.n	8008c5a <_vfiprintf_r+0x56>
 8008c22:	6875      	ldr	r5, [r6, #4]
 8008c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c26:	07d9      	lsls	r1, r3, #31
 8008c28:	d405      	bmi.n	8008c36 <_vfiprintf_r+0x32>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	059a      	lsls	r2, r3, #22
 8008c2e:	d402      	bmi.n	8008c36 <_vfiprintf_r+0x32>
 8008c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c32:	f7ff ff27 	bl	8008a84 <__retarget_lock_acquire_recursive>
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	071b      	lsls	r3, r3, #28
 8008c3a:	d501      	bpl.n	8008c40 <_vfiprintf_r+0x3c>
 8008c3c:	692b      	ldr	r3, [r5, #16]
 8008c3e:	b9eb      	cbnz	r3, 8008c7c <_vfiprintf_r+0x78>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 fb5a 	bl	80092fc <__swsetup_r>
 8008c48:	b1c0      	cbz	r0, 8008c7c <_vfiprintf_r+0x78>
 8008c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c4c:	07dc      	lsls	r4, r3, #31
 8008c4e:	d50e      	bpl.n	8008c6e <_vfiprintf_r+0x6a>
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	b01d      	add	sp, #116	; 0x74
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	4b7b      	ldr	r3, [pc, #492]	; (8008e48 <_vfiprintf_r+0x244>)
 8008c5c:	429d      	cmp	r5, r3
 8008c5e:	d101      	bne.n	8008c64 <_vfiprintf_r+0x60>
 8008c60:	68b5      	ldr	r5, [r6, #8]
 8008c62:	e7df      	b.n	8008c24 <_vfiprintf_r+0x20>
 8008c64:	4b79      	ldr	r3, [pc, #484]	; (8008e4c <_vfiprintf_r+0x248>)
 8008c66:	429d      	cmp	r5, r3
 8008c68:	bf08      	it	eq
 8008c6a:	68f5      	ldreq	r5, [r6, #12]
 8008c6c:	e7da      	b.n	8008c24 <_vfiprintf_r+0x20>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	0598      	lsls	r0, r3, #22
 8008c72:	d4ed      	bmi.n	8008c50 <_vfiprintf_r+0x4c>
 8008c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c76:	f7ff ff06 	bl	8008a86 <__retarget_lock_release_recursive>
 8008c7a:	e7e9      	b.n	8008c50 <_vfiprintf_r+0x4c>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c80:	2320      	movs	r3, #32
 8008c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c8a:	2330      	movs	r3, #48	; 0x30
 8008c8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e50 <_vfiprintf_r+0x24c>
 8008c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c94:	f04f 0901 	mov.w	r9, #1
 8008c98:	4623      	mov	r3, r4
 8008c9a:	469a      	mov	sl, r3
 8008c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_vfiprintf_r+0xa2>
 8008ca2:	2a25      	cmp	r2, #37	; 0x25
 8008ca4:	d1f9      	bne.n	8008c9a <_vfiprintf_r+0x96>
 8008ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8008caa:	d00b      	beq.n	8008cc4 <_vfiprintf_r+0xc0>
 8008cac:	465b      	mov	r3, fp
 8008cae:	4622      	mov	r2, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7ff ff93 	bl	8008bde <__sfputs_r>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f000 80aa 	beq.w	8008e12 <_vfiprintf_r+0x20e>
 8008cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc0:	445a      	add	r2, fp
 8008cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80a2 	beq.w	8008e12 <_vfiprintf_r+0x20e>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd8:	f10a 0a01 	add.w	sl, sl, #1
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ce6:	4654      	mov	r4, sl
 8008ce8:	2205      	movs	r2, #5
 8008cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cee:	4858      	ldr	r0, [pc, #352]	; (8008e50 <_vfiprintf_r+0x24c>)
 8008cf0:	f7f7 fa76 	bl	80001e0 <memchr>
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	b9d8      	cbnz	r0, 8008d30 <_vfiprintf_r+0x12c>
 8008cf8:	06d1      	lsls	r1, r2, #27
 8008cfa:	bf44      	itt	mi
 8008cfc:	2320      	movmi	r3, #32
 8008cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d02:	0713      	lsls	r3, r2, #28
 8008d04:	bf44      	itt	mi
 8008d06:	232b      	movmi	r3, #43	; 0x2b
 8008d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b2a      	cmp	r3, #42	; 0x2a
 8008d12:	d015      	beq.n	8008d40 <_vfiprintf_r+0x13c>
 8008d14:	9a07      	ldr	r2, [sp, #28]
 8008d16:	4654      	mov	r4, sl
 8008d18:	2000      	movs	r0, #0
 8008d1a:	f04f 0c0a 	mov.w	ip, #10
 8008d1e:	4621      	mov	r1, r4
 8008d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d24:	3b30      	subs	r3, #48	; 0x30
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d94e      	bls.n	8008dc8 <_vfiprintf_r+0x1c4>
 8008d2a:	b1b0      	cbz	r0, 8008d5a <_vfiprintf_r+0x156>
 8008d2c:	9207      	str	r2, [sp, #28]
 8008d2e:	e014      	b.n	8008d5a <_vfiprintf_r+0x156>
 8008d30:	eba0 0308 	sub.w	r3, r0, r8
 8008d34:	fa09 f303 	lsl.w	r3, r9, r3
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	46a2      	mov	sl, r4
 8008d3e:	e7d2      	b.n	8008ce6 <_vfiprintf_r+0xe2>
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	1d19      	adds	r1, r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	9103      	str	r1, [sp, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bfbb      	ittet	lt
 8008d4c:	425b      	neglt	r3, r3
 8008d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d52:	9307      	strge	r3, [sp, #28]
 8008d54:	9307      	strlt	r3, [sp, #28]
 8008d56:	bfb8      	it	lt
 8008d58:	9204      	strlt	r2, [sp, #16]
 8008d5a:	7823      	ldrb	r3, [r4, #0]
 8008d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d5e:	d10c      	bne.n	8008d7a <_vfiprintf_r+0x176>
 8008d60:	7863      	ldrb	r3, [r4, #1]
 8008d62:	2b2a      	cmp	r3, #42	; 0x2a
 8008d64:	d135      	bne.n	8008dd2 <_vfiprintf_r+0x1ce>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	1d1a      	adds	r2, r3, #4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	9203      	str	r2, [sp, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bfb8      	it	lt
 8008d72:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d76:	3402      	adds	r4, #2
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e60 <_vfiprintf_r+0x25c>
 8008d7e:	7821      	ldrb	r1, [r4, #0]
 8008d80:	2203      	movs	r2, #3
 8008d82:	4650      	mov	r0, sl
 8008d84:	f7f7 fa2c 	bl	80001e0 <memchr>
 8008d88:	b140      	cbz	r0, 8008d9c <_vfiprintf_r+0x198>
 8008d8a:	2340      	movs	r3, #64	; 0x40
 8008d8c:	eba0 000a 	sub.w	r0, r0, sl
 8008d90:	fa03 f000 	lsl.w	r0, r3, r0
 8008d94:	9b04      	ldr	r3, [sp, #16]
 8008d96:	4303      	orrs	r3, r0
 8008d98:	3401      	adds	r4, #1
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da0:	482c      	ldr	r0, [pc, #176]	; (8008e54 <_vfiprintf_r+0x250>)
 8008da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008da6:	2206      	movs	r2, #6
 8008da8:	f7f7 fa1a 	bl	80001e0 <memchr>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d03f      	beq.n	8008e30 <_vfiprintf_r+0x22c>
 8008db0:	4b29      	ldr	r3, [pc, #164]	; (8008e58 <_vfiprintf_r+0x254>)
 8008db2:	bb1b      	cbnz	r3, 8008dfc <_vfiprintf_r+0x1f8>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	3307      	adds	r3, #7
 8008db8:	f023 0307 	bic.w	r3, r3, #7
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc2:	443b      	add	r3, r7
 8008dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc6:	e767      	b.n	8008c98 <_vfiprintf_r+0x94>
 8008dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dcc:	460c      	mov	r4, r1
 8008dce:	2001      	movs	r0, #1
 8008dd0:	e7a5      	b.n	8008d1e <_vfiprintf_r+0x11a>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	3401      	adds	r4, #1
 8008dd6:	9305      	str	r3, [sp, #20]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	f04f 0c0a 	mov.w	ip, #10
 8008dde:	4620      	mov	r0, r4
 8008de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008de4:	3a30      	subs	r2, #48	; 0x30
 8008de6:	2a09      	cmp	r2, #9
 8008de8:	d903      	bls.n	8008df2 <_vfiprintf_r+0x1ee>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0c5      	beq.n	8008d7a <_vfiprintf_r+0x176>
 8008dee:	9105      	str	r1, [sp, #20]
 8008df0:	e7c3      	b.n	8008d7a <_vfiprintf_r+0x176>
 8008df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df6:	4604      	mov	r4, r0
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e7f0      	b.n	8008dde <_vfiprintf_r+0x1da>
 8008dfc:	ab03      	add	r3, sp, #12
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	462a      	mov	r2, r5
 8008e02:	4b16      	ldr	r3, [pc, #88]	; (8008e5c <_vfiprintf_r+0x258>)
 8008e04:	a904      	add	r1, sp, #16
 8008e06:	4630      	mov	r0, r6
 8008e08:	f3af 8000 	nop.w
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	1c78      	adds	r0, r7, #1
 8008e10:	d1d6      	bne.n	8008dc0 <_vfiprintf_r+0x1bc>
 8008e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e14:	07d9      	lsls	r1, r3, #31
 8008e16:	d405      	bmi.n	8008e24 <_vfiprintf_r+0x220>
 8008e18:	89ab      	ldrh	r3, [r5, #12]
 8008e1a:	059a      	lsls	r2, r3, #22
 8008e1c:	d402      	bmi.n	8008e24 <_vfiprintf_r+0x220>
 8008e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e20:	f7ff fe31 	bl	8008a86 <__retarget_lock_release_recursive>
 8008e24:	89ab      	ldrh	r3, [r5, #12]
 8008e26:	065b      	lsls	r3, r3, #25
 8008e28:	f53f af12 	bmi.w	8008c50 <_vfiprintf_r+0x4c>
 8008e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e2e:	e711      	b.n	8008c54 <_vfiprintf_r+0x50>
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462a      	mov	r2, r5
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <_vfiprintf_r+0x258>)
 8008e38:	a904      	add	r1, sp, #16
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f000 f880 	bl	8008f40 <_printf_i>
 8008e40:	e7e4      	b.n	8008e0c <_vfiprintf_r+0x208>
 8008e42:	bf00      	nop
 8008e44:	08009fd0 	.word	0x08009fd0
 8008e48:	08009ff0 	.word	0x08009ff0
 8008e4c:	08009fb0 	.word	0x08009fb0
 8008e50:	0800a010 	.word	0x0800a010
 8008e54:	0800a01a 	.word	0x0800a01a
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	08008bdf 	.word	0x08008bdf
 8008e60:	0800a016 	.word	0x0800a016

08008e64 <_printf_common>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	4616      	mov	r6, r2
 8008e6a:	4699      	mov	r9, r3
 8008e6c:	688a      	ldr	r2, [r1, #8]
 8008e6e:	690b      	ldr	r3, [r1, #16]
 8008e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e74:	4293      	cmp	r3, r2
 8008e76:	bfb8      	it	lt
 8008e78:	4613      	movlt	r3, r2
 8008e7a:	6033      	str	r3, [r6, #0]
 8008e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e80:	4607      	mov	r7, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	b10a      	cbz	r2, 8008e8a <_printf_common+0x26>
 8008e86:	3301      	adds	r3, #1
 8008e88:	6033      	str	r3, [r6, #0]
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	0699      	lsls	r1, r3, #26
 8008e8e:	bf42      	ittt	mi
 8008e90:	6833      	ldrmi	r3, [r6, #0]
 8008e92:	3302      	addmi	r3, #2
 8008e94:	6033      	strmi	r3, [r6, #0]
 8008e96:	6825      	ldr	r5, [r4, #0]
 8008e98:	f015 0506 	ands.w	r5, r5, #6
 8008e9c:	d106      	bne.n	8008eac <_printf_common+0x48>
 8008e9e:	f104 0a19 	add.w	sl, r4, #25
 8008ea2:	68e3      	ldr	r3, [r4, #12]
 8008ea4:	6832      	ldr	r2, [r6, #0]
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	42ab      	cmp	r3, r5
 8008eaa:	dc26      	bgt.n	8008efa <_printf_common+0x96>
 8008eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008eb0:	1e13      	subs	r3, r2, #0
 8008eb2:	6822      	ldr	r2, [r4, #0]
 8008eb4:	bf18      	it	ne
 8008eb6:	2301      	movne	r3, #1
 8008eb8:	0692      	lsls	r2, r2, #26
 8008eba:	d42b      	bmi.n	8008f14 <_printf_common+0xb0>
 8008ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	47c0      	blx	r8
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d01e      	beq.n	8008f08 <_printf_common+0xa4>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	68e5      	ldr	r5, [r4, #12]
 8008ece:	6832      	ldr	r2, [r6, #0]
 8008ed0:	f003 0306 	and.w	r3, r3, #6
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	bf08      	it	eq
 8008ed8:	1aad      	subeq	r5, r5, r2
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	6922      	ldr	r2, [r4, #16]
 8008ede:	bf0c      	ite	eq
 8008ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ee4:	2500      	movne	r5, #0
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	bfc4      	itt	gt
 8008eea:	1a9b      	subgt	r3, r3, r2
 8008eec:	18ed      	addgt	r5, r5, r3
 8008eee:	2600      	movs	r6, #0
 8008ef0:	341a      	adds	r4, #26
 8008ef2:	42b5      	cmp	r5, r6
 8008ef4:	d11a      	bne.n	8008f2c <_printf_common+0xc8>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e008      	b.n	8008f0c <_printf_common+0xa8>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4652      	mov	r2, sl
 8008efe:	4649      	mov	r1, r9
 8008f00:	4638      	mov	r0, r7
 8008f02:	47c0      	blx	r8
 8008f04:	3001      	adds	r0, #1
 8008f06:	d103      	bne.n	8008f10 <_printf_common+0xac>
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f10:	3501      	adds	r5, #1
 8008f12:	e7c6      	b.n	8008ea2 <_printf_common+0x3e>
 8008f14:	18e1      	adds	r1, r4, r3
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	2030      	movs	r0, #48	; 0x30
 8008f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f1e:	4422      	add	r2, r4
 8008f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f28:	3302      	adds	r3, #2
 8008f2a:	e7c7      	b.n	8008ebc <_printf_common+0x58>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	4622      	mov	r2, r4
 8008f30:	4649      	mov	r1, r9
 8008f32:	4638      	mov	r0, r7
 8008f34:	47c0      	blx	r8
 8008f36:	3001      	adds	r0, #1
 8008f38:	d0e6      	beq.n	8008f08 <_printf_common+0xa4>
 8008f3a:	3601      	adds	r6, #1
 8008f3c:	e7d9      	b.n	8008ef2 <_printf_common+0x8e>
	...

08008f40 <_printf_i>:
 8008f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f44:	7e0f      	ldrb	r7, [r1, #24]
 8008f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f48:	2f78      	cmp	r7, #120	; 0x78
 8008f4a:	4691      	mov	r9, r2
 8008f4c:	4680      	mov	r8, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	469a      	mov	sl, r3
 8008f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f56:	d807      	bhi.n	8008f68 <_printf_i+0x28>
 8008f58:	2f62      	cmp	r7, #98	; 0x62
 8008f5a:	d80a      	bhi.n	8008f72 <_printf_i+0x32>
 8008f5c:	2f00      	cmp	r7, #0
 8008f5e:	f000 80d8 	beq.w	8009112 <_printf_i+0x1d2>
 8008f62:	2f58      	cmp	r7, #88	; 0x58
 8008f64:	f000 80a3 	beq.w	80090ae <_printf_i+0x16e>
 8008f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f70:	e03a      	b.n	8008fe8 <_printf_i+0xa8>
 8008f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f76:	2b15      	cmp	r3, #21
 8008f78:	d8f6      	bhi.n	8008f68 <_printf_i+0x28>
 8008f7a:	a101      	add	r1, pc, #4	; (adr r1, 8008f80 <_printf_i+0x40>)
 8008f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f80:	08008fd9 	.word	0x08008fd9
 8008f84:	08008fed 	.word	0x08008fed
 8008f88:	08008f69 	.word	0x08008f69
 8008f8c:	08008f69 	.word	0x08008f69
 8008f90:	08008f69 	.word	0x08008f69
 8008f94:	08008f69 	.word	0x08008f69
 8008f98:	08008fed 	.word	0x08008fed
 8008f9c:	08008f69 	.word	0x08008f69
 8008fa0:	08008f69 	.word	0x08008f69
 8008fa4:	08008f69 	.word	0x08008f69
 8008fa8:	08008f69 	.word	0x08008f69
 8008fac:	080090f9 	.word	0x080090f9
 8008fb0:	0800901d 	.word	0x0800901d
 8008fb4:	080090db 	.word	0x080090db
 8008fb8:	08008f69 	.word	0x08008f69
 8008fbc:	08008f69 	.word	0x08008f69
 8008fc0:	0800911b 	.word	0x0800911b
 8008fc4:	08008f69 	.word	0x08008f69
 8008fc8:	0800901d 	.word	0x0800901d
 8008fcc:	08008f69 	.word	0x08008f69
 8008fd0:	08008f69 	.word	0x08008f69
 8008fd4:	080090e3 	.word	0x080090e3
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	1d1a      	adds	r2, r3, #4
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	602a      	str	r2, [r5, #0]
 8008fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e0a3      	b.n	8009134 <_printf_i+0x1f4>
 8008fec:	6820      	ldr	r0, [r4, #0]
 8008fee:	6829      	ldr	r1, [r5, #0]
 8008ff0:	0606      	lsls	r6, r0, #24
 8008ff2:	f101 0304 	add.w	r3, r1, #4
 8008ff6:	d50a      	bpl.n	800900e <_printf_i+0xce>
 8008ff8:	680e      	ldr	r6, [r1, #0]
 8008ffa:	602b      	str	r3, [r5, #0]
 8008ffc:	2e00      	cmp	r6, #0
 8008ffe:	da03      	bge.n	8009008 <_printf_i+0xc8>
 8009000:	232d      	movs	r3, #45	; 0x2d
 8009002:	4276      	negs	r6, r6
 8009004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009008:	485e      	ldr	r0, [pc, #376]	; (8009184 <_printf_i+0x244>)
 800900a:	230a      	movs	r3, #10
 800900c:	e019      	b.n	8009042 <_printf_i+0x102>
 800900e:	680e      	ldr	r6, [r1, #0]
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009016:	bf18      	it	ne
 8009018:	b236      	sxthne	r6, r6
 800901a:	e7ef      	b.n	8008ffc <_printf_i+0xbc>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	6820      	ldr	r0, [r4, #0]
 8009020:	1d19      	adds	r1, r3, #4
 8009022:	6029      	str	r1, [r5, #0]
 8009024:	0601      	lsls	r1, r0, #24
 8009026:	d501      	bpl.n	800902c <_printf_i+0xec>
 8009028:	681e      	ldr	r6, [r3, #0]
 800902a:	e002      	b.n	8009032 <_printf_i+0xf2>
 800902c:	0646      	lsls	r6, r0, #25
 800902e:	d5fb      	bpl.n	8009028 <_printf_i+0xe8>
 8009030:	881e      	ldrh	r6, [r3, #0]
 8009032:	4854      	ldr	r0, [pc, #336]	; (8009184 <_printf_i+0x244>)
 8009034:	2f6f      	cmp	r7, #111	; 0x6f
 8009036:	bf0c      	ite	eq
 8009038:	2308      	moveq	r3, #8
 800903a:	230a      	movne	r3, #10
 800903c:	2100      	movs	r1, #0
 800903e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009042:	6865      	ldr	r5, [r4, #4]
 8009044:	60a5      	str	r5, [r4, #8]
 8009046:	2d00      	cmp	r5, #0
 8009048:	bfa2      	ittt	ge
 800904a:	6821      	ldrge	r1, [r4, #0]
 800904c:	f021 0104 	bicge.w	r1, r1, #4
 8009050:	6021      	strge	r1, [r4, #0]
 8009052:	b90e      	cbnz	r6, 8009058 <_printf_i+0x118>
 8009054:	2d00      	cmp	r5, #0
 8009056:	d04d      	beq.n	80090f4 <_printf_i+0x1b4>
 8009058:	4615      	mov	r5, r2
 800905a:	fbb6 f1f3 	udiv	r1, r6, r3
 800905e:	fb03 6711 	mls	r7, r3, r1, r6
 8009062:	5dc7      	ldrb	r7, [r0, r7]
 8009064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009068:	4637      	mov	r7, r6
 800906a:	42bb      	cmp	r3, r7
 800906c:	460e      	mov	r6, r1
 800906e:	d9f4      	bls.n	800905a <_printf_i+0x11a>
 8009070:	2b08      	cmp	r3, #8
 8009072:	d10b      	bne.n	800908c <_printf_i+0x14c>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	07de      	lsls	r6, r3, #31
 8009078:	d508      	bpl.n	800908c <_printf_i+0x14c>
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	6861      	ldr	r1, [r4, #4]
 800907e:	4299      	cmp	r1, r3
 8009080:	bfde      	ittt	le
 8009082:	2330      	movle	r3, #48	; 0x30
 8009084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800908c:	1b52      	subs	r2, r2, r5
 800908e:	6122      	str	r2, [r4, #16]
 8009090:	f8cd a000 	str.w	sl, [sp]
 8009094:	464b      	mov	r3, r9
 8009096:	aa03      	add	r2, sp, #12
 8009098:	4621      	mov	r1, r4
 800909a:	4640      	mov	r0, r8
 800909c:	f7ff fee2 	bl	8008e64 <_printf_common>
 80090a0:	3001      	adds	r0, #1
 80090a2:	d14c      	bne.n	800913e <_printf_i+0x1fe>
 80090a4:	f04f 30ff 	mov.w	r0, #4294967295
 80090a8:	b004      	add	sp, #16
 80090aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ae:	4835      	ldr	r0, [pc, #212]	; (8009184 <_printf_i+0x244>)
 80090b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090b4:	6829      	ldr	r1, [r5, #0]
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80090bc:	6029      	str	r1, [r5, #0]
 80090be:	061d      	lsls	r5, r3, #24
 80090c0:	d514      	bpl.n	80090ec <_printf_i+0x1ac>
 80090c2:	07df      	lsls	r7, r3, #31
 80090c4:	bf44      	itt	mi
 80090c6:	f043 0320 	orrmi.w	r3, r3, #32
 80090ca:	6023      	strmi	r3, [r4, #0]
 80090cc:	b91e      	cbnz	r6, 80090d6 <_printf_i+0x196>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	f023 0320 	bic.w	r3, r3, #32
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	2310      	movs	r3, #16
 80090d8:	e7b0      	b.n	800903c <_printf_i+0xfc>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	f043 0320 	orr.w	r3, r3, #32
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	2378      	movs	r3, #120	; 0x78
 80090e4:	4828      	ldr	r0, [pc, #160]	; (8009188 <_printf_i+0x248>)
 80090e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ea:	e7e3      	b.n	80090b4 <_printf_i+0x174>
 80090ec:	0659      	lsls	r1, r3, #25
 80090ee:	bf48      	it	mi
 80090f0:	b2b6      	uxthmi	r6, r6
 80090f2:	e7e6      	b.n	80090c2 <_printf_i+0x182>
 80090f4:	4615      	mov	r5, r2
 80090f6:	e7bb      	b.n	8009070 <_printf_i+0x130>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	6826      	ldr	r6, [r4, #0]
 80090fc:	6961      	ldr	r1, [r4, #20]
 80090fe:	1d18      	adds	r0, r3, #4
 8009100:	6028      	str	r0, [r5, #0]
 8009102:	0635      	lsls	r5, r6, #24
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	d501      	bpl.n	800910c <_printf_i+0x1cc>
 8009108:	6019      	str	r1, [r3, #0]
 800910a:	e002      	b.n	8009112 <_printf_i+0x1d2>
 800910c:	0670      	lsls	r0, r6, #25
 800910e:	d5fb      	bpl.n	8009108 <_printf_i+0x1c8>
 8009110:	8019      	strh	r1, [r3, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	4615      	mov	r5, r2
 8009118:	e7ba      	b.n	8009090 <_printf_i+0x150>
 800911a:	682b      	ldr	r3, [r5, #0]
 800911c:	1d1a      	adds	r2, r3, #4
 800911e:	602a      	str	r2, [r5, #0]
 8009120:	681d      	ldr	r5, [r3, #0]
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	2100      	movs	r1, #0
 8009126:	4628      	mov	r0, r5
 8009128:	f7f7 f85a 	bl	80001e0 <memchr>
 800912c:	b108      	cbz	r0, 8009132 <_printf_i+0x1f2>
 800912e:	1b40      	subs	r0, r0, r5
 8009130:	6060      	str	r0, [r4, #4]
 8009132:	6863      	ldr	r3, [r4, #4]
 8009134:	6123      	str	r3, [r4, #16]
 8009136:	2300      	movs	r3, #0
 8009138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800913c:	e7a8      	b.n	8009090 <_printf_i+0x150>
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	462a      	mov	r2, r5
 8009142:	4649      	mov	r1, r9
 8009144:	4640      	mov	r0, r8
 8009146:	47d0      	blx	sl
 8009148:	3001      	adds	r0, #1
 800914a:	d0ab      	beq.n	80090a4 <_printf_i+0x164>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	079b      	lsls	r3, r3, #30
 8009150:	d413      	bmi.n	800917a <_printf_i+0x23a>
 8009152:	68e0      	ldr	r0, [r4, #12]
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	4298      	cmp	r0, r3
 8009158:	bfb8      	it	lt
 800915a:	4618      	movlt	r0, r3
 800915c:	e7a4      	b.n	80090a8 <_printf_i+0x168>
 800915e:	2301      	movs	r3, #1
 8009160:	4632      	mov	r2, r6
 8009162:	4649      	mov	r1, r9
 8009164:	4640      	mov	r0, r8
 8009166:	47d0      	blx	sl
 8009168:	3001      	adds	r0, #1
 800916a:	d09b      	beq.n	80090a4 <_printf_i+0x164>
 800916c:	3501      	adds	r5, #1
 800916e:	68e3      	ldr	r3, [r4, #12]
 8009170:	9903      	ldr	r1, [sp, #12]
 8009172:	1a5b      	subs	r3, r3, r1
 8009174:	42ab      	cmp	r3, r5
 8009176:	dcf2      	bgt.n	800915e <_printf_i+0x21e>
 8009178:	e7eb      	b.n	8009152 <_printf_i+0x212>
 800917a:	2500      	movs	r5, #0
 800917c:	f104 0619 	add.w	r6, r4, #25
 8009180:	e7f5      	b.n	800916e <_printf_i+0x22e>
 8009182:	bf00      	nop
 8009184:	0800a021 	.word	0x0800a021
 8009188:	0800a032 	.word	0x0800a032

0800918c <_sbrk_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d06      	ldr	r5, [pc, #24]	; (80091a8 <_sbrk_r+0x1c>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	f7f7 ff88 	bl	80010ac <_sbrk>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_sbrk_r+0x1a>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_sbrk_r+0x1a>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	200137e8 	.word	0x200137e8

080091ac <__sread>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	460c      	mov	r4, r1
 80091b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b4:	f000 fab2 	bl	800971c <_read_r>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	bfab      	itete	ge
 80091bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091be:	89a3      	ldrhlt	r3, [r4, #12]
 80091c0:	181b      	addge	r3, r3, r0
 80091c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091c6:	bfac      	ite	ge
 80091c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80091ca:	81a3      	strhlt	r3, [r4, #12]
 80091cc:	bd10      	pop	{r4, pc}

080091ce <__swrite>:
 80091ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d2:	461f      	mov	r7, r3
 80091d4:	898b      	ldrh	r3, [r1, #12]
 80091d6:	05db      	lsls	r3, r3, #23
 80091d8:	4605      	mov	r5, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	4616      	mov	r6, r2
 80091de:	d505      	bpl.n	80091ec <__swrite+0x1e>
 80091e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e4:	2302      	movs	r3, #2
 80091e6:	2200      	movs	r2, #0
 80091e8:	f000 f9c8 	bl	800957c <_lseek_r>
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	4632      	mov	r2, r6
 80091fa:	463b      	mov	r3, r7
 80091fc:	4628      	mov	r0, r5
 80091fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	f000 b869 	b.w	80092d8 <_write_r>

08009206 <__sseek>:
 8009206:	b510      	push	{r4, lr}
 8009208:	460c      	mov	r4, r1
 800920a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920e:	f000 f9b5 	bl	800957c <_lseek_r>
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	bf15      	itete	ne
 8009218:	6560      	strne	r0, [r4, #84]	; 0x54
 800921a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800921e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009222:	81a3      	strheq	r3, [r4, #12]
 8009224:	bf18      	it	ne
 8009226:	81a3      	strhne	r3, [r4, #12]
 8009228:	bd10      	pop	{r4, pc}

0800922a <__sclose>:
 800922a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922e:	f000 b8d3 	b.w	80093d8 <_close_r>
	...

08009234 <__swbuf_r>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	460e      	mov	r6, r1
 8009238:	4614      	mov	r4, r2
 800923a:	4605      	mov	r5, r0
 800923c:	b118      	cbz	r0, 8009246 <__swbuf_r+0x12>
 800923e:	6983      	ldr	r3, [r0, #24]
 8009240:	b90b      	cbnz	r3, 8009246 <__swbuf_r+0x12>
 8009242:	f7ff fb81 	bl	8008948 <__sinit>
 8009246:	4b21      	ldr	r3, [pc, #132]	; (80092cc <__swbuf_r+0x98>)
 8009248:	429c      	cmp	r4, r3
 800924a:	d12b      	bne.n	80092a4 <__swbuf_r+0x70>
 800924c:	686c      	ldr	r4, [r5, #4]
 800924e:	69a3      	ldr	r3, [r4, #24]
 8009250:	60a3      	str	r3, [r4, #8]
 8009252:	89a3      	ldrh	r3, [r4, #12]
 8009254:	071a      	lsls	r2, r3, #28
 8009256:	d52f      	bpl.n	80092b8 <__swbuf_r+0x84>
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	b36b      	cbz	r3, 80092b8 <__swbuf_r+0x84>
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	6820      	ldr	r0, [r4, #0]
 8009260:	1ac0      	subs	r0, r0, r3
 8009262:	6963      	ldr	r3, [r4, #20]
 8009264:	b2f6      	uxtb	r6, r6
 8009266:	4283      	cmp	r3, r0
 8009268:	4637      	mov	r7, r6
 800926a:	dc04      	bgt.n	8009276 <__swbuf_r+0x42>
 800926c:	4621      	mov	r1, r4
 800926e:	4628      	mov	r0, r5
 8009270:	f000 f948 	bl	8009504 <_fflush_r>
 8009274:	bb30      	cbnz	r0, 80092c4 <__swbuf_r+0x90>
 8009276:	68a3      	ldr	r3, [r4, #8]
 8009278:	3b01      	subs	r3, #1
 800927a:	60a3      	str	r3, [r4, #8]
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	6022      	str	r2, [r4, #0]
 8009282:	701e      	strb	r6, [r3, #0]
 8009284:	6963      	ldr	r3, [r4, #20]
 8009286:	3001      	adds	r0, #1
 8009288:	4283      	cmp	r3, r0
 800928a:	d004      	beq.n	8009296 <__swbuf_r+0x62>
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	07db      	lsls	r3, r3, #31
 8009290:	d506      	bpl.n	80092a0 <__swbuf_r+0x6c>
 8009292:	2e0a      	cmp	r6, #10
 8009294:	d104      	bne.n	80092a0 <__swbuf_r+0x6c>
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f000 f933 	bl	8009504 <_fflush_r>
 800929e:	b988      	cbnz	r0, 80092c4 <__swbuf_r+0x90>
 80092a0:	4638      	mov	r0, r7
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a4:	4b0a      	ldr	r3, [pc, #40]	; (80092d0 <__swbuf_r+0x9c>)
 80092a6:	429c      	cmp	r4, r3
 80092a8:	d101      	bne.n	80092ae <__swbuf_r+0x7a>
 80092aa:	68ac      	ldr	r4, [r5, #8]
 80092ac:	e7cf      	b.n	800924e <__swbuf_r+0x1a>
 80092ae:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <__swbuf_r+0xa0>)
 80092b0:	429c      	cmp	r4, r3
 80092b2:	bf08      	it	eq
 80092b4:	68ec      	ldreq	r4, [r5, #12]
 80092b6:	e7ca      	b.n	800924e <__swbuf_r+0x1a>
 80092b8:	4621      	mov	r1, r4
 80092ba:	4628      	mov	r0, r5
 80092bc:	f000 f81e 	bl	80092fc <__swsetup_r>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d0cb      	beq.n	800925c <__swbuf_r+0x28>
 80092c4:	f04f 37ff 	mov.w	r7, #4294967295
 80092c8:	e7ea      	b.n	80092a0 <__swbuf_r+0x6c>
 80092ca:	bf00      	nop
 80092cc:	08009fd0 	.word	0x08009fd0
 80092d0:	08009ff0 	.word	0x08009ff0
 80092d4:	08009fb0 	.word	0x08009fb0

080092d8 <_write_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_write_r+0x20>)
 80092dc:	4604      	mov	r4, r0
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f7f7 fe8f 	bl	800100a <_write>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_write_r+0x1e>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_write_r+0x1e>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	200137e8 	.word	0x200137e8

080092fc <__swsetup_r>:
 80092fc:	4b32      	ldr	r3, [pc, #200]	; (80093c8 <__swsetup_r+0xcc>)
 80092fe:	b570      	push	{r4, r5, r6, lr}
 8009300:	681d      	ldr	r5, [r3, #0]
 8009302:	4606      	mov	r6, r0
 8009304:	460c      	mov	r4, r1
 8009306:	b125      	cbz	r5, 8009312 <__swsetup_r+0x16>
 8009308:	69ab      	ldr	r3, [r5, #24]
 800930a:	b913      	cbnz	r3, 8009312 <__swsetup_r+0x16>
 800930c:	4628      	mov	r0, r5
 800930e:	f7ff fb1b 	bl	8008948 <__sinit>
 8009312:	4b2e      	ldr	r3, [pc, #184]	; (80093cc <__swsetup_r+0xd0>)
 8009314:	429c      	cmp	r4, r3
 8009316:	d10f      	bne.n	8009338 <__swsetup_r+0x3c>
 8009318:	686c      	ldr	r4, [r5, #4]
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009320:	0719      	lsls	r1, r3, #28
 8009322:	d42c      	bmi.n	800937e <__swsetup_r+0x82>
 8009324:	06dd      	lsls	r5, r3, #27
 8009326:	d411      	bmi.n	800934c <__swsetup_r+0x50>
 8009328:	2309      	movs	r3, #9
 800932a:	6033      	str	r3, [r6, #0]
 800932c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009330:	81a3      	strh	r3, [r4, #12]
 8009332:	f04f 30ff 	mov.w	r0, #4294967295
 8009336:	e03e      	b.n	80093b6 <__swsetup_r+0xba>
 8009338:	4b25      	ldr	r3, [pc, #148]	; (80093d0 <__swsetup_r+0xd4>)
 800933a:	429c      	cmp	r4, r3
 800933c:	d101      	bne.n	8009342 <__swsetup_r+0x46>
 800933e:	68ac      	ldr	r4, [r5, #8]
 8009340:	e7eb      	b.n	800931a <__swsetup_r+0x1e>
 8009342:	4b24      	ldr	r3, [pc, #144]	; (80093d4 <__swsetup_r+0xd8>)
 8009344:	429c      	cmp	r4, r3
 8009346:	bf08      	it	eq
 8009348:	68ec      	ldreq	r4, [r5, #12]
 800934a:	e7e6      	b.n	800931a <__swsetup_r+0x1e>
 800934c:	0758      	lsls	r0, r3, #29
 800934e:	d512      	bpl.n	8009376 <__swsetup_r+0x7a>
 8009350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009352:	b141      	cbz	r1, 8009366 <__swsetup_r+0x6a>
 8009354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009358:	4299      	cmp	r1, r3
 800935a:	d002      	beq.n	8009362 <__swsetup_r+0x66>
 800935c:	4630      	mov	r0, r6
 800935e:	f000 f991 	bl	8009684 <_free_r>
 8009362:	2300      	movs	r3, #0
 8009364:	6363      	str	r3, [r4, #52]	; 0x34
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800936c:	81a3      	strh	r3, [r4, #12]
 800936e:	2300      	movs	r3, #0
 8009370:	6063      	str	r3, [r4, #4]
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f043 0308 	orr.w	r3, r3, #8
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	b94b      	cbnz	r3, 8009396 <__swsetup_r+0x9a>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800938c:	d003      	beq.n	8009396 <__swsetup_r+0x9a>
 800938e:	4621      	mov	r1, r4
 8009390:	4630      	mov	r0, r6
 8009392:	f000 f92b 	bl	80095ec <__smakebuf_r>
 8009396:	89a0      	ldrh	r0, [r4, #12]
 8009398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800939c:	f010 0301 	ands.w	r3, r0, #1
 80093a0:	d00a      	beq.n	80093b8 <__swsetup_r+0xbc>
 80093a2:	2300      	movs	r3, #0
 80093a4:	60a3      	str	r3, [r4, #8]
 80093a6:	6963      	ldr	r3, [r4, #20]
 80093a8:	425b      	negs	r3, r3
 80093aa:	61a3      	str	r3, [r4, #24]
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	b943      	cbnz	r3, 80093c2 <__swsetup_r+0xc6>
 80093b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093b4:	d1ba      	bne.n	800932c <__swsetup_r+0x30>
 80093b6:	bd70      	pop	{r4, r5, r6, pc}
 80093b8:	0781      	lsls	r1, r0, #30
 80093ba:	bf58      	it	pl
 80093bc:	6963      	ldrpl	r3, [r4, #20]
 80093be:	60a3      	str	r3, [r4, #8]
 80093c0:	e7f4      	b.n	80093ac <__swsetup_r+0xb0>
 80093c2:	2000      	movs	r0, #0
 80093c4:	e7f7      	b.n	80093b6 <__swsetup_r+0xba>
 80093c6:	bf00      	nop
 80093c8:	20000024 	.word	0x20000024
 80093cc:	08009fd0 	.word	0x08009fd0
 80093d0:	08009ff0 	.word	0x08009ff0
 80093d4:	08009fb0 	.word	0x08009fb0

080093d8 <_close_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d06      	ldr	r5, [pc, #24]	; (80093f4 <_close_r+0x1c>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7f7 fe2d 	bl	8001042 <_close>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d102      	bne.n	80093f2 <_close_r+0x1a>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	b103      	cbz	r3, 80093f2 <_close_r+0x1a>
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	200137e8 	.word	0x200137e8

080093f8 <__sflush_r>:
 80093f8:	898a      	ldrh	r2, [r1, #12]
 80093fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fe:	4605      	mov	r5, r0
 8009400:	0710      	lsls	r0, r2, #28
 8009402:	460c      	mov	r4, r1
 8009404:	d458      	bmi.n	80094b8 <__sflush_r+0xc0>
 8009406:	684b      	ldr	r3, [r1, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	dc05      	bgt.n	8009418 <__sflush_r+0x20>
 800940c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800940e:	2b00      	cmp	r3, #0
 8009410:	dc02      	bgt.n	8009418 <__sflush_r+0x20>
 8009412:	2000      	movs	r0, #0
 8009414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800941a:	2e00      	cmp	r6, #0
 800941c:	d0f9      	beq.n	8009412 <__sflush_r+0x1a>
 800941e:	2300      	movs	r3, #0
 8009420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009424:	682f      	ldr	r7, [r5, #0]
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	d032      	beq.n	8009490 <__sflush_r+0x98>
 800942a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	075a      	lsls	r2, r3, #29
 8009430:	d505      	bpl.n	800943e <__sflush_r+0x46>
 8009432:	6863      	ldr	r3, [r4, #4]
 8009434:	1ac0      	subs	r0, r0, r3
 8009436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009438:	b10b      	cbz	r3, 800943e <__sflush_r+0x46>
 800943a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800943c:	1ac0      	subs	r0, r0, r3
 800943e:	2300      	movs	r3, #0
 8009440:	4602      	mov	r2, r0
 8009442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009444:	6a21      	ldr	r1, [r4, #32]
 8009446:	4628      	mov	r0, r5
 8009448:	47b0      	blx	r6
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	d106      	bne.n	800945e <__sflush_r+0x66>
 8009450:	6829      	ldr	r1, [r5, #0]
 8009452:	291d      	cmp	r1, #29
 8009454:	d82c      	bhi.n	80094b0 <__sflush_r+0xb8>
 8009456:	4a2a      	ldr	r2, [pc, #168]	; (8009500 <__sflush_r+0x108>)
 8009458:	40ca      	lsrs	r2, r1
 800945a:	07d6      	lsls	r6, r2, #31
 800945c:	d528      	bpl.n	80094b0 <__sflush_r+0xb8>
 800945e:	2200      	movs	r2, #0
 8009460:	6062      	str	r2, [r4, #4]
 8009462:	04d9      	lsls	r1, r3, #19
 8009464:	6922      	ldr	r2, [r4, #16]
 8009466:	6022      	str	r2, [r4, #0]
 8009468:	d504      	bpl.n	8009474 <__sflush_r+0x7c>
 800946a:	1c42      	adds	r2, r0, #1
 800946c:	d101      	bne.n	8009472 <__sflush_r+0x7a>
 800946e:	682b      	ldr	r3, [r5, #0]
 8009470:	b903      	cbnz	r3, 8009474 <__sflush_r+0x7c>
 8009472:	6560      	str	r0, [r4, #84]	; 0x54
 8009474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009476:	602f      	str	r7, [r5, #0]
 8009478:	2900      	cmp	r1, #0
 800947a:	d0ca      	beq.n	8009412 <__sflush_r+0x1a>
 800947c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009480:	4299      	cmp	r1, r3
 8009482:	d002      	beq.n	800948a <__sflush_r+0x92>
 8009484:	4628      	mov	r0, r5
 8009486:	f000 f8fd 	bl	8009684 <_free_r>
 800948a:	2000      	movs	r0, #0
 800948c:	6360      	str	r0, [r4, #52]	; 0x34
 800948e:	e7c1      	b.n	8009414 <__sflush_r+0x1c>
 8009490:	6a21      	ldr	r1, [r4, #32]
 8009492:	2301      	movs	r3, #1
 8009494:	4628      	mov	r0, r5
 8009496:	47b0      	blx	r6
 8009498:	1c41      	adds	r1, r0, #1
 800949a:	d1c7      	bne.n	800942c <__sflush_r+0x34>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0c4      	beq.n	800942c <__sflush_r+0x34>
 80094a2:	2b1d      	cmp	r3, #29
 80094a4:	d001      	beq.n	80094aa <__sflush_r+0xb2>
 80094a6:	2b16      	cmp	r3, #22
 80094a8:	d101      	bne.n	80094ae <__sflush_r+0xb6>
 80094aa:	602f      	str	r7, [r5, #0]
 80094ac:	e7b1      	b.n	8009412 <__sflush_r+0x1a>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	e7ad      	b.n	8009414 <__sflush_r+0x1c>
 80094b8:	690f      	ldr	r7, [r1, #16]
 80094ba:	2f00      	cmp	r7, #0
 80094bc:	d0a9      	beq.n	8009412 <__sflush_r+0x1a>
 80094be:	0793      	lsls	r3, r2, #30
 80094c0:	680e      	ldr	r6, [r1, #0]
 80094c2:	bf08      	it	eq
 80094c4:	694b      	ldreq	r3, [r1, #20]
 80094c6:	600f      	str	r7, [r1, #0]
 80094c8:	bf18      	it	ne
 80094ca:	2300      	movne	r3, #0
 80094cc:	eba6 0807 	sub.w	r8, r6, r7
 80094d0:	608b      	str	r3, [r1, #8]
 80094d2:	f1b8 0f00 	cmp.w	r8, #0
 80094d6:	dd9c      	ble.n	8009412 <__sflush_r+0x1a>
 80094d8:	6a21      	ldr	r1, [r4, #32]
 80094da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094dc:	4643      	mov	r3, r8
 80094de:	463a      	mov	r2, r7
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b0      	blx	r6
 80094e4:	2800      	cmp	r0, #0
 80094e6:	dc06      	bgt.n	80094f6 <__sflush_r+0xfe>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295
 80094f4:	e78e      	b.n	8009414 <__sflush_r+0x1c>
 80094f6:	4407      	add	r7, r0
 80094f8:	eba8 0800 	sub.w	r8, r8, r0
 80094fc:	e7e9      	b.n	80094d2 <__sflush_r+0xda>
 80094fe:	bf00      	nop
 8009500:	20400001 	.word	0x20400001

08009504 <_fflush_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	690b      	ldr	r3, [r1, #16]
 8009508:	4605      	mov	r5, r0
 800950a:	460c      	mov	r4, r1
 800950c:	b913      	cbnz	r3, 8009514 <_fflush_r+0x10>
 800950e:	2500      	movs	r5, #0
 8009510:	4628      	mov	r0, r5
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	b118      	cbz	r0, 800951e <_fflush_r+0x1a>
 8009516:	6983      	ldr	r3, [r0, #24]
 8009518:	b90b      	cbnz	r3, 800951e <_fflush_r+0x1a>
 800951a:	f7ff fa15 	bl	8008948 <__sinit>
 800951e:	4b14      	ldr	r3, [pc, #80]	; (8009570 <_fflush_r+0x6c>)
 8009520:	429c      	cmp	r4, r3
 8009522:	d11b      	bne.n	800955c <_fflush_r+0x58>
 8009524:	686c      	ldr	r4, [r5, #4]
 8009526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0ef      	beq.n	800950e <_fflush_r+0xa>
 800952e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009530:	07d0      	lsls	r0, r2, #31
 8009532:	d404      	bmi.n	800953e <_fflush_r+0x3a>
 8009534:	0599      	lsls	r1, r3, #22
 8009536:	d402      	bmi.n	800953e <_fflush_r+0x3a>
 8009538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800953a:	f7ff faa3 	bl	8008a84 <__retarget_lock_acquire_recursive>
 800953e:	4628      	mov	r0, r5
 8009540:	4621      	mov	r1, r4
 8009542:	f7ff ff59 	bl	80093f8 <__sflush_r>
 8009546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009548:	07da      	lsls	r2, r3, #31
 800954a:	4605      	mov	r5, r0
 800954c:	d4e0      	bmi.n	8009510 <_fflush_r+0xc>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	059b      	lsls	r3, r3, #22
 8009552:	d4dd      	bmi.n	8009510 <_fflush_r+0xc>
 8009554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009556:	f7ff fa96 	bl	8008a86 <__retarget_lock_release_recursive>
 800955a:	e7d9      	b.n	8009510 <_fflush_r+0xc>
 800955c:	4b05      	ldr	r3, [pc, #20]	; (8009574 <_fflush_r+0x70>)
 800955e:	429c      	cmp	r4, r3
 8009560:	d101      	bne.n	8009566 <_fflush_r+0x62>
 8009562:	68ac      	ldr	r4, [r5, #8]
 8009564:	e7df      	b.n	8009526 <_fflush_r+0x22>
 8009566:	4b04      	ldr	r3, [pc, #16]	; (8009578 <_fflush_r+0x74>)
 8009568:	429c      	cmp	r4, r3
 800956a:	bf08      	it	eq
 800956c:	68ec      	ldreq	r4, [r5, #12]
 800956e:	e7da      	b.n	8009526 <_fflush_r+0x22>
 8009570:	08009fd0 	.word	0x08009fd0
 8009574:	08009ff0 	.word	0x08009ff0
 8009578:	08009fb0 	.word	0x08009fb0

0800957c <_lseek_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	; (800959c <_lseek_r+0x20>)
 8009580:	4604      	mov	r4, r0
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	2200      	movs	r2, #0
 8009588:	602a      	str	r2, [r5, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f7f7 fd80 	bl	8001090 <_lseek>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_lseek_r+0x1e>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_lseek_r+0x1e>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	200137e8 	.word	0x200137e8

080095a0 <__swhatbuf_r>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	460e      	mov	r6, r1
 80095a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a8:	2900      	cmp	r1, #0
 80095aa:	b096      	sub	sp, #88	; 0x58
 80095ac:	4614      	mov	r4, r2
 80095ae:	461d      	mov	r5, r3
 80095b0:	da08      	bge.n	80095c4 <__swhatbuf_r+0x24>
 80095b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	061a      	lsls	r2, r3, #24
 80095bc:	d410      	bmi.n	80095e0 <__swhatbuf_r+0x40>
 80095be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095c2:	e00e      	b.n	80095e2 <__swhatbuf_r+0x42>
 80095c4:	466a      	mov	r2, sp
 80095c6:	f000 f8bb 	bl	8009740 <_fstat_r>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	dbf1      	blt.n	80095b2 <__swhatbuf_r+0x12>
 80095ce:	9a01      	ldr	r2, [sp, #4]
 80095d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095d8:	425a      	negs	r2, r3
 80095da:	415a      	adcs	r2, r3
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	e7ee      	b.n	80095be <__swhatbuf_r+0x1e>
 80095e0:	2340      	movs	r3, #64	; 0x40
 80095e2:	2000      	movs	r0, #0
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	b016      	add	sp, #88	; 0x58
 80095e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080095ec <__smakebuf_r>:
 80095ec:	898b      	ldrh	r3, [r1, #12]
 80095ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095f0:	079d      	lsls	r5, r3, #30
 80095f2:	4606      	mov	r6, r0
 80095f4:	460c      	mov	r4, r1
 80095f6:	d507      	bpl.n	8009608 <__smakebuf_r+0x1c>
 80095f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	6123      	str	r3, [r4, #16]
 8009600:	2301      	movs	r3, #1
 8009602:	6163      	str	r3, [r4, #20]
 8009604:	b002      	add	sp, #8
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	ab01      	add	r3, sp, #4
 800960a:	466a      	mov	r2, sp
 800960c:	f7ff ffc8 	bl	80095a0 <__swhatbuf_r>
 8009610:	9900      	ldr	r1, [sp, #0]
 8009612:	4605      	mov	r5, r0
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff fa57 	bl	8008ac8 <_malloc_r>
 800961a:	b948      	cbnz	r0, 8009630 <__smakebuf_r+0x44>
 800961c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009620:	059a      	lsls	r2, r3, #22
 8009622:	d4ef      	bmi.n	8009604 <__smakebuf_r+0x18>
 8009624:	f023 0303 	bic.w	r3, r3, #3
 8009628:	f043 0302 	orr.w	r3, r3, #2
 800962c:	81a3      	strh	r3, [r4, #12]
 800962e:	e7e3      	b.n	80095f8 <__smakebuf_r+0xc>
 8009630:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <__smakebuf_r+0x7c>)
 8009632:	62b3      	str	r3, [r6, #40]	; 0x28
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	6020      	str	r0, [r4, #0]
 8009638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	9b00      	ldr	r3, [sp, #0]
 8009640:	6163      	str	r3, [r4, #20]
 8009642:	9b01      	ldr	r3, [sp, #4]
 8009644:	6120      	str	r0, [r4, #16]
 8009646:	b15b      	cbz	r3, 8009660 <__smakebuf_r+0x74>
 8009648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800964c:	4630      	mov	r0, r6
 800964e:	f000 f889 	bl	8009764 <_isatty_r>
 8009652:	b128      	cbz	r0, 8009660 <__smakebuf_r+0x74>
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	f023 0303 	bic.w	r3, r3, #3
 800965a:	f043 0301 	orr.w	r3, r3, #1
 800965e:	81a3      	strh	r3, [r4, #12]
 8009660:	89a0      	ldrh	r0, [r4, #12]
 8009662:	4305      	orrs	r5, r0
 8009664:	81a5      	strh	r5, [r4, #12]
 8009666:	e7cd      	b.n	8009604 <__smakebuf_r+0x18>
 8009668:	080088e1 	.word	0x080088e1

0800966c <__malloc_lock>:
 800966c:	4801      	ldr	r0, [pc, #4]	; (8009674 <__malloc_lock+0x8>)
 800966e:	f7ff ba09 	b.w	8008a84 <__retarget_lock_acquire_recursive>
 8009672:	bf00      	nop
 8009674:	200137dc 	.word	0x200137dc

08009678 <__malloc_unlock>:
 8009678:	4801      	ldr	r0, [pc, #4]	; (8009680 <__malloc_unlock+0x8>)
 800967a:	f7ff ba04 	b.w	8008a86 <__retarget_lock_release_recursive>
 800967e:	bf00      	nop
 8009680:	200137dc 	.word	0x200137dc

08009684 <_free_r>:
 8009684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009686:	2900      	cmp	r1, #0
 8009688:	d044      	beq.n	8009714 <_free_r+0x90>
 800968a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800968e:	9001      	str	r0, [sp, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f1a1 0404 	sub.w	r4, r1, #4
 8009696:	bfb8      	it	lt
 8009698:	18e4      	addlt	r4, r4, r3
 800969a:	f7ff ffe7 	bl	800966c <__malloc_lock>
 800969e:	4a1e      	ldr	r2, [pc, #120]	; (8009718 <_free_r+0x94>)
 80096a0:	9801      	ldr	r0, [sp, #4]
 80096a2:	6813      	ldr	r3, [r2, #0]
 80096a4:	b933      	cbnz	r3, 80096b4 <_free_r+0x30>
 80096a6:	6063      	str	r3, [r4, #4]
 80096a8:	6014      	str	r4, [r2, #0]
 80096aa:	b003      	add	sp, #12
 80096ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096b0:	f7ff bfe2 	b.w	8009678 <__malloc_unlock>
 80096b4:	42a3      	cmp	r3, r4
 80096b6:	d908      	bls.n	80096ca <_free_r+0x46>
 80096b8:	6825      	ldr	r5, [r4, #0]
 80096ba:	1961      	adds	r1, r4, r5
 80096bc:	428b      	cmp	r3, r1
 80096be:	bf01      	itttt	eq
 80096c0:	6819      	ldreq	r1, [r3, #0]
 80096c2:	685b      	ldreq	r3, [r3, #4]
 80096c4:	1949      	addeq	r1, r1, r5
 80096c6:	6021      	streq	r1, [r4, #0]
 80096c8:	e7ed      	b.n	80096a6 <_free_r+0x22>
 80096ca:	461a      	mov	r2, r3
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	b10b      	cbz	r3, 80096d4 <_free_r+0x50>
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	d9fa      	bls.n	80096ca <_free_r+0x46>
 80096d4:	6811      	ldr	r1, [r2, #0]
 80096d6:	1855      	adds	r5, r2, r1
 80096d8:	42a5      	cmp	r5, r4
 80096da:	d10b      	bne.n	80096f4 <_free_r+0x70>
 80096dc:	6824      	ldr	r4, [r4, #0]
 80096de:	4421      	add	r1, r4
 80096e0:	1854      	adds	r4, r2, r1
 80096e2:	42a3      	cmp	r3, r4
 80096e4:	6011      	str	r1, [r2, #0]
 80096e6:	d1e0      	bne.n	80096aa <_free_r+0x26>
 80096e8:	681c      	ldr	r4, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	6053      	str	r3, [r2, #4]
 80096ee:	4421      	add	r1, r4
 80096f0:	6011      	str	r1, [r2, #0]
 80096f2:	e7da      	b.n	80096aa <_free_r+0x26>
 80096f4:	d902      	bls.n	80096fc <_free_r+0x78>
 80096f6:	230c      	movs	r3, #12
 80096f8:	6003      	str	r3, [r0, #0]
 80096fa:	e7d6      	b.n	80096aa <_free_r+0x26>
 80096fc:	6825      	ldr	r5, [r4, #0]
 80096fe:	1961      	adds	r1, r4, r5
 8009700:	428b      	cmp	r3, r1
 8009702:	bf04      	itt	eq
 8009704:	6819      	ldreq	r1, [r3, #0]
 8009706:	685b      	ldreq	r3, [r3, #4]
 8009708:	6063      	str	r3, [r4, #4]
 800970a:	bf04      	itt	eq
 800970c:	1949      	addeq	r1, r1, r5
 800970e:	6021      	streq	r1, [r4, #0]
 8009710:	6054      	str	r4, [r2, #4]
 8009712:	e7ca      	b.n	80096aa <_free_r+0x26>
 8009714:	b003      	add	sp, #12
 8009716:	bd30      	pop	{r4, r5, pc}
 8009718:	200137e0 	.word	0x200137e0

0800971c <_read_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	4d07      	ldr	r5, [pc, #28]	; (800973c <_read_r+0x20>)
 8009720:	4604      	mov	r4, r0
 8009722:	4608      	mov	r0, r1
 8009724:	4611      	mov	r1, r2
 8009726:	2200      	movs	r2, #0
 8009728:	602a      	str	r2, [r5, #0]
 800972a:	461a      	mov	r2, r3
 800972c:	f7f7 fc50 	bl	8000fd0 <_read>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_read_r+0x1e>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_read_r+0x1e>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	200137e8 	.word	0x200137e8

08009740 <_fstat_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d07      	ldr	r5, [pc, #28]	; (8009760 <_fstat_r+0x20>)
 8009744:	2300      	movs	r3, #0
 8009746:	4604      	mov	r4, r0
 8009748:	4608      	mov	r0, r1
 800974a:	4611      	mov	r1, r2
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	f7f7 fc84 	bl	800105a <_fstat>
 8009752:	1c43      	adds	r3, r0, #1
 8009754:	d102      	bne.n	800975c <_fstat_r+0x1c>
 8009756:	682b      	ldr	r3, [r5, #0]
 8009758:	b103      	cbz	r3, 800975c <_fstat_r+0x1c>
 800975a:	6023      	str	r3, [r4, #0]
 800975c:	bd38      	pop	{r3, r4, r5, pc}
 800975e:	bf00      	nop
 8009760:	200137e8 	.word	0x200137e8

08009764 <_isatty_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d06      	ldr	r5, [pc, #24]	; (8009780 <_isatty_r+0x1c>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	f7f7 fc83 	bl	800107a <_isatty>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_isatty_r+0x1a>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_isatty_r+0x1a>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	200137e8 	.word	0x200137e8

08009784 <_init>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr

08009790 <_fini>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr
