
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d48  08005d48  00021e30  2**0
                  CONTENTS
  4 .ARM          00000008  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d50  08005d50  00021e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e30  20000000  08005d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013250  20001e30  08007b88  00021e30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015080  08007b88  00025080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021e30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e341  00000000  00000000  00021e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002711  00000000  00000000  000301a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  000328b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  000335e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232b3  00000000  00000000  000341d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001129a  00000000  00000000  00057483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cabda  00000000  00000000  0006871d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001332f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  00133348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001e30 	.word	0x20001e30
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a10 	.word	0x08005a10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001e34 	.word	0x20001e34
 80001c4:	08005a10 	.word	0x08005a10

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_d2f>:
 8000554:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000558:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800055c:	bf24      	itt	cs
 800055e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000562:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000566:	d90d      	bls.n	8000584 <__aeabi_d2f+0x30>
 8000568:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800056c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000570:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000574:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000578:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800057c:	bf08      	it	eq
 800057e:	f020 0001 	biceq.w	r0, r0, #1
 8000582:	4770      	bx	lr
 8000584:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000588:	d121      	bne.n	80005ce <__aeabi_d2f+0x7a>
 800058a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058e:	bfbc      	itt	lt
 8000590:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000594:	4770      	bxlt	lr
 8000596:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059e:	f1c2 0218 	rsb	r2, r2, #24
 80005a2:	f1c2 0c20 	rsb	ip, r2, #32
 80005a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	bf18      	it	ne
 80005b0:	f040 0001 	orrne.w	r0, r0, #1
 80005b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005c0:	ea40 000c 	orr.w	r0, r0, ip
 80005c4:	fa23 f302 	lsr.w	r3, r3, r2
 80005c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005cc:	e7cc      	b.n	8000568 <__aeabi_d2f+0x14>
 80005ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005d2:	d107      	bne.n	80005e4 <__aeabi_d2f+0x90>
 80005d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d8:	bf1e      	ittt	ne
 80005da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005e2:	4770      	bxne	lr
 80005e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <__aeabi_uldivmod>:
 80005f4:	b953      	cbnz	r3, 800060c <__aeabi_uldivmod+0x18>
 80005f6:	b94a      	cbnz	r2, 800060c <__aeabi_uldivmod+0x18>
 80005f8:	2900      	cmp	r1, #0
 80005fa:	bf08      	it	eq
 80005fc:	2800      	cmpeq	r0, #0
 80005fe:	bf1c      	itt	ne
 8000600:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000604:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000608:	f000 b974 	b.w	80008f4 <__aeabi_idiv0>
 800060c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000610:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000614:	f000 f806 	bl	8000624 <__udivmoddi4>
 8000618:	f8dd e004 	ldr.w	lr, [sp, #4]
 800061c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr

08000624 <__udivmoddi4>:
 8000624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000628:	9d08      	ldr	r5, [sp, #32]
 800062a:	4604      	mov	r4, r0
 800062c:	468e      	mov	lr, r1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d14d      	bne.n	80006ce <__udivmoddi4+0xaa>
 8000632:	428a      	cmp	r2, r1
 8000634:	4694      	mov	ip, r2
 8000636:	d969      	bls.n	800070c <__udivmoddi4+0xe8>
 8000638:	fab2 f282 	clz	r2, r2
 800063c:	b152      	cbz	r2, 8000654 <__udivmoddi4+0x30>
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	f1c2 0120 	rsb	r1, r2, #32
 8000646:	fa20 f101 	lsr.w	r1, r0, r1
 800064a:	fa0c fc02 	lsl.w	ip, ip, r2
 800064e:	ea41 0e03 	orr.w	lr, r1, r3
 8000652:	4094      	lsls	r4, r2
 8000654:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000658:	0c21      	lsrs	r1, r4, #16
 800065a:	fbbe f6f8 	udiv	r6, lr, r8
 800065e:	fa1f f78c 	uxth.w	r7, ip
 8000662:	fb08 e316 	mls	r3, r8, r6, lr
 8000666:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066a:	fb06 f107 	mul.w	r1, r6, r7
 800066e:	4299      	cmp	r1, r3
 8000670:	d90a      	bls.n	8000688 <__udivmoddi4+0x64>
 8000672:	eb1c 0303 	adds.w	r3, ip, r3
 8000676:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800067a:	f080 811f 	bcs.w	80008bc <__udivmoddi4+0x298>
 800067e:	4299      	cmp	r1, r3
 8000680:	f240 811c 	bls.w	80008bc <__udivmoddi4+0x298>
 8000684:	3e02      	subs	r6, #2
 8000686:	4463      	add	r3, ip
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	b2a4      	uxth	r4, r4
 800068c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000690:	fb08 3310 	mls	r3, r8, r0, r3
 8000694:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000698:	fb00 f707 	mul.w	r7, r0, r7
 800069c:	42a7      	cmp	r7, r4
 800069e:	d90a      	bls.n	80006b6 <__udivmoddi4+0x92>
 80006a0:	eb1c 0404 	adds.w	r4, ip, r4
 80006a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006a8:	f080 810a 	bcs.w	80008c0 <__udivmoddi4+0x29c>
 80006ac:	42a7      	cmp	r7, r4
 80006ae:	f240 8107 	bls.w	80008c0 <__udivmoddi4+0x29c>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ba:	1be4      	subs	r4, r4, r7
 80006bc:	2600      	movs	r6, #0
 80006be:	b11d      	cbz	r5, 80006c8 <__udivmoddi4+0xa4>
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	2300      	movs	r3, #0
 80006c4:	e9c5 4300 	strd	r4, r3, [r5]
 80006c8:	4631      	mov	r1, r6
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d909      	bls.n	80006e6 <__udivmoddi4+0xc2>
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	f000 80ef 	beq.w	80008b6 <__udivmoddi4+0x292>
 80006d8:	2600      	movs	r6, #0
 80006da:	e9c5 0100 	strd	r0, r1, [r5]
 80006de:	4630      	mov	r0, r6
 80006e0:	4631      	mov	r1, r6
 80006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e6:	fab3 f683 	clz	r6, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d14a      	bne.n	8000784 <__udivmoddi4+0x160>
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d302      	bcc.n	80006f8 <__udivmoddi4+0xd4>
 80006f2:	4282      	cmp	r2, r0
 80006f4:	f200 80f9 	bhi.w	80008ea <__udivmoddi4+0x2c6>
 80006f8:	1a84      	subs	r4, r0, r2
 80006fa:	eb61 0303 	sbc.w	r3, r1, r3
 80006fe:	2001      	movs	r0, #1
 8000700:	469e      	mov	lr, r3
 8000702:	2d00      	cmp	r5, #0
 8000704:	d0e0      	beq.n	80006c8 <__udivmoddi4+0xa4>
 8000706:	e9c5 4e00 	strd	r4, lr, [r5]
 800070a:	e7dd      	b.n	80006c8 <__udivmoddi4+0xa4>
 800070c:	b902      	cbnz	r2, 8000710 <__udivmoddi4+0xec>
 800070e:	deff      	udf	#255	; 0xff
 8000710:	fab2 f282 	clz	r2, r2
 8000714:	2a00      	cmp	r2, #0
 8000716:	f040 8092 	bne.w	800083e <__udivmoddi4+0x21a>
 800071a:	eba1 010c 	sub.w	r1, r1, ip
 800071e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000722:	fa1f fe8c 	uxth.w	lr, ip
 8000726:	2601      	movs	r6, #1
 8000728:	0c20      	lsrs	r0, r4, #16
 800072a:	fbb1 f3f7 	udiv	r3, r1, r7
 800072e:	fb07 1113 	mls	r1, r7, r3, r1
 8000732:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000736:	fb0e f003 	mul.w	r0, lr, r3
 800073a:	4288      	cmp	r0, r1
 800073c:	d908      	bls.n	8000750 <__udivmoddi4+0x12c>
 800073e:	eb1c 0101 	adds.w	r1, ip, r1
 8000742:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000746:	d202      	bcs.n	800074e <__udivmoddi4+0x12a>
 8000748:	4288      	cmp	r0, r1
 800074a:	f200 80cb 	bhi.w	80008e4 <__udivmoddi4+0x2c0>
 800074e:	4643      	mov	r3, r8
 8000750:	1a09      	subs	r1, r1, r0
 8000752:	b2a4      	uxth	r4, r4
 8000754:	fbb1 f0f7 	udiv	r0, r1, r7
 8000758:	fb07 1110 	mls	r1, r7, r0, r1
 800075c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000760:	fb0e fe00 	mul.w	lr, lr, r0
 8000764:	45a6      	cmp	lr, r4
 8000766:	d908      	bls.n	800077a <__udivmoddi4+0x156>
 8000768:	eb1c 0404 	adds.w	r4, ip, r4
 800076c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000770:	d202      	bcs.n	8000778 <__udivmoddi4+0x154>
 8000772:	45a6      	cmp	lr, r4
 8000774:	f200 80bb 	bhi.w	80008ee <__udivmoddi4+0x2ca>
 8000778:	4608      	mov	r0, r1
 800077a:	eba4 040e 	sub.w	r4, r4, lr
 800077e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000782:	e79c      	b.n	80006be <__udivmoddi4+0x9a>
 8000784:	f1c6 0720 	rsb	r7, r6, #32
 8000788:	40b3      	lsls	r3, r6
 800078a:	fa22 fc07 	lsr.w	ip, r2, r7
 800078e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000792:	fa20 f407 	lsr.w	r4, r0, r7
 8000796:	fa01 f306 	lsl.w	r3, r1, r6
 800079a:	431c      	orrs	r4, r3
 800079c:	40f9      	lsrs	r1, r7
 800079e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007a2:	fa00 f306 	lsl.w	r3, r0, r6
 80007a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80007aa:	0c20      	lsrs	r0, r4, #16
 80007ac:	fa1f fe8c 	uxth.w	lr, ip
 80007b0:	fb09 1118 	mls	r1, r9, r8, r1
 80007b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007b8:	fb08 f00e 	mul.w	r0, r8, lr
 80007bc:	4288      	cmp	r0, r1
 80007be:	fa02 f206 	lsl.w	r2, r2, r6
 80007c2:	d90b      	bls.n	80007dc <__udivmoddi4+0x1b8>
 80007c4:	eb1c 0101 	adds.w	r1, ip, r1
 80007c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007cc:	f080 8088 	bcs.w	80008e0 <__udivmoddi4+0x2bc>
 80007d0:	4288      	cmp	r0, r1
 80007d2:	f240 8085 	bls.w	80008e0 <__udivmoddi4+0x2bc>
 80007d6:	f1a8 0802 	sub.w	r8, r8, #2
 80007da:	4461      	add	r1, ip
 80007dc:	1a09      	subs	r1, r1, r0
 80007de:	b2a4      	uxth	r4, r4
 80007e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e4:	fb09 1110 	mls	r1, r9, r0, r1
 80007e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80007f0:	458e      	cmp	lr, r1
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1e2>
 80007f4:	eb1c 0101 	adds.w	r1, ip, r1
 80007f8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007fc:	d26c      	bcs.n	80008d8 <__udivmoddi4+0x2b4>
 80007fe:	458e      	cmp	lr, r1
 8000800:	d96a      	bls.n	80008d8 <__udivmoddi4+0x2b4>
 8000802:	3802      	subs	r0, #2
 8000804:	4461      	add	r1, ip
 8000806:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800080a:	fba0 9402 	umull	r9, r4, r0, r2
 800080e:	eba1 010e 	sub.w	r1, r1, lr
 8000812:	42a1      	cmp	r1, r4
 8000814:	46c8      	mov	r8, r9
 8000816:	46a6      	mov	lr, r4
 8000818:	d356      	bcc.n	80008c8 <__udivmoddi4+0x2a4>
 800081a:	d053      	beq.n	80008c4 <__udivmoddi4+0x2a0>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x212>
 800081e:	ebb3 0208 	subs.w	r2, r3, r8
 8000822:	eb61 010e 	sbc.w	r1, r1, lr
 8000826:	fa01 f707 	lsl.w	r7, r1, r7
 800082a:	fa22 f306 	lsr.w	r3, r2, r6
 800082e:	40f1      	lsrs	r1, r6
 8000830:	431f      	orrs	r7, r3
 8000832:	e9c5 7100 	strd	r7, r1, [r5]
 8000836:	2600      	movs	r6, #0
 8000838:	4631      	mov	r1, r6
 800083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	40d8      	lsrs	r0, r3
 8000844:	fa0c fc02 	lsl.w	ip, ip, r2
 8000848:	fa21 f303 	lsr.w	r3, r1, r3
 800084c:	4091      	lsls	r1, r2
 800084e:	4301      	orrs	r1, r0
 8000850:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000854:	fa1f fe8c 	uxth.w	lr, ip
 8000858:	fbb3 f0f7 	udiv	r0, r3, r7
 800085c:	fb07 3610 	mls	r6, r7, r0, r3
 8000860:	0c0b      	lsrs	r3, r1, #16
 8000862:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000866:	fb00 f60e 	mul.w	r6, r0, lr
 800086a:	429e      	cmp	r6, r3
 800086c:	fa04 f402 	lsl.w	r4, r4, r2
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x260>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800087a:	d22f      	bcs.n	80008dc <__udivmoddi4+0x2b8>
 800087c:	429e      	cmp	r6, r3
 800087e:	d92d      	bls.n	80008dc <__udivmoddi4+0x2b8>
 8000880:	3802      	subs	r0, #2
 8000882:	4463      	add	r3, ip
 8000884:	1b9b      	subs	r3, r3, r6
 8000886:	b289      	uxth	r1, r1
 8000888:	fbb3 f6f7 	udiv	r6, r3, r7
 800088c:	fb07 3316 	mls	r3, r7, r6, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb06 f30e 	mul.w	r3, r6, lr
 8000898:	428b      	cmp	r3, r1
 800089a:	d908      	bls.n	80008ae <__udivmoddi4+0x28a>
 800089c:	eb1c 0101 	adds.w	r1, ip, r1
 80008a0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80008a4:	d216      	bcs.n	80008d4 <__udivmoddi4+0x2b0>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d914      	bls.n	80008d4 <__udivmoddi4+0x2b0>
 80008aa:	3e02      	subs	r6, #2
 80008ac:	4461      	add	r1, ip
 80008ae:	1ac9      	subs	r1, r1, r3
 80008b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b4:	e738      	b.n	8000728 <__udivmoddi4+0x104>
 80008b6:	462e      	mov	r6, r5
 80008b8:	4628      	mov	r0, r5
 80008ba:	e705      	b.n	80006c8 <__udivmoddi4+0xa4>
 80008bc:	4606      	mov	r6, r0
 80008be:	e6e3      	b.n	8000688 <__udivmoddi4+0x64>
 80008c0:	4618      	mov	r0, r3
 80008c2:	e6f8      	b.n	80006b6 <__udivmoddi4+0x92>
 80008c4:	454b      	cmp	r3, r9
 80008c6:	d2a9      	bcs.n	800081c <__udivmoddi4+0x1f8>
 80008c8:	ebb9 0802 	subs.w	r8, r9, r2
 80008cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008d0:	3801      	subs	r0, #1
 80008d2:	e7a3      	b.n	800081c <__udivmoddi4+0x1f8>
 80008d4:	4646      	mov	r6, r8
 80008d6:	e7ea      	b.n	80008ae <__udivmoddi4+0x28a>
 80008d8:	4620      	mov	r0, r4
 80008da:	e794      	b.n	8000806 <__udivmoddi4+0x1e2>
 80008dc:	4640      	mov	r0, r8
 80008de:	e7d1      	b.n	8000884 <__udivmoddi4+0x260>
 80008e0:	46d0      	mov	r8, sl
 80008e2:	e77b      	b.n	80007dc <__udivmoddi4+0x1b8>
 80008e4:	3b02      	subs	r3, #2
 80008e6:	4461      	add	r1, ip
 80008e8:	e732      	b.n	8000750 <__udivmoddi4+0x12c>
 80008ea:	4630      	mov	r0, r6
 80008ec:	e709      	b.n	8000702 <__udivmoddi4+0xde>
 80008ee:	4464      	add	r4, ip
 80008f0:	3802      	subs	r0, #2
 80008f2:	e742      	b.n	800077a <__udivmoddi4+0x156>

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <RecieveCommandLijn>:
 * the buffer
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandLijn(CmdStruct *CmdBuf, input_vars inputStruct) {
 80008f8:	b084      	sub	sp, #16
 80008fa:	b590      	push	{r4, r7, lr}
 80008fc:	f2ad 5d8c 	subw	sp, sp, #1420	; 0x58c
 8000900:	f44f 67af 	mov.w	r7, #1400	; 0x578
 8000904:	446f      	add	r7, sp
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800090c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e059      	b.n	80009ce <RecieveCommandLijn+0xd6>
		neededArg = i + 1;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	3301      	adds	r3, #1
 800091e:	73bb      	strb	r3, [r7, #14]
		if (i == 4) {
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b04      	cmp	r3, #4
 8000924:	d128      	bne.n	8000978 <RecieveCommandLijn+0x80>
			ParseOnKomma(inputStruct, neededArg, 0, 1, 0, 0, 0, *CmdBuf);
 8000926:	7bbc      	ldrb	r4, [r7, #14]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 800092e:	4611      	mov	r1, r2
 8000930:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000934:	4618      	mov	r0, r3
 8000936:	f004 ffc1 	bl	80058bc <memcpy>
 800093a:	2300      	movs	r3, #0
 800093c:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000940:	2300      	movs	r3, #0
 8000942:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000946:	2300      	movs	r3, #0
 8000948:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 800094c:	2301      	movs	r3, #1
 800094e:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000952:	2300      	movs	r3, #0
 8000954:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000958:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 800095c:	4668      	mov	r0, sp
 800095e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000962:	f240 4204 	movw	r2, #1028	; 0x404
 8000966:	4619      	mov	r1, r3
 8000968:	f004 ffa8 	bl	80058bc <memcpy>
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000972:	f000 f9bf 	bl	8000cf4 <ParseOnKomma>
 8000976:	e027      	b.n	80009c8 <RecieveCommandLijn+0xd0>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, 0,0,0,  *CmdBuf);
 8000978:	7bbc      	ldrb	r4, [r7, #14]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 8000980:	4611      	mov	r1, r2
 8000982:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000986:	4618      	mov	r0, r3
 8000988:	f004 ff98 	bl	80058bc <memcpy>
 800098c:	2300      	movs	r3, #0
 800098e:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000992:	2300      	movs	r3, #0
 8000994:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000998:	2300      	movs	r3, #0
 800099a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 800099e:	2300      	movs	r3, #0
 80009a0:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 80009a4:	2301      	movs	r3, #1
 80009a6:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 80009aa:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 80009ae:	4668      	mov	r0, sp
 80009b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009b4:	f240 4204 	movw	r2, #1028	; 0x404
 80009b8:	4619      	mov	r1, r3
 80009ba:	f004 ff7f 	bl	80058bc <memcpy>
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	f000 f996 	bl	8000cf4 <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	3301      	adds	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d9a2      	bls.n	800091a <RecieveCommandLijn+0x22>
		}
	}
//	AddToBuffer(&CmdBuf);
}
 80009d4:	bf00      	nop
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <RecieveCommandClear>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandClear(CmdStruct *CmdBuf, input_vars inputStruct) {
 80009e4:	b084      	sub	sp, #16
 80009e6:	b580      	push	{r7, lr}
 80009e8:	f5ad 6db0 	sub.w	sp, sp, #1408	; 0x580
 80009ec:	f44f 67af 	mov.w	r7, #1400	; 0x578
 80009f0:	446f      	add	r7, sp
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	f107 0014 	add.w	r0, r7, #20
 80009f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 0, 1, 0, 0, 0,  *CmdBuf);
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 8000a02:	4611      	mov	r1, r2
 8000a04:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 ff57 	bl	80058bc <memcpy>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000a20:	2301      	movs	r3, #1
 8000a22:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000a32:	4668      	mov	r0, sp
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	f240 4204 	movw	r2, #1028	; 0x404
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f004 ff3d 	bl	80058bc <memcpy>
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a48:	f000 f954 	bl	8000cf4 <ParseOnKomma>
}
 8000a4c:	bf00      	nop
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <RecieveCommandRechthoek>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandRechthoek(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000a5c:	b084      	sub	sp, #16
 8000a5e:	b590      	push	{r4, r7, lr}
 8000a60:	f2ad 5d8c 	subw	sp, sp, #1420	; 0x58c
 8000a64:	f44f 67af 	mov.w	r7, #1400	; 0x578
 8000a68:	446f      	add	r7, sp
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000a70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 7; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	e059      	b.n	8000b32 <RecieveCommandRechthoek+0xd6>
		neededArg = i + 1;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	3301      	adds	r3, #1
 8000a82:	73bb      	strb	r3, [r7, #14]
		if (i == 4) {
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d128      	bne.n	8000adc <RecieveCommandRechthoek+0x80>
			ParseOnKomma(inputStruct, neededArg, 0, 1, 0, 0, 0, *CmdBuf);
 8000a8a:	7bbc      	ldrb	r4, [r7, #14]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 8000a92:	4611      	mov	r1, r2
 8000a94:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 ff0f 	bl	80058bc <memcpy>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000abc:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000ac0:	4668      	mov	r0, sp
 8000ac2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ac6:	f240 4204 	movw	r2, #1028	; 0x404
 8000aca:	4619      	mov	r1, r3
 8000acc:	f004 fef6 	bl	80058bc <memcpy>
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad6:	f000 f90d 	bl	8000cf4 <ParseOnKomma>
 8000ada:	e027      	b.n	8000b2c <RecieveCommandRechthoek+0xd0>
		} else {
			ParseOnKomma(inputStruct, neededArg, 1, 0, 0, 0, 0, *CmdBuf);
 8000adc:	7bbc      	ldrb	r4, [r7, #14]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	f20d 431c 	addw	r3, sp, #1052	; 0x41c
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 fee6 	bl	80058bc <memcpy>
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000b08:	2301      	movs	r3, #1
 8000b0a:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000b0e:	f8cd 4404 	str.w	r4, [sp, #1028]	; 0x404
 8000b12:	4668      	mov	r0, sp
 8000b14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b18:	f240 4204 	movw	r2, #1028	; 0x404
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f004 fecd 	bl	80058bc <memcpy>
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b28:	f000 f8e4 	bl	8000cf4 <ParseOnKomma>
	for (uint8_t i = 0; i < 7; i++) {
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b06      	cmp	r3, #6
 8000b36:	d9a2      	bls.n	8000a7e <RecieveCommandRechthoek+0x22>
		}
	}
}
 8000b38:	bf00      	nop
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <RecieveCommandTekst>:

Error RecieveCommandTekst(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000b48:	b084      	sub	sp, #16
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	f107 0014 	add.w	r0, r7, #20
 8000b56:	e880 000e 	stmia.w	r0, {r1, r2, r3}

}
 8000b5a:	bf00      	nop
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	b004      	add	sp, #16
 8000b68:	4770      	bx	lr

08000b6a <RecieveCommandBitmap>:

Error RecieveCommandBitmap(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000b72:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000b76:	446f      	add	r7, sp
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	f107 001c 	add.w	r0, r7, #28
 8000b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 3; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e01e      	b.n	8000bca <RecieveCommandBitmap+0x60>
		neededArg = i + 1;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	73bb      	strb	r3, [r7, #14]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000ba6:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000baa:	4668      	mov	r0, sp
 8000bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb0:	f240 4204 	movw	r2, #1028	; 0x404
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f004 fe81 	bl	80058bc <memcpy>
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc0:	f000 f898 	bl	8000cf4 <ParseOnKomma>
	for (uint8_t i = 0; i < 3; i++) {
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d9dd      	bls.n	8000b8c <RecieveCommandBitmap+0x22>
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <RecieveCommandWacht>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandWacht(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000be0:	b084      	sub	sp, #16
 8000be2:	b580      	push	{r7, lr}
 8000be4:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000be8:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000bec:	446f      	add	r7, sp
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	f107 0014 	add.w	r0, r7, #20
 8000bf4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	ParseOnKomma(inputStruct, 1, 1, 0, CmdBuf);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000c10:	4668      	mov	r0, sp
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	f240 4204 	movw	r2, #1028	; 0x404
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f004 fe4e 	bl	80058bc <memcpy>
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c26:	f000 f865 	bl	8000cf4 <ParseOnKomma>
}
 8000c2a:	bf00      	nop
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr

08000c3a <RecieveCommandHerhaal>:
 * @brief
 *
 * @param commandArray
 * @param inputStruct
 */
Error RecieveCommandHerhaal(CmdStruct *CmdBuf, input_vars inputStruct) {
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000c42:	f44f 6783 	mov.w	r7, #1048	; 0x418
 8000c46:	446f      	add	r7, sp
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	f107 001c 	add.w	r0, r7, #28
 8000c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t neededArg = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 2; i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e01e      	b.n	8000c9a <RecieveCommandHerhaal+0x60>
		neededArg = i + 1;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	73bb      	strb	r3, [r7, #14]
		ParseOnKomma(inputStruct, neededArg, 1, 0, CmdBuf);
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	f8cd 2410 	str.w	r2, [sp, #1040]	; 0x410
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f8cd 240c 	str.w	r2, [sp, #1036]	; 0x40c
 8000c70:	2201      	movs	r2, #1
 8000c72:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8000c76:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8000c7a:	4668      	mov	r0, sp
 8000c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c80:	f240 4204 	movw	r2, #1028	; 0x404
 8000c84:	4619      	mov	r1, r3
 8000c86:	f004 fe19 	bl	80058bc <memcpy>
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c90:	f000 f830 	bl	8000cf4 <ParseOnKomma>
	for (uint8_t i = 0; i < 2; i++) {
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	3301      	adds	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d9dd      	bls.n	8000c5c <RecieveCommandHerhaal+0x22>
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <RecieveCommandFiguur>:

Error RecieveCommandFiguur(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	f107 0014 	add.w	r0, r7, #20
 8000cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000cc2:	bf00      	nop
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	b004      	add	sp, #16
 8000cd0:	4770      	bx	lr

08000cd2 <RecieveCommandCirkel>:

Error RecieveCommandCirkel(CmdStruct *CmdBuf, input_vars inputStruct) {}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	f107 0014 	add.w	r0, r7, #20
 8000ce0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000ce4:	bf00      	nop
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4770      	bx	lr

08000cf4 <ParseOnKomma>:
 * @param convertColor
 * @param commandArray
 */
Error ParseOnKomma(input_vars inputStruct, uint8_t neededArgument,
				   uint8_t convertToNumber, int convertColor, uint8_t getText,
				   uint8_t getFont, uint8_t getStyle, CmdStruct *CmdBuf) {
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfa:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000cfe:	f44f 6782 	mov.w	r7, #1040	; 0x410
 8000d02:	446f      	add	r7, sp
 8000d04:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8000d08:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000d0c:	466b      	mov	r3, sp
 8000d0e:	469a      	mov	sl, r3
	uint8_t commaCounter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73bb      	strb	r3, [r7, #14]
	uint8_t placeInBuf = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
	char incommingMessage[inputStruct.msglen];
 8000d18:	f8d7 6434 	ldr.w	r6, [r7, #1076]	; 0x434
 8000d1c:	1e73      	subs	r3, r6, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4632      	mov	r2, r6
 8000d22:	2300      	movs	r3, #0
 8000d24:	4690      	mov	r8, r2
 8000d26:	4699      	mov	r9, r3
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d3c:	4632      	mov	r2, r6
 8000d3e:	2300      	movs	r3, #0
 8000d40:	4614      	mov	r4, r2
 8000d42:	461d      	mov	r5, r3
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	00eb      	lsls	r3, r5, #3
 8000d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d52:	00e2      	lsls	r2, r4, #3
 8000d54:	4633      	mov	r3, r6
 8000d56:	3307      	adds	r3, #7
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d60:	f50d 6382 	add.w	r3, sp, #1040	; 0x410
 8000d64:	3300      	adds	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	e0e2      	b.n	8000f34 <ParseOnKomma+0x240>
		if (inputStruct.line_rx_buffer[j] == ',') {
 8000d6e:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b2c      	cmp	r3, #44	; 0x2c
 8000d7a:	d169      	bne.n	8000e50 <ParseOnKomma+0x15c>
			incommingMessage[j] = 0;
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	4413      	add	r3, r2
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
			placeInBuf = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageParse, sizeof(debugMessageParse), &huart2);
#endif
			if (commaCounter == neededArgument) {
 8000d8a:	7bba      	ldrb	r2, [r7, #14]
 8000d8c:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d154      	bne.n	8000e3e <ParseOnKomma+0x14a>
				if (!commaCounter)
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10f      	bne.n	8000dba <ParseOnKomma+0xc6>
					CheckWhatCommand(incommingMessage, CmdBuf, inputStruct);
 8000d9a:	4668      	mov	r0, sp
 8000d9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000da0:	f240 420c 	movw	r2, #1036	; 0x40c
 8000da4:	4619      	mov	r1, r3
 8000da6:	f004 fd89 	bl	80058bc <memcpy>
 8000daa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dae:	cb0c      	ldmia	r3, {r2, r3}
 8000db0:	f8d7 145c 	ldr.w	r1, [r7, #1116]	; 0x45c
 8000db4:	6838      	ldr	r0, [r7, #0]
 8000db6:	f000 f8d1 	bl	8000f5c <CheckWhatCommand>
				if (convertColor)
 8000dba:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <ParseOnKomma+0xde>
					CheckWhatColor(incommingMessage, CmdBuf, neededArgument);
 8000dc2:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f8d7 145c 	ldr.w	r1, [r7, #1116]	; 0x45c
 8000dcc:	6838      	ldr	r0, [r7, #0]
 8000dce:	f000 f901 	bl	8000fd4 <CheckWhatColor>
				if (convertToNumber)
 8000dd2:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00c      	beq.n	8000df4 <ParseOnKomma+0x100>
					CmdBuf->argBuf[neededArgument] = atoi(incommingMessage);
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f004 fd40 	bl	8005860 <atoi>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000de6:	b291      	uxth	r1, r2
 8000de8:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	460a      	mov	r2, r1
 8000df2:	809a      	strh	r2, [r3, #4]
				if (getText) strcpy(CmdBuf->textSentence, incommingMessage);
 8000df4:	f897 3450 	ldrb.w	r3, [r7, #1104]	; 0x450
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <ParseOnKomma+0x116>
 8000dfc:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000e00:	331c      	adds	r3, #28
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 fd6f 	bl	80058e8 <strcpy>
				if (getStyle) strcpy(CmdBuf->textStyle, incommingMessage);
 8000e0a:	f897 3458 	ldrb.w	r3, [r7, #1112]	; 0x458
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d007      	beq.n	8000e22 <ParseOnKomma+0x12e>
 8000e12:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000e16:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fd63 	bl	80058e8 <strcpy>
				if (getFont) strcpy(CmdBuf->textFont , incommingMessage);
 8000e22:	f897 3454 	ldrb.w	r3, [r7, #1108]	; 0x454
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 808b 	beq.w	8000f42 <ParseOnKomma+0x24e>
 8000e2c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000e30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fd56 	bl	80058e8 <strcpy>
				break;
 8000e3c:	e081      	b.n	8000f42 <ParseOnKomma+0x24e>
			}
			commaCounter++;
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	3301      	adds	r3, #1
 8000e42:	73bb      	strb	r3, [r7, #14]
			// set the array to 0 again to fill with the argument
			memset(incommingMessage, 0, sizeof(incommingMessage));
 8000e44:	4633      	mov	r3, r6
 8000e46:	461a      	mov	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f004 fd44 	bl	80058d8 <memset>
		}
		if (j == inputStruct.msglen) {
 8000e50:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d150      	bne.n	8000efc <ParseOnKomma+0x208>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	440a      	add	r2, r1
 8000e64:	7811      	ldrb	r1, [r2, #0]
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
			if (commaCounter == neededArgument) {
 8000e70:	7bba      	ldrb	r2, [r7, #14]
 8000e72:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d165      	bne.n	8000f46 <ParseOnKomma+0x252>
				if (convertColor)
 8000e7a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <ParseOnKomma+0x19e>
					CheckWhatColor(incommingMessage, CmdBuf, neededArgument);
 8000e82:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000e86:	461a      	mov	r2, r3
 8000e88:	f8d7 145c 	ldr.w	r1, [r7, #1116]	; 0x45c
 8000e8c:	6838      	ldr	r0, [r7, #0]
 8000e8e:	f000 f8a1 	bl	8000fd4 <CheckWhatColor>
				if (convertToNumber)
 8000e92:	f897 3448 	ldrb.w	r3, [r7, #1096]	; 0x448
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00c      	beq.n	8000eb4 <ParseOnKomma+0x1c0>
					CmdBuf->argBuf[neededArgument] = atoi(incommingMessage);
 8000e9a:	6838      	ldr	r0, [r7, #0]
 8000e9c:	f004 fce0 	bl	8005860 <atoi>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f897 3444 	ldrb.w	r3, [r7, #1092]	; 0x444
 8000ea6:	b291      	uxth	r1, r2
 8000ea8:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	809a      	strh	r2, [r3, #4]
				if (getText) strcpy(CmdBuf->textSentence, incommingMessage);
 8000eb4:	f897 3450 	ldrb.w	r3, [r7, #1104]	; 0x450
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <ParseOnKomma+0x1d6>
 8000ebc:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000ec0:	331c      	adds	r3, #28
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fd0f 	bl	80058e8 <strcpy>
								if (getStyle) strcpy(CmdBuf->textStyle, incommingMessage);
 8000eca:	f897 3458 	ldrb.w	r3, [r7, #1112]	; 0x458
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <ParseOnKomma+0x1ee>
 8000ed2:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000ed6:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 8000eda:	6839      	ldr	r1, [r7, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 fd03 	bl	80058e8 <strcpy>
								if (getFont) strcpy(CmdBuf->textFont , incommingMessage);
 8000ee2:	f897 3454 	ldrb.w	r3, [r7, #1108]	; 0x454
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d02d      	beq.n	8000f46 <ParseOnKomma+0x252>
 8000eea:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8000eee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000ef2:	6839      	ldr	r1, [r7, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 fcf7 	bl	80058e8 <strcpy>
			}
			break;
 8000efa:	e024      	b.n	8000f46 <ParseOnKomma+0x252>
		}
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000efc:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d011      	beq.n	8000f2e <ParseOnKomma+0x23a>
			inputStruct.line_rx_buffer[j] != ',') {
 8000f0a:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
		if (inputStruct.line_rx_buffer[j] != 0 &&
 8000f14:	2b2c      	cmp	r3, #44	; 0x2c
 8000f16:	d00a      	beq.n	8000f2e <ParseOnKomma+0x23a>
			incommingMessage[placeInBuf] = inputStruct.line_rx_buffer[j];
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	f107 0131 	add.w	r1, r7, #49	; 0x31
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	440a      	add	r2, r1
 8000f22:	7811      	ldrb	r1, [r2, #0]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	54d1      	strb	r1, [r2, r3]
			placeInBuf++;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
	for (int j = 0; j <= inputStruct.msglen; j++) {
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	f77f af17 	ble.w	8000d6e <ParseOnKomma+0x7a>
 8000f40:	e002      	b.n	8000f48 <ParseOnKomma+0x254>
				break;
 8000f42:	bf00      	nop
 8000f44:	e000      	b.n	8000f48 <ParseOnKomma+0x254>
			break;
 8000f46:	bf00      	nop
 8000f48:	46d5      	mov	sp, sl
		}
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f56:	b004      	add	sp, #16
 8000f58:	4770      	bx	lr
	...

08000f5c <CheckWhatCommand>:
 * @param incommingCommand
 * @param commandArray
 * @param inputStruct
 */
Error CheckWhatCommand(char incommingCommand[], CmdStruct *CmdBuf,
					   input_vars inputStruct) {
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000f64:	f44f 6781 	mov.w	r7, #1032	; 0x408
 8000f68:	446f      	add	r7, sp
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	f107 0118 	add.w	r1, r7, #24
 8000f72:	e881 000c 	stmia.w	r1, {r2, r3}
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e01e      	b.n	8000fba <CheckWhatCommand+0x5e>
		if (strcmp(incommingCommand, possibleCommands[i]) == 0) {
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <CheckWhatCommand+0x74>)
 8000f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff f91e 	bl	80001c8 <strcmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d110      	bne.n	8000fb4 <CheckWhatCommand+0x58>
			CmdBuf->commandNummer = i;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	601a      	str	r2, [r3, #0]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageCommand, sizeof(debugMessageCommand),
						&huart2);
#endif
			DoOnCommand(CmdBuf, inputStruct);
 8000f98:	4668      	mov	r0, sp
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f004 fc8a 	bl	80058bc <memcpy>
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fae:	6838      	ldr	r0, [r7, #0]
 8000fb0:	f000 f840 	bl	8001034 <DoOnCommand>
	for (uint8_t i = 0; i < AMOUNT_OF_COMMANDS; i++) {
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b08      	cmp	r3, #8
 8000fbe:	d9dd      	bls.n	8000f7c <CheckWhatCommand+0x20>
		}
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fcc:	b002      	add	sp, #8
 8000fce:	4770      	bx	lr
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <CheckWhatColor>:
 * @param incommingColor
 * @param commandArray
 * @param argPlace
 */
Error CheckWhatColor(char incommingColor[], CmdStruct *CmdBuf,
					 uint8_t argPlace) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]
 8000fe6:	e018      	b.n	800101a <CheckWhatColor+0x46>
		if (strcmp(incommingColor, possibleColors[i]) == 0) {
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <CheckWhatColor+0x58>)
 8000fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f7ff f8e8 	bl	80001c8 <strcmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10a      	bne.n	8001014 <CheckWhatColor+0x40>
			CmdBuf->argBuf[argPlace] = colorCodes[i];
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <CheckWhatColor+0x5c>)
 8001002:	5cd2      	ldrb	r2, [r2, r3]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	b291      	uxth	r1, r2
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	460a      	mov	r2, r1
 8001010:	809a      	strh	r2, [r3, #4]
#ifdef FRONT_LAYER_DEBUG
			OutputDebug(debugMessageColor, sizeof(debugMessageColor), &huart2);
#endif
			break;
 8001012:	e005      	b.n	8001020 <CheckWhatColor+0x4c>
	for (uint8_t i = 0; i < AMOUNT_OF_COLORS; i++) {
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	3301      	adds	r3, #1
 8001018:	75fb      	strb	r3, [r7, #23]
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d9e3      	bls.n	8000fe8 <CheckWhatColor+0x14>
		}
	}
}
 8001020:	bf00      	nop
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000024 	.word	0x20000024
 8001030:	20000064 	.word	0x20000064

08001034 <DoOnCommand>:
 * of the args
 *
 * @param commandArray
 * @param inputStruct
 */
Error DoOnCommand(CmdStruct *CmdBuf, input_vars inputStruct) {
 8001034:	b084      	sub	sp, #16
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 800103c:	f44f 6781 	mov.w	r7, #1032	; 0x408
 8001040:	446f      	add	r7, sp
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	f107 001c 	add.w	r0, r7, #28
 8001048:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	switch (CmdBuf->commandNummer) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b08      	cmp	r3, #8
 8001052:	f200 80a5 	bhi.w	80011a0 <DoOnCommand+0x16c>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <DoOnCommand+0x28>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	08001081 	.word	0x08001081
 8001060:	080010a1 	.word	0x080010a1
 8001064:	080010c1 	.word	0x080010c1
 8001068:	080010e1 	.word	0x080010e1
 800106c:	08001101 	.word	0x08001101
 8001070:	08001121 	.word	0x08001121
 8001074:	08001141 	.word	0x08001141
 8001078:	08001161 	.word	0x08001161
 800107c:	08001181 	.word	0x08001181
		case 0:
			// lijn
			RecieveCommandLijn(&CmdBuf, inputStruct);
 8001080:	1d3c      	adds	r4, r7, #4
 8001082:	4668      	mov	r0, sp
 8001084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001088:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800108c:	4619      	mov	r1, r3
 800108e:	f004 fc15 	bl	80058bc <memcpy>
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001098:	4620      	mov	r0, r4
 800109a:	f7ff fc2d 	bl	80008f8 <RecieveCommandLijn>
			break;
 800109e:	e07f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 1:
			// clearscherm
			RecieveCommandClear(&CmdBuf, inputStruct);
 80010a0:	1d3c      	adds	r4, r7, #4
 80010a2:	4668      	mov	r0, sp
 80010a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010ac:	4619      	mov	r1, r3
 80010ae:	f004 fc05 	bl	80058bc <memcpy>
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff fc93 	bl	80009e4 <RecieveCommandClear>
			break;
 80010be:	e06f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 2:
			// rechthoek
			RecieveCommandRechthoek(&CmdBuf, inputStruct);
 80010c0:	1d3c      	adds	r4, r7, #4
 80010c2:	4668      	mov	r0, sp
 80010c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010cc:	4619      	mov	r1, r3
 80010ce:	f004 fbf5 	bl	80058bc <memcpy>
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff fcbf 	bl	8000a5c <RecieveCommandRechthoek>
			break;
 80010de:	e05f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 3:
			// wacht
			RecieveCommandWacht(&CmdBuf, inputStruct);
 80010e0:	1d3c      	adds	r4, r7, #4
 80010e2:	4668      	mov	r0, sp
 80010e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80010ec:	4619      	mov	r1, r3
 80010ee:	f004 fbe5 	bl	80058bc <memcpy>
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff fd71 	bl	8000be0 <RecieveCommandWacht>
			break;
 80010fe:	e04f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 4:
			// tekst
			RecieveCommandTekst(&CmdBuf, inputStruct);
 8001100:	1d3c      	adds	r4, r7, #4
 8001102:	4668      	mov	r0, sp
 8001104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001108:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800110c:	4619      	mov	r1, r3
 800110e:	f004 fbd5 	bl	80058bc <memcpy>
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001118:	4620      	mov	r0, r4
 800111a:	f7ff fd15 	bl	8000b48 <RecieveCommandTekst>
			break;
 800111e:	e03f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 5:
			// bitmap
			RecieveCommandBitmap(&CmdBuf, inputStruct);
 8001120:	1d3c      	adds	r4, r7, #4
 8001122:	4668      	mov	r0, sp
 8001124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001128:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800112c:	4619      	mov	r1, r3
 800112e:	f004 fbc5 	bl	80058bc <memcpy>
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001138:	4620      	mov	r0, r4
 800113a:	f7ff fd16 	bl	8000b6a <RecieveCommandBitmap>
			break;
 800113e:	e02f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 6:
			// cirkel
			RecieveCommandCirkel(&CmdBuf, inputStruct);
 8001140:	1d3c      	adds	r4, r7, #4
 8001142:	4668      	mov	r0, sp
 8001144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001148:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800114c:	4619      	mov	r1, r3
 800114e:	f004 fbb5 	bl	80058bc <memcpy>
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001158:	4620      	mov	r0, r4
 800115a:	f7ff fdba 	bl	8000cd2 <RecieveCommandCirkel>
			break;
 800115e:	e01f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 7:
			// figuur
			RecieveCommandFiguur(&CmdBuf, inputStruct);
 8001160:	1d3c      	adds	r4, r7, #4
 8001162:	4668      	mov	r0, sp
 8001164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001168:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800116c:	4619      	mov	r1, r3
 800116e:	f004 fba5 	bl	80058bc <memcpy>
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001178:	4620      	mov	r0, r4
 800117a:	f7ff fd99 	bl	8000cb0 <RecieveCommandFiguur>
			break;
 800117e:	e00f      	b.n	80011a0 <DoOnCommand+0x16c>
		case 8:
			// herhaal
			RecieveCommandHerhaal(&CmdBuf, inputStruct);
 8001180:	1d3c      	adds	r4, r7, #4
 8001182:	4668      	mov	r0, sp
 8001184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001188:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800118c:	4619      	mov	r1, r3
 800118e:	f004 fb95 	bl	80058bc <memcpy>
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff fd4e 	bl	8000c3a <RecieveCommandHerhaal>
			break;
 800119e:	bf00      	nop
	}
}
 80011a0:	bf00      	nop
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011ac:	b004      	add	sp, #16
 80011ae:	4770      	bx	lr

080011b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x3c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2044      	movs	r0, #68	; 0x44
 80011d8:	f001 f9e5 	bl	80025a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011dc:	2044      	movs	r0, #68	; 0x44
 80011de:	f001 f9fe 	bl	80025de <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <MX_GPIO_Init+0xe4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a31      	ldr	r2, [pc, #196]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a2a      	ldr	r2, [pc, #168]	; (80012d4 <MX_GPIO_Init+0xe4>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <MX_GPIO_Init+0xe4>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_GPIO_Init+0xe4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <MX_GPIO_Init+0xe8>)
 800127e:	f001 fef7 	bl	8003070 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001288:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_GPIO_Init+0xec>)
 800128a:	f001 fef1 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800128e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001292:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <MX_GPIO_Init+0xe8>)
 80012a8:	f001 fd46 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0xec>)
 80012c6:	f001 fd37 	bl	8002d38 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020400 	.word	0x40020400

080012e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	f5ad 6db0 	sub.w	sp, sp, #1408	; 0x580
 80012e6:	f44f 6784 	mov.w	r7, #1056	; 0x420
 80012ea:	446f      	add	r7, sp

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80012ec:	f001 f80e 	bl	800230c <HAL_Init>
  CmdStruct arg_struct;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f0:	f000 f8f2 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f4:	f7ff ff7c 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012f8:	f7ff ff5a 	bl	80011b0 <MX_DMA_Init>
  MX_TIM1_Init();
 80012fc:	f000 fa94 	bl	8001828 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001300:	f000 fae2 	bl	80018c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001304:	f000 fbf8 	bl	8001af8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init();  // Init VGA-Screen
 8001308:	f000 ff62 	bl	80021d0 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 800130c:	2000      	movs	r0, #0
 800130e:	f000 ffb1 	bl	8002274 <UB_VGA_FillScreen>
  UB_VGA_FillScreen(VGA_COL_WHITE);
 8001312:	20ff      	movs	r0, #255	; 0xff
 8001314:	f000 ffae 	bl	8002274 <UB_VGA_FillScreen>
  int i;

  for (i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800131e:	e00b      	b.n	8001338 <main+0x58>
 8001320:	4a6b      	ldr	r2, [pc, #428]	; (80014d0 <main+0x1f0>)
 8001322:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001326:	4413      	add	r3, r2
 8001328:	3301      	adds	r3, #1
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001332:	3301      	adds	r3, #1
 8001334:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001338:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001340:	dbee      	blt.n	8001320 <main+0x40>

  //  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <main+0x1f0>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8001348:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <main+0x1f0>)
 800134a:	2200      	movs	r2, #0
 800134c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  input.command_execute_flag = FALSE;
 8001350:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <main+0x1f0>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

  // HAl wants a memory location to store the charachter it receives from the
  // UART We will pass it an array, but we will not use it. We declare our own
  // variable in the interupt handler See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8001358:	2201      	movs	r2, #1
 800135a:	495d      	ldr	r1, [pc, #372]	; (80014d0 <main+0x1f0>)
 800135c:	485d      	ldr	r0, [pc, #372]	; (80014d4 <main+0x1f4>)
 800135e:	f003 fb1c 	bl	800499a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (input.command_execute_flag == TRUE) {
 8001362:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <main+0x1f0>)
 8001364:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8001368:	2bff      	cmp	r3, #255	; 0xff
 800136a:	d1fa      	bne.n	8001362 <main+0x82>
      // Do some stuff
      ParseOnKomma(input, 0, 0, 0, 0, 0, 0, &arg_struct);
 800136c:	4c58      	ldr	r4, [pc, #352]	; (80014d0 <main+0x1f0>)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	f8cd 341c 	str.w	r3, [sp, #1052]	; 0x41c
 8001374:	2300      	movs	r3, #0
 8001376:	f8cd 3418 	str.w	r3, [sp, #1048]	; 0x418
 800137a:	2300      	movs	r3, #0
 800137c:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 8001380:	2300      	movs	r3, #0
 8001382:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
 8001386:	2300      	movs	r3, #0
 8001388:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 800138c:	2300      	movs	r3, #0
 800138e:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
 8001392:	2300      	movs	r3, #0
 8001394:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8001398:	4668      	mov	r0, sp
 800139a:	f104 0310 	add.w	r3, r4, #16
 800139e:	f240 4204 	movw	r2, #1028	; 0x404
 80013a2:	4619      	mov	r1, r3
 80013a4:	f004 fa8a 	bl	80058bc <memcpy>
 80013a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013ac:	f7ff fca2 	bl	8000cf4 <ParseOnKomma>
      switch(arg_struct.commandNummer)
 80013b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013b4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	f200 8082 	bhi.w	80014c4 <main+0x1e4>
 80013c0:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <main+0xe8>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	080013e1 	.word	0x080013e1
 80013cc:	08001435 	.word	0x08001435
 80013d0:	08001447 	.word	0x08001447
 80013d4:	080014c5 	.word	0x080014c5
 80013d8:	080014c5 	.word	0x080014c5
 80013dc:	0800149b 	.word	0x0800149b
      {
      case 0:
    	  DrawLine(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3], arg_struct.argBuf[4], arg_struct.argBuf[5], arg_struct.argBuf[6]);
 80013e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013e4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80013e8:	88db      	ldrh	r3, [r3, #6]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013f0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80013f4:	891b      	ldrh	r3, [r3, #8]
 80013f6:	4619      	mov	r1, r3
 80013f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80013fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001400:	895b      	ldrh	r3, [r3, #10]
 8001402:	461c      	mov	r4, r3
 8001404:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001408:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	461d      	mov	r5, r3
 8001410:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001414:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001418:	89db      	ldrh	r3, [r3, #14]
 800141a:	461a      	mov	r2, r3
 800141c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001420:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001424:	8a1b      	ldrh	r3, [r3, #16]
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	9200      	str	r2, [sp, #0]
 800142a:	462b      	mov	r3, r5
 800142c:	4622      	mov	r2, r4
 800142e:	f000 fc9f 	bl	8001d70 <DrawLine>
    	  break;
 8001432:	e047      	b.n	80014c4 <main+0x1e4>
      case 1:
    	  ClearScreen(arg_struct.argBuf[1]);
 8001434:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001438:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800143c:	88db      	ldrh	r3, [r3, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fd40 	bl	8001ec4 <ClearScreen>
    	  break;
 8001444:	e03e      	b.n	80014c4 <main+0x1e4>
      case 2:
    	  DrawRectangle(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3], arg_struct.argBuf[4], arg_struct.argBuf[5], arg_struct.argBuf[6]);
 8001446:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800144a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800144e:	88db      	ldrh	r3, [r3, #6]
 8001450:	4618      	mov	r0, r3
 8001452:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001456:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800145a:	891b      	ldrh	r3, [r3, #8]
 800145c:	4619      	mov	r1, r3
 800145e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001462:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001466:	895b      	ldrh	r3, [r3, #10]
 8001468:	461c      	mov	r4, r3
 800146a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800146e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001472:	899b      	ldrh	r3, [r3, #12]
 8001474:	461d      	mov	r5, r3
 8001476:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800147a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800147e:	89db      	ldrh	r3, [r3, #14]
 8001480:	461a      	mov	r2, r3
 8001482:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001486:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800148a:	8a1b      	ldrh	r3, [r3, #16]
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	462b      	mov	r3, r5
 8001492:	4622      	mov	r2, r4
 8001494:	f000 fbd3 	bl	8001c3e <DrawRectangle>
    	  break;
 8001498:	e014      	b.n	80014c4 <main+0x1e4>
      case 5:
    	  DrawBitmap(arg_struct.argBuf[1], arg_struct.argBuf[2], arg_struct.argBuf[3]);
 800149a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800149e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80014a2:	88db      	ldrh	r3, [r3, #6]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80014aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80014ae:	891b      	ldrh	r3, [r3, #8]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80014b6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80014ba:	895b      	ldrh	r3, [r3, #10]
 80014bc:	461a      	mov	r2, r3
 80014be:	f000 fd0f 	bl	8001ee0 <DrawBitmap>
    	  break;
 80014c2:	bf00      	nop
      }
      // When finished reset the flag
      input.command_execute_flag = FALSE;
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <main+0x1f0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    if (input.command_execute_flag == TRUE) {
 80014cc:	e749      	b.n	8001362 <main+0x82>
 80014ce:	bf00      	nop
 80014d0:	20001e4c 	.word	0x20001e4c
 80014d4:	20002340 	.word	0x20002340

080014d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	2230      	movs	r2, #48	; 0x30
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 f9f6 	bl	80058d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <SystemClock_Config+0xcc>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <SystemClock_Config+0xcc>)
 8001506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <SystemClock_Config+0xcc>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <SystemClock_Config+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <SystemClock_Config+0xd0>)
 8001522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <SystemClock_Config+0xd0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001534:	2301      	movs	r3, #1
 8001536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001548:	2304      	movs	r3, #4
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800154c:	23a8      	movs	r3, #168	; 0xa8
 800154e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001550:	2302      	movs	r3, #2
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001554:	2304      	movs	r3, #4
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fda1 	bl	80030a4 <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x94>
    Error_Handler();
 8001568:	f000 f820 	bl	80015ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800156c:	230f      	movs	r3, #15
 800156e:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001570:	2302      	movs	r3, #2
 8001572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001578:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800157c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2105      	movs	r1, #5
 800158a:	4618      	mov	r0, r3
 800158c:	f001 fff8 	bl	8003580 <HAL_RCC_ClockConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xc2>
    Error_Handler();
 8001596:	f000 f809 	bl	80015ac <Error_Handler>
  }
}
 800159a:	bf00      	nop
 800159c:	3750      	adds	r7, #80	; 0x50
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000

080015ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_MspInit+0x4c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001660:	f000 fea6 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800166c:	4828      	ldr	r0, [pc, #160]	; (8001710 <TIM2_IRQHandler+0xa8>)
 800166e:	f002 fae3 	bl	8003c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <TIM2_IRQHandler+0xa8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0208 	mvn.w	r2, #8
 800167a:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <TIM2_IRQHandler+0xac>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <TIM2_IRQHandler+0xac>)
 8001686:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <TIM2_IRQHandler+0xac>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001690:	d905      	bls.n	800169e <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <TIM2_IRQHandler+0xac>)
 8001694:	2200      	movs	r2, #0
 8001696:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <TIM2_IRQHandler+0xb0>)
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <TIM2_IRQHandler+0xac>)
 800169c:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d802      	bhi.n	80016ac <TIM2_IRQHandler+0x44>
 80016a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016aa:	e001      	b.n	80016b0 <TIM2_IRQHandler+0x48>
 80016ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <TIM2_IRQHandler+0xb4>)
 80016b2:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	2b23      	cmp	r3, #35	; 0x23
 80016ba:	d927      	bls.n	800170c <TIM2_IRQHandler+0xa4>
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	f240 2202 	movw	r2, #514	; 0x202
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d821      	bhi.n	800170c <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <TIM2_IRQHandler+0xb8>)
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80016d0:	4a13      	ldr	r2, [pc, #76]	; (8001720 <TIM2_IRQHandler+0xb8>)
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <TIM2_IRQHandler+0xbc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a11      	ldr	r2, [pc, #68]	; (8001724 <TIM2_IRQHandler+0xbc>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <TIM2_IRQHandler+0xc0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <TIM2_IRQHandler+0xc0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <TIM2_IRQHandler+0xac>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <TIM2_IRQHandler+0xac>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001708:	4a02      	ldr	r2, [pc, #8]	; (8001714 <TIM2_IRQHandler+0xac>)
 800170a:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200022a0 	.word	0x200022a0
 8001714:	20015070 	.word	0x20015070
 8001718:	20002380 	.word	0x20002380
 800171c:	40020400 	.word	0x40020400
 8001720:	40026488 	.word	0x40026488
 8001724:	40010000 	.word	0x40010000
 8001728:	200022e0 	.word	0x200022e0

0800172c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <USART2_IRQHandler+0x70>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b0a      	cmp	r3, #10
 800173c:	d026      	beq.n	800178c <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b0d      	cmp	r3, #13
 8001742:	d002      	beq.n	800174a <USART2_IRQHandler+0x1e>
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b2e      	cmp	r3, #46	; 0x2e
 8001748:	d10e      	bne.n	8001768 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <USART2_IRQHandler+0x74>)
 800174c:	22ff      	movs	r2, #255	; 0xff
 800174e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			// Store the message length for processing
			input.msglen = input.char_counter;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001754:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001758:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <USART2_IRQHandler+0x74>)
 800175a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 8001766:	e011      	b.n	800178c <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <USART2_IRQHandler+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001772:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001778:	4413      	add	r3, r2
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001780:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001784:	3301      	adds	r3, #1
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <USART2_IRQHandler+0x74>)
 8001788:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <USART2_IRQHandler+0x78>)
 800178e:	f003 f959 	bl	8004a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40004400 	.word	0x40004400
 80017a0:	20001e4c 	.word	0x20001e4c
 80017a4:	20002340 	.word	0x20002340

080017a8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <DMA2_Stream5_IRQHandler+0x48>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a1a      	ldr	r2, [r3, #32]
 80017b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10f      	bne.n	80017dc <DMA2_Stream5_IRQHandler+0x34>
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <DMA2_Stream5_IRQHandler+0x48>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6a1a      	ldr	r2, [r3, #32]
 80017c2:	f240 4344 	movw	r3, #1092	; 0x444
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <DMA2_Stream5_IRQHandler+0x34>
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <DMA2_Stream5_IRQHandler+0x48>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <DMA2_Stream5_IRQHandler+0x48>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <DMA2_Stream5_IRQHandler+0x4c>)
 80017de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80017e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <DMA2_Stream5_IRQHandler+0x50>)
 80017e6:	f001 f83d 	bl	8002864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20002260 	.word	0x20002260
 80017f4:	40021000 	.word	0x40021000
 80017f8:	200022e0 	.word	0x200022e0

080017fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <SystemInit+0x28>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	4a07      	ldr	r2, [pc, #28]	; (8001824 <SystemInit+0x28>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SystemInit+0x28>)
 8001812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001816:	609a      	str	r2, [r3, #8]
#endif
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <MX_TIM1_Init+0x9c>)
 8001848:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM1_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001858:	220b      	movs	r2, #11
 800185a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM1_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_TIM1_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <MX_TIM1_Init+0x98>)
 8001870:	f002 f8a6 	bl	80039c0 <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800187a:	f7ff fe97 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_TIM1_Init+0x98>)
 800188c:	f002 fba2 	bl	8003fd4 <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001896:	f7ff fe89 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_TIM1_Init+0x98>)
 80018a8:	f002 ff9a 	bl	80047e0 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80018b2:	f7ff fe7b 	bl	80015ac <Error_Handler>
  }

}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20002260 	.word	0x20002260
 80018c4:	40010000 	.word	0x40010000

080018c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <MX_TIM2_Init+0xcc>)
 80018ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <MX_TIM2_Init+0xcc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <MX_TIM2_Init+0xcc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001900:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001904:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MX_TIM2_Init+0xcc>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001912:	4820      	ldr	r0, [pc, #128]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001914:	f002 f8a3 	bl	8003a5e <HAL_TIM_PWM_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800191e:	f7ff fe45 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	4619      	mov	r1, r3
 8001930:	4818      	ldr	r0, [pc, #96]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001932:	f002 ff55 	bl	80047e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800193c:	f7ff fe36 	bl	80015ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001940:	2360      	movs	r3, #96	; 0x60
 8001942:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001944:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001948:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800194a:	2302      	movs	r3, #2
 800194c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2208      	movs	r2, #8
 8001956:	4619      	mov	r1, r3
 8001958:	480e      	ldr	r0, [pc, #56]	; (8001994 <MX_TIM2_Init+0xcc>)
 800195a:	f002 fa75 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001964:	f7ff fe22 	bl	80015ac <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001968:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800196c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	220c      	movs	r2, #12
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001976:	f002 fa67 	bl	8003e48 <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001980:	f7ff fe14 	bl	80015ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <MX_TIM2_Init+0xcc>)
 8001986:	f000 f87f 	bl	8001a88 <HAL_TIM_MspPostInit>

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200022a0 	.word	0x200022a0

08001998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <HAL_TIM_Base_MspInit+0x94>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d13c      	bne.n	8001a24 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_TIM_Base_MspInit+0x98>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <HAL_TIM_Base_MspInit+0x98>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_TIM_Base_MspInit+0x98>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_TIM_Base_MspInit+0xa0>)
 80019ca:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019ce:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80019d2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019d6:	2240      	movs	r2, #64	; 0x40
 80019d8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 80019fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a00:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001a08:	480a      	ldr	r0, [pc, #40]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 8001a0a:	f000 fe03 	bl	8002614 <HAL_DMA_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001a14:	f7ff fdca 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 8001a1c:	621a      	str	r2, [r3, #32]
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_TIM_Base_MspInit+0x9c>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	200022e0 	.word	0x200022e0
 8001a38:	40026488 	.word	0x40026488

08001a3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4c:	d115      	bne.n	8001a7a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_TIM_PWM_MspInit+0x48>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_TIM_PWM_MspInit+0x48>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_TIM_PWM_MspInit+0x48>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f000 fd99 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a74:	201c      	movs	r0, #28
 8001a76:	f000 fdb2 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa8:	d11e      	bne.n	8001ae8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4804      	ldr	r0, [pc, #16]	; (8001af4 <HAL_TIM_MspPostInit+0x6c>)
 8001ae4:	f001 f928 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020400 	.word	0x40020400

08001af8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_USART2_UART_Init+0x50>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART2_UART_Init+0x4c>)
 8001b30:	f002 fee6 	bl	8004900 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b3a:	f7ff fd37 	bl	80015ac <Error_Handler>
  }

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20002340 	.word	0x20002340
 8001b48:	40004400 	.word	0x40004400

08001b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_UART_MspInit+0x94>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d133      	bne.n	8001bd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_UART_MspInit+0x9c>)
 8001bc2:	f001 f8b9 	bl	8002d38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2026      	movs	r0, #38	; 0x26
 8001bcc:	f000 fceb 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd0:	2026      	movs	r0, #38	; 0x26
 8001bd2:	f000 fd04 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bf2:	e003      	b.n	8001bfc <LoopCopyDataInit>

08001bf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bfa:	3104      	adds	r1, #4

08001bfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c04:	d3f6      	bcc.n	8001bf4 <CopyDataInit>
  ldr  r2, =_sbss
 8001c06:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c08:	e002      	b.n	8001c10 <LoopFillZerobss>

08001c0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c0c:	f842 3b04 	str.w	r3, [r2], #4

08001c10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c14:	d3f9      	bcc.n	8001c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c16:	f7ff fdf1 	bl	80017fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f003 fe2b 	bl	8005874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1e:	f7ff fb5f 	bl	80012e0 <main>
  bx  lr    
 8001c22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c28:	08005d58 	.word	0x08005d58
  ldr  r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c30:	20001e30 	.word	0x20001e30
  ldr  r2, =_sbss
 8001c34:	20001e30 	.word	0x20001e30
  ldr  r3, = _ebss
 8001c38:	20015080 	.word	0x20015080

08001c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC_IRQHandler>

08001c3e <DrawRectangle>:
 * @param color
 * @param filled
 * @return
 */
int DrawRectangle(uint8_t xp, uint8_t yp, uint8_t Width, uint8_t Heigth,
		uint8_t color, uint8_t filled) {
 8001c3e:	b590      	push	{r4, r7, lr}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4604      	mov	r4, r0
 8001c46:	4608      	mov	r0, r1
 8001c48:	4611      	mov	r1, r2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4623      	mov	r3, r4
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	4603      	mov	r3, r0
 8001c52:	71bb      	strb	r3, [r7, #6]
 8001c54:	460b      	mov	r3, r1
 8001c56:	717b      	strb	r3, [r7, #5]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	713b      	strb	r3, [r7, #4]
	if (filled == 0) {
 8001c5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d120      	bne.n	8001ca6 <DrawRectangle+0x68>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e017      	b.n	8001c9a <DrawRectangle+0x5c>
			for (uint8_t x = xp; x < xp + Width; x++) {
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	73bb      	strb	r3, [r7, #14]
 8001c6e:	e00b      	b.n	8001c88 <DrawRectangle+0x4a>
				UB_VGA_SetPixel(x, y, color);
 8001c70:	7bbb      	ldrb	r3, [r7, #14]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	b291      	uxth	r1, r2
 8001c78:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fb1d 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = xp; x < xp + Width; x++) {
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	3301      	adds	r3, #1
 8001c86:	73bb      	strb	r3, [r7, #14]
 8001c88:	7bba      	ldrb	r2, [r7, #14]
 8001c8a:	79f9      	ldrb	r1, [r7, #7]
 8001c8c:	797b      	ldrb	r3, [r7, #5]
 8001c8e:	440b      	add	r3, r1
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbed      	blt.n	8001c70 <DrawRectangle+0x32>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	3301      	adds	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	79b9      	ldrb	r1, [r7, #6]
 8001c9e:	793b      	ldrb	r3, [r7, #4]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbe1      	blt.n	8001c6a <DrawRectangle+0x2c>
			}
		}
	}
	//rectangle not filled, only lines
	if (filled == 1) {
 8001ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d15b      	bne.n	8001d66 <DrawRectangle+0x128>
		//top line
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	737b      	strb	r3, [r7, #13]
 8001cb2:	e00b      	b.n	8001ccc <DrawRectangle+0x8e>
			UB_VGA_SetPixel(x, yp, color);
 8001cb4:	7b7b      	ldrb	r3, [r7, #13]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	79ba      	ldrb	r2, [r7, #6]
 8001cba:	b291      	uxth	r1, r2
 8001cbc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fafb 	bl	80022bc <UB_VGA_SetPixel>
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001cc6:	7b7b      	ldrb	r3, [r7, #13]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	737b      	strb	r3, [r7, #13]
 8001ccc:	7b7a      	ldrb	r2, [r7, #13]
 8001cce:	79f9      	ldrb	r1, [r7, #7]
 8001cd0:	797b      	ldrb	r3, [r7, #5]
 8001cd2:	440b      	add	r3, r1
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbed      	blt.n	8001cb4 <DrawRectangle+0x76>
		}
		//bottom line
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	733b      	strb	r3, [r7, #12]
 8001cdc:	e00f      	b.n	8001cfe <DrawRectangle+0xc0>
			UB_VGA_SetPixel(x, yp + Heigth, color);
 8001cde:	7b3b      	ldrb	r3, [r7, #12]
 8001ce0:	b298      	uxth	r0, r3
 8001ce2:	79bb      	ldrb	r3, [r7, #6]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	793b      	ldrb	r3, [r7, #4]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f000 fae2 	bl	80022bc <UB_VGA_SetPixel>
		for (uint8_t x = xp; x < xp + Width; x++) {
 8001cf8:	7b3b      	ldrb	r3, [r7, #12]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	733b      	strb	r3, [r7, #12]
 8001cfe:	7b3a      	ldrb	r2, [r7, #12]
 8001d00:	79f9      	ldrb	r1, [r7, #7]
 8001d02:	797b      	ldrb	r3, [r7, #5]
 8001d04:	440b      	add	r3, r1
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbe9      	blt.n	8001cde <DrawRectangle+0xa0>
		}

		//Left vertical line
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	72fb      	strb	r3, [r7, #11]
 8001d0e:	e00b      	b.n	8001d28 <DrawRectangle+0xea>
			UB_VGA_SetPixel(xp, y, color);
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	7afa      	ldrb	r2, [r7, #11]
 8001d16:	b291      	uxth	r1, r2
 8001d18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 facd 	bl	80022bc <UB_VGA_SetPixel>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	3301      	adds	r3, #1
 8001d26:	72fb      	strb	r3, [r7, #11]
 8001d28:	7afa      	ldrb	r2, [r7, #11]
 8001d2a:	79b9      	ldrb	r1, [r7, #6]
 8001d2c:	793b      	ldrb	r3, [r7, #4]
 8001d2e:	440b      	add	r3, r1
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbed      	blt.n	8001d10 <DrawRectangle+0xd2>

		}
		//Right vertical line
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	72bb      	strb	r3, [r7, #10]
 8001d38:	e00f      	b.n	8001d5a <DrawRectangle+0x11c>
			UB_VGA_SetPixel(xp + Width, y, color);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	797b      	ldrb	r3, [r7, #5]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	7aba      	ldrb	r2, [r7, #10]
 8001d48:	b291      	uxth	r1, r2
 8001d4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fab4 	bl	80022bc <UB_VGA_SetPixel>
		for (uint8_t y = yp; y < yp + Heigth; y++) {
 8001d54:	7abb      	ldrb	r3, [r7, #10]
 8001d56:	3301      	adds	r3, #1
 8001d58:	72bb      	strb	r3, [r7, #10]
 8001d5a:	7aba      	ldrb	r2, [r7, #10]
 8001d5c:	79b9      	ldrb	r1, [r7, #6]
 8001d5e:	793b      	ldrb	r3, [r7, #4]
 8001d60:	440b      	add	r3, r1
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbe9      	blt.n	8001d3a <DrawRectangle+0xfc>
		}
	}
}
 8001d66:	bf00      	nop
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd90      	pop	{r4, r7, pc}

08001d70 <DrawLine>:
 * @param color
 * @param thickness
 * @return
 */
int DrawLine(uint8_t xp1, uint8_t yp1, uint8_t xp2, uint8_t yp2, uint8_t color,
		uint8_t thickness) {
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b08d      	sub	sp, #52	; 0x34
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	4603      	mov	r3, r0
 8001d84:	71bb      	strb	r3, [r7, #6]
 8001d86:	460b      	mov	r3, r1
 8001d88:	717b      	strb	r3, [r7, #5]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	713b      	strb	r3, [r7, #4]
	int dx = xp2 - xp1;
 8001d8e:	797a      	ldrb	r2, [r7, #5]
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	61fb      	str	r3, [r7, #28]
	int dy = yp2 - yp1;
 8001d96:	793a      	ldrb	r2, [r7, #4]
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	61bb      	str	r3, [r7, #24]

	// calculate steps required for generating pixels
	int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001da4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bfb8      	it	lt
 8001dae:	425b      	neglt	r3, r3
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bfb8      	it	lt
 8001db4:	4613      	movlt	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

	// calculate increment in x & y for each steps
	float Xinc = dx / (float) steps;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd0:	edc7 7a04 	vstr	s15, [r7, #16]
	float Yinc = dy / (float) steps;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dec:	edc7 7a03 	vstr	s15, [r7, #12]

	// Put pixel for each step
	for (int j = 0 - abs(thickness / 2); j <= abs(thickness / 2); j++) {
 8001df0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	425b      	negs	r3, r3
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfc:	e053      	b.n	8001ea6 <DrawLine+0x136>
		float X = xp1 + 0.5;
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb3d 	bl	8000480 <__aeabi_i2d>
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <DrawLine+0x150>)
 8001e0c:	f7fe f9ec 	bl	80001e8 <__adddf3>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe fb9c 	bl	8000554 <__aeabi_d2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
		float Y = yp1 + j + 0.5;
 8001e20:	79ba      	ldrb	r2, [r7, #6]
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	4413      	add	r3, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb2a 	bl	8000480 <__aeabi_i2d>
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <DrawLine+0x150>)
 8001e32:	f7fe f9d9 	bl	80001e8 <__adddf3>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fb89 	bl	8000554 <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i <= steps; i++) {
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	e025      	b.n	8001e98 <DrawLine+0x128>
			UB_VGA_SetPixel(X, Y, color);
 8001e4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e54:	ee17 3a90 	vmov	r3, s15
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e62:	ee17 2a90 	vmov	r2, s15
 8001e66:	b291      	uxth	r1, r2
 8001e68:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fa25 	bl	80022bc <UB_VGA_SetPixel>
			X += Xinc; // increment in x at each step
 8001e72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e76:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			Y += Yinc;
 8001e82:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (int i = 0; i <= steps; i++) {
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	3301      	adds	r3, #1
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	6a3a      	ldr	r2, [r7, #32]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	ddd5      	ble.n	8001e4c <DrawLine+0xdc>
	for (int j = 0 - abs(thickness / 2); j <= abs(thickness / 2); j++) {
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	dda3      	ble.n	8001dfe <DrawLine+0x8e>
		}
	}
}
 8001eb6:	bf00      	nop
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3734      	adds	r7, #52	; 0x34
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	3fe00000 	.word	0x3fe00000

08001ec4 <ClearScreen>:
 * @brief Clears the screen in the specified color
 *
 * @param color
 * @return
 */
int ClearScreen(uint8_t color) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f9cf 	bl	8002274 <UB_VGA_FillScreen>
}
 8001ed6:	bf00      	nop
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <DrawBitmap>:
 * @param xp
 * @param yp
 * @param selection
 * @return
 */
int DrawBitmap(uint8_t selector, uint8_t xp, uint8_t yp) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	460b      	mov	r3, r1
 8001eec:	71bb      	strb	r3, [r7, #6]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	717b      	strb	r3, [r7, #5]
	uint8_t color;

	if (selector == LEFT) //Left
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d136      	bne.n	8001f66 <DrawBitmap+0x86>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001ef8:	2300      	movs	r3, #0
 8001efa:	75fb      	strb	r3, [r7, #23]
 8001efc:	e030      	b.n	8001f60 <DrawBitmap+0x80>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	75bb      	strb	r3, [r7, #22]
 8001f02:	e027      	b.n	8001f54 <DrawBitmap+0x74>
				if (arrowLeft[y][x] != 0b10010000) {
 8001f04:	7dfa      	ldrb	r2, [r7, #23]
 8001f06:	7dbb      	ldrb	r3, [r7, #22]
 8001f08:	4993      	ldr	r1, [pc, #588]	; (8002158 <DrawBitmap+0x278>)
 8001f0a:	2032      	movs	r0, #50	; 0x32
 8001f0c:	fb00 f202 	mul.w	r2, r0, r2
 8001f10:	440a      	add	r2, r1
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b90      	cmp	r3, #144	; 0x90
 8001f18:	d019      	beq.n	8001f4e <DrawBitmap+0x6e>
					color = arrowLeft[y][x];
 8001f1a:	7dfa      	ldrb	r2, [r7, #23]
 8001f1c:	7dbb      	ldrb	r3, [r7, #22]
 8001f1e:	498e      	ldr	r1, [pc, #568]	; (8002158 <DrawBitmap+0x278>)
 8001f20:	2032      	movs	r0, #50	; 0x32
 8001f22:	fb00 f202 	mul.w	r2, r0, r2
 8001f26:	440a      	add	r2, r1
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + x, yp + y, color);
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	7dbb      	ldrb	r3, [r7, #22]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b298      	uxth	r0, r3
 8001f3a:	797b      	ldrb	r3, [r7, #5]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	7afa      	ldrb	r2, [r7, #11]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f000 f9b7 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001f4e:	7dbb      	ldrb	r3, [r7, #22]
 8001f50:	3301      	adds	r3, #1
 8001f52:	75bb      	strb	r3, [r7, #22]
 8001f54:	7dbb      	ldrb	r3, [r7, #22]
 8001f56:	2b31      	cmp	r3, #49	; 0x31
 8001f58:	d9d4      	bls.n	8001f04 <DrawBitmap+0x24>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	75fb      	strb	r3, [r7, #23]
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b31      	cmp	r3, #49	; 0x31
 8001f64:	d9cb      	bls.n	8001efe <DrawBitmap+0x1e>
				}
			}
		}
	}

	if (selector == RIGHT) //Right
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d13a      	bne.n	8001fe2 <DrawBitmap+0x102>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	757b      	strb	r3, [r7, #21]
 8001f70:	e034      	b.n	8001fdc <DrawBitmap+0xfc>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	753b      	strb	r3, [r7, #20]
 8001f76:	e02b      	b.n	8001fd0 <DrawBitmap+0xf0>
				if (arrowLeft[y][x] != 0b10010000) {
 8001f78:	7d7a      	ldrb	r2, [r7, #21]
 8001f7a:	7d3b      	ldrb	r3, [r7, #20]
 8001f7c:	4976      	ldr	r1, [pc, #472]	; (8002158 <DrawBitmap+0x278>)
 8001f7e:	2032      	movs	r0, #50	; 0x32
 8001f80:	fb00 f202 	mul.w	r2, r0, r2
 8001f84:	440a      	add	r2, r1
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b90      	cmp	r3, #144	; 0x90
 8001f8c:	d01d      	beq.n	8001fca <DrawBitmap+0xea>
					color = arrowLeft[y][x];
 8001f8e:	7d7a      	ldrb	r2, [r7, #21]
 8001f90:	7d3b      	ldrb	r3, [r7, #20]
 8001f92:	4971      	ldr	r1, [pc, #452]	; (8002158 <DrawBitmap+0x278>)
 8001f94:	2032      	movs	r0, #50	; 0x32
 8001f96:	fb00 f202 	mul.w	r2, r0, r2
 8001f9a:	440a      	add	r2, r1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + BITMAPSIZE - x, yp + BITMAPSIZE - y,
 8001fa2:	79bb      	ldrb	r3, [r7, #6]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	7d3b      	ldrb	r3, [r7, #20]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3332      	adds	r3, #50	; 0x32
 8001fb0:	b298      	uxth	r0, r3
 8001fb2:	797b      	ldrb	r3, [r7, #5]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	7d7b      	ldrb	r3, [r7, #21]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3332      	adds	r3, #50	; 0x32
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	7afa      	ldrb	r2, [r7, #11]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f000 f979 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001fca:	7d3b      	ldrb	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	753b      	strb	r3, [r7, #20]
 8001fd0:	7d3b      	ldrb	r3, [r7, #20]
 8001fd2:	2b31      	cmp	r3, #49	; 0x31
 8001fd4:	d9d0      	bls.n	8001f78 <DrawBitmap+0x98>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001fd6:	7d7b      	ldrb	r3, [r7, #21]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	757b      	strb	r3, [r7, #21]
 8001fdc:	7d7b      	ldrb	r3, [r7, #21]
 8001fde:	2b31      	cmp	r3, #49	; 0x31
 8001fe0:	d9c7      	bls.n	8001f72 <DrawBitmap+0x92>
				}
			}
		}
	}

	if (selector == UP) //Up
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d136      	bne.n	8002056 <DrawBitmap+0x176>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 8001fe8:	2300      	movs	r3, #0
 8001fea:	74fb      	strb	r3, [r7, #19]
 8001fec:	e030      	b.n	8002050 <DrawBitmap+0x170>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	74bb      	strb	r3, [r7, #18]
 8001ff2:	e027      	b.n	8002044 <DrawBitmap+0x164>
				if (arrowLeft[x][y] != 0b10010000) {
 8001ff4:	7cba      	ldrb	r2, [r7, #18]
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	4957      	ldr	r1, [pc, #348]	; (8002158 <DrawBitmap+0x278>)
 8001ffa:	2032      	movs	r0, #50	; 0x32
 8001ffc:	fb00 f202 	mul.w	r2, r0, r2
 8002000:	440a      	add	r2, r1
 8002002:	4413      	add	r3, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b90      	cmp	r3, #144	; 0x90
 8002008:	d019      	beq.n	800203e <DrawBitmap+0x15e>
					color = arrowLeft[x][y];
 800200a:	7cba      	ldrb	r2, [r7, #18]
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	4952      	ldr	r1, [pc, #328]	; (8002158 <DrawBitmap+0x278>)
 8002010:	2032      	movs	r0, #50	; 0x32
 8002012:	fb00 f202 	mul.w	r2, r0, r2
 8002016:	440a      	add	r2, r1
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + x, yp + y, color);
 800201e:	79bb      	ldrb	r3, [r7, #6]
 8002020:	b29a      	uxth	r2, r3
 8002022:	7cbb      	ldrb	r3, [r7, #18]
 8002024:	b29b      	uxth	r3, r3
 8002026:	4413      	add	r3, r2
 8002028:	b298      	uxth	r0, r3
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	b29a      	uxth	r2, r3
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4413      	add	r3, r2
 8002034:	b29b      	uxth	r3, r3
 8002036:	7afa      	ldrb	r2, [r7, #11]
 8002038:	4619      	mov	r1, r3
 800203a:	f000 f93f 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 800203e:	7cbb      	ldrb	r3, [r7, #18]
 8002040:	3301      	adds	r3, #1
 8002042:	74bb      	strb	r3, [r7, #18]
 8002044:	7cbb      	ldrb	r3, [r7, #18]
 8002046:	2b31      	cmp	r3, #49	; 0x31
 8002048:	d9d4      	bls.n	8001ff4 <DrawBitmap+0x114>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	3301      	adds	r3, #1
 800204e:	74fb      	strb	r3, [r7, #19]
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b31      	cmp	r3, #49	; 0x31
 8002054:	d9cb      	bls.n	8001fee <DrawBitmap+0x10e>
				}
			}
		}
	}

	if (selector == DOWN) //Down
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d13a      	bne.n	80020d2 <DrawBitmap+0x1f2>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 800205c:	2300      	movs	r3, #0
 800205e:	747b      	strb	r3, [r7, #17]
 8002060:	e034      	b.n	80020cc <DrawBitmap+0x1ec>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8002062:	2300      	movs	r3, #0
 8002064:	743b      	strb	r3, [r7, #16]
 8002066:	e02b      	b.n	80020c0 <DrawBitmap+0x1e0>
				if (arrowLeft[x][y] != 0b10010000) {
 8002068:	7c3a      	ldrb	r2, [r7, #16]
 800206a:	7c7b      	ldrb	r3, [r7, #17]
 800206c:	493a      	ldr	r1, [pc, #232]	; (8002158 <DrawBitmap+0x278>)
 800206e:	2032      	movs	r0, #50	; 0x32
 8002070:	fb00 f202 	mul.w	r2, r0, r2
 8002074:	440a      	add	r2, r1
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b90      	cmp	r3, #144	; 0x90
 800207c:	d01d      	beq.n	80020ba <DrawBitmap+0x1da>
					color = arrowLeft[x][y];
 800207e:	7c3a      	ldrb	r2, [r7, #16]
 8002080:	7c7b      	ldrb	r3, [r7, #17]
 8002082:	4935      	ldr	r1, [pc, #212]	; (8002158 <DrawBitmap+0x278>)
 8002084:	2032      	movs	r0, #50	; 0x32
 8002086:	fb00 f202 	mul.w	r2, r0, r2
 800208a:	440a      	add	r2, r1
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + BITMAPSIZE - x, yp + BITMAPSIZE - y,
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	b29a      	uxth	r2, r3
 8002096:	7c3b      	ldrb	r3, [r7, #16]
 8002098:	b29b      	uxth	r3, r3
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	b29b      	uxth	r3, r3
 800209e:	3332      	adds	r3, #50	; 0x32
 80020a0:	b298      	uxth	r0, r3
 80020a2:	797b      	ldrb	r3, [r7, #5]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	7c7b      	ldrb	r3, [r7, #17]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3332      	adds	r3, #50	; 0x32
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	7afa      	ldrb	r2, [r7, #11]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f000 f901 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 80020ba:	7c3b      	ldrb	r3, [r7, #16]
 80020bc:	3301      	adds	r3, #1
 80020be:	743b      	strb	r3, [r7, #16]
 80020c0:	7c3b      	ldrb	r3, [r7, #16]
 80020c2:	2b31      	cmp	r3, #49	; 0x31
 80020c4:	d9d0      	bls.n	8002068 <DrawBitmap+0x188>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 80020c6:	7c7b      	ldrb	r3, [r7, #17]
 80020c8:	3301      	adds	r3, #1
 80020ca:	747b      	strb	r3, [r7, #17]
 80020cc:	7c7b      	ldrb	r3, [r7, #17]
 80020ce:	2b31      	cmp	r3, #49	; 0x31
 80020d0:	d9c7      	bls.n	8002062 <DrawBitmap+0x182>
				}
			}
		}
	}

	if (selector == SMILEY) //smileyFace
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d136      	bne.n	8002146 <DrawBitmap+0x266>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e030      	b.n	8002140 <DrawBitmap+0x260>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 80020de:	2300      	movs	r3, #0
 80020e0:	73bb      	strb	r3, [r7, #14]
 80020e2:	e027      	b.n	8002134 <DrawBitmap+0x254>
				if (smiley[y][x] != 0b10010000) {
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	491c      	ldr	r1, [pc, #112]	; (800215c <DrawBitmap+0x27c>)
 80020ea:	2032      	movs	r0, #50	; 0x32
 80020ec:	fb00 f202 	mul.w	r2, r0, r2
 80020f0:	440a      	add	r2, r1
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b90      	cmp	r3, #144	; 0x90
 80020f8:	d019      	beq.n	800212e <DrawBitmap+0x24e>
					color = smiley[y][x];
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	7bbb      	ldrb	r3, [r7, #14]
 80020fe:	4917      	ldr	r1, [pc, #92]	; (800215c <DrawBitmap+0x27c>)
 8002100:	2032      	movs	r0, #50	; 0x32
 8002102:	fb00 f202 	mul.w	r2, r0, r2
 8002106:	440a      	add	r2, r1
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + x, yp + y, color);
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	b29a      	uxth	r2, r3
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4413      	add	r3, r2
 8002118:	b298      	uxth	r0, r3
 800211a:	797b      	ldrb	r3, [r7, #5]
 800211c:	b29a      	uxth	r2, r3
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	b29b      	uxth	r3, r3
 8002122:	4413      	add	r3, r2
 8002124:	b29b      	uxth	r3, r3
 8002126:	7afa      	ldrb	r2, [r7, #11]
 8002128:	4619      	mov	r1, r3
 800212a:	f000 f8c7 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 800212e:	7bbb      	ldrb	r3, [r7, #14]
 8002130:	3301      	adds	r3, #1
 8002132:	73bb      	strb	r3, [r7, #14]
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	2b31      	cmp	r3, #49	; 0x31
 8002138:	d9d4      	bls.n	80020e4 <DrawBitmap+0x204>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3301      	adds	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2b31      	cmp	r3, #49	; 0x31
 8002144:	d9cb      	bls.n	80020de <DrawBitmap+0x1fe>

				}
			}
		}
	}
	if (selector == ANGRY) //Anrgy Face
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b06      	cmp	r3, #6
 800214a:	d13a      	bne.n	80021c2 <DrawBitmap+0x2e2>
	{
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 800214c:	2300      	movs	r3, #0
 800214e:	737b      	strb	r3, [r7, #13]
 8002150:	e034      	b.n	80021bc <DrawBitmap+0x2dc>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 8002152:	2300      	movs	r3, #0
 8002154:	733b      	strb	r3, [r7, #12]
 8002156:	e02b      	b.n	80021b0 <DrawBitmap+0x2d0>
 8002158:	20000078 	.word	0x20000078
 800215c:	20000a3c 	.word	0x20000a3c
				if (angry[y][x] != 0b10010000) {
 8002160:	7b7a      	ldrb	r2, [r7, #13]
 8002162:	7b3b      	ldrb	r3, [r7, #12]
 8002164:	4919      	ldr	r1, [pc, #100]	; (80021cc <DrawBitmap+0x2ec>)
 8002166:	2032      	movs	r0, #50	; 0x32
 8002168:	fb00 f202 	mul.w	r2, r0, r2
 800216c:	440a      	add	r2, r1
 800216e:	4413      	add	r3, r2
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b90      	cmp	r3, #144	; 0x90
 8002174:	d019      	beq.n	80021aa <DrawBitmap+0x2ca>
					color = angry[y][x];
 8002176:	7b7a      	ldrb	r2, [r7, #13]
 8002178:	7b3b      	ldrb	r3, [r7, #12]
 800217a:	4914      	ldr	r1, [pc, #80]	; (80021cc <DrawBitmap+0x2ec>)
 800217c:	2032      	movs	r0, #50	; 0x32
 800217e:	fb00 f202 	mul.w	r2, r0, r2
 8002182:	440a      	add	r2, r1
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	72fb      	strb	r3, [r7, #11]
					UB_VGA_SetPixel(xp + x, yp + y, color);
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	b29a      	uxth	r2, r3
 800218e:	7b3b      	ldrb	r3, [r7, #12]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4413      	add	r3, r2
 8002194:	b298      	uxth	r0, r3
 8002196:	797b      	ldrb	r3, [r7, #5]
 8002198:	b29a      	uxth	r2, r3
 800219a:	7b7b      	ldrb	r3, [r7, #13]
 800219c:	b29b      	uxth	r3, r3
 800219e:	4413      	add	r3, r2
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	7afa      	ldrb	r2, [r7, #11]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f000 f889 	bl	80022bc <UB_VGA_SetPixel>
			for (uint8_t x = 0; x < BITMAPSIZE; x++) {
 80021aa:	7b3b      	ldrb	r3, [r7, #12]
 80021ac:	3301      	adds	r3, #1
 80021ae:	733b      	strb	r3, [r7, #12]
 80021b0:	7b3b      	ldrb	r3, [r7, #12]
 80021b2:	2b31      	cmp	r3, #49	; 0x31
 80021b4:	d9d4      	bls.n	8002160 <DrawBitmap+0x280>
		for (uint8_t y = 0; y < BITMAPSIZE; y++) {
 80021b6:	7b7b      	ldrb	r3, [r7, #13]
 80021b8:	3301      	adds	r3, #1
 80021ba:	737b      	strb	r3, [r7, #13]
 80021bc:	7b7b      	ldrb	r3, [r7, #13]
 80021be:	2b31      	cmp	r3, #49	; 0x31
 80021c0:	d9c7      	bls.n	8002152 <DrawBitmap+0x272>

				}
			}
		}
	}
}
 80021c2:	bf00      	nop
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20001400 	.word	0x20001400

080021d0 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <UB_VGA_Screen_Init+0x84>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <UB_VGA_Screen_Init+0x84>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <UB_VGA_Screen_Init+0x84>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <UB_VGA_Screen_Init+0x88>)
 80021e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ec:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80021ee:	481b      	ldr	r0, [pc, #108]	; (800225c <UB_VGA_Screen_Init+0x8c>)
 80021f0:	f001 fc11 	bl	8003a16 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80021f4:	210c      	movs	r1, #12
 80021f6:	4819      	ldr	r0, [pc, #100]	; (800225c <UB_VGA_Screen_Init+0x8c>)
 80021f8:	f001 fc5c 	bl	8003ab4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80021fc:	2108      	movs	r1, #8
 80021fe:	4817      	ldr	r0, [pc, #92]	; (800225c <UB_VGA_Screen_Init+0x8c>)
 8002200:	f001 fc96 	bl	8003b30 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <UB_VGA_Screen_Init+0x90>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <UB_VGA_Screen_Init+0x90>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002212:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <UB_VGA_Screen_Init+0x90>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <UB_VGA_Screen_Init+0x90>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8002224:	490f      	ldr	r1, [pc, #60]	; (8002264 <UB_VGA_Screen_Init+0x94>)
 8002226:	f240 1341 	movw	r3, #321	; 0x141
 800222a:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <UB_VGA_Screen_Init+0x98>)
 800222c:	480f      	ldr	r0, [pc, #60]	; (800226c <UB_VGA_Screen_Init+0x9c>)
 800222e:	f000 fa9f 	bl	8002770 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8002232:	480e      	ldr	r0, [pc, #56]	; (800226c <UB_VGA_Screen_Init+0x9c>)
 8002234:	f000 f9ee 	bl	8002614 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <UB_VGA_Screen_Init+0x9c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <UB_VGA_Screen_Init+0x9c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0210 	orr.w	r2, r2, #16
 8002246:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <UB_VGA_Screen_Init+0xa0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a01      	ldr	r2, [pc, #4]	; (8002254 <UB_VGA_Screen_Init+0x84>)
 800224e:	6093      	str	r3, [r2, #8]
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20015070 	.word	0x20015070
 8002258:	40020400 	.word	0x40020400
 800225c:	200022a0 	.word	0x200022a0
 8002260:	20002260 	.word	0x20002260
 8002264:	20002380 	.word	0x20002380
 8002268:	40021015 	.word	0x40021015
 800226c:	200022e0 	.word	0x200022e0
 8002270:	40026488 	.word	0x40026488

08002274 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800227e:	2300      	movs	r3, #0
 8002280:	81bb      	strh	r3, [r7, #12]
 8002282:	e012      	b.n	80022aa <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002284:	2300      	movs	r3, #0
 8002286:	81fb      	strh	r3, [r7, #14]
 8002288:	e008      	b.n	800229c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	89b9      	ldrh	r1, [r7, #12]
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f813 	bl	80022bc <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002296:	89fb      	ldrh	r3, [r7, #14]
 8002298:	3301      	adds	r3, #1
 800229a:	81fb      	strh	r3, [r7, #14]
 800229c:	89fb      	ldrh	r3, [r7, #14]
 800229e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80022a2:	d3f2      	bcc.n	800228a <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80022a4:	89bb      	ldrh	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	81bb      	strh	r3, [r7, #12]
 80022aa:	89bb      	ldrh	r3, [r7, #12]
 80022ac:	2bef      	cmp	r3, #239	; 0xef
 80022ae:	d9e9      	bls.n	8002284 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
 80022c6:	460b      	mov	r3, r1
 80022c8:	80bb      	strh	r3, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80022d4:	d301      	bcc.n	80022da <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80022da:	88bb      	ldrh	r3, [r7, #4]
 80022dc:	2bef      	cmp	r3, #239	; 0xef
 80022de:	d901      	bls.n	80022e4 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80022e4:	88ba      	ldrh	r2, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	441a      	add	r2, r3
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	4413      	add	r3, r2
 80022f4:	4904      	ldr	r1, [pc, #16]	; (8002308 <UB_VGA_SetPixel+0x4c>)
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	54ca      	strb	r2, [r1, r3]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20002380 	.word	0x20002380

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_Init+0x40>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_Init+0x40>)
 8002322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_Init+0x40>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f92b 	bl	8002590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 f808 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7ff f93c 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x54>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f943 	bl	80025fa <HAL_SYSTICK_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d80a      	bhi.n	800239a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800238c:	f000 f90b 	bl	80025a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <HAL_InitTick+0x5c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000074 	.word	0x20000074
 80023a8:	20001dc8 	.word	0x20001dc8
 80023ac:	20001dc4 	.word	0x20001dc4

080023b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x20>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_IncTick+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_IncTick+0x24>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20001dc8 	.word	0x20001dc8
 80023d4:	2001507c 	.word	0x2001507c

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	2001507c 	.word	0x2001507c

080023f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60d3      	str	r3, [r2, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <__NVIC_GetPriorityGrouping+0x18>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 0307 	and.w	r3, r3, #7
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	2b00      	cmp	r3, #0
 8002464:	db0b      	blt.n	800247e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4907      	ldr	r1, [pc, #28]	; (800248c <__NVIC_EnableIRQ+0x38>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2001      	movs	r0, #1
 8002476:	fa00 f202 	lsl.w	r2, r0, r2
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100

08002490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db0a      	blt.n	80024ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	490c      	ldr	r1, [pc, #48]	; (80024dc <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b8:	e00a      	b.n	80024d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	440b      	add	r3, r1
 80024ce:	761a      	strb	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f1c3 0307 	rsb	r3, r3, #7
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf28      	it	cs
 8002502:	2304      	movcs	r3, #4
 8002504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3304      	adds	r3, #4
 800250a:	2b06      	cmp	r3, #6
 800250c:	d902      	bls.n	8002514 <NVIC_EncodePriority+0x30>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3b03      	subs	r3, #3
 8002512:	e000      	b.n	8002516 <NVIC_EncodePriority+0x32>
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800252c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43d9      	mvns	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	4313      	orrs	r3, r2
         );
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255c:	d301      	bcc.n	8002562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255e:	2301      	movs	r3, #1
 8002560:	e00f      	b.n	8002582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <SysTick_Config+0x40>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256a:	210f      	movs	r1, #15
 800256c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002570:	f7ff ff8e 	bl	8002490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <SysTick_Config+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <SysTick_Config+0x40>)
 800257c:	2207      	movs	r2, #7
 800257e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	e000e010 	.word	0xe000e010

08002590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff29 	bl	80023f0 <__NVIC_SetPriorityGrouping>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b8:	f7ff ff3e 	bl	8002438 <__NVIC_GetPriorityGrouping>
 80025bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff ff8e 	bl	80024e4 <NVIC_EncodePriority>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5d 	bl	8002490 <__NVIC_SetPriority>
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff31 	bl	8002454 <__NVIC_EnableIRQ>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffa2 	bl	800254c <SysTick_Config>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff feda 	bl	80023d8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e099      	b.n	8002764 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002650:	e00f      	b.n	8002672 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002652:	f7ff fec1 	bl	80023d8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b05      	cmp	r3, #5
 800265e:	d908      	bls.n	8002672 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e078      	b.n	8002764 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e8      	bne.n	8002652 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_DMA_Init+0x158>)
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800269e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d107      	bne.n	80026dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4313      	orrs	r3, r2
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0307 	bic.w	r3, r3, #7
 80026f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	2b04      	cmp	r3, #4
 8002704:	d117      	bne.n	8002736 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00e      	beq.n	8002736 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fa91 	bl	8002c40 <DMA_CheckFifoParam>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002732:	2301      	movs	r3, #1
 8002734:	e016      	b.n	8002764 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa48 	bl	8002bd4 <DMA_CalcBaseAndBitshift>
 8002744:	4603      	mov	r3, r0
 8002746:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	223f      	movs	r2, #63	; 0x3f
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	f010803f 	.word	0xf010803f

08002770 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_DMA_Start_IT+0x26>
 8002792:	2302      	movs	r3, #2
 8002794:	e040      	b.n	8002818 <HAL_DMA_Start_IT+0xa8>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d12f      	bne.n	800280a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f9da 	bl	8002b78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	223f      	movs	r2, #63	; 0x3f
 80027ca:	409a      	lsls	r2, r3
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0216 	orr.w	r2, r2, #22
 80027de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0208 	orr.w	r2, r2, #8
 80027f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e005      	b.n	8002816 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002812:	2302      	movs	r3, #2
 8002814:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d004      	beq.n	800283e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e00c      	b.n	8002858 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2205      	movs	r2, #5
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002870:	4b8e      	ldr	r3, [pc, #568]	; (8002aac <HAL_DMA_IRQHandler+0x248>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a8e      	ldr	r2, [pc, #568]	; (8002ab0 <HAL_DMA_IRQHandler+0x24c>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a9b      	lsrs	r3, r3, #10
 800287c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	2208      	movs	r2, #8
 8002890:	409a      	lsls	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	2208      	movs	r2, #8
 80028be:	409a      	lsls	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f043 0201 	orr.w	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2201      	movs	r2, #1
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	f043 0202 	orr.w	r2, r3, #2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2204      	movs	r2, #4
 800290c:	409a      	lsls	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d012      	beq.n	800293c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	2204      	movs	r2, #4
 800292a:	409a      	lsls	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f043 0204 	orr.w	r2, r3, #4
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	2210      	movs	r2, #16
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d043      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03c      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	2210      	movs	r2, #16
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d024      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
 8002992:	e01f      	b.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
 80029a4:	e016      	b.n	80029d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0208 	bic.w	r2, r2, #8
 80029c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	2220      	movs	r2, #32
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 808f 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8087 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	2220      	movs	r2, #32
 80029fc:	409a      	lsls	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d136      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0216 	bic.w	r2, r2, #22
 8002a1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <HAL_DMA_IRQHandler+0x1da>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0208 	bic.w	r2, r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	223f      	movs	r2, #63	; 0x3f
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d07e      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
        }
        return;
 8002a7a:	e079      	b.n	8002b70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d031      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
 8002aa8:	e02c      	b.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
 8002aaa:	bf00      	nop
 8002aac:	20000074 	.word	0x20000074
 8002ab0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d023      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
 8002ac4:	e01e      	b.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10f      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0210 	bic.w	r2, r2, #16
 8002ae2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d032      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d022      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d307      	bcc.n	8002b4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f2      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x2cc>
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b4c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
 8002b6e:	e000      	b.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b70:	bf00      	nop
    }
  }
}
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d108      	bne.n	8002bb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bb6:	e007      	b.n	8002bc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	60da      	str	r2, [r3, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3b10      	subs	r3, #16
 8002be4:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <DMA_CalcBaseAndBitshift+0x64>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <DMA_CalcBaseAndBitshift+0x68>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d909      	bls.n	8002c16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	1d1a      	adds	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	659a      	str	r2, [r3, #88]	; 0x58
 8002c14:	e007      	b.n	8002c26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	aaaaaaab 	.word	0xaaaaaaab
 8002c3c:	08005bdc 	.word	0x08005bdc

08002c40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11f      	bne.n	8002c9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d856      	bhi.n	8002d0e <DMA_CheckFifoParam+0xce>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <DMA_CheckFifoParam+0x28>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c8b 	.word	0x08002c8b
 8002c70:	08002c79 	.word	0x08002c79
 8002c74:	08002d0f 	.word	0x08002d0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d046      	beq.n	8002d12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e043      	b.n	8002d12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c92:	d140      	bne.n	8002d16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c98:	e03d      	b.n	8002d16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca2:	d121      	bne.n	8002ce8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d837      	bhi.n	8002d1a <DMA_CheckFifoParam+0xda>
 8002caa:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <DMA_CheckFifoParam+0x70>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cc7 	.word	0x08002cc7
 8002cb8:	08002cc1 	.word	0x08002cc1
 8002cbc:	08002cd9 	.word	0x08002cd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e030      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d025      	beq.n	8002d1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd6:	e022      	b.n	8002d1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ce6:	e01c      	b.n	8002d22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d903      	bls.n	8002cf6 <DMA_CheckFifoParam+0xb6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf4:	e018      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfa:	e015      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e00b      	b.n	8002d26 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e00a      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e008      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e006      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e004      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e002      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
    }
  } 
  
  return status; 
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e16b      	b.n	800302c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 815a 	bne.w	8003026 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d00b      	beq.n	8002d92 <HAL_GPIO_Init+0x5a>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d86:	2b11      	cmp	r3, #17
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d130      	bne.n	8002df4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 0201 	and.w	r2, r3, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0xfc>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b12      	cmp	r3, #18
 8002e32:	d123      	bne.n	8002e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0203 	and.w	r2, r3, #3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80b4 	beq.w	8003026 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b60      	ldr	r3, [pc, #384]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	4a5f      	ldr	r2, [pc, #380]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eda:	4a5b      	ldr	r2, [pc, #364]	; (8003048 <HAL_GPIO_Init+0x310>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_GPIO_Init+0x314>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02b      	beq.n	8002f5e <HAL_GPIO_Init+0x226>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a51      	ldr	r2, [pc, #324]	; (8003050 <HAL_GPIO_Init+0x318>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d025      	beq.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a50      	ldr	r2, [pc, #320]	; (8003054 <HAL_GPIO_Init+0x31c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <HAL_GPIO_Init+0x21e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d019      	beq.n	8002f52 <HAL_GPIO_Init+0x21a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4e      	ldr	r2, [pc, #312]	; (800305c <HAL_GPIO_Init+0x324>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_GPIO_Init+0x216>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4d      	ldr	r2, [pc, #308]	; (8003060 <HAL_GPIO_Init+0x328>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4c      	ldr	r2, [pc, #304]	; (8003064 <HAL_GPIO_Init+0x32c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x20e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4b      	ldr	r2, [pc, #300]	; (8003068 <HAL_GPIO_Init+0x330>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_GPIO_Init+0x20a>
 8002f3e:	2307      	movs	r3, #7
 8002f40:	e00e      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f42:	2308      	movs	r3, #8
 8002f44:	e00c      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f46:	2306      	movs	r3, #6
 8002f48:	e00a      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	e008      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f4e:	2304      	movs	r3, #4
 8002f50:	e006      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e004      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f002 0203 	and.w	r2, r2, #3
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	4093      	lsls	r3, r2
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f70:	4935      	ldr	r1, [pc, #212]	; (8003048 <HAL_GPIO_Init+0x310>)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	3302      	adds	r3, #2
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_GPIO_Init+0x334>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa2:	4a32      	ldr	r2, [pc, #200]	; (800306c <HAL_GPIO_Init+0x334>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fa8:	4b30      	ldr	r3, [pc, #192]	; (800306c <HAL_GPIO_Init+0x334>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fcc:	4a27      	ldr	r2, [pc, #156]	; (800306c <HAL_GPIO_Init+0x334>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_GPIO_Init+0x334>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_GPIO_Init+0x334>)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_GPIO_Init+0x334>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003020:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_GPIO_Init+0x334>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3301      	adds	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	f67f ae90 	bls.w	8002d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	40013800 	.word	0x40013800
 800304c:	40020000 	.word	0x40020000
 8003050:	40020400 	.word	0x40020400
 8003054:	40020800 	.word	0x40020800
 8003058:	40020c00 	.word	0x40020c00
 800305c:	40021000 	.word	0x40021000
 8003060:	40021400 	.word	0x40021400
 8003064:	40021800 	.word	0x40021800
 8003068:	40021c00 	.word	0x40021c00
 800306c:	40013c00 	.word	0x40013c00

08003070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
 800307c:	4613      	mov	r3, r2
 800307e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003080:	787b      	ldrb	r3, [r7, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003086:	887a      	ldrh	r2, [r7, #2]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800308c:	e003      	b.n	8003096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	619a      	str	r2, [r3, #24]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e25e      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d075      	beq.n	80031ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b82      	ldr	r3, [pc, #520]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b7e      	ldr	r3, [pc, #504]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05b      	beq.n	80031ac <HAL_RCC_OscConfig+0x108>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d157      	bne.n	80031ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e239      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x74>
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x98>
 8003122:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6f      	ldr	r2, [pc, #444]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6c      	ldr	r2, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 800313c:	4b69      	ldr	r3, [pc, #420]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a65      	ldr	r2, [pc, #404]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7ff f93c 	bl	80023d8 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7ff f938 	bl	80023d8 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1fe      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xc0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff f928 	bl	80023d8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7ff f924 	bl	80023d8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1ea      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0xe8>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b44      	ldr	r3, [pc, #272]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1be      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4937      	ldr	r1, [pc, #220]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7ff f8dd 	bl	80023d8 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003222:	f7ff f8d9 	bl	80023d8 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e19f      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4925      	ldr	r1, [pc, #148]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7ff f8bc 	bl	80023d8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003264:	f7ff f8b8 	bl	80023d8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e17e      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d036      	beq.n	80032fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7ff f89c 	bl	80023d8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a4:	f7ff f898 	bl	80023d8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e15e      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x200>
 80032c2:	e01b      	b.n	80032fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7ff f885 	bl	80023d8 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e00e      	b.n	80032f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d2:	f7ff f881 	bl	80023d8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d907      	bls.n	80032f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e147      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ea      	bne.n	80032d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8097 	beq.w	8003438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4b81      	ldr	r3, [pc, #516]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b7d      	ldr	r3, [pc, #500]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a7c      	ldr	r2, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b77      	ldr	r3, [pc, #476]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b74      	ldr	r3, [pc, #464]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7ff f841 	bl	80023d8 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7ff f83d 	bl	80023d8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e103      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x2ea>
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x30c>
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5e      	ldr	r2, [pc, #376]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a5b      	ldr	r2, [pc, #364]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 80033b0:	4b58      	ldr	r3, [pc, #352]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a57      	ldr	r2, [pc, #348]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b55      	ldr	r3, [pc, #340]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7ff f802 	bl	80023d8 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe fffe 	bl	80023d8 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0c2      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ee      	beq.n	80033d8 <HAL_RCC_OscConfig+0x334>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fe ffec 	bl	80023d8 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe ffe8 	bl	80023d8 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0ac      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b39      	ldr	r3, [pc, #228]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	4a38      	ldr	r2, [pc, #224]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8098 	beq.w	8003572 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d05c      	beq.n	8003508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d141      	bne.n	80034da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b31      	ldr	r3, [pc, #196]	; (800351c <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe ffbc 	bl	80023d8 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe ffb8 	bl	80023d8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e07e      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	491b      	ldr	r1, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fe ff91 	bl	80023d8 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fe ff8d 	bl	80023d8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e053      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x416>
 80034d8:	e04b      	b.n	8003572 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe ff7a 	bl	80023d8 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe ff76 	bl	80023d8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e03c      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x444>
 8003506:	e034      	b.n	8003572 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e02f      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003520:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	429a      	cmp	r2, r3
 8003532:	d11c      	bne.n	800356e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d115      	bne.n	800356e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800354e:	4293      	cmp	r3, r2
 8003550:	d10d      	bne.n	800356e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800

08003580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0cc      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003594:	4b68      	ldr	r3, [pc, #416]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d90c      	bls.n	80035bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b65      	ldr	r3, [pc, #404]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d044      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d119      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d003      	beq.n	800363e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	2b03      	cmp	r3, #3
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e067      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4934      	ldr	r1, [pc, #208]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	4313      	orrs	r3, r2
 800366e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fe feb2 	bl	80023d8 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	e00a      	b.n	800368e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003678:	f7fe feae 	bl	80023d8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e04f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 020c 	and.w	r2, r3, #12
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1eb      	bne.n	8003678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d20c      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490a      	ldr	r1, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fe12 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023c00 	.word	0x40023c00
 800373c:	40023800 	.word	0x40023800
 8003740:	08005bc4 	.word	0x08005bc4
 8003744:	20000074 	.word	0x20000074
 8003748:	20001dc4 	.word	0x20001dc4

0800374c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003750:	b094      	sub	sp, #80	; 0x50
 8003752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
 8003758:	2300      	movs	r3, #0
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375c:	2300      	movs	r3, #0
 800375e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003764:	4b79      	ldr	r3, [pc, #484]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b08      	cmp	r3, #8
 800376e:	d00d      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x40>
 8003770:	2b08      	cmp	r3, #8
 8003772:	f200 80e1 	bhi.w	8003938 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x34>
 800377a:	2b04      	cmp	r3, #4
 800377c:	d003      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x3a>
 800377e:	e0db      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b73      	ldr	r3, [pc, #460]	; (8003950 <HAL_RCC_GetSysClockFreq+0x204>)
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003784:	e0db      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003786:	4b73      	ldr	r3, [pc, #460]	; (8003954 <HAL_RCC_GetSysClockFreq+0x208>)
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800378a:	e0d8      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800378c:	4b6f      	ldr	r3, [pc, #444]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d063      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	2200      	movs	r2, #0
 80037aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037be:	4622      	mov	r2, r4
 80037c0:	462b      	mov	r3, r5
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	0159      	lsls	r1, r3, #5
 80037cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d0:	0150      	lsls	r0, r2, #5
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4621      	mov	r1, r4
 80037d8:	1a51      	subs	r1, r2, r1
 80037da:	6139      	str	r1, [r7, #16]
 80037dc:	4629      	mov	r1, r5
 80037de:	eb63 0301 	sbc.w	r3, r3, r1
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f0:	4659      	mov	r1, fp
 80037f2:	018b      	lsls	r3, r1, #6
 80037f4:	4651      	mov	r1, sl
 80037f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037fa:	4651      	mov	r1, sl
 80037fc:	018a      	lsls	r2, r1, #6
 80037fe:	4651      	mov	r1, sl
 8003800:	ebb2 0801 	subs.w	r8, r2, r1
 8003804:	4659      	mov	r1, fp
 8003806:	eb63 0901 	sbc.w	r9, r3, r1
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800381e:	4690      	mov	r8, r2
 8003820:	4699      	mov	r9, r3
 8003822:	4623      	mov	r3, r4
 8003824:	eb18 0303 	adds.w	r3, r8, r3
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	462b      	mov	r3, r5
 800382c:	eb49 0303 	adc.w	r3, r9, r3
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800383e:	4629      	mov	r1, r5
 8003840:	024b      	lsls	r3, r1, #9
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003848:	4621      	mov	r1, r4
 800384a:	024a      	lsls	r2, r1, #9
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003852:	2200      	movs	r2, #0
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
 8003856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800385c:	f7fc feca 	bl	80005f4 <__aeabi_uldivmod>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4613      	mov	r3, r2
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003868:	e058      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386a:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	2200      	movs	r2, #0
 8003872:	4618      	mov	r0, r3
 8003874:	4611      	mov	r1, r2
 8003876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	f04f 0000 	mov.w	r0, #0
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	0159      	lsls	r1, r3, #5
 8003892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003896:	0150      	lsls	r0, r2, #5
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4641      	mov	r1, r8
 800389e:	ebb2 0a01 	subs.w	sl, r2, r1
 80038a2:	4649      	mov	r1, r9
 80038a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038bc:	ebb2 040a 	subs.w	r4, r2, sl
 80038c0:	eb63 050b 	sbc.w	r5, r3, fp
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	464b      	mov	r3, r9
 80038e0:	eb45 0303 	adc.w	r3, r5, r3
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f2:	4629      	mov	r1, r5
 80038f4:	028b      	lsls	r3, r1, #10
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038fc:	4621      	mov	r1, r4
 80038fe:	028a      	lsls	r2, r1, #10
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003906:	2200      	movs	r2, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	61fa      	str	r2, [r7, #28]
 800390c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003910:	f7fc fe70 	bl	80005f4 <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	3301      	adds	r3, #1
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800392c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800392e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003936:	e002      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetSysClockFreq+0x204>)
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800393c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003940:	4618      	mov	r0, r3
 8003942:	3750      	adds	r7, #80	; 0x50
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200

08003958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCC_GetHCLKFreq+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000074 	.word	0x20000074

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003974:	f7ff fff0 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0a9b      	lsrs	r3, r3, #10
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	08005bd4 	.word	0x08005bd4

08003998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800399c:	f7ff ffdc 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0b5b      	lsrs	r3, r3, #13
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08005bd4 	.word	0x08005bd4

080039c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e01d      	b.n	8003a0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd ffd6 	bl	8001998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 fbde 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d007      	beq.n	8003a48 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e01d      	b.n	8003aac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd ffd9 	bl	8001a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f000 fb8f 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fe64 	bl	8004794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_TIM_PWM_Start+0x74>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_TIM_PWM_Start+0x2c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <HAL_TIM_PWM_Start+0x78>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIM_PWM_Start+0x30>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_PWM_Start+0x32>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b06      	cmp	r3, #6
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40010400 	.word	0x40010400

08003b30 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	d841      	bhi.n	8003bc4 <HAL_TIM_PWM_Start_IT+0x94>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_TIM_PWM_Start_IT+0x18>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b7d 	.word	0x08003b7d
 8003b4c:	08003bc5 	.word	0x08003bc5
 8003b50:	08003bc5 	.word	0x08003bc5
 8003b54:	08003bc5 	.word	0x08003bc5
 8003b58:	08003b8f 	.word	0x08003b8f
 8003b5c:	08003bc5 	.word	0x08003bc5
 8003b60:	08003bc5 	.word	0x08003bc5
 8003b64:	08003bc5 	.word	0x08003bc5
 8003b68:	08003ba1 	.word	0x08003ba1
 8003b6c:	08003bc5 	.word	0x08003bc5
 8003b70:	08003bc5 	.word	0x08003bc5
 8003b74:	08003bc5 	.word	0x08003bc5
 8003b78:	08003bb3 	.word	0x08003bb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0202 	orr.w	r2, r2, #2
 8003b8a:	60da      	str	r2, [r3, #12]
      break;
 8003b8c:	e01b      	b.n	8003bc6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0204 	orr.w	r2, r2, #4
 8003b9c:	60da      	str	r2, [r3, #12]
      break;
 8003b9e:	e012      	b.n	8003bc6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0208 	orr.w	r2, r2, #8
 8003bae:	60da      	str	r2, [r3, #12]
      break;
 8003bb0:	e009      	b.n	8003bc6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0210 	orr.w	r2, r2, #16
 8003bc0:	60da      	str	r2, [r3, #12]
      break;
 8003bc2:	e000      	b.n	8003bc6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003bc4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	6839      	ldr	r1, [r7, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fde0 	bl	8004794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_TIM_PWM_Start_IT+0x100>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_TIM_PWM_Start_IT+0xb8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <HAL_TIM_PWM_Start_IT+0x104>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_TIM_PWM_Start_IT+0xbc>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_TIM_PWM_Start_IT+0xbe>
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d007      	beq.n	8003c24 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40010400 	.word	0x40010400

08003c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0202 	mvn.w	r2, #2
 8003c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa82 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa74 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fa85 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d122      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d11b      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0204 	mvn.w	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa58 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fa4a 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fa5b 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0208 	mvn.w	r2, #8
 8003d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2204      	movs	r2, #4
 8003d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa2e 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa20 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fa31 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0210 	mvn.w	r2, #16
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2208      	movs	r2, #8
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fa04 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f9f6 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fa07 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0201 	mvn.w	r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9d0 	bl	800415c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fd82 	bl	80048ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f9cc 	bl	80041ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0220 	mvn.w	r2, #32
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fd4c 	bl	80048d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0b4      	b.n	8003fcc <HAL_TIM_PWM_ConfigChannel+0x184>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b0c      	cmp	r3, #12
 8003e76:	f200 809f 	bhi.w	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003eb5 	.word	0x08003eb5
 8003e84:	08003fb9 	.word	0x08003fb9
 8003e88:	08003fb9 	.word	0x08003fb9
 8003e8c:	08003fb9 	.word	0x08003fb9
 8003e90:	08003ef5 	.word	0x08003ef5
 8003e94:	08003fb9 	.word	0x08003fb9
 8003e98:	08003fb9 	.word	0x08003fb9
 8003e9c:	08003fb9 	.word	0x08003fb9
 8003ea0:	08003f37 	.word	0x08003f37
 8003ea4:	08003fb9 	.word	0x08003fb9
 8003ea8:	08003fb9 	.word	0x08003fb9
 8003eac:	08003fb9 	.word	0x08003fb9
 8003eb0:	08003f77 	.word	0x08003f77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fa20 	bl	8004300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0208 	orr.w	r2, r2, #8
 8003ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0204 	bic.w	r2, r2, #4
 8003ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6999      	ldr	r1, [r3, #24]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	619a      	str	r2, [r3, #24]
      break;
 8003ef2:	e062      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fa70 	bl	80043e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6999      	ldr	r1, [r3, #24]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	021a      	lsls	r2, r3, #8
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	619a      	str	r2, [r3, #24]
      break;
 8003f34:	e041      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fac5 	bl	80044cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0208 	orr.w	r2, r2, #8
 8003f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0204 	bic.w	r2, r2, #4
 8003f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69d9      	ldr	r1, [r3, #28]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	61da      	str	r2, [r3, #28]
      break;
 8003f74:	e021      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fb19 	bl	80045b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69d9      	ldr	r1, [r3, #28]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	021a      	lsls	r2, r3, #8
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	61da      	str	r2, [r3, #28]
      break;
 8003fb6:	e000      	b.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003fb8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIM_ConfigClockSource+0x18>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e0b3      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x180>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800400a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004012:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004024:	d03e      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0xd0>
 8004026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402a:	f200 8087 	bhi.w	800413c <HAL_TIM_ConfigClockSource+0x168>
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004032:	f000 8085 	beq.w	8004140 <HAL_TIM_ConfigClockSource+0x16c>
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403a:	d87f      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 800403c:	2b70      	cmp	r3, #112	; 0x70
 800403e:	d01a      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0xa2>
 8004040:	2b70      	cmp	r3, #112	; 0x70
 8004042:	d87b      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 8004044:	2b60      	cmp	r3, #96	; 0x60
 8004046:	d050      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x116>
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d877      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 800404c:	2b50      	cmp	r3, #80	; 0x50
 800404e:	d03c      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0xf6>
 8004050:	2b50      	cmp	r3, #80	; 0x50
 8004052:	d873      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d058      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x136>
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d86f      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 800405c:	2b30      	cmp	r3, #48	; 0x30
 800405e:	d064      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x156>
 8004060:	2b30      	cmp	r3, #48	; 0x30
 8004062:	d86b      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 8004064:	2b20      	cmp	r3, #32
 8004066:	d060      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x156>
 8004068:	2b20      	cmp	r3, #32
 800406a:	d867      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x168>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05c      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x156>
 8004070:	2b10      	cmp	r3, #16
 8004072:	d05a      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004074:	e062      	b.n	800413c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f000 fb65 	bl	8004754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004098:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	609a      	str	r2, [r3, #8]
      break;
 80040a2:	e04e      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f000 fb4e 	bl	8004754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c6:	609a      	str	r2, [r3, #8]
      break;
 80040c8:	e03b      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 fac2 	bl	8004660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2150      	movs	r1, #80	; 0x50
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fb1b 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 80040e8:	e02b      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 fae1 	bl	80046be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2160      	movs	r1, #96	; 0x60
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fb0b 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 8004108:	e01b      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	461a      	mov	r2, r3
 8004118:	f000 faa2 	bl	8004660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2140      	movs	r1, #64	; 0x40
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fafb 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 8004128:	e00b      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f000 faf2 	bl	800471e <TIM_ITRx_SetConfig>
      break;
 800413a:	e002      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004140:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a40      	ldr	r2, [pc, #256]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d00f      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a3d      	ldr	r2, [pc, #244]	; (80042d8 <TIM_Base_SetConfig+0x118>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00b      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a3c      	ldr	r2, [pc, #240]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a3b      	ldr	r2, [pc, #236]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a3a      	ldr	r2, [pc, #232]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2f      	ldr	r2, [pc, #188]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d02b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d027      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <TIM_Base_SetConfig+0x118>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d023      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2b      	ldr	r2, [pc, #172]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01f      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d017      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <TIM_Base_SetConfig+0x128>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <TIM_Base_SetConfig+0x12c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00f      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <TIM_Base_SetConfig+0x130>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <TIM_Base_SetConfig+0x134>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d007      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <TIM_Base_SetConfig+0x138>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d003      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a23      	ldr	r2, [pc, #140]	; (80042fc <TIM_Base_SetConfig+0x13c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d108      	bne.n	8004284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0xf8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d103      	bne.n	80042c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	615a      	str	r2, [r3, #20]
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40000c00 	.word	0x40000c00
 80042e4:	40010400 	.word	0x40010400
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800
 80042f4:	40001800 	.word	0x40001800
 80042f8:	40001c00 	.word	0x40001c00
 80042fc:	40002000 	.word	0x40002000

08004300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 0302 	bic.w	r3, r3, #2
 8004348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <TIM_OC1_SetConfig+0xd8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_OC1_SetConfig+0x64>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <TIM_OC1_SetConfig+0xdc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10c      	bne.n	800437e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0308 	bic.w	r3, r3, #8
 800436a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 0304 	bic.w	r3, r3, #4
 800437c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <TIM_OC1_SetConfig+0xd8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_OC1_SetConfig+0x8e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a14      	ldr	r2, [pc, #80]	; (80043dc <TIM_OC1_SetConfig+0xdc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d111      	bne.n	80043b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800439c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40010400 	.word	0x40010400

080043e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f023 0210 	bic.w	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0320 	bic.w	r3, r3, #32
 800442a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <TIM_OC2_SetConfig+0xe4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_OC2_SetConfig+0x68>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <TIM_OC2_SetConfig+0xe8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10d      	bne.n	8004464 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <TIM_OC2_SetConfig+0xe4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_OC2_SetConfig+0x94>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <TIM_OC2_SetConfig+0xe8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d113      	bne.n	800449c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800447a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40010400 	.word	0x40010400

080044cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a21      	ldr	r2, [pc, #132]	; (80045ac <TIM_OC3_SetConfig+0xe0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_OC3_SetConfig+0x66>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <TIM_OC3_SetConfig+0xe4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10d      	bne.n	800454e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800454c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a16      	ldr	r2, [pc, #88]	; (80045ac <TIM_OC3_SetConfig+0xe0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_OC3_SetConfig+0x92>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <TIM_OC3_SetConfig+0xe4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40010000 	.word	0x40010000
 80045b0:	40010400 	.word	0x40010400

080045b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	031b      	lsls	r3, r3, #12
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <TIM_OC4_SetConfig+0xa4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_OC4_SetConfig+0x68>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a11      	ldr	r2, [pc, #68]	; (800465c <TIM_OC4_SetConfig+0xa8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d109      	bne.n	8004630 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	019b      	lsls	r3, r3, #6
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40010400 	.word	0x40010400

08004660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f023 0201 	bic.w	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800468a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 030a 	bic.w	r3, r3, #10
 800469c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046be:	b480      	push	{r7}
 80046c0:	b087      	sub	sp, #28
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	031b      	lsls	r3, r3, #12
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	f043 0307 	orr.w	r3, r3, #7
 8004740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800476e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	431a      	orrs	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4313      	orrs	r3, r2
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	609a      	str	r2, [r3, #8]
}
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2201      	movs	r2, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1a      	ldr	r2, [r3, #32]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	401a      	ands	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1a      	ldr	r2, [r3, #32]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e05a      	b.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a21      	ldr	r2, [pc, #132]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004844:	d01d      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1d      	ldr	r2, [pc, #116]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d018      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a18      	ldr	r2, [pc, #96]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d009      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10c      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40010400 	.word	0x40010400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40001800 	.word	0x40001800

080048d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e03f      	b.n	8004992 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fd f910 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	; 0x24
 8004930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fabd 	bl	8004ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	4613      	mov	r3, r2
 80049a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d140      	bne.n	8004a36 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_UART_Receive_IT+0x26>
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e039      	b.n	8004a38 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Receive_IT+0x38>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e032      	b.n	8004a38 <HAL_UART_Receive_IT+0x9e>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2222      	movs	r2, #34	; 0x22
 80049f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a10:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0220 	orr.w	r2, r2, #32
 8004a30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10d      	bne.n	8004a96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_UART_IRQHandler+0x52>
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f996 	bl	8004dc0 <UART_Receive_IT>
      return;
 8004a94:	e0d0      	b.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80b0 	beq.w	8004bfe <HAL_UART_IRQHandler+0x1ba>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_UART_IRQHandler+0x70>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80a5 	beq.w	8004bfe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x90>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	f043 0201 	orr.w	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_UART_IRQHandler+0xb0>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	f043 0202 	orr.w	r2, r3, #2
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_UART_IRQHandler+0xd0>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	f043 0204 	orr.w	r2, r3, #4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00f      	beq.n	8004b3e <HAL_UART_IRQHandler+0xfa>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <HAL_UART_IRQHandler+0xee>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	f043 0208 	orr.w	r2, r3, #8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d077      	beq.n	8004c36 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <HAL_UART_IRQHandler+0x11c>
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f930 	bl	8004dc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <HAL_UART_IRQHandler+0x144>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d031      	beq.n	8004bec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f879 	bl	8004c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d123      	bne.n	8004be4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695a      	ldr	r2, [r3, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004baa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	4a21      	ldr	r2, [pc, #132]	; (8004c40 <HAL_UART_IRQHandler+0x1fc>)
 8004bba:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fd fe2d 	bl	8002820 <HAL_DMA_Abort_IT>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d016      	beq.n	8004bfa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bda:	e00e      	b.n	8004bfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f845 	bl	8004c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be2:	e00a      	b.n	8004bfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f841 	bl	8004c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bea:	e006      	b.n	8004bfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f83d 	bl	8004c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004bf8:	e01d      	b.n	8004c36 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfa:	bf00      	nop
    return;
 8004bfc:	e01b      	b.n	8004c36 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f866 	bl	8004ce4 <UART_Transmit_IT>
    return;
 8004c18:	e00e      	b.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d009      	beq.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f8ae 	bl	8004d90 <UART_EndTransmit_IT>
    return;
 8004c34:	e000      	b.n	8004c38 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004c36:	bf00      	nop
  }
}
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	08004cbd 	.word	0x08004cbd

08004c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff ffc8 	bl	8004c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b21      	cmp	r3, #33	; 0x21
 8004cf6:	d144      	bne.n	8004d82 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	d11a      	bne.n	8004d38 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d16:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]
 8004d2a:	e00e      	b.n	8004d4a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	621a      	str	r2, [r3, #32]
 8004d36:	e008      	b.n	8004d4a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	1c59      	adds	r1, r3, #1
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6211      	str	r1, [r2, #32]
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4619      	mov	r1, r3
 8004d58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e000      	b.n	8004d84 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
  }
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff47 	bl	8004c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b22      	cmp	r3, #34	; 0x22
 8004dd2:	d171      	bne.n	8004eb8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ddc:	d123      	bne.n	8004e26 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10e      	bne.n	8004e0a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28
 8004e08:	e029      	b.n	8004e5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
 8004e24:	e01b      	b.n	8004e5e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6858      	ldr	r0, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	1c59      	adds	r1, r3, #1
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6291      	str	r1, [r2, #40]	; 0x28
 8004e3e:	b2c2      	uxtb	r2, r0
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e00c      	b.n	8004e5e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	1c58      	adds	r0, r3, #1
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	6288      	str	r0, [r1, #40]	; 0x28
 8004e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d120      	bne.n	8004eb4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0220 	bic.w	r2, r2, #32
 8004e80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fed4 	bl	8004c58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e002      	b.n	8004eba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ede:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ee2:	68d9      	ldr	r1, [r3, #12]
 8004ee4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	ea40 0301 	orr.w	r3, r0, r1
 8004eee:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004f12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f1e:	f021 010c 	bic.w	r1, r1, #12
 8004f22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	ea40 0301 	orr.w	r3, r0, r1
 8004f4c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f58:	f040 824a 	bne.w	80053f0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b96      	ldr	r3, [pc, #600]	; (80051bc <UART_SetConfig+0x2f8>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d006      	beq.n	8004f76 <UART_SetConfig+0xb2>
 8004f68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4b94      	ldr	r3, [pc, #592]	; (80051c0 <UART_SetConfig+0x2fc>)
 8004f70:	429a      	cmp	r2, r3
 8004f72:	f040 8129 	bne.w	80051c8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f76:	f7fe fd0f 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 8004f7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004f88:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004f8c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004f90:	4622      	mov	r2, r4
 8004f92:	462b      	mov	r3, r5
 8004f94:	1891      	adds	r1, r2, r2
 8004f96:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004f9a:	415b      	adcs	r3, r3
 8004f9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fa0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	1851      	adds	r1, r2, r1
 8004fa8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004fac:	4629      	mov	r1, r5
 8004fae:	414b      	adcs	r3, r1
 8004fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	00cb      	lsls	r3, r1, #3
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fca:	4641      	mov	r1, r8
 8004fcc:	00ca      	lsls	r2, r1, #3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004fdc:	462b      	mov	r3, r5
 8004fde:	460a      	mov	r2, r1
 8004fe0:	eb42 0303 	adc.w	r3, r2, r3
 8004fe4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004fe8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ff4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004ff8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	18db      	adds	r3, r3, r3
 8005000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005004:	4613      	mov	r3, r2
 8005006:	eb42 0303 	adc.w	r3, r2, r3
 800500a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800500e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8005012:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005016:	f7fb faed 	bl	80005f4 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4b69      	ldr	r3, [pc, #420]	; (80051c4 <UART_SetConfig+0x300>)
 8005020:	fba3 2302 	umull	r2, r3, r3, r2
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	011c      	lsls	r4, r3, #4
 8005028:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800502c:	2200      	movs	r2, #0
 800502e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005032:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005036:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800503a:	4642      	mov	r2, r8
 800503c:	464b      	mov	r3, r9
 800503e:	1891      	adds	r1, r2, r2
 8005040:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005044:	415b      	adcs	r3, r3
 8005046:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800504a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800504e:	4641      	mov	r1, r8
 8005050:	1851      	adds	r1, r2, r1
 8005052:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005056:	4649      	mov	r1, r9
 8005058:	414b      	adcs	r3, r1
 800505a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800506a:	4659      	mov	r1, fp
 800506c:	00cb      	lsls	r3, r1, #3
 800506e:	4651      	mov	r1, sl
 8005070:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005074:	4651      	mov	r1, sl
 8005076:	00ca      	lsls	r2, r1, #3
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	4603      	mov	r3, r0
 800507e:	4642      	mov	r2, r8
 8005080:	189b      	adds	r3, r3, r2
 8005082:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005086:	464b      	mov	r3, r9
 8005088:	460a      	mov	r2, r1
 800508a:	eb42 0303 	adc.w	r3, r2, r3
 800508e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8005092:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800509e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80050a2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80050a6:	460b      	mov	r3, r1
 80050a8:	18db      	adds	r3, r3, r3
 80050aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ae:	4613      	mov	r3, r2
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050b8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80050bc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80050c0:	f7fb fa98 	bl	80005f4 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4611      	mov	r1, r2
 80050ca:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <UART_SetConfig+0x300>)
 80050cc:	fba3 2301 	umull	r2, r3, r3, r1
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	2264      	movs	r2, #100	; 0x64
 80050d4:	fb02 f303 	mul.w	r3, r2, r3
 80050d8:	1acb      	subs	r3, r1, r3
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050e0:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <UART_SetConfig+0x300>)
 80050e2:	fba3 2302 	umull	r2, r3, r3, r2
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050ee:	441c      	add	r4, r3
 80050f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050fa:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80050fe:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8005102:	4642      	mov	r2, r8
 8005104:	464b      	mov	r3, r9
 8005106:	1891      	adds	r1, r2, r2
 8005108:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800510c:	415b      	adcs	r3, r3
 800510e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005112:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005116:	4641      	mov	r1, r8
 8005118:	1851      	adds	r1, r2, r1
 800511a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800511e:	4649      	mov	r1, r9
 8005120:	414b      	adcs	r3, r1
 8005122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8005132:	4659      	mov	r1, fp
 8005134:	00cb      	lsls	r3, r1, #3
 8005136:	4651      	mov	r1, sl
 8005138:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513c:	4651      	mov	r1, sl
 800513e:	00ca      	lsls	r2, r1, #3
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	4603      	mov	r3, r0
 8005146:	4642      	mov	r2, r8
 8005148:	189b      	adds	r3, r3, r2
 800514a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800514e:	464b      	mov	r3, r9
 8005150:	460a      	mov	r2, r1
 8005152:	eb42 0303 	adc.w	r3, r2, r3
 8005156:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800515a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005166:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800516a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800516e:	460b      	mov	r3, r1
 8005170:	18db      	adds	r3, r3, r3
 8005172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005176:	4613      	mov	r3, r2
 8005178:	eb42 0303 	adc.w	r3, r2, r3
 800517c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005180:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005184:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8005188:	f7fb fa34 	bl	80005f4 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <UART_SetConfig+0x300>)
 8005192:	fba3 1302 	umull	r1, r3, r3, r2
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	2164      	movs	r1, #100	; 0x64
 800519a:	fb01 f303 	mul.w	r3, r1, r3
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	3332      	adds	r3, #50	; 0x32
 80051a4:	4a07      	ldr	r2, [pc, #28]	; (80051c4 <UART_SetConfig+0x300>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	f003 0207 	and.w	r2, r3, #7
 80051b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4422      	add	r2, r4
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	e349      	b.n	8005850 <UART_SetConfig+0x98c>
 80051bc:	40011000 	.word	0x40011000
 80051c0:	40011400 	.word	0x40011400
 80051c4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7fe fbd2 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 80051cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80051da:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80051de:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80051e2:	4622      	mov	r2, r4
 80051e4:	462b      	mov	r3, r5
 80051e6:	1891      	adds	r1, r2, r2
 80051e8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80051ec:	415b      	adcs	r3, r3
 80051ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80051f6:	4621      	mov	r1, r4
 80051f8:	eb12 0a01 	adds.w	sl, r2, r1
 80051fc:	4629      	mov	r1, r5
 80051fe:	eb43 0b01 	adc.w	fp, r3, r1
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800520e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005212:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005216:	4692      	mov	sl, r2
 8005218:	469b      	mov	fp, r3
 800521a:	4623      	mov	r3, r4
 800521c:	eb1a 0303 	adds.w	r3, sl, r3
 8005220:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005224:	462b      	mov	r3, r5
 8005226:	eb4b 0303 	adc.w	r3, fp, r3
 800522a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800522e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800523a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800523e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8005242:	460b      	mov	r3, r1
 8005244:	18db      	adds	r3, r3, r3
 8005246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800524a:	4613      	mov	r3, r2
 800524c:	eb42 0303 	adc.w	r3, r2, r3
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005254:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005258:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800525c:	f7fb f9ca 	bl	80005f4 <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4b61      	ldr	r3, [pc, #388]	; (80053ec <UART_SetConfig+0x528>)
 8005266:	fba3 2302 	umull	r2, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	011c      	lsls	r4, r3, #4
 800526e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005272:	2200      	movs	r2, #0
 8005274:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005278:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800527c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	1891      	adds	r1, r2, r2
 8005286:	67b9      	str	r1, [r7, #120]	; 0x78
 8005288:	415b      	adcs	r3, r3
 800528a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800528c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005290:	4641      	mov	r1, r8
 8005292:	1851      	adds	r1, r2, r1
 8005294:	6739      	str	r1, [r7, #112]	; 0x70
 8005296:	4649      	mov	r1, r9
 8005298:	414b      	adcs	r3, r1
 800529a:	677b      	str	r3, [r7, #116]	; 0x74
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80052a8:	4659      	mov	r1, fp
 80052aa:	00cb      	lsls	r3, r1, #3
 80052ac:	4651      	mov	r1, sl
 80052ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b2:	4651      	mov	r1, sl
 80052b4:	00ca      	lsls	r2, r1, #3
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	4642      	mov	r2, r8
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80052c4:	464b      	mov	r3, r9
 80052c6:	460a      	mov	r2, r1
 80052c8:	eb42 0303 	adc.w	r3, r2, r3
 80052cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80052d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80052dc:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80052e0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80052e4:	460b      	mov	r3, r1
 80052e6:	18db      	adds	r3, r3, r3
 80052e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ea:	4613      	mov	r3, r2
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80052f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80052fa:	f7fb f97b 	bl	80005f4 <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4611      	mov	r1, r2
 8005304:	4b39      	ldr	r3, [pc, #228]	; (80053ec <UART_SetConfig+0x528>)
 8005306:	fba3 2301 	umull	r2, r3, r3, r1
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	2264      	movs	r2, #100	; 0x64
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	1acb      	subs	r3, r1, r3
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800531a:	4b34      	ldr	r3, [pc, #208]	; (80053ec <UART_SetConfig+0x528>)
 800531c:	fba3 2302 	umull	r2, r3, r3, r2
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005328:	441c      	add	r4, r3
 800532a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800532e:	2200      	movs	r2, #0
 8005330:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005334:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005338:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800533c:	4642      	mov	r2, r8
 800533e:	464b      	mov	r3, r9
 8005340:	1891      	adds	r1, r2, r2
 8005342:	6639      	str	r1, [r7, #96]	; 0x60
 8005344:	415b      	adcs	r3, r3
 8005346:	667b      	str	r3, [r7, #100]	; 0x64
 8005348:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800534c:	4641      	mov	r1, r8
 800534e:	1851      	adds	r1, r2, r1
 8005350:	65b9      	str	r1, [r7, #88]	; 0x58
 8005352:	4649      	mov	r1, r9
 8005354:	414b      	adcs	r3, r1
 8005356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005364:	4659      	mov	r1, fp
 8005366:	00cb      	lsls	r3, r1, #3
 8005368:	4651      	mov	r1, sl
 800536a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800536e:	4651      	mov	r1, sl
 8005370:	00ca      	lsls	r2, r1, #3
 8005372:	4610      	mov	r0, r2
 8005374:	4619      	mov	r1, r3
 8005376:	4603      	mov	r3, r0
 8005378:	4642      	mov	r2, r8
 800537a:	189b      	adds	r3, r3, r2
 800537c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005380:	464b      	mov	r3, r9
 8005382:	460a      	mov	r2, r1
 8005384:	eb42 0303 	adc.w	r3, r2, r3
 8005388:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800538c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005398:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800539c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80053a0:	460b      	mov	r3, r1
 80053a2:	18db      	adds	r3, r3, r3
 80053a4:	653b      	str	r3, [r7, #80]	; 0x50
 80053a6:	4613      	mov	r3, r2
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	657b      	str	r3, [r7, #84]	; 0x54
 80053ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053b2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80053b6:	f7fb f91d 	bl	80005f4 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <UART_SetConfig+0x528>)
 80053c0:	fba3 1302 	umull	r1, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	2164      	movs	r1, #100	; 0x64
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	3332      	adds	r3, #50	; 0x32
 80053d2:	4a06      	ldr	r2, [pc, #24]	; (80053ec <UART_SetConfig+0x528>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	f003 0207 	and.w	r2, r3, #7
 80053de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4422      	add	r2, r4
 80053e6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80053e8:	e232      	b.n	8005850 <UART_SetConfig+0x98c>
 80053ea:	bf00      	nop
 80053ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b8d      	ldr	r3, [pc, #564]	; (800562c <UART_SetConfig+0x768>)
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d006      	beq.n	800540a <UART_SetConfig+0x546>
 80053fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b8b      	ldr	r3, [pc, #556]	; (8005630 <UART_SetConfig+0x76c>)
 8005404:	429a      	cmp	r2, r3
 8005406:	f040 8117 	bne.w	8005638 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800540a:	f7fe fac5 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 800540e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005412:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005416:	2200      	movs	r2, #0
 8005418:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800541c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005420:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005424:	4622      	mov	r2, r4
 8005426:	462b      	mov	r3, r5
 8005428:	1891      	adds	r1, r2, r2
 800542a:	64b9      	str	r1, [r7, #72]	; 0x48
 800542c:	415b      	adcs	r3, r3
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005434:	4621      	mov	r1, r4
 8005436:	eb12 0801 	adds.w	r8, r2, r1
 800543a:	4629      	mov	r1, r5
 800543c:	eb43 0901 	adc.w	r9, r3, r1
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800544c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005450:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005454:	4690      	mov	r8, r2
 8005456:	4699      	mov	r9, r3
 8005458:	4623      	mov	r3, r4
 800545a:	eb18 0303 	adds.w	r3, r8, r3
 800545e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005462:	462b      	mov	r3, r5
 8005464:	eb49 0303 	adc.w	r3, r9, r3
 8005468:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800546c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005478:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8005488:	4629      	mov	r1, r5
 800548a:	008b      	lsls	r3, r1, #2
 800548c:	4621      	mov	r1, r4
 800548e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005492:	4621      	mov	r1, r4
 8005494:	008a      	lsls	r2, r1, #2
 8005496:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800549a:	f7fb f8ab 	bl	80005f4 <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4b64      	ldr	r3, [pc, #400]	; (8005634 <UART_SetConfig+0x770>)
 80054a4:	fba3 2302 	umull	r2, r3, r3, r2
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	011c      	lsls	r4, r3, #4
 80054ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80054b6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80054ba:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80054be:	4642      	mov	r2, r8
 80054c0:	464b      	mov	r3, r9
 80054c2:	1891      	adds	r1, r2, r2
 80054c4:	6439      	str	r1, [r7, #64]	; 0x40
 80054c6:	415b      	adcs	r3, r3
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ce:	4641      	mov	r1, r8
 80054d0:	1851      	adds	r1, r2, r1
 80054d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80054d4:	4649      	mov	r1, r9
 80054d6:	414b      	adcs	r3, r1
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80054e6:	4659      	mov	r1, fp
 80054e8:	00cb      	lsls	r3, r1, #3
 80054ea:	4651      	mov	r1, sl
 80054ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f0:	4651      	mov	r1, sl
 80054f2:	00ca      	lsls	r2, r1, #3
 80054f4:	4610      	mov	r0, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	4603      	mov	r3, r0
 80054fa:	4642      	mov	r2, r8
 80054fc:	189b      	adds	r3, r3, r2
 80054fe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005502:	464b      	mov	r3, r9
 8005504:	460a      	mov	r2, r1
 8005506:	eb42 0303 	adc.w	r3, r2, r3
 800550a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800550e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800551a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800552a:	4649      	mov	r1, r9
 800552c:	008b      	lsls	r3, r1, #2
 800552e:	4641      	mov	r1, r8
 8005530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005534:	4641      	mov	r1, r8
 8005536:	008a      	lsls	r2, r1, #2
 8005538:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800553c:	f7fb f85a 	bl	80005f4 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4b3b      	ldr	r3, [pc, #236]	; (8005634 <UART_SetConfig+0x770>)
 8005546:	fba3 1302 	umull	r1, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	2164      	movs	r1, #100	; 0x64
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	3332      	adds	r3, #50	; 0x32
 8005558:	4a36      	ldr	r2, [pc, #216]	; (8005634 <UART_SetConfig+0x770>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005564:	441c      	add	r4, r3
 8005566:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005570:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005574:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	1891      	adds	r1, r2, r2
 800557e:	6339      	str	r1, [r7, #48]	; 0x30
 8005580:	415b      	adcs	r3, r3
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
 8005584:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005588:	4641      	mov	r1, r8
 800558a:	1851      	adds	r1, r2, r1
 800558c:	62b9      	str	r1, [r7, #40]	; 0x28
 800558e:	4649      	mov	r1, r9
 8005590:	414b      	adcs	r3, r1
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80055a0:	4659      	mov	r1, fp
 80055a2:	00cb      	lsls	r3, r1, #3
 80055a4:	4651      	mov	r1, sl
 80055a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055aa:	4651      	mov	r1, sl
 80055ac:	00ca      	lsls	r2, r1, #3
 80055ae:	4610      	mov	r0, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	4642      	mov	r2, r8
 80055b6:	189b      	adds	r3, r3, r2
 80055b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80055bc:	464b      	mov	r3, r9
 80055be:	460a      	mov	r2, r1
 80055c0:	eb42 0303 	adc.w	r3, r2, r3
 80055c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055d4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80055e4:	4649      	mov	r1, r9
 80055e6:	008b      	lsls	r3, r1, #2
 80055e8:	4641      	mov	r1, r8
 80055ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ee:	4641      	mov	r1, r8
 80055f0:	008a      	lsls	r2, r1, #2
 80055f2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80055f6:	f7fa fffd 	bl	80005f4 <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <UART_SetConfig+0x770>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	; 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	3332      	adds	r3, #50	; 0x32
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <UART_SetConfig+0x770>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4422      	add	r2, r4
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	e112      	b.n	8005850 <UART_SetConfig+0x98c>
 800562a:	bf00      	nop
 800562c:	40011000 	.word	0x40011000
 8005630:	40011400 	.word	0x40011400
 8005634:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fe f99a 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 800563c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005640:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005644:	2200      	movs	r2, #0
 8005646:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800564a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800564e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8005652:	4642      	mov	r2, r8
 8005654:	464b      	mov	r3, r9
 8005656:	1891      	adds	r1, r2, r2
 8005658:	6239      	str	r1, [r7, #32]
 800565a:	415b      	adcs	r3, r3
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
 800565e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005662:	4641      	mov	r1, r8
 8005664:	1854      	adds	r4, r2, r1
 8005666:	4649      	mov	r1, r9
 8005668:	eb43 0501 	adc.w	r5, r3, r1
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	00eb      	lsls	r3, r5, #3
 8005676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800567a:	00e2      	lsls	r2, r4, #3
 800567c:	4614      	mov	r4, r2
 800567e:	461d      	mov	r5, r3
 8005680:	4643      	mov	r3, r8
 8005682:	18e3      	adds	r3, r4, r3
 8005684:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005688:	464b      	mov	r3, r9
 800568a:	eb45 0303 	adc.w	r3, r5, r3
 800568e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005692:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800569e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80056ae:	4629      	mov	r1, r5
 80056b0:	008b      	lsls	r3, r1, #2
 80056b2:	4621      	mov	r1, r4
 80056b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b8:	4621      	mov	r1, r4
 80056ba:	008a      	lsls	r2, r1, #2
 80056bc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80056c0:	f7fa ff98 	bl	80005f4 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4b64      	ldr	r3, [pc, #400]	; (800585c <UART_SetConfig+0x998>)
 80056ca:	fba3 2302 	umull	r2, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	011c      	lsls	r4, r3, #4
 80056d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056dc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80056e0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	1891      	adds	r1, r2, r2
 80056ea:	61b9      	str	r1, [r7, #24]
 80056ec:	415b      	adcs	r3, r3
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056f4:	4641      	mov	r1, r8
 80056f6:	1851      	adds	r1, r2, r1
 80056f8:	6139      	str	r1, [r7, #16]
 80056fa:	4649      	mov	r1, r9
 80056fc:	414b      	adcs	r3, r1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800570c:	4659      	mov	r1, fp
 800570e:	00cb      	lsls	r3, r1, #3
 8005710:	4651      	mov	r1, sl
 8005712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005716:	4651      	mov	r1, sl
 8005718:	00ca      	lsls	r2, r1, #3
 800571a:	4610      	mov	r0, r2
 800571c:	4619      	mov	r1, r3
 800571e:	4603      	mov	r3, r0
 8005720:	4642      	mov	r2, r8
 8005722:	189b      	adds	r3, r3, r2
 8005724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005728:	464b      	mov	r3, r9
 800572a:	460a      	mov	r2, r1
 800572c:	eb42 0303 	adc.w	r3, r2, r3
 8005730:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005734:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005740:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8005750:	4649      	mov	r1, r9
 8005752:	008b      	lsls	r3, r1, #2
 8005754:	4641      	mov	r1, r8
 8005756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800575a:	4641      	mov	r1, r8
 800575c:	008a      	lsls	r2, r1, #2
 800575e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005762:	f7fa ff47 	bl	80005f4 <__aeabi_uldivmod>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4b3c      	ldr	r3, [pc, #240]	; (800585c <UART_SetConfig+0x998>)
 800576c:	fba3 1302 	umull	r1, r3, r3, r2
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	2164      	movs	r1, #100	; 0x64
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	3332      	adds	r3, #50	; 0x32
 800577e:	4a37      	ldr	r2, [pc, #220]	; (800585c <UART_SetConfig+0x998>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578a:	441c      	add	r4, r3
 800578c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005790:	2200      	movs	r2, #0
 8005792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005796:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800579a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800579e:	4642      	mov	r2, r8
 80057a0:	464b      	mov	r3, r9
 80057a2:	1891      	adds	r1, r2, r2
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	415b      	adcs	r3, r3
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ae:	4641      	mov	r1, r8
 80057b0:	1851      	adds	r1, r2, r1
 80057b2:	6039      	str	r1, [r7, #0]
 80057b4:	4649      	mov	r1, r9
 80057b6:	414b      	adcs	r3, r1
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057c6:	4659      	mov	r1, fp
 80057c8:	00cb      	lsls	r3, r1, #3
 80057ca:	4651      	mov	r1, sl
 80057cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d0:	4651      	mov	r1, sl
 80057d2:	00ca      	lsls	r2, r1, #3
 80057d4:	4610      	mov	r0, r2
 80057d6:	4619      	mov	r1, r3
 80057d8:	4603      	mov	r3, r0
 80057da:	4642      	mov	r2, r8
 80057dc:	189b      	adds	r3, r3, r2
 80057de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e2:	464b      	mov	r3, r9
 80057e4:	460a      	mov	r2, r1
 80057e6:	eb42 0303 	adc.w	r3, r2, r3
 80057ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800580a:	4649      	mov	r1, r9
 800580c:	008b      	lsls	r3, r1, #2
 800580e:	4641      	mov	r1, r8
 8005810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005814:	4641      	mov	r1, r8
 8005816:	008a      	lsls	r2, r1, #2
 8005818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800581c:	f7fa feea 	bl	80005f4 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4b0d      	ldr	r3, [pc, #52]	; (800585c <UART_SetConfig+0x998>)
 8005826:	fba3 1302 	umull	r1, r3, r3, r2
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	2164      	movs	r1, #100	; 0x64
 800582e:	fb01 f303 	mul.w	r3, r1, r3
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	3332      	adds	r3, #50	; 0x32
 8005838:	4a08      	ldr	r2, [pc, #32]	; (800585c <UART_SetConfig+0x998>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	f003 020f 	and.w	r2, r3, #15
 8005844:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4422      	add	r2, r4
 800584c:	609a      	str	r2, [r3, #8]
}
 800584e:	e7ff      	b.n	8005850 <UART_SetConfig+0x98c>
 8005850:	bf00      	nop
 8005852:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585c:	51eb851f 	.word	0x51eb851f

08005860 <atoi>:
 8005860:	220a      	movs	r2, #10
 8005862:	2100      	movs	r1, #0
 8005864:	f000 b8ca 	b.w	80059fc <strtol>

08005868 <__errno>:
 8005868:	4b01      	ldr	r3, [pc, #4]	; (8005870 <__errno+0x8>)
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20001dcc 	.word	0x20001dcc

08005874 <__libc_init_array>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4d0d      	ldr	r5, [pc, #52]	; (80058ac <__libc_init_array+0x38>)
 8005878:	4c0d      	ldr	r4, [pc, #52]	; (80058b0 <__libc_init_array+0x3c>)
 800587a:	1b64      	subs	r4, r4, r5
 800587c:	10a4      	asrs	r4, r4, #2
 800587e:	2600      	movs	r6, #0
 8005880:	42a6      	cmp	r6, r4
 8005882:	d109      	bne.n	8005898 <__libc_init_array+0x24>
 8005884:	4d0b      	ldr	r5, [pc, #44]	; (80058b4 <__libc_init_array+0x40>)
 8005886:	4c0c      	ldr	r4, [pc, #48]	; (80058b8 <__libc_init_array+0x44>)
 8005888:	f000 f8c2 	bl	8005a10 <_init>
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	2600      	movs	r6, #0
 8005892:	42a6      	cmp	r6, r4
 8005894:	d105      	bne.n	80058a2 <__libc_init_array+0x2e>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	f855 3b04 	ldr.w	r3, [r5], #4
 800589c:	4798      	blx	r3
 800589e:	3601      	adds	r6, #1
 80058a0:	e7ee      	b.n	8005880 <__libc_init_array+0xc>
 80058a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a6:	4798      	blx	r3
 80058a8:	3601      	adds	r6, #1
 80058aa:	e7f2      	b.n	8005892 <__libc_init_array+0x1e>
 80058ac:	08005d50 	.word	0x08005d50
 80058b0:	08005d50 	.word	0x08005d50
 80058b4:	08005d50 	.word	0x08005d50
 80058b8:	08005d54 	.word	0x08005d54

080058bc <memcpy>:
 80058bc:	440a      	add	r2, r1
 80058be:	4291      	cmp	r1, r2
 80058c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058c4:	d100      	bne.n	80058c8 <memcpy+0xc>
 80058c6:	4770      	bx	lr
 80058c8:	b510      	push	{r4, lr}
 80058ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d2:	4291      	cmp	r1, r2
 80058d4:	d1f9      	bne.n	80058ca <memcpy+0xe>
 80058d6:	bd10      	pop	{r4, pc}

080058d8 <memset>:
 80058d8:	4402      	add	r2, r0
 80058da:	4603      	mov	r3, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	d100      	bne.n	80058e2 <memset+0xa>
 80058e0:	4770      	bx	lr
 80058e2:	f803 1b01 	strb.w	r1, [r3], #1
 80058e6:	e7f9      	b.n	80058dc <memset+0x4>

080058e8 <strcpy>:
 80058e8:	4603      	mov	r3, r0
 80058ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ee:	f803 2b01 	strb.w	r2, [r3], #1
 80058f2:	2a00      	cmp	r2, #0
 80058f4:	d1f9      	bne.n	80058ea <strcpy+0x2>
 80058f6:	4770      	bx	lr

080058f8 <_strtol_l.constprop.0>:
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fe:	d001      	beq.n	8005904 <_strtol_l.constprop.0+0xc>
 8005900:	2b24      	cmp	r3, #36	; 0x24
 8005902:	d906      	bls.n	8005912 <_strtol_l.constprop.0+0x1a>
 8005904:	f7ff ffb0 	bl	8005868 <__errno>
 8005908:	2316      	movs	r3, #22
 800590a:	6003      	str	r3, [r0, #0]
 800590c:	2000      	movs	r0, #0
 800590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005912:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80059f8 <_strtol_l.constprop.0+0x100>
 8005916:	460d      	mov	r5, r1
 8005918:	462e      	mov	r6, r5
 800591a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800591e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005922:	f017 0708 	ands.w	r7, r7, #8
 8005926:	d1f7      	bne.n	8005918 <_strtol_l.constprop.0+0x20>
 8005928:	2c2d      	cmp	r4, #45	; 0x2d
 800592a:	d132      	bne.n	8005992 <_strtol_l.constprop.0+0x9a>
 800592c:	782c      	ldrb	r4, [r5, #0]
 800592e:	2701      	movs	r7, #1
 8005930:	1cb5      	adds	r5, r6, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d05b      	beq.n	80059ee <_strtol_l.constprop.0+0xf6>
 8005936:	2b10      	cmp	r3, #16
 8005938:	d109      	bne.n	800594e <_strtol_l.constprop.0+0x56>
 800593a:	2c30      	cmp	r4, #48	; 0x30
 800593c:	d107      	bne.n	800594e <_strtol_l.constprop.0+0x56>
 800593e:	782c      	ldrb	r4, [r5, #0]
 8005940:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005944:	2c58      	cmp	r4, #88	; 0x58
 8005946:	d14d      	bne.n	80059e4 <_strtol_l.constprop.0+0xec>
 8005948:	786c      	ldrb	r4, [r5, #1]
 800594a:	2310      	movs	r3, #16
 800594c:	3502      	adds	r5, #2
 800594e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005952:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005956:	f04f 0c00 	mov.w	ip, #0
 800595a:	fbb8 f9f3 	udiv	r9, r8, r3
 800595e:	4666      	mov	r6, ip
 8005960:	fb03 8a19 	mls	sl, r3, r9, r8
 8005964:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005968:	f1be 0f09 	cmp.w	lr, #9
 800596c:	d816      	bhi.n	800599c <_strtol_l.constprop.0+0xa4>
 800596e:	4674      	mov	r4, lr
 8005970:	42a3      	cmp	r3, r4
 8005972:	dd24      	ble.n	80059be <_strtol_l.constprop.0+0xc6>
 8005974:	f1bc 0f00 	cmp.w	ip, #0
 8005978:	db1e      	blt.n	80059b8 <_strtol_l.constprop.0+0xc0>
 800597a:	45b1      	cmp	r9, r6
 800597c:	d31c      	bcc.n	80059b8 <_strtol_l.constprop.0+0xc0>
 800597e:	d101      	bne.n	8005984 <_strtol_l.constprop.0+0x8c>
 8005980:	45a2      	cmp	sl, r4
 8005982:	db19      	blt.n	80059b8 <_strtol_l.constprop.0+0xc0>
 8005984:	fb06 4603 	mla	r6, r6, r3, r4
 8005988:	f04f 0c01 	mov.w	ip, #1
 800598c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005990:	e7e8      	b.n	8005964 <_strtol_l.constprop.0+0x6c>
 8005992:	2c2b      	cmp	r4, #43	; 0x2b
 8005994:	bf04      	itt	eq
 8005996:	782c      	ldrbeq	r4, [r5, #0]
 8005998:	1cb5      	addeq	r5, r6, #2
 800599a:	e7ca      	b.n	8005932 <_strtol_l.constprop.0+0x3a>
 800599c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80059a0:	f1be 0f19 	cmp.w	lr, #25
 80059a4:	d801      	bhi.n	80059aa <_strtol_l.constprop.0+0xb2>
 80059a6:	3c37      	subs	r4, #55	; 0x37
 80059a8:	e7e2      	b.n	8005970 <_strtol_l.constprop.0+0x78>
 80059aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80059ae:	f1be 0f19 	cmp.w	lr, #25
 80059b2:	d804      	bhi.n	80059be <_strtol_l.constprop.0+0xc6>
 80059b4:	3c57      	subs	r4, #87	; 0x57
 80059b6:	e7db      	b.n	8005970 <_strtol_l.constprop.0+0x78>
 80059b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80059bc:	e7e6      	b.n	800598c <_strtol_l.constprop.0+0x94>
 80059be:	f1bc 0f00 	cmp.w	ip, #0
 80059c2:	da05      	bge.n	80059d0 <_strtol_l.constprop.0+0xd8>
 80059c4:	2322      	movs	r3, #34	; 0x22
 80059c6:	6003      	str	r3, [r0, #0]
 80059c8:	4646      	mov	r6, r8
 80059ca:	b942      	cbnz	r2, 80059de <_strtol_l.constprop.0+0xe6>
 80059cc:	4630      	mov	r0, r6
 80059ce:	e79e      	b.n	800590e <_strtol_l.constprop.0+0x16>
 80059d0:	b107      	cbz	r7, 80059d4 <_strtol_l.constprop.0+0xdc>
 80059d2:	4276      	negs	r6, r6
 80059d4:	2a00      	cmp	r2, #0
 80059d6:	d0f9      	beq.n	80059cc <_strtol_l.constprop.0+0xd4>
 80059d8:	f1bc 0f00 	cmp.w	ip, #0
 80059dc:	d000      	beq.n	80059e0 <_strtol_l.constprop.0+0xe8>
 80059de:	1e69      	subs	r1, r5, #1
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	e7f3      	b.n	80059cc <_strtol_l.constprop.0+0xd4>
 80059e4:	2430      	movs	r4, #48	; 0x30
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1b1      	bne.n	800594e <_strtol_l.constprop.0+0x56>
 80059ea:	2308      	movs	r3, #8
 80059ec:	e7af      	b.n	800594e <_strtol_l.constprop.0+0x56>
 80059ee:	2c30      	cmp	r4, #48	; 0x30
 80059f0:	d0a5      	beq.n	800593e <_strtol_l.constprop.0+0x46>
 80059f2:	230a      	movs	r3, #10
 80059f4:	e7ab      	b.n	800594e <_strtol_l.constprop.0+0x56>
 80059f6:	bf00      	nop
 80059f8:	08005be5 	.word	0x08005be5

080059fc <strtol>:
 80059fc:	4613      	mov	r3, r2
 80059fe:	460a      	mov	r2, r1
 8005a00:	4601      	mov	r1, r0
 8005a02:	4802      	ldr	r0, [pc, #8]	; (8005a0c <strtol+0x10>)
 8005a04:	6800      	ldr	r0, [r0, #0]
 8005a06:	f7ff bf77 	b.w	80058f8 <_strtol_l.constprop.0>
 8005a0a:	bf00      	nop
 8005a0c:	20001dcc 	.word	0x20001dcc

08005a10 <_init>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr

08005a1c <_fini>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr
