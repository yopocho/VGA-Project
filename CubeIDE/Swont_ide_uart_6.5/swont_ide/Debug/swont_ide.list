
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000917c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  0800930c  0800930c  0001930c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009afc  08009afc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b04  08009b04  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013764  20000088  08009b94  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200137ec  08009b94  000237ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f0a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ac  00000000  00000000  00034fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00038970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00039c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bd0  00000000  00000000  0003ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af49  00000000  00000000  00060968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf219  00000000  00000000  0007b8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014aaca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055cc  00000000  00000000  0014ab1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092f4 	.word	0x080092f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080092f4 	.word	0x080092f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <TransmitError>:
 *
 * @param ErrorCode
 * @return Error
 */
Error TransmitError(Error ErrorCode)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	ErrorHandle* Error = GetError(ErrorCode);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f811 	bl	80005b8 <GetError>
 8000596:	60f8      	str	r0, [r7, #12]
	printf("[%d]%s", Error->Severity, Error->Msg);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	4619      	mov	r1, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <TransmitError+0x30>)
 80005a6:	f007 fe49 	bl	800823c <iprintf>
	return ERR_NONE;
 80005aa:	2304      	movs	r3, #4
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08009478 	.word	0x08009478

080005b8 <GetError>:
 *
 * @param ErrorCode
 * @return ErrorHandle
 */
ErrorHandle* GetError(Error ErrorCode)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	size_t SizeOfErrorList = sizeof(ErrorList)/sizeof(ErrorList[0]);
 80005c2:	230d      	movs	r3, #13
 80005c4:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < SizeOfErrorList; i++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e00e      	b.n	80005ea <GetError+0x32>
		if(ErrorList[i].ErrorCode == ErrorCode){
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <GetError+0x48>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d104      	bne.n	80005e4 <GetError+0x2c>
			return &ErrorList[i];
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <GetError+0x48>)
 80005e0:	4413      	add	r3, r2
 80005e2:	e007      	b.n	80005f4 <GetError+0x3c>
	for(size_t i = 0; i < SizeOfErrorList; i++){
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3ec      	bcc.n	80005cc <GetError+0x14>
		}
	}
	return ERR_UNKNOWN_ERR;
 80005f2:	2307      	movs	r3, #7
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	08009834 	.word	0x08009834

08000604 <SDCardInit>:
 * @brief Initializes the SD card
 *
 * @return Error
 */
Error SDCardInit()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800060a:	2201      	movs	r2, #1
 800060c:	491f      	ldr	r1, [pc, #124]	; (800068c <SDCardInit+0x88>)
 800060e:	4820      	ldr	r0, [pc, #128]	; (8000690 <SDCardInit+0x8c>)
 8000610:	f007 f8c8 	bl	80077a4 <f_mount>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SDCardInit+0x90>)
 800061a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SDCardInit+0x90>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SDCardInit+0x24>
		return ERR_SDCARD_MOUNT;
 8000624:	2308      	movs	r3, #8
 8000626:	e02d      	b.n	8000684 <SDCardInit+0x80>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors, used_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	4619      	mov	r1, r3
 8000630:	4816      	ldr	r0, [pc, #88]	; (800068c <SDCardInit+0x88>)
 8000632:	f007 fca2 	bl	8007f7a <f_getfree>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <SDCardInit+0x90>)
 800063c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <SDCardInit+0x90>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SDCardInit+0x46>
		return ERR_SDCARD_GETFREE;
 8000646:	2309      	movs	r3, #9
 8000648:	e01c      	b.n	8000684 <SDCardInit+0x80>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	3b02      	subs	r3, #2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	8952      	ldrh	r2, [r2, #10]
 8000654:	fb02 f303 	mul.w	r3, r2, r3
 8000658:	617b      	str	r3, [r7, #20]
	free_sectors = free_clusters * getFreeFs->csize;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	895b      	ldrh	r3, [r3, #10]
 800065e:	461a      	mov	r2, r3
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	613b      	str	r3, [r7, #16]
	used_sectors = total_sectors - free_sectors;
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	60fb      	str	r3, [r7, #12]
	printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n%10ul KiB used.\r\n", total_sectors / 2, free_sectors / 2, used_sectors / 2);
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	0859      	lsrs	r1, r3, #1
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	085a      	lsrs	r2, r3, #1
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	085b      	lsrs	r3, r3, #1
 800067c:	4806      	ldr	r0, [pc, #24]	; (8000698 <SDCardInit+0x94>)
 800067e:	f007 fddd 	bl	800823c <iprintf>
	return ERR_NONE;
 8000682:	2304      	movs	r3, #4
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	080095ec 	.word	0x080095ec
 8000690:	200000a4 	.word	0x200000a4
 8000694:	20000504 	.word	0x20000504
 8000698:	080095f0 	.word	0x080095f0

0800069c <DrawBitmapFromSDCard>:
 * @param selector
 * @param xp
 * @param yp
 * @return Error
 */
Error DrawBitmapFromSDCard(uint16_t xp, uint16_t yp, uint8_t selector) {
 800069c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a0:	b092      	sub	sp, #72	; 0x48
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4603      	mov	r3, r0
 80006a6:	80fb      	strh	r3, [r7, #6]
 80006a8:	460b      	mov	r3, r1
 80006aa:	80bb      	strh	r3, [r7, #4]
 80006ac:	4613      	mov	r3, r2
 80006ae:	70fb      	strb	r3, [r7, #3]
 80006b0:	466b      	mov	r3, sp
 80006b2:	469a      	mov	sl, r3

	if(xp > VGA_DISPLAY_X || yp > VGA_DISPLAY_Y) {
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ba:	d802      	bhi.n	80006c2 <DrawBitmapFromSDCard+0x26>
 80006bc:	88bb      	ldrh	r3, [r7, #4]
 80006be:	2bf0      	cmp	r3, #240	; 0xf0
 80006c0:	d901      	bls.n	80006c6 <DrawBitmapFromSDCard+0x2a>
		return ERR_ARG_OOB;
 80006c2:	2302      	movs	r3, #2
 80006c4:	e0eb      	b.n	800089e <DrawBitmapFromSDCard+0x202>
	}

	if(fres != FR_OK){
 80006c6:	4b79      	ldr	r3, [pc, #484]	; (80008ac <DrawBitmapFromSDCard+0x210>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <DrawBitmapFromSDCard+0x36>
		return ERR_SDCARD_UNAVAILABLE;
 80006ce:	230d      	movs	r3, #13
 80006d0:	e0e5      	b.n	800089e <DrawBitmapFromSDCard+0x202>
	}

	//Convert asked-for bitmap to the name of the .txt file its saved in on the SD card
	char filename[20] = "";
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
	itoa(selector, filename, 10);
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	f107 011c 	add.w	r1, r7, #28
 80006ea:	220a      	movs	r2, #10
 80006ec:	4618      	mov	r0, r3
 80006ee:	f007 fd9b 	bl	8008228 <itoa>
	strcat(filename, ".txt");
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fd6a 	bl	80001d0 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4413      	add	r3, r2
 8000706:	4a6a      	ldr	r2, [pc, #424]	; (80008b0 <DrawBitmapFromSDCard+0x214>)
 8000708:	6810      	ldr	r0, [r2, #0]
 800070a:	6018      	str	r0, [r3, #0]
 800070c:	7912      	ldrb	r2, [r2, #4]
 800070e:	711a      	strb	r2, [r3, #4]
	fres = f_open(&fil, filename, FA_READ);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	4866      	ldr	r0, [pc, #408]	; (80008b4 <DrawBitmapFromSDCard+0x218>)
 800071a:	f007 f889 	bl	8007830 <f_open>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b62      	ldr	r3, [pc, #392]	; (80008ac <DrawBitmapFromSDCard+0x210>)
 8000724:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000726:	4b61      	ldr	r3, [pc, #388]	; (80008ac <DrawBitmapFromSDCard+0x210>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <DrawBitmapFromSDCard+0x96>
		return ERR_SDCARD_OPEN;
 800072e:	230c      	movs	r3, #12
 8000730:	e0b5      	b.n	800089e <DrawBitmapFromSDCard+0x202>
	}

	unsigned char preambleBuf[9];
	uint8_t bufLen = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	73fb      	strb	r3, [r7, #15]

	f_read(&fil, (void*)preambleBuf, 9, &bufLen);
 8000736:	f107 030f 	add.w	r3, r7, #15
 800073a:	f107 0110 	add.w	r1, r7, #16
 800073e:	2209      	movs	r2, #9
 8000740:	485c      	ldr	r0, [pc, #368]	; (80008b4 <DrawBitmapFromSDCard+0x218>)
 8000742:	f007 fa33 	bl	8007bac <f_read>
	if(bufLen != 0) {
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d04f      	beq.n	80007ec <DrawBitmapFromSDCard+0x150>
		printf("Read string from '%s' contents: %s\n\r", filename, preambleBuf);
 800074c:	f107 0210 	add.w	r2, r7, #16
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4858      	ldr	r0, [pc, #352]	; (80008b8 <DrawBitmapFromSDCard+0x21c>)
 8000758:	f007 fd70 	bl	800823c <iprintf>
	}
	else return ERR_SDCARD_GETS;

	uint16_t width = atoi(preambleBuf);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f007 fd1a 	bl	800819a <atoi>
 8000766:	4603      	mov	r3, r0
 8000768:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint16_t height = atoi(preambleBuf+4);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	3304      	adds	r3, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f007 fd11 	bl	800819a <atoi>
 8000778:	4603      	mov	r3, r0
 800077a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	printf("%d, %d\n\r", width, height);
 800077e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000782:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000786:	4619      	mov	r1, r3
 8000788:	484c      	ldr	r0, [pc, #304]	; (80008bc <DrawBitmapFromSDCard+0x220>)
 800078a:	f007 fd57 	bl	800823c <iprintf>
	uint8_t packetSize = 5; //0x.. pixeldata + comma
 800078e:	2305      	movs	r3, #5
 8000790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t readBuf[packetSize];
 8000794:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8000798:	4633      	mov	r3, r6
 800079a:	3b01      	subs	r3, #1
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
 800079e:	b2f3      	uxtb	r3, r6
 80007a0:	2200      	movs	r2, #0
 80007a2:	4698      	mov	r8, r3
 80007a4:	4691      	mov	r9, r2
 80007a6:	f04f 0200 	mov.w	r2, #0
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007ba:	b2f3      	uxtb	r3, r6
 80007bc:	2200      	movs	r2, #0
 80007be:	461c      	mov	r4, r3
 80007c0:	4615      	mov	r5, r2
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	00eb      	lsls	r3, r5, #3
 80007cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007d0:	00e2      	lsls	r2, r4, #3
 80007d2:	4633      	mov	r3, r6
 80007d4:	3307      	adds	r3, #7
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	ebad 0d03 	sub.w	sp, sp, r3
 80007de:	466b      	mov	r3, sp
 80007e0:	3300      	adds	r3, #0
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
	bufLen = packetSize;
 80007e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007e8:	73fb      	strb	r3, [r7, #15]

	while(bufLen == packetSize)
 80007ea:	e04a      	b.n	8000882 <DrawBitmapFromSDCard+0x1e6>
	else return ERR_SDCARD_GETS;
 80007ec:	230a      	movs	r3, #10
 80007ee:	e056      	b.n	800089e <DrawBitmapFromSDCard+0x202>
	{
		for(uint16_t y = yp; y < yp+height; y++)
 80007f0:	88bb      	ldrh	r3, [r7, #4]
 80007f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80007f6:	e03c      	b.n	8000872 <DrawBitmapFromSDCard+0x1d6>
		{
			for(uint16_t x = xp; x < xp+width; x++)
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80007fe:	e02b      	b.n	8000858 <DrawBitmapFromSDCard+0x1bc>
			{
				f_read(&fil, (void*)readBuf, packetSize, &bufLen);
 8000800:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000804:	f107 030f 	add.w	r3, r7, #15
 8000808:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800080a:	482a      	ldr	r0, [pc, #168]	; (80008b4 <DrawBitmapFromSDCard+0x218>)
 800080c:	f007 f9ce 	bl	8007bac <f_read>
				readBuf[strlen(readBuf)-1] = '\0';
 8000810:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000812:	f7ff fcdd 	bl	80001d0 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	3b01      	subs	r3, #1
 800081a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	54d1      	strb	r1, [r2, r3]
				uint8_t pixelColor = (uint8_t)strtol(readBuf, NULL, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000826:	f007 fda3 	bl	8008370 <strtol>
 800082a:	4603      	mov	r3, r0
 800082c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				memset(readBuf ,0, sizeof(readBuf));
 8000830:	4633      	mov	r3, r6
 8000832:	461a      	mov	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000838:	f007 fcf8 	bl	800822c <memset>
				UB_VGA_SetPixel(x, y, pixelColor);
 800083c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000840:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8000844:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000848:	4618      	mov	r0, r3
 800084a:	f000 feb5 	bl	80015b8 <UB_VGA_SetPixel>
			for(uint16_t x = xp; x < xp+width; x++)
 800084e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000852:	3301      	adds	r3, #1
 8000854:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000858:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800085c:	88f9      	ldrh	r1, [r7, #6]
 800085e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000862:	440b      	add	r3, r1
 8000864:	429a      	cmp	r2, r3
 8000866:	dbcb      	blt.n	8000800 <DrawBitmapFromSDCard+0x164>
		for(uint16_t y = yp; y < yp+height; y++)
 8000868:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800086c:	3301      	adds	r3, #1
 800086e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000872:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000876:	88b9      	ldrh	r1, [r7, #4]
 8000878:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800087c:	440b      	add	r3, r1
 800087e:	429a      	cmp	r2, r3
 8000880:	dbba      	blt.n	80007f8 <DrawBitmapFromSDCard+0x15c>
	while(bufLen == packetSize)
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000888:	429a      	cmp	r2, r3
 800088a:	d0b1      	beq.n	80007f0 <DrawBitmapFromSDCard+0x154>

			}
		}
	}
	f_close(&fil);
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <DrawBitmapFromSDCard+0x218>)
 800088e:	f007 fb4a 	bl	8007f26 <f_close>
	f_mount(NULL, "", 0);
 8000892:	2200      	movs	r2, #0
 8000894:	490a      	ldr	r1, [pc, #40]	; (80008c0 <DrawBitmapFromSDCard+0x224>)
 8000896:	2000      	movs	r0, #0
 8000898:	f006 ff84 	bl	80077a4 <f_mount>
	return ERR_NONE;
 800089c:	2304      	movs	r3, #4
 800089e:	46d5      	mov	sp, sl
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3748      	adds	r7, #72	; 0x48
 80008a4:	46bd      	mov	sp, r7
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	bf00      	nop
 80008ac:	20000504 	.word	0x20000504
 80008b0:	08009648 	.word	0x08009648
 80008b4:	200002d4 	.word	0x200002d4
 80008b8:	08009650 	.word	0x08009650
 80008bc:	08009678 	.word	0x08009678
 80008c0:	080095ec 	.word	0x080095ec

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_DMA_Init+0x3c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <MX_DMA_Init+0x3c>)
 80008d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_DMA_Init+0x3c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2044      	movs	r0, #68	; 0x44
 80008ec:	f000 ffd9 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80008f0:	2044      	movs	r0, #68	; 0x44
 80008f2:	f000 fff2 	bl	80018da <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <MX_GPIO_Init+0x108>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a3a      	ldr	r2, [pc, #232]	; (8000a0c <MX_GPIO_Init+0x108>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <MX_GPIO_Init+0x108>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b34      	ldr	r3, [pc, #208]	; (8000a0c <MX_GPIO_Init+0x108>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a33      	ldr	r2, [pc, #204]	; (8000a0c <MX_GPIO_Init+0x108>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <MX_GPIO_Init+0x108>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <MX_GPIO_Init+0x108>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a2c      	ldr	r2, [pc, #176]	; (8000a0c <MX_GPIO_Init+0x108>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <MX_GPIO_Init+0x108>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_GPIO_Init+0x108>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a25      	ldr	r2, [pc, #148]	; (8000a0c <MX_GPIO_Init+0x108>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_GPIO_Init+0x108>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2102      	movs	r1, #2
 800098e:	4820      	ldr	r0, [pc, #128]	; (8000a10 <MX_GPIO_Init+0x10c>)
 8000990:	f001 fcec 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800099a:	481e      	ldr	r0, [pc, #120]	; (8000a14 <MX_GPIO_Init+0x110>)
 800099c:	f001 fce6 	bl	800236c <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a6:	481c      	ldr	r0, [pc, #112]	; (8000a18 <MX_GPIO_Init+0x114>)
 80009a8:	f001 fce0 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80009ac:	2302      	movs	r3, #2
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <MX_GPIO_Init+0x10c>)
 80009c4:	f001 fb36 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80009c8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80009cc:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_GPIO_Init+0x110>)
 80009e2:	f001 fb27 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <MX_GPIO_Init+0x114>)
 8000a00:	f001 fb18 	bl	8002034 <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020400 	.word	0x40020400

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fdf1 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f853 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f7ff ff6b 	bl	8000904 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a2e:	f7ff ff49 	bl	80008c4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a32:	f000 fb3f 	bl	80010b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a36:	f000 fb8d 	bl	8001154 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000a3a:	f000 fca3 	bl	8001384 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000a3e:	f000 f8cb 	bl	8000bd8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000a42:	f004 fc21 	bl	8005288 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  Error tempError = SDCardInit(); //Init SD Card
 8000a46:	f7ff fddd 	bl	8000604 <SDCardInit>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	70fb      	strb	r3, [r7, #3]
  if(tempError != ERR_NONE)
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d003      	beq.n	8000a5c <main+0x40>
  {
	  TransmitError(tempError);
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd94 	bl	8000584 <TransmitError>
  }

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000a5c:	f000 fd36 	bl	80014cc <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fd85 	bl	8001570 <UB_VGA_FillScreen>
//  UB_VGA_SetPixel(10,16,VGA_COL_BLUE);
//  UB_VGA_SetPixel(0,0,0x00);
//  UB_VGA_SetPixel(319,,0x00);
  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	e008      	b.n	8000a7e <main+0x62>
	  input.line_rx_buffer[i] = 0;
 8000a6c:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <main+0xac>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	3301      	adds	r3, #1
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a84:	dbf2      	blt.n	8000a6c <main+0x50>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <main+0xac>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <main+0xac>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <main+0xac>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	490a      	ldr	r1, [pc, #40]	; (8000ac8 <main+0xac>)
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <main+0xb0>)
 8000aa2:	f003 fc43 	bl	800432c <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 8000aa6:	23ff      	movs	r3, #255	; 0xff
 8000aa8:	70bb      	strb	r3, [r7, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <main+0xac>)
 8000aac:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000ab0:	2bff      	cmp	r3, #255	; 0xff
 8000ab2:	d1fa      	bne.n	8000aaa <main+0x8e>
	  {
//		  // Do some stuff
//		  printf("yes\n");
//		  colorTest = ~colorTest; // Toggle screen color
//		  UB_VGA_FillScreen(colorTest);
		  DrawBitmapFromSDCard(120,67,0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2143      	movs	r1, #67	; 0x43
 8000ab8:	2078      	movs	r0, #120	; 0x78
 8000aba:	f7ff fdef 	bl	800069c <DrawBitmapFromSDCard>

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8000abe:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <main+0xac>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8000ac6:	e7f0      	b.n	8000aaa <main+0x8e>
 8000ac8:	20000508 	.word	0x20000508
 8000acc:	20000a54 	.word	0x20000a54

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2230      	movs	r2, #48	; 0x30
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f007 fba4 	bl	800822c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <SystemClock_Config+0xcc>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <SystemClock_Config+0xcc>)
 8000afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <SystemClock_Config+0xcc>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <SystemClock_Config+0xd0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <SystemClock_Config+0xd0>)
 8000b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <SystemClock_Config+0xd0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b36:	2302      	movs	r3, #2
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b44:	23a8      	movs	r3, #168	; 0xa8
 8000b46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fc23 	bl	80023a0 <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b60:	f000 f832 	bl	8000bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2105      	movs	r1, #5
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fe7a 	bl	800287c <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b8e:	f000 f81b 	bl	8000bc8 <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	3750      	adds	r7, #80	; 0x50
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40007000 	.word	0x40007000

08000ba4 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000bac:	1d39      	adds	r1, r7, #4
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <__io_putchar+0x20>)
 8000bb6:	f003 fb20 	bl	80041fa <HAL_UART_Transmit>
	return ch;												//Return the character
 8000bba:	687b      	ldr	r3, [r7, #4]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000a54 	.word	0x20000a54

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <MX_SPI1_Init+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c0c:	2238      	movs	r2, #56	; 0x38
 8000c0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c24:	220a      	movs	r2, #10
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_SPI1_Init+0x64>)
 8000c2a:	f002 f847 	bl	8002cbc <HAL_SPI_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c34:	f7ff ffc8 	bl	8000bc8 <Error_Handler>
  }

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000918 	.word	0x20000918
 8000c40:	40013000 	.word	0x40013000

08000c44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <HAL_SPI_MspInit+0xc0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d149      	bne.n	8000cfa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <HAL_SPI_MspInit+0xc4>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a26      	ldr	r2, [pc, #152]	; (8000d08 <HAL_SPI_MspInit+0xc4>)
 8000c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <HAL_SPI_MspInit+0xc4>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <HAL_SPI_MspInit+0xc4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <HAL_SPI_MspInit+0xc4>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_SPI_MspInit+0xc4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_SPI_MspInit+0xc4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_SPI_MspInit+0xc4>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_SPI_MspInit+0xc4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cba:	23c0      	movs	r3, #192	; 0xc0
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <HAL_SPI_MspInit+0xc8>)
 8000cd6:	f001 f9ad 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CS_Pin;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cea:	2305      	movs	r3, #5
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <HAL_SPI_MspInit+0xcc>)
 8000cf6:	f001 f99d 	bl	8002034 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40013000 	.word	0x40013000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020400 	.word	0x40020400

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 fc78 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <TIM2_IRQHandler+0xa8>)
 8000dc6:	f002 fb67 	bl	8003498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <TIM2_IRQHandler+0xa8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f06f 0208 	mvn.w	r2, #8
 8000dd2:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000dde:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000de8:	d905      	bls.n	8000df6 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000df0:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <TIM2_IRQHandler+0xb0>)
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000df4:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d802      	bhi.n	8000e04 <TIM2_IRQHandler+0x44>
 8000dfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e02:	e001      	b.n	8000e08 <TIM2_IRQHandler+0x48>
 8000e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <TIM2_IRQHandler+0xb4>)
 8000e0a:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	2b23      	cmp	r3, #35	; 0x23
 8000e12:	d927      	bls.n	8000e64 <TIM2_IRQHandler+0xa4>
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	f240 2202 	movw	r2, #514	; 0x202
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d821      	bhi.n	8000e64 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000e20:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <TIM2_IRQHandler+0xb8>)
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <TIM2_IRQHandler+0xb8>)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <TIM2_IRQHandler+0xbc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <TIM2_IRQHandler+0xbc>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <TIM2_IRQHandler+0xc0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <TIM2_IRQHandler+0xc0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d005      	beq.n	8000e64 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000e60:	4a02      	ldr	r2, [pc, #8]	; (8000e6c <TIM2_IRQHandler+0xac>)
 8000e62:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200009b4 	.word	0x200009b4
 8000e6c:	20013784 	.word	0x20013784
 8000e70:	20000a94 	.word	0x20000a94
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40026488 	.word	0x40026488
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	200009f4 	.word	0x200009f4

08000e84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <USART2_IRQHandler+0x70>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b0a      	cmp	r3, #10
 8000e94:	d026      	beq.n	8000ee4 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b0d      	cmp	r3, #13
 8000e9a:	d002      	beq.n	8000ea2 <USART2_IRQHandler+0x1e>
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8000ea0:	d10e      	bne.n	8000ec0 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <USART2_IRQHandler+0x74>)
 8000ea4:	22ff      	movs	r2, #255	; 0xff
 8000ea6:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <USART2_IRQHandler+0x74>)
 8000eac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000eb0:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <USART2_IRQHandler+0x74>)
 8000eb2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <USART2_IRQHandler+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000ebe:	e011      	b.n	8000ee4 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <USART2_IRQHandler+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <USART2_IRQHandler+0x74>)
 8000eca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <USART2_IRQHandler+0x74>)
 8000ed0:	4413      	add	r3, r2
 8000ed2:	79fa      	ldrb	r2, [r7, #7]
 8000ed4:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <USART2_IRQHandler+0x74>)
 8000ed8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <USART2_IRQHandler+0x74>)
 8000ee0:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <USART2_IRQHandler+0x78>)
 8000ee6:	f003 fa77 	bl	80043d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	20000508 	.word	0x20000508
 8000efc:	20000a54 	.word	0x20000a54

08000f00 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <DMA2_Stream5_IRQHandler+0x48>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <DMA2_Stream5_IRQHandler+0x34>
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <DMA2_Stream5_IRQHandler+0x48>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6a1a      	ldr	r2, [r3, #32]
 8000f1a:	f240 4344 	movw	r3, #1092	; 0x444
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d107      	bne.n	8000f34 <DMA2_Stream5_IRQHandler+0x34>
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <DMA2_Stream5_IRQHandler+0x48>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <DMA2_Stream5_IRQHandler+0x48>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <DMA2_Stream5_IRQHandler+0x4c>)
 8000f36:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <DMA2_Stream5_IRQHandler+0x50>)
 8000f3e:	f000 fe0f 	bl	8001b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000974 	.word	0x20000974
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	200009f4 	.word	0x200009f4

08000f54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	e00a      	b.n	8000f7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f66:	f3af 8000 	nop.w
 8000f6a:	4601      	mov	r1, r0
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	b2ca      	uxtb	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbf0      	blt.n	8000f66 <_read+0x12>
	}

return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e009      	b.n	8000fb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	60ba      	str	r2, [r7, #8]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fdfb 	bl	8000ba4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dbf1      	blt.n	8000fa0 <_write+0x12>
	}
	return len;
 8000fbc:	687b      	ldr	r3, [r7, #4]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_close>:

int _close(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return -1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fee:	605a      	str	r2, [r3, #4]
	return 0;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_isatty>:

int _isatty(int file)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	return 1;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <_sbrk+0x50>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x16>
		heap_end = &end;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <_sbrk+0x50>)
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <_sbrk+0x54>)
 8001044:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <_sbrk+0x50>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <_sbrk+0x50>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	466a      	mov	r2, sp
 8001056:	4293      	cmp	r3, r2
 8001058:	d907      	bls.n	800106a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800105a:	f007 f8a3 	bl	80081a4 <__errno>
 800105e:	4603      	mov	r3, r0
 8001060:	220c      	movs	r2, #12
 8001062:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	e006      	b.n	8001078 <_sbrk+0x48>
	}

	heap_end += incr;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <_sbrk+0x50>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	4a03      	ldr	r2, [pc, #12]	; (8001080 <_sbrk+0x50>)
 8001074:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000970 	.word	0x20000970
 8001084:	200137f0 	.word	0x200137f0

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SystemInit+0x28>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <SystemInit+0x28>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SystemInit+0x28>)
 800109e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a2:	609a      	str	r2, [r3, #8]
#endif
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MX_TIM1_Init+0x98>)
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <MX_TIM1_Init+0x9c>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_TIM1_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_TIM1_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_TIM1_Init+0x98>)
 80010e4:	220b      	movs	r2, #11
 80010e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_TIM1_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_TIM1_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_TIM1_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010fa:	4814      	ldr	r0, [pc, #80]	; (800114c <MX_TIM1_Init+0x98>)
 80010fc:	f002 f890 	bl	8003220 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001106:	f7ff fd5f 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_TIM1_Init+0x98>)
 8001118:	f002 fb8c 	bl	8003834 <HAL_TIM_ConfigClockSource>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001122:	f7ff fd51 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <MX_TIM1_Init+0x98>)
 8001134:	f002 ff84 	bl	8004040 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800113e:	f7ff fd43 	bl	8000bc8 <Error_Handler>
  }

}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000974 	.word	0x20000974
 8001150:	40010000 	.word	0x40010000

08001154 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <MX_TIM2_Init+0xcc>)
 8001178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <MX_TIM2_Init+0xcc>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_TIM2_Init+0xcc>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <MX_TIM2_Init+0xcc>)
 800118c:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001190:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <MX_TIM2_Init+0xcc>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <MX_TIM2_Init+0xcc>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800119e:	4820      	ldr	r0, [pc, #128]	; (8001220 <MX_TIM2_Init+0xcc>)
 80011a0:	f002 f88d 	bl	80032be <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011aa:	f7ff fd0d 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	4619      	mov	r1, r3
 80011bc:	4818      	ldr	r0, [pc, #96]	; (8001220 <MX_TIM2_Init+0xcc>)
 80011be:	f002 ff3f 	bl	8004040 <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011c8:	f7ff fcfe 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011cc:	2360      	movs	r3, #96	; 0x60
 80011ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 80011d0:	f240 13bb 	movw	r3, #443	; 0x1bb
 80011d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80011d6:	2302      	movs	r3, #2
 80011d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2208      	movs	r2, #8
 80011e2:	4619      	mov	r1, r3
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_TIM2_Init+0xcc>)
 80011e6:	f002 fa5f 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011f0:	f7ff fcea 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80011f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	220c      	movs	r2, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_TIM2_Init+0xcc>)
 8001202:	f002 fa51 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800120c:	f7ff fcdc 	bl	8000bc8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_TIM2_Init+0xcc>)
 8001212:	f000 f87f 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200009b4 	.word	0x200009b4

08001224 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <HAL_TIM_Base_MspInit+0x94>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d13c      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_TIM_Base_MspInit+0x98>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_TIM_Base_MspInit+0x98>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_TIM_Base_MspInit+0x98>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001256:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 800125a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800125e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 800126e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001272:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001288:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800128c:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001294:	480a      	ldr	r0, [pc, #40]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001296:	f000 fb3b 	bl	8001910 <HAL_DMA_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80012a0:	f7ff fc92 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 80012a8:	621a      	str	r2, [r3, #32]
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	200009f4 	.word	0x200009f4
 80012c4:	40026488 	.word	0x40026488

080012c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d8:	d115      	bne.n	8001306 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_TIM_PWM_MspInit+0x48>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_TIM_PWM_MspInit+0x48>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_TIM_PWM_MspInit+0x48>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	201c      	movs	r0, #28
 80012fc:	f000 fad1 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001300:	201c      	movs	r0, #28
 8001302:	f000 faea 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001334:	d11e      	bne.n	8001374 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_TIM_MspPostInit+0x68>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_TIM_MspPostInit+0x68>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_TIM_MspPostInit+0x68>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001356:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001364:	2301      	movs	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <HAL_TIM_MspPostInit+0x6c>)
 8001370:	f000 fe60 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40020400 	.word	0x40020400

08001384 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <MX_USART2_UART_Init+0x50>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013bc:	f002 fed0 	bl	8004160 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c6:	f7ff fbff 	bl	8000bc8 <Error_Handler>
  }

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000a54 	.word	0x20000a54
 80013d4:	40004400 	.word	0x40004400

080013d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_UART_MspInit+0x94>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d133      	bne.n	8001462 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_UART_MspInit+0x98>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_UART_MspInit+0x98>)
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_UART_MspInit+0x98>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_UART_MspInit+0x98>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_UART_MspInit+0x98>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_UART_MspInit+0x98>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001432:	230c      	movs	r3, #12
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001442:	2307      	movs	r3, #7
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <HAL_UART_MspInit+0x9c>)
 800144e:	f000 fdf1 	bl	8002034 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2026      	movs	r0, #38	; 0x26
 8001458:	f000 fa23 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800145c:	2026      	movs	r0, #38	; 0x26
 800145e:	f000 fa3c 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	; 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40004400 	.word	0x40004400
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800147c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800147e:	e003      	b.n	8001488 <LoopCopyDataInit>

08001480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001486:	3104      	adds	r1, #4

08001488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800148c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800148e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001490:	d3f6      	bcc.n	8001480 <CopyDataInit>
  ldr  r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001494:	e002      	b.n	800149c <LoopFillZerobss>

08001496 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001496:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001498:	f842 3b04 	str.w	r3, [r2], #4

0800149c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800149e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014a0:	d3f9      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014a2:	f7ff fdf1 	bl	8001088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f006 fe83 	bl	80081b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff fab7 	bl	8000a1c <main>
  bx  lr    
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014b4:	08009b0c 	.word	0x08009b0c
  ldr  r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014bc:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80014c0:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80014c4:	200137ec 	.word	0x200137ec

080014c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC_IRQHandler>
	...

080014cc <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <UB_VGA_Screen_Init+0x84>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <UB_VGA_Screen_Init+0x84>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <UB_VGA_Screen_Init+0x84>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <UB_VGA_Screen_Init+0x88>)
 80014e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e8:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80014ea:	481b      	ldr	r0, [pc, #108]	; (8001558 <UB_VGA_Screen_Init+0x8c>)
 80014ec:	f001 fec3 	bl	8003276 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80014f0:	210c      	movs	r1, #12
 80014f2:	4819      	ldr	r0, [pc, #100]	; (8001558 <UB_VGA_Screen_Init+0x8c>)
 80014f4:	f001 ff0e 	bl	8003314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80014f8:	2108      	movs	r1, #8
 80014fa:	4817      	ldr	r0, [pc, #92]	; (8001558 <UB_VGA_Screen_Init+0x8c>)
 80014fc:	f001 ff48 	bl	8003390 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <UB_VGA_Screen_Init+0x90>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <UB_VGA_Screen_Init+0x90>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800150e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <UB_VGA_Screen_Init+0x90>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <UB_VGA_Screen_Init+0x90>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001520:	490f      	ldr	r1, [pc, #60]	; (8001560 <UB_VGA_Screen_Init+0x94>)
 8001522:	f240 1341 	movw	r3, #321	; 0x141
 8001526:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <UB_VGA_Screen_Init+0x98>)
 8001528:	480f      	ldr	r0, [pc, #60]	; (8001568 <UB_VGA_Screen_Init+0x9c>)
 800152a:	f000 fa9f 	bl	8001a6c <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <UB_VGA_Screen_Init+0x9c>)
 8001530:	f000 f9ee 	bl	8001910 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <UB_VGA_Screen_Init+0x9c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <UB_VGA_Screen_Init+0x9c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0210 	orr.w	r2, r2, #16
 8001542:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <UB_VGA_Screen_Init+0xa0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a01      	ldr	r2, [pc, #4]	; (8001550 <UB_VGA_Screen_Init+0x84>)
 800154a:	6093      	str	r3, [r2, #8]
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20013784 	.word	0x20013784
 8001554:	40020400 	.word	0x40020400
 8001558:	200009b4 	.word	0x200009b4
 800155c:	20000974 	.word	0x20000974
 8001560:	20000a94 	.word	0x20000a94
 8001564:	40021015 	.word	0x40021015
 8001568:	200009f4 	.word	0x200009f4
 800156c:	40026488 	.word	0x40026488

08001570 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800157a:	2300      	movs	r3, #0
 800157c:	81bb      	strh	r3, [r7, #12]
 800157e:	e012      	b.n	80015a6 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001580:	2300      	movs	r3, #0
 8001582:	81fb      	strh	r3, [r7, #14]
 8001584:	e008      	b.n	8001598 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	89b9      	ldrh	r1, [r7, #12]
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f813 	bl	80015b8 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	3301      	adds	r3, #1
 8001596:	81fb      	strh	r3, [r7, #14]
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800159e:	d3f2      	bcc.n	8001586 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80015a0:	89bb      	ldrh	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	81bb      	strh	r3, [r7, #12]
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	2bef      	cmp	r3, #239	; 0xef
 80015aa:	d9e9      	bls.n	8001580 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
 80015c2:	460b      	mov	r3, r1
 80015c4:	80bb      	strh	r3, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80015d0:	d301      	bcc.n	80015d6 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80015d6:	88bb      	ldrh	r3, [r7, #4]
 80015d8:	2bef      	cmp	r3, #239	; 0xef
 80015da:	d901      	bls.n	80015e0 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80015e0:	88ba      	ldrh	r2, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	441a      	add	r2, r3
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	4413      	add	r3, r2
 80015f0:	4904      	ldr	r1, [pc, #16]	; (8001604 <UB_VGA_SetPixel+0x4c>)
 80015f2:	78fa      	ldrb	r2, [r7, #3]
 80015f4:	54ca      	strb	r2, [r1, r3]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000a94 	.word	0x20000a94

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_Init+0x40>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_Init+0x40>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x40>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f92b 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	2000      	movs	r0, #0
 8001638:	f000 f808 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fb6a 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x54>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f943 	bl	80018f6 <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f90b 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_InitTick+0x5c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x24>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_IncTick+0x24>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20013790 	.word	0x20013790

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20013790 	.word	0x20013790

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	; (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff3e 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff31 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff feda 	bl	80016d4 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e099      	b.n	8001a60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194c:	e00f      	b.n	800196e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194e:	f7ff fec1 	bl	80016d4 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b05      	cmp	r3, #5
 800195a:	d908      	bls.n	800196e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2203      	movs	r2, #3
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e078      	b.n	8001a60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e8      	bne.n	800194e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_DMA_Init+0x158>)
 8001988:	4013      	ands	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d107      	bne.n	80019d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4313      	orrs	r3, r2
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f023 0307 	bic.w	r3, r3, #7
 80019ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d117      	bne.n	8001a32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fa91 	bl	8001f3c <DMA_CheckFifoParam>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e016      	b.n	8001a60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fa48 	bl	8001ed0 <DMA_CalcBaseAndBitshift>
 8001a40:	4603      	mov	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	223f      	movs	r2, #63	; 0x3f
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	f010803f 	.word	0xf010803f

08001a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_DMA_Start_IT+0x26>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e040      	b.n	8001b14 <HAL_DMA_Start_IT+0xa8>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12f      	bne.n	8001b06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f9da 	bl	8001e74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	223f      	movs	r2, #63	; 0x3f
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0216 	orr.w	r2, r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0208 	orr.w	r2, r2, #8
 8001af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e005      	b.n	8001b12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00c      	b.n	8001b54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2205      	movs	r2, #5
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0201 	bic.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b6c:	4b8e      	ldr	r3, [pc, #568]	; (8001da8 <HAL_DMA_IRQHandler+0x248>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a8e      	ldr	r2, [pc, #568]	; (8001dac <HAL_DMA_IRQHandler+0x24c>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01a      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0204 	bic.w	r2, r2, #4
 8001bb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb8:	2208      	movs	r2, #8
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	2201      	movs	r2, #1
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f043 0202 	orr.w	r2, r3, #2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2204      	movs	r2, #4
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	2204      	movs	r2, #4
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f043 0204 	orr.w	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d043      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03c      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d018      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d108      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d024      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
 8001c8e:	e01f      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01b      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
 8001ca0:	e016      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0208 	bic.w	r2, r2, #8
 8001cbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 808f 	beq.w	8001e00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8087 	beq.w	8001e00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d136      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0216 	bic.w	r2, r2, #22
 8001d18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_DMA_IRQHandler+0x1da>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0208 	bic.w	r2, r2, #8
 8001d48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	223f      	movs	r2, #63	; 0x3f
 8001d50:	409a      	lsls	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d07e      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
        }
        return;
 8001d76:	e079      	b.n	8001e6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01d      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10d      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d031      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
 8001da4:	e02c      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
 8001da6:	bf00      	nop
 8001da8:	20000000 	.word	0x20000000
 8001dac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d023      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
 8001dc0:	e01e      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10f      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0210 	bic.w	r2, r2, #16
 8001dde:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d032      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d022      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2205      	movs	r2, #5
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d307      	bcc.n	8001e48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f2      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x2cc>
 8001e46:	e000      	b.n	8001e4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e48:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
 8001e6a:	e000      	b.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e6c:	bf00      	nop
    }
  }
}
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d108      	bne.n	8001eb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eb2:	e007      	b.n	8001ec4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3b10      	subs	r3, #16
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <DMA_CalcBaseAndBitshift+0x64>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <DMA_CalcBaseAndBitshift+0x68>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d909      	bls.n	8001f12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f06:	f023 0303 	bic.w	r3, r3, #3
 8001f0a:	1d1a      	adds	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f10:	e007      	b.n	8001f22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	aaaaaaab 	.word	0xaaaaaaab
 8001f38:	080098b4 	.word	0x080098b4

08001f3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d11f      	bne.n	8001f96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d856      	bhi.n	800200a <DMA_CheckFifoParam+0xce>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <DMA_CheckFifoParam+0x28>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f87 	.word	0x08001f87
 8001f6c:	08001f75 	.word	0x08001f75
 8001f70:	0800200b 	.word	0x0800200b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d046      	beq.n	800200e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f84:	e043      	b.n	800200e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f8e:	d140      	bne.n	8002012 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f94:	e03d      	b.n	8002012 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9e:	d121      	bne.n	8001fe4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d837      	bhi.n	8002016 <DMA_CheckFifoParam+0xda>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <DMA_CheckFifoParam+0x70>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fbd 	.word	0x08001fbd
 8001fb0:	08001fc3 	.word	0x08001fc3
 8001fb4:	08001fbd 	.word	0x08001fbd
 8001fb8:	08001fd5 	.word	0x08001fd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc0:	e030      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d025      	beq.n	800201a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd2:	e022      	b.n	800201a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fdc:	d11f      	bne.n	800201e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fe2:	e01c      	b.n	800201e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d903      	bls.n	8001ff2 <DMA_CheckFifoParam+0xb6>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d003      	beq.n	8001ff8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ff0:	e018      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff6:	e015      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00e      	beq.n	8002022 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      break;
 8002008:	e00b      	b.n	8002022 <DMA_CheckFifoParam+0xe6>
      break;
 800200a:	bf00      	nop
 800200c:	e00a      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e008      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e006      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002016:	bf00      	nop
 8002018:	e004      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
 800201c:	e002      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;   
 800201e:	bf00      	nop
 8002020:	e000      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
    }
  } 
  
  return status; 
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e16b      	b.n	8002328 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002050:	2201      	movs	r2, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	f040 815a 	bne.w	8002322 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d00b      	beq.n	800208e <HAL_GPIO_Init+0x5a>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d007      	beq.n	800208e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002082:	2b11      	cmp	r3, #17
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b12      	cmp	r3, #18
 800208c:	d130      	bne.n	80020f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 0201 	and.w	r2, r3, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0xfc>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b12      	cmp	r3, #18
 800212e:	d123      	bne.n	8002178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	220f      	movs	r2, #15
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	69b9      	ldr	r1, [r7, #24]
 8002174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80b4 	beq.w	8002322 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b60      	ldr	r3, [pc, #384]	; (8002340 <HAL_GPIO_Init+0x30c>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a5f      	ldr	r2, [pc, #380]	; (8002340 <HAL_GPIO_Init+0x30c>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b5d      	ldr	r3, [pc, #372]	; (8002340 <HAL_GPIO_Init+0x30c>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d6:	4a5b      	ldr	r2, [pc, #364]	; (8002344 <HAL_GPIO_Init+0x310>)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	220f      	movs	r2, #15
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_GPIO_Init+0x314>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02b      	beq.n	800225a <HAL_GPIO_Init+0x226>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a51      	ldr	r2, [pc, #324]	; (800234c <HAL_GPIO_Init+0x318>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d025      	beq.n	8002256 <HAL_GPIO_Init+0x222>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a50      	ldr	r2, [pc, #320]	; (8002350 <HAL_GPIO_Init+0x31c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01f      	beq.n	8002252 <HAL_GPIO_Init+0x21e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4f      	ldr	r2, [pc, #316]	; (8002354 <HAL_GPIO_Init+0x320>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d019      	beq.n	800224e <HAL_GPIO_Init+0x21a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4e      	ldr	r2, [pc, #312]	; (8002358 <HAL_GPIO_Init+0x324>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_GPIO_Init+0x216>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HAL_GPIO_Init+0x328>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00d      	beq.n	8002246 <HAL_GPIO_Init+0x212>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_GPIO_Init+0x32c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <HAL_GPIO_Init+0x20e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4b      	ldr	r2, [pc, #300]	; (8002364 <HAL_GPIO_Init+0x330>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_GPIO_Init+0x20a>
 800223a:	2307      	movs	r3, #7
 800223c:	e00e      	b.n	800225c <HAL_GPIO_Init+0x228>
 800223e:	2308      	movs	r3, #8
 8002240:	e00c      	b.n	800225c <HAL_GPIO_Init+0x228>
 8002242:	2306      	movs	r3, #6
 8002244:	e00a      	b.n	800225c <HAL_GPIO_Init+0x228>
 8002246:	2305      	movs	r3, #5
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x228>
 800224a:	2304      	movs	r3, #4
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x228>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x228>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x228>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x228>
 800225a:	2300      	movs	r3, #0
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	f002 0203 	and.w	r2, r2, #3
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	4093      	lsls	r3, r2
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800226c:	4935      	ldr	r1, [pc, #212]	; (8002344 <HAL_GPIO_Init+0x310>)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_GPIO_Init+0x334>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800229e:	4a32      	ldr	r2, [pc, #200]	; (8002368 <HAL_GPIO_Init+0x334>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022a4:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_GPIO_Init+0x334>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c8:	4a27      	ldr	r2, [pc, #156]	; (8002368 <HAL_GPIO_Init+0x334>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_GPIO_Init+0x334>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f2:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <HAL_GPIO_Init+0x334>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_GPIO_Init+0x334>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <HAL_GPIO_Init+0x334>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	f67f ae90 	bls.w	8002050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020400 	.word	0x40020400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40021400 	.word	0x40021400
 8002360:	40021800 	.word	0x40021800
 8002364:	40021c00 	.word	0x40021c00
 8002368:	40013c00 	.word	0x40013c00

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002388:	e003      	b.n	8002392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e25e      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d075      	beq.n	80024aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d00c      	beq.n	80023e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ca:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d112      	bne.n	80023fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d6:	4b82      	ldr	r3, [pc, #520]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e2:	d10b      	bne.n	80023fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b7e      	ldr	r3, [pc, #504]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d05b      	beq.n	80024a8 <HAL_RCC_OscConfig+0x108>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d157      	bne.n	80024a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e239      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d106      	bne.n	8002414 <HAL_RCC_OscConfig+0x74>
 8002406:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a75      	ldr	r2, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x98>
 800241e:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a6f      	ldr	r2, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6c      	ldr	r2, [pc, #432]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002438:	4b69      	ldr	r3, [pc, #420]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a68      	ldr	r2, [pc, #416]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a65      	ldr	r2, [pc, #404]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff f93c 	bl	80016d4 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff f938 	bl	80016d4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1fe      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0xc0>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff f928 	bl	80016d4 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff f924 	bl	80016d4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e1ea      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0xe8>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d063      	beq.n	800257e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b6:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d11c      	bne.n	8002508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d116      	bne.n	8002508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_OscConfig+0x152>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e1be      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4937      	ldr	r1, [pc, #220]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	e03a      	b.n	800257e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7ff f8dd 	bl	80016d4 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251e:	f7ff f8d9 	bl	80016d4 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e19f      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4925      	ldr	r1, [pc, #148]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff f8bc 	bl	80016d4 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002560:	f7ff f8b8 	bl	80016d4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e17e      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d036      	beq.n	80025f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d016      	beq.n	80025c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_RCC_OscConfig+0x248>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7ff f89c 	bl	80016d4 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a0:	f7ff f898 	bl	80016d4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e15e      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x240>)
 80025b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x200>
 80025be:	e01b      	b.n	80025f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_OscConfig+0x248>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7ff f885 	bl	80016d4 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	e00e      	b.n	80025ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ce:	f7ff f881 	bl	80016d4 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d907      	bls.n	80025ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e147      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
 80025e0:	40023800 	.word	0x40023800
 80025e4:	42470000 	.word	0x42470000
 80025e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ea      	bne.n	80025ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8097 	beq.w	8002734 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b81      	ldr	r3, [pc, #516]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b7d      	ldr	r3, [pc, #500]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a7c      	ldr	r2, [pc, #496]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b7a      	ldr	r3, [pc, #488]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002636:	4b77      	ldr	r3, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x474>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002642:	4b74      	ldr	r3, [pc, #464]	; (8002814 <HAL_RCC_OscConfig+0x474>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a73      	ldr	r2, [pc, #460]	; (8002814 <HAL_RCC_OscConfig+0x474>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264e:	f7ff f841 	bl	80016d4 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002656:	f7ff f83d 	bl	80016d4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e103      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x474>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x2ea>
 800267c:	4b64      	ldr	r3, [pc, #400]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a63      	ldr	r2, [pc, #396]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x324>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b05      	cmp	r3, #5
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x30c>
 8002692:	4b5f      	ldr	r3, [pc, #380]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a5e      	ldr	r2, [pc, #376]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
 800269e:	4b5c      	ldr	r3, [pc, #368]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a5b      	ldr	r2, [pc, #364]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0x324>
 80026ac:	4b58      	ldr	r3, [pc, #352]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a57      	ldr	r2, [pc, #348]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	4b55      	ldr	r3, [pc, #340]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a54      	ldr	r2, [pc, #336]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80026be:	f023 0304 	bic.w	r3, r3, #4
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d015      	beq.n	80026f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7ff f802 	bl	80016d4 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe fffe 	bl	80016d4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e0c2      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	4b49      	ldr	r3, [pc, #292]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ee      	beq.n	80026d4 <HAL_RCC_OscConfig+0x334>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7fe ffec 	bl	80016d4 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe ffe8 	bl	80016d4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0ac      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002716:	4b3e      	ldr	r3, [pc, #248]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ee      	bne.n	8002700 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002728:	4b39      	ldr	r3, [pc, #228]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	4a38      	ldr	r2, [pc, #224]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 800272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002732:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800273e:	4b34      	ldr	r3, [pc, #208]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b08      	cmp	r3, #8
 8002748:	d05c      	beq.n	8002804 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d141      	bne.n	80027d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_RCC_OscConfig+0x478>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe ffbc 	bl	80016d4 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe ffb8 	bl	80016d4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e07e      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	4b27      	ldr	r3, [pc, #156]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69da      	ldr	r2, [r3, #28]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	019b      	lsls	r3, r3, #6
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	3b01      	subs	r3, #1
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	491b      	ldr	r1, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x478>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7fe ff91 	bl	80016d4 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b6:	f7fe ff8d 	bl	80016d4 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e053      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x416>
 80027d4:	e04b      	b.n	800286e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_RCC_OscConfig+0x478>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe ff7a 	bl	80016d4 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe ff76 	bl	80016d4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e03c      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_RCC_OscConfig+0x470>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x444>
 8002802:	e034      	b.n	800286e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d107      	bne.n	800281c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e02f      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000
 8002818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	429a      	cmp	r2, r3
 800282e:	d11c      	bne.n	800286a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d115      	bne.n	800286a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002844:	4013      	ands	r3, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800284a:	4293      	cmp	r3, r2
 800284c:	d10d      	bne.n	800286a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d001      	beq.n	800286e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0cc      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d90c      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b65      	ldr	r3, [pc, #404]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0b8      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e8:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a52      	ldr	r2, [pc, #328]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f4:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	494d      	ldr	r1, [pc, #308]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d044      	beq.n	800299c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d119      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d003      	beq.n	800293a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002936:	2b03      	cmp	r3, #3
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e067      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4934      	ldr	r1, [pc, #208]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800296c:	f7fe feb2 	bl	80016d4 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	e00a      	b.n	800298a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002974:	f7fe feae 	bl	80016d4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e04f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 020c 	and.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d1eb      	bne.n	8002974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d20c      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e032      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4916      	ldr	r1, [pc, #88]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a02:	f000 f821 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	490a      	ldr	r1, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	5ccb      	ldrb	r3, [r1, r3]
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fe12 	bl	800164c <HAL_InitTick>

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023c00 	.word	0x40023c00
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	0800989c 	.word	0x0800989c
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a4c:	b094      	sub	sp, #80	; 0x50
 8002a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	647b      	str	r3, [r7, #68]	; 0x44
 8002a54:	2300      	movs	r3, #0
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a58:	2300      	movs	r3, #0
 8002a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a60:	4b79      	ldr	r3, [pc, #484]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d00d      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	f200 80e1 	bhi.w	8002c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x34>
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a7a:	e0db      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b73      	ldr	r3, [pc, #460]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a80:	e0db      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a82:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a86:	e0d8      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a92:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d063      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9e:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aba:	4622      	mov	r2, r4
 8002abc:	462b      	mov	r3, r5
 8002abe:	f04f 0000 	mov.w	r0, #0
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	0159      	lsls	r1, r3, #5
 8002ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002acc:	0150      	lsls	r0, r2, #5
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	1a51      	subs	r1, r2, r1
 8002ad6:	6139      	str	r1, [r7, #16]
 8002ad8:	4629      	mov	r1, r5
 8002ada:	eb63 0301 	sbc.w	r3, r3, r1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aec:	4659      	mov	r1, fp
 8002aee:	018b      	lsls	r3, r1, #6
 8002af0:	4651      	mov	r1, sl
 8002af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002af6:	4651      	mov	r1, sl
 8002af8:	018a      	lsls	r2, r1, #6
 8002afa:	4651      	mov	r1, sl
 8002afc:	ebb2 0801 	subs.w	r8, r2, r1
 8002b00:	4659      	mov	r1, fp
 8002b02:	eb63 0901 	sbc.w	r9, r3, r1
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4699      	mov	r9, r3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	eb18 0303 	adds.w	r3, r8, r3
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	462b      	mov	r3, r5
 8002b28:	eb49 0303 	adc.w	r3, r9, r3
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	024b      	lsls	r3, r1, #9
 8002b3e:	4621      	mov	r1, r4
 8002b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b44:	4621      	mov	r1, r4
 8002b46:	024a      	lsls	r2, r1, #9
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4e:	2200      	movs	r2, #0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b58:	f7fd fb92 	bl	8000280 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b64:	e058      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4611      	mov	r1, r2
 8002b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b80:	4642      	mov	r2, r8
 8002b82:	464b      	mov	r3, r9
 8002b84:	f04f 0000 	mov.w	r0, #0
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	0159      	lsls	r1, r3, #5
 8002b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b92:	0150      	lsls	r0, r2, #5
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4641      	mov	r1, r8
 8002b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	00eb      	lsls	r3, r5, #3
 8002bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bce:	00e2      	lsls	r2, r4, #3
 8002bd0:	4614      	mov	r4, r2
 8002bd2:	461d      	mov	r5, r3
 8002bd4:	4643      	mov	r3, r8
 8002bd6:	18e3      	adds	r3, r4, r3
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	464b      	mov	r3, r9
 8002bdc:	eb45 0303 	adc.w	r3, r5, r3
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	028b      	lsls	r3, r1, #10
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	028a      	lsls	r2, r1, #10
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	61fa      	str	r2, [r7, #28]
 8002c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0c:	f7fd fb38 	bl	8000280 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3750      	adds	r7, #80	; 0x50
 8002c40:	46bd      	mov	sp, r7
 8002c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000000 	.word	0x20000000

08002c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c70:	f7ff fff0 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0a9b      	lsrs	r3, r3, #10
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	080098ac 	.word	0x080098ac

08002c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c98:	f7ff ffdc 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	0b5b      	lsrs	r3, r3, #13
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4903      	ldr	r1, [pc, #12]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	080098ac 	.word	0x080098ac

08002cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e056      	b.n	8002d7c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fd ffab 	bl	8000c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d04:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	ea42 0103 	orr.w	r1, r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	0c1b      	lsrs	r3, r3, #16
 8002d4c:	f003 0104 	and.w	r1, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08c      	sub	sp, #48	; 0x30
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d92:	2301      	movs	r3, #1
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_SPI_TransmitReceive+0x26>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e18a      	b.n	80030c0 <HAL_SPI_TransmitReceive+0x33c>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db2:	f7fe fc8f 	bl	80016d4 <HAL_GetTick>
 8002db6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d00f      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x70>
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dda:	d107      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x68>
 8002de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d003      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002df2:	e15b      	b.n	80030ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_SPI_TransmitReceive+0x82>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_SPI_TransmitReceive+0x82>
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e0c:	e14e      	b.n	80030ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d003      	beq.n	8002e22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2205      	movs	r2, #5
 8002e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	887a      	ldrh	r2, [r7, #2]
 8002e32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b40      	cmp	r3, #64	; 0x40
 8002e64:	d007      	beq.n	8002e76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7e:	d178      	bne.n	8002f72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_SPI_TransmitReceive+0x10a>
 8002e88:	8b7b      	ldrh	r3, [r7, #26]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d166      	bne.n	8002f5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	881a      	ldrh	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	1c9a      	adds	r2, r3, #2
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eb2:	e053      	b.n	8002f5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d11b      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x176>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d016      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x176>
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d113      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	881a      	ldrh	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	1c9a      	adds	r2, r3, #2
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d119      	bne.n	8002f3c <HAL_SPI_TransmitReceive+0x1b8>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d014      	beq.n	8002f3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	b292      	uxth	r2, r2
 8002f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f3c:	f7fe fbca 	bl	80016d4 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d807      	bhi.n	8002f5c <HAL_SPI_TransmitReceive+0x1d8>
 8002f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d003      	beq.n	8002f5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f5a:	e0a7      	b.n	80030ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1a6      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x130>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1a1      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x130>
 8002f70:	e07c      	b.n	800306c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x1fc>
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d16b      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa6:	e057      	b.n	8003058 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d11c      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x26c>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d017      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x26c>
 8002fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d114      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	7812      	ldrb	r2, [r2, #0]
 8002fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d119      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x2ae>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d014      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800302e:	2301      	movs	r3, #1
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003032:	f7fe fb4f 	bl	80016d4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800303e:	429a      	cmp	r2, r3
 8003040:	d803      	bhi.n	800304a <HAL_SPI_TransmitReceive+0x2c6>
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d102      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x2cc>
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003056:	e029      	b.n	80030ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1a2      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x224>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d19d      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f893 	bl	800319c <SPI_EndRxTxTransaction>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d006      	beq.n	800308a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003088:	e010      	b.n	80030ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	e000      	b.n	80030ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3730      	adds	r7, #48	; 0x30
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030d8:	e04c      	b.n	8003174 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d048      	beq.n	8003174 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80030e2:	f7fe faf7 	bl	80016d4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d13d      	bne.n	8003174 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003106:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003110:	d111      	bne.n	8003136 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800311a:	d004      	beq.n	8003126 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003124:	d107      	bne.n	8003136 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003134:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313e:	d10f      	bne.n	8003160 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800315e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e00f      	b.n	8003194 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4013      	ands	r3, r2
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	429a      	cmp	r2, r3
 8003190:	d1a3      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <SPI_EndRxTxTransaction+0x7c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1b      	ldr	r2, [pc, #108]	; (800321c <SPI_EndRxTxTransaction+0x80>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0d5b      	lsrs	r3, r3, #21
 80031b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c6:	d112      	bne.n	80031ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff ff78 	bl	80030c8 <SPI_WaitFlagStateUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e00f      	b.n	800320e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d0f2      	beq.n	80031ee <SPI_EndRxTxTransaction+0x52>
 8003208:	e000      	b.n	800320c <SPI_EndRxTxTransaction+0x70>
        break;
 800320a:	bf00      	nop
  }

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000000 	.word	0x20000000
 800321c:	165e9f81 	.word	0x165e9f81

08003220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e01d      	b.n	800326e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd ffec 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f000 fbde 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b06      	cmp	r3, #6
 8003296:	d007      	beq.n	80032a8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e01d      	b.n	800330c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd ffef 	bl	80012c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f000 fb8f 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2201      	movs	r2, #1
 8003324:	6839      	ldr	r1, [r7, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fe64 	bl	8003ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <HAL_TIM_PWM_Start+0x74>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_TIM_PWM_Start+0x2c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a14      	ldr	r2, [pc, #80]	; (800338c <HAL_TIM_PWM_Start+0x78>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_TIM_PWM_Start+0x30>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_TIM_PWM_Start+0x32>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b06      	cmp	r3, #6
 800336a:	d007      	beq.n	800337c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40010000 	.word	0x40010000
 800338c:	40010400 	.word	0x40010400

08003390 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b0c      	cmp	r3, #12
 800339e:	d841      	bhi.n	8003424 <HAL_TIM_PWM_Start_IT+0x94>
 80033a0:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <HAL_TIM_PWM_Start_IT+0x18>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033dd 	.word	0x080033dd
 80033ac:	08003425 	.word	0x08003425
 80033b0:	08003425 	.word	0x08003425
 80033b4:	08003425 	.word	0x08003425
 80033b8:	080033ef 	.word	0x080033ef
 80033bc:	08003425 	.word	0x08003425
 80033c0:	08003425 	.word	0x08003425
 80033c4:	08003425 	.word	0x08003425
 80033c8:	08003401 	.word	0x08003401
 80033cc:	08003425 	.word	0x08003425
 80033d0:	08003425 	.word	0x08003425
 80033d4:	08003425 	.word	0x08003425
 80033d8:	08003413 	.word	0x08003413
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0202 	orr.w	r2, r2, #2
 80033ea:	60da      	str	r2, [r3, #12]
      break;
 80033ec:	e01b      	b.n	8003426 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0204 	orr.w	r2, r2, #4
 80033fc:	60da      	str	r2, [r3, #12]
      break;
 80033fe:	e012      	b.n	8003426 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0208 	orr.w	r2, r2, #8
 800340e:	60da      	str	r2, [r3, #12]
      break;
 8003410:	e009      	b.n	8003426 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0210 	orr.w	r2, r2, #16
 8003420:	60da      	str	r2, [r3, #12]
      break;
 8003422:	e000      	b.n	8003426 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003424:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2201      	movs	r2, #1
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fde0 	bl	8003ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <HAL_TIM_PWM_Start_IT+0x100>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_TIM_PWM_Start_IT+0xb8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_TIM_PWM_Start_IT+0x104>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_TIM_PWM_Start_IT+0xbc>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_TIM_PWM_Start_IT+0xbe>
 800344c:	2300      	movs	r3, #0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b06      	cmp	r3, #6
 8003472:	d007      	beq.n	8003484 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40010400 	.word	0x40010400

08003498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d122      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d11b      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0202 	mvn.w	r2, #2
 80034c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa82 	bl	80039e4 <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fa74 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fa85 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0204 	mvn.w	r2, #4
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa58 	bl	80039e4 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa4a 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fa5b 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b08      	cmp	r3, #8
 8003554:	d122      	bne.n	800359c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d11b      	bne.n	800359c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0208 	mvn.w	r2, #8
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2204      	movs	r2, #4
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa2e 	bl	80039e4 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa20 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fa31 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0210 	mvn.w	r2, #16
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2208      	movs	r2, #8
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fa04 	bl	80039e4 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9f6 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fa07 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0201 	mvn.w	r2, #1
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9d0 	bl	80039bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fd82 	bl	800414c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f9cc 	bl	8003a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b20      	cmp	r3, #32
 8003680:	d10e      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b20      	cmp	r3, #32
 800368e:	d107      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0220 	mvn.w	r2, #32
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fd4c 	bl	8004138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036be:	2302      	movs	r3, #2
 80036c0:	e0b4      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x184>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b0c      	cmp	r3, #12
 80036d6:	f200 809f 	bhi.w	8003818 <HAL_TIM_PWM_ConfigChannel+0x170>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	08003715 	.word	0x08003715
 80036e4:	08003819 	.word	0x08003819
 80036e8:	08003819 	.word	0x08003819
 80036ec:	08003819 	.word	0x08003819
 80036f0:	08003755 	.word	0x08003755
 80036f4:	08003819 	.word	0x08003819
 80036f8:	08003819 	.word	0x08003819
 80036fc:	08003819 	.word	0x08003819
 8003700:	08003797 	.word	0x08003797
 8003704:	08003819 	.word	0x08003819
 8003708:	08003819 	.word	0x08003819
 800370c:	08003819 	.word	0x08003819
 8003710:	080037d7 	.word	0x080037d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fa20 	bl	8003b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0208 	orr.w	r2, r2, #8
 800372e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6999      	ldr	r1, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	619a      	str	r2, [r3, #24]
      break;
 8003752:	e062      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fa70 	bl	8003c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6999      	ldr	r1, [r3, #24]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	021a      	lsls	r2, r3, #8
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	619a      	str	r2, [r3, #24]
      break;
 8003794:	e041      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fac5 	bl	8003d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0208 	orr.w	r2, r2, #8
 80037b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0204 	bic.w	r2, r2, #4
 80037c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69d9      	ldr	r1, [r3, #28]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]
      break;
 80037d4:	e021      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fb19 	bl	8003e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	61da      	str	r2, [r3, #28]
      break;
 8003816:	e000      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003818:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_TIM_ConfigClockSource+0x18>
 8003848:	2302      	movs	r3, #2
 800384a:	e0b3      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x180>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800386a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003872:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003884:	d03e      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0xd0>
 8003886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388a:	f200 8087 	bhi.w	800399c <HAL_TIM_ConfigClockSource+0x168>
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003892:	f000 8085 	beq.w	80039a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389a:	d87f      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x168>
 800389c:	2b70      	cmp	r3, #112	; 0x70
 800389e:	d01a      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0xa2>
 80038a0:	2b70      	cmp	r3, #112	; 0x70
 80038a2:	d87b      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x168>
 80038a4:	2b60      	cmp	r3, #96	; 0x60
 80038a6:	d050      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x116>
 80038a8:	2b60      	cmp	r3, #96	; 0x60
 80038aa:	d877      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x168>
 80038ac:	2b50      	cmp	r3, #80	; 0x50
 80038ae:	d03c      	beq.n	800392a <HAL_TIM_ConfigClockSource+0xf6>
 80038b0:	2b50      	cmp	r3, #80	; 0x50
 80038b2:	d873      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x168>
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d058      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x136>
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d86f      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x168>
 80038bc:	2b30      	cmp	r3, #48	; 0x30
 80038be:	d064      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x156>
 80038c0:	2b30      	cmp	r3, #48	; 0x30
 80038c2:	d86b      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x168>
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d060      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x156>
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d867      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0x168>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d05c      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x156>
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d05a      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038d4:	e062      	b.n	800399c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6899      	ldr	r1, [r3, #8]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f000 fb65 	bl	8003fb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	609a      	str	r2, [r3, #8]
      break;
 8003902:	e04e      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6899      	ldr	r1, [r3, #8]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f000 fb4e 	bl	8003fb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003926:	609a      	str	r2, [r3, #8]
      break;
 8003928:	e03b      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	461a      	mov	r2, r3
 8003938:	f000 fac2 	bl	8003ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2150      	movs	r1, #80	; 0x50
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fb1b 	bl	8003f7e <TIM_ITRx_SetConfig>
      break;
 8003948:	e02b      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	461a      	mov	r2, r3
 8003958:	f000 fae1 	bl	8003f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2160      	movs	r1, #96	; 0x60
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fb0b 	bl	8003f7e <TIM_ITRx_SetConfig>
      break;
 8003968:	e01b      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	461a      	mov	r2, r3
 8003978:	f000 faa2 	bl	8003ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2140      	movs	r1, #64	; 0x40
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fafb 	bl	8003f7e <TIM_ITRx_SetConfig>
      break;
 8003988:	e00b      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f000 faf2 	bl	8003f7e <TIM_ITRx_SetConfig>
      break;
 800399a:	e002      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800399c:	bf00      	nop
 800399e:	e000      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a40      	ldr	r2, [pc, #256]	; (8003b34 <TIM_Base_SetConfig+0x114>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d00f      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3d      	ldr	r2, [pc, #244]	; (8003b38 <TIM_Base_SetConfig+0x118>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3c      	ldr	r2, [pc, #240]	; (8003b3c <TIM_Base_SetConfig+0x11c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <TIM_Base_SetConfig+0x120>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3a      	ldr	r2, [pc, #232]	; (8003b44 <TIM_Base_SetConfig+0x124>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d108      	bne.n	8003a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2f      	ldr	r2, [pc, #188]	; (8003b34 <TIM_Base_SetConfig+0x114>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a80:	d027      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <TIM_Base_SetConfig+0x118>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d023      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <TIM_Base_SetConfig+0x11c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01f      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a2a      	ldr	r2, [pc, #168]	; (8003b40 <TIM_Base_SetConfig+0x120>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <TIM_Base_SetConfig+0x124>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d017      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a28      	ldr	r2, [pc, #160]	; (8003b48 <TIM_Base_SetConfig+0x128>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <TIM_Base_SetConfig+0x12c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00f      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <TIM_Base_SetConfig+0x130>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <TIM_Base_SetConfig+0x134>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <TIM_Base_SetConfig+0x138>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a23      	ldr	r2, [pc, #140]	; (8003b5c <TIM_Base_SetConfig+0x13c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <TIM_Base_SetConfig+0x114>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_Base_SetConfig+0xf8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <TIM_Base_SetConfig+0x124>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d103      	bne.n	8003b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	615a      	str	r2, [r3, #20]
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800
 8003b40:	40000c00 	.word	0x40000c00
 8003b44:	40010400 	.word	0x40010400
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800
 8003b54:	40001800 	.word	0x40001800
 8003b58:	40001c00 	.word	0x40001c00
 8003b5c:	40002000 	.word	0x40002000

08003b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0201 	bic.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f023 0302 	bic.w	r3, r3, #2
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <TIM_OC1_SetConfig+0xd8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_OC1_SetConfig+0x64>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <TIM_OC1_SetConfig+0xdc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10c      	bne.n	8003bde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0308 	bic.w	r3, r3, #8
 8003bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 0304 	bic.w	r3, r3, #4
 8003bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <TIM_OC1_SetConfig+0xd8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d003      	beq.n	8003bee <TIM_OC1_SetConfig+0x8e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <TIM_OC1_SetConfig+0xdc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d111      	bne.n	8003c12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	621a      	str	r2, [r3, #32]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40010400 	.word	0x40010400

08003c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0210 	bic.w	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0320 	bic.w	r3, r3, #32
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <TIM_OC2_SetConfig+0xe4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_OC2_SetConfig+0x68>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <TIM_OC2_SetConfig+0xe8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10d      	bne.n	8003cc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <TIM_OC2_SetConfig+0xe4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_OC2_SetConfig+0x94>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <TIM_OC2_SetConfig+0xe8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d113      	bne.n	8003cfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40010400 	.word	0x40010400

08003d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <TIM_OC3_SetConfig+0xe0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_OC3_SetConfig+0x66>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <TIM_OC3_SetConfig+0xe4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10d      	bne.n	8003dae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <TIM_OC3_SetConfig+0xe0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC3_SetConfig+0x92>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <TIM_OC3_SetConfig+0xe4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d113      	bne.n	8003de6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40010400 	.word	0x40010400

08003e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <TIM_OC4_SetConfig+0xa4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_OC4_SetConfig+0x68>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a11      	ldr	r2, [pc, #68]	; (8003ebc <TIM_OC4_SetConfig+0xa8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d109      	bne.n	8003e90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	019b      	lsls	r3, r3, #6
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	40010400 	.word	0x40010400

08003ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f023 0201 	bic.w	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f023 030a 	bic.w	r3, r3, #10
 8003efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b087      	sub	sp, #28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f023 0210 	bic.w	r2, r3, #16
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	031b      	lsls	r3, r3, #12
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	621a      	str	r2, [r3, #32]
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f043 0307 	orr.w	r3, r3, #7
 8003fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	609a      	str	r2, [r3, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	021a      	lsls	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	609a      	str	r2, [r3, #8]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2201      	movs	r2, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1a      	ldr	r2, [r3, #32]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	43db      	mvns	r3, r3
 8004016:	401a      	ands	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	fa01 f303 	lsl.w	r3, r1, r3
 800402c:	431a      	orrs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004054:	2302      	movs	r3, #2
 8004056:	e05a      	b.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a21      	ldr	r2, [pc, #132]	; (800411c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d022      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a4:	d01d      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d018      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d009      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a17      	ldr	r2, [pc, #92]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a15      	ldr	r2, [pc, #84]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10c      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000
 8004120:	40000400 	.word	0x40000400
 8004124:	40000800 	.word	0x40000800
 8004128:	40000c00 	.word	0x40000c00
 800412c:	40010400 	.word	0x40010400
 8004130:	40014000 	.word	0x40014000
 8004134:	40001800 	.word	0x40001800

08004138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e03f      	b.n	80041f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd f926 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	; 0x24
 8004190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fba1 	bl	80048ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b088      	sub	sp, #32
 80041fe:	af02      	add	r7, sp, #8
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b20      	cmp	r3, #32
 8004218:	f040 8083 	bne.w	8004322 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_UART_Transmit+0x2e>
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e07b      	b.n	8004324 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_UART_Transmit+0x40>
 8004236:	2302      	movs	r3, #2
 8004238:	e074      	b.n	8004324 <HAL_UART_Transmit+0x12a>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2221      	movs	r2, #33	; 0x21
 800424c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004250:	f7fd fa40 	bl	80016d4 <HAL_GetTick>
 8004254:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	88fa      	ldrh	r2, [r7, #6]
 800425a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800426a:	e042      	b.n	80042f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004282:	d122      	bne.n	80042ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2200      	movs	r2, #0
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f9c0 	bl	8004614 <UART_WaitOnFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e042      	b.n	8004324 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3302      	adds	r3, #2
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	e017      	b.n	80042f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	e013      	b.n	80042f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2200      	movs	r2, #0
 80042d2:	2180      	movs	r1, #128	; 0x80
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f99d 	bl	8004614 <UART_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e01f      	b.n	8004324 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	60ba      	str	r2, [r7, #8]
 80042ea:	781a      	ldrb	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1b7      	bne.n	800426c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	2140      	movs	r1, #64	; 0x40
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f984 	bl	8004614 <UART_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e006      	b.n	8004324 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b20      	cmp	r3, #32
 8004344:	d140      	bne.n	80043c8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_UART_Receive_IT+0x26>
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e039      	b.n	80043ca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_UART_Receive_IT+0x38>
 8004360:	2302      	movs	r3, #2
 8004362:	e032      	b.n	80043ca <HAL_UART_Receive_IT+0x9e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	88fa      	ldrh	r2, [r7, #6]
 8004376:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	88fa      	ldrh	r2, [r7, #6]
 800437c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2222      	movs	r2, #34	; 0x22
 8004388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0220 	orr.w	r2, r2, #32
 80043c2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_UART_IRQHandler+0x52>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9e0 	bl	80047e8 <UART_Receive_IT>
      return;
 8004428:	e0d0      	b.n	80045cc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80b0 	beq.w	8004592 <HAL_UART_IRQHandler+0x1ba>
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <HAL_UART_IRQHandler+0x70>
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80a5 	beq.w	8004592 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_UART_IRQHandler+0x90>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_UART_IRQHandler+0xb0>
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004480:	f043 0202 	orr.w	r2, r3, #2
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_UART_IRQHandler+0xd0>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	f043 0204 	orr.w	r2, r3, #4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00f      	beq.n	80044d2 <HAL_UART_IRQHandler+0xfa>
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <HAL_UART_IRQHandler+0xee>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	f043 0208 	orr.w	r2, r3, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d077      	beq.n	80045ca <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_UART_IRQHandler+0x11c>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f97a 	bl	80047e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	bf0c      	ite	eq
 8004502:	2301      	moveq	r3, #1
 8004504:	2300      	movne	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <HAL_UART_IRQHandler+0x144>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d031      	beq.n	8004580 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8c3 	bl	80046a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d123      	bne.n	8004578 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	4a21      	ldr	r2, [pc, #132]	; (80045d4 <HAL_UART_IRQHandler+0x1fc>)
 800454e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	4618      	mov	r0, r3
 8004556:	f7fd fae1 	bl	8001b1c <HAL_DMA_Abort_IT>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d016      	beq.n	800458e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800456a:	4610      	mov	r0, r2
 800456c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456e:	e00e      	b.n	800458e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f845 	bl	8004600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004576:	e00a      	b.n	800458e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f841 	bl	8004600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457e:	e006      	b.n	800458e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f83d 	bl	8004600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800458c:	e01d      	b.n	80045ca <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458e:	bf00      	nop
    return;
 8004590:	e01b      	b.n	80045ca <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_UART_IRQHandler+0x1d6>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8b0 	bl	800470c <UART_Transmit_IT>
    return;
 80045ac:	e00e      	b.n	80045cc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <HAL_UART_IRQHandler+0x1f4>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8f8 	bl	80047b8 <UART_EndTransmit_IT>
    return;
 80045c8:	e000      	b.n	80045cc <HAL_UART_IRQHandler+0x1f4>
    return;
 80045ca:	bf00      	nop
  }
}
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	080046e5 	.word	0x080046e5

080045d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	4613      	mov	r3, r2
 8004622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004624:	e02c      	b.n	8004680 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d028      	beq.n	8004680 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <UART_WaitOnFlagUntilTimeout+0x30>
 8004634:	f7fd f84e 	bl	80016d4 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	429a      	cmp	r2, r3
 8004642:	d21d      	bcs.n	8004680 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004652:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e00f      	b.n	80046a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	429a      	cmp	r2, r3
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	429a      	cmp	r2, r3
 800469c:	d0c3      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff ff7e 	bl	8004600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b21      	cmp	r3, #33	; 0x21
 800471e:	d144      	bne.n	80047aa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004728:	d11a      	bne.n	8004760 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800473e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	1c9a      	adds	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	621a      	str	r2, [r3, #32]
 8004752:	e00e      	b.n	8004772 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]
 800475e:	e008      	b.n	8004772 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	1c59      	adds	r1, r3, #1
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6211      	str	r1, [r2, #32]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29b      	uxth	r3, r3
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4619      	mov	r1, r3
 8004780:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004794:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff fefd 	bl	80045d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b22      	cmp	r3, #34	; 0x22
 80047fa:	d171      	bne.n	80048e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004804:	d123      	bne.n	800484e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10e      	bne.n	8004832 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b29b      	uxth	r3, r3
 800481c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	1c9a      	adds	r2, r3, #2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
 8004830:	e029      	b.n	8004886 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	b29b      	uxth	r3, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	; 0x28
 800484c:	e01b      	b.n	8004886 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6858      	ldr	r0, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	1c59      	adds	r1, r3, #1
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6291      	str	r1, [r2, #40]	; 0x28
 8004866:	b2c2      	uxtb	r2, r0
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e00c      	b.n	8004886 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	b2da      	uxtb	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	1c58      	adds	r0, r3, #1
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	6288      	str	r0, [r1, #40]	; 0x28
 800487e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4619      	mov	r1, r3
 8004894:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004896:	2b00      	cmp	r3, #0
 8004898:	d120      	bne.n	80048dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0220 	bic.w	r2, r2, #32
 80048a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fe8a 	bl	80045ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e002      	b.n	80048e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f0:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004906:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800490a:	68d9      	ldr	r1, [r3, #12]
 800490c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	ea40 0301 	orr.w	r3, r0, r1
 8004916:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004918:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	431a      	orrs	r2, r3
 8004926:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	431a      	orrs	r2, r3
 800492e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800493a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004946:	f021 010c 	bic.w	r1, r1, #12
 800494a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004954:	430b      	orrs	r3, r1
 8004956:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004958:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004964:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004968:	6999      	ldr	r1, [r3, #24]
 800496a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	ea40 0301 	orr.w	r3, r0, r1
 8004974:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004976:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004980:	f040 824a 	bne.w	8004e18 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004984:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b96      	ldr	r3, [pc, #600]	; (8004be4 <UART_SetConfig+0x2f8>)
 800498c:	429a      	cmp	r2, r3
 800498e:	d006      	beq.n	800499e <UART_SetConfig+0xb2>
 8004990:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b94      	ldr	r3, [pc, #592]	; (8004be8 <UART_SetConfig+0x2fc>)
 8004998:	429a      	cmp	r2, r3
 800499a:	f040 8129 	bne.w	8004bf0 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800499e:	f7fe f979 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80049a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80049b0:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80049b4:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80049b8:	4622      	mov	r2, r4
 80049ba:	462b      	mov	r3, r5
 80049bc:	1891      	adds	r1, r2, r2
 80049be:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80049c2:	415b      	adcs	r3, r3
 80049c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80049c8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80049cc:	4621      	mov	r1, r4
 80049ce:	1851      	adds	r1, r2, r1
 80049d0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80049d4:	4629      	mov	r1, r5
 80049d6:	414b      	adcs	r3, r1
 80049d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80049e8:	4649      	mov	r1, r9
 80049ea:	00cb      	lsls	r3, r1, #3
 80049ec:	4641      	mov	r1, r8
 80049ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f2:	4641      	mov	r1, r8
 80049f4:	00ca      	lsls	r2, r1, #3
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	4622      	mov	r2, r4
 80049fe:	189b      	adds	r3, r3, r2
 8004a00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004a04:	462b      	mov	r3, r5
 8004a06:	460a      	mov	r2, r1
 8004a08:	eb42 0303 	adc.w	r3, r2, r3
 8004a0c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004a10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a1c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004a20:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004a24:	460b      	mov	r3, r1
 8004a26:	18db      	adds	r3, r3, r3
 8004a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	eb42 0303 	adc.w	r3, r2, r3
 8004a32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a36:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004a3a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004a3e:	f7fb fc1f 	bl	8000280 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4b69      	ldr	r3, [pc, #420]	; (8004bec <UART_SetConfig+0x300>)
 8004a48:	fba3 2302 	umull	r2, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	011c      	lsls	r4, r3, #4
 8004a50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004a5a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004a5e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004a62:	4642      	mov	r2, r8
 8004a64:	464b      	mov	r3, r9
 8004a66:	1891      	adds	r1, r2, r2
 8004a68:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004a6c:	415b      	adcs	r3, r3
 8004a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a72:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004a76:	4641      	mov	r1, r8
 8004a78:	1851      	adds	r1, r2, r1
 8004a7a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004a7e:	4649      	mov	r1, r9
 8004a80:	414b      	adcs	r3, r1
 8004a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004a92:	4659      	mov	r1, fp
 8004a94:	00cb      	lsls	r3, r1, #3
 8004a96:	4651      	mov	r1, sl
 8004a98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a9c:	4651      	mov	r1, sl
 8004a9e:	00ca      	lsls	r2, r1, #3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	189b      	adds	r3, r3, r2
 8004aaa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004aae:	464b      	mov	r3, r9
 8004ab0:	460a      	mov	r2, r1
 8004ab2:	eb42 0303 	adc.w	r3, r2, r3
 8004ab6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004aba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004ac6:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004aca:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004ace:	460b      	mov	r3, r1
 8004ad0:	18db      	adds	r3, r3, r3
 8004ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	eb42 0303 	adc.w	r3, r2, r3
 8004adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ae0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004ae4:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004ae8:	f7fb fbca 	bl	8000280 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4611      	mov	r1, r2
 8004af2:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <UART_SetConfig+0x300>)
 8004af4:	fba3 2301 	umull	r2, r3, r3, r1
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	2264      	movs	r2, #100	; 0x64
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	1acb      	subs	r3, r1, r3
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b08:	4b38      	ldr	r3, [pc, #224]	; (8004bec <UART_SetConfig+0x300>)
 8004b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b16:	441c      	add	r4, r3
 8004b18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b22:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004b26:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004b2a:	4642      	mov	r2, r8
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	1891      	adds	r1, r2, r2
 8004b30:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004b34:	415b      	adcs	r3, r3
 8004b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004b3a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004b3e:	4641      	mov	r1, r8
 8004b40:	1851      	adds	r1, r2, r1
 8004b42:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004b46:	4649      	mov	r1, r9
 8004b48:	414b      	adcs	r3, r1
 8004b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004b5a:	4659      	mov	r1, fp
 8004b5c:	00cb      	lsls	r3, r1, #3
 8004b5e:	4651      	mov	r1, sl
 8004b60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b64:	4651      	mov	r1, sl
 8004b66:	00ca      	lsls	r2, r1, #3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4642      	mov	r2, r8
 8004b70:	189b      	adds	r3, r3, r2
 8004b72:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004b76:	464b      	mov	r3, r9
 8004b78:	460a      	mov	r2, r1
 8004b7a:	eb42 0303 	adc.w	r3, r2, r3
 8004b7e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004b8e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004b92:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004b96:	460b      	mov	r3, r1
 8004b98:	18db      	adds	r3, r3, r3
 8004b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	eb42 0303 	adc.w	r3, r2, r3
 8004ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ba8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004bac:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004bb0:	f7fb fb66 	bl	8000280 <__aeabi_uldivmod>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <UART_SetConfig+0x300>)
 8004bba:	fba3 1302 	umull	r1, r3, r3, r2
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2164      	movs	r1, #100	; 0x64
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	3332      	adds	r3, #50	; 0x32
 8004bcc:	4a07      	ldr	r2, [pc, #28]	; (8004bec <UART_SetConfig+0x300>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	f003 0207 	and.w	r2, r3, #7
 8004bd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4422      	add	r2, r4
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	e349      	b.n	8005278 <UART_SetConfig+0x98c>
 8004be4:	40011000 	.word	0x40011000
 8004be8:	40011400 	.word	0x40011400
 8004bec:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe f83c 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 8004bf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004c02:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004c06:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	1891      	adds	r1, r2, r2
 8004c10:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004c14:	415b      	adcs	r3, r3
 8004c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c1a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004c1e:	4621      	mov	r1, r4
 8004c20:	eb12 0a01 	adds.w	sl, r2, r1
 8004c24:	4629      	mov	r1, r5
 8004c26:	eb43 0b01 	adc.w	fp, r3, r1
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c3e:	4692      	mov	sl, r2
 8004c40:	469b      	mov	fp, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	eb1a 0303 	adds.w	r3, sl, r3
 8004c48:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	eb4b 0303 	adc.w	r3, fp, r3
 8004c52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004c62:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004c66:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	18db      	adds	r3, r3, r3
 8004c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c72:	4613      	mov	r3, r2
 8004c74:	eb42 0303 	adc.w	r3, r2, r3
 8004c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c7c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004c80:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004c84:	f7fb fafc 	bl	8000280 <__aeabi_uldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4b61      	ldr	r3, [pc, #388]	; (8004e14 <UART_SetConfig+0x528>)
 8004c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	011c      	lsls	r4, r3, #4
 8004c96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004ca0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004ca4:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
 8004cac:	1891      	adds	r1, r2, r2
 8004cae:	67b9      	str	r1, [r7, #120]	; 0x78
 8004cb0:	415b      	adcs	r3, r3
 8004cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cb4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004cb8:	4641      	mov	r1, r8
 8004cba:	1851      	adds	r1, r2, r1
 8004cbc:	6739      	str	r1, [r7, #112]	; 0x70
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	414b      	adcs	r3, r1
 8004cc2:	677b      	str	r3, [r7, #116]	; 0x74
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	00cb      	lsls	r3, r1, #3
 8004cd4:	4651      	mov	r1, sl
 8004cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cda:	4651      	mov	r1, sl
 8004cdc:	00ca      	lsls	r2, r1, #3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	189b      	adds	r3, r3, r2
 8004ce8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004cec:	464b      	mov	r3, r9
 8004cee:	460a      	mov	r2, r1
 8004cf0:	eb42 0303 	adc.w	r3, r2, r3
 8004cf4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004cf8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d04:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004d08:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	18db      	adds	r3, r3, r3
 8004d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d12:	4613      	mov	r3, r2
 8004d14:	eb42 0303 	adc.w	r3, r2, r3
 8004d18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004d1e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004d22:	f7fb faad 	bl	8000280 <__aeabi_uldivmod>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4b39      	ldr	r3, [pc, #228]	; (8004e14 <UART_SetConfig+0x528>)
 8004d2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2264      	movs	r2, #100	; 0x64
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	1acb      	subs	r3, r1, r3
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d42:	4b34      	ldr	r3, [pc, #208]	; (8004e14 <UART_SetConfig+0x528>)
 8004d44:	fba3 2302 	umull	r2, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d50:	441c      	add	r4, r3
 8004d52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004d5c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004d60:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	1891      	adds	r1, r2, r2
 8004d6a:	6639      	str	r1, [r7, #96]	; 0x60
 8004d6c:	415b      	adcs	r3, r3
 8004d6e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d70:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004d74:	4641      	mov	r1, r8
 8004d76:	1851      	adds	r1, r2, r1
 8004d78:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	414b      	adcs	r3, r1
 8004d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004d8c:	4659      	mov	r1, fp
 8004d8e:	00cb      	lsls	r3, r1, #3
 8004d90:	4651      	mov	r1, sl
 8004d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d96:	4651      	mov	r1, sl
 8004d98:	00ca      	lsls	r2, r1, #3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4642      	mov	r2, r8
 8004da2:	189b      	adds	r3, r3, r2
 8004da4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004da8:	464b      	mov	r3, r9
 8004daa:	460a      	mov	r2, r1
 8004dac:	eb42 0303 	adc.w	r3, r2, r3
 8004db0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004db4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004dc0:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004dc4:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004dc8:	460b      	mov	r3, r1
 8004dca:	18db      	adds	r3, r3, r3
 8004dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8004dce:	4613      	mov	r3, r2
 8004dd0:	eb42 0303 	adc.w	r3, r2, r3
 8004dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dda:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004dde:	f7fb fa4f 	bl	8000280 <__aeabi_uldivmod>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <UART_SetConfig+0x528>)
 8004de8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	2164      	movs	r1, #100	; 0x64
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	3332      	adds	r3, #50	; 0x32
 8004dfa:	4a06      	ldr	r2, [pc, #24]	; (8004e14 <UART_SetConfig+0x528>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	f003 0207 	and.w	r2, r3, #7
 8004e06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4422      	add	r2, r4
 8004e0e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e10:	e232      	b.n	8005278 <UART_SetConfig+0x98c>
 8004e12:	bf00      	nop
 8004e14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b8d      	ldr	r3, [pc, #564]	; (8005054 <UART_SetConfig+0x768>)
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d006      	beq.n	8004e32 <UART_SetConfig+0x546>
 8004e24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b8b      	ldr	r3, [pc, #556]	; (8005058 <UART_SetConfig+0x76c>)
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	f040 8117 	bne.w	8005060 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e32:	f7fd ff2f 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 8004e36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004e44:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004e48:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	462b      	mov	r3, r5
 8004e50:	1891      	adds	r1, r2, r2
 8004e52:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e54:	415b      	adcs	r3, r3
 8004e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	eb12 0801 	adds.w	r8, r2, r1
 8004e62:	4629      	mov	r1, r5
 8004e64:	eb43 0901 	adc.w	r9, r3, r1
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e7c:	4690      	mov	r8, r2
 8004e7e:	4699      	mov	r9, r3
 8004e80:	4623      	mov	r3, r4
 8004e82:	eb18 0303 	adds.w	r3, r8, r3
 8004e86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004e8a:	462b      	mov	r3, r5
 8004e8c:	eb49 0303 	adc.w	r3, r9, r3
 8004e90:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004e94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ea0:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	008b      	lsls	r3, r1, #2
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eba:	4621      	mov	r1, r4
 8004ebc:	008a      	lsls	r2, r1, #2
 8004ebe:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004ec2:	f7fb f9dd 	bl	8000280 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4b64      	ldr	r3, [pc, #400]	; (800505c <UART_SetConfig+0x770>)
 8004ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	011c      	lsls	r4, r3, #4
 8004ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004ede:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004ee2:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004ee6:	4642      	mov	r2, r8
 8004ee8:	464b      	mov	r3, r9
 8004eea:	1891      	adds	r1, r2, r2
 8004eec:	6439      	str	r1, [r7, #64]	; 0x40
 8004eee:	415b      	adcs	r3, r3
 8004ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ef6:	4641      	mov	r1, r8
 8004ef8:	1851      	adds	r1, r2, r1
 8004efa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004efc:	4649      	mov	r1, r9
 8004efe:	414b      	adcs	r3, r1
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004f0e:	4659      	mov	r1, fp
 8004f10:	00cb      	lsls	r3, r1, #3
 8004f12:	4651      	mov	r1, sl
 8004f14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f18:	4651      	mov	r1, sl
 8004f1a:	00ca      	lsls	r2, r1, #3
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4603      	mov	r3, r0
 8004f22:	4642      	mov	r2, r8
 8004f24:	189b      	adds	r3, r3, r2
 8004f26:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	460a      	mov	r2, r1
 8004f2e:	eb42 0303 	adc.w	r3, r2, r3
 8004f32:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004f36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004f42:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004f52:	4649      	mov	r1, r9
 8004f54:	008b      	lsls	r3, r1, #2
 8004f56:	4641      	mov	r1, r8
 8004f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	008a      	lsls	r2, r1, #2
 8004f60:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004f64:	f7fb f98c 	bl	8000280 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4b3b      	ldr	r3, [pc, #236]	; (800505c <UART_SetConfig+0x770>)
 8004f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2164      	movs	r1, #100	; 0x64
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	3332      	adds	r3, #50	; 0x32
 8004f80:	4a36      	ldr	r2, [pc, #216]	; (800505c <UART_SetConfig+0x770>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f8c:	441c      	add	r4, r3
 8004f8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004f98:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004f9c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	1891      	adds	r1, r2, r2
 8004fa6:	6339      	str	r1, [r7, #48]	; 0x30
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34
 8004fac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	1851      	adds	r1, r2, r1
 8004fb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	414b      	adcs	r3, r1
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004fc8:	4659      	mov	r1, fp
 8004fca:	00cb      	lsls	r3, r1, #3
 8004fcc:	4651      	mov	r1, sl
 8004fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd2:	4651      	mov	r1, sl
 8004fd4:	00ca      	lsls	r2, r1, #3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4642      	mov	r2, r8
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	460a      	mov	r2, r1
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ff0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ffc:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800500c:	4649      	mov	r1, r9
 800500e:	008b      	lsls	r3, r1, #2
 8005010:	4641      	mov	r1, r8
 8005012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005016:	4641      	mov	r1, r8
 8005018:	008a      	lsls	r2, r1, #2
 800501a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800501e:	f7fb f92f 	bl	8000280 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <UART_SetConfig+0x770>)
 8005028:	fba3 1302 	umull	r1, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	2164      	movs	r1, #100	; 0x64
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	3332      	adds	r3, #50	; 0x32
 800503a:	4a08      	ldr	r2, [pc, #32]	; (800505c <UART_SetConfig+0x770>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	f003 020f 	and.w	r2, r3, #15
 8005046:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4422      	add	r2, r4
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	e112      	b.n	8005278 <UART_SetConfig+0x98c>
 8005052:	bf00      	nop
 8005054:	40011000 	.word	0x40011000
 8005058:	40011400 	.word	0x40011400
 800505c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005060:	f7fd fe04 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 8005064:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005068:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800506c:	2200      	movs	r2, #0
 800506e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005072:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005076:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800507a:	4642      	mov	r2, r8
 800507c:	464b      	mov	r3, r9
 800507e:	1891      	adds	r1, r2, r2
 8005080:	6239      	str	r1, [r7, #32]
 8005082:	415b      	adcs	r3, r3
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
 8005086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800508a:	4641      	mov	r1, r8
 800508c:	1854      	adds	r4, r2, r1
 800508e:	4649      	mov	r1, r9
 8005090:	eb43 0501 	adc.w	r5, r3, r1
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	00eb      	lsls	r3, r5, #3
 800509e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050a2:	00e2      	lsls	r2, r4, #3
 80050a4:	4614      	mov	r4, r2
 80050a6:	461d      	mov	r5, r3
 80050a8:	4643      	mov	r3, r8
 80050aa:	18e3      	adds	r3, r4, r3
 80050ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050b0:	464b      	mov	r3, r9
 80050b2:	eb45 0303 	adc.w	r3, r5, r3
 80050b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80050ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80050c6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80050d6:	4629      	mov	r1, r5
 80050d8:	008b      	lsls	r3, r1, #2
 80050da:	4621      	mov	r1, r4
 80050dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050e0:	4621      	mov	r1, r4
 80050e2:	008a      	lsls	r2, r1, #2
 80050e4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80050e8:	f7fb f8ca 	bl	8000280 <__aeabi_uldivmod>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4b64      	ldr	r3, [pc, #400]	; (8005284 <UART_SetConfig+0x998>)
 80050f2:	fba3 2302 	umull	r2, r3, r3, r2
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	011c      	lsls	r4, r3, #4
 80050fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005104:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005108:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	1891      	adds	r1, r2, r2
 8005112:	61b9      	str	r1, [r7, #24]
 8005114:	415b      	adcs	r3, r3
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800511c:	4641      	mov	r1, r8
 800511e:	1851      	adds	r1, r2, r1
 8005120:	6139      	str	r1, [r7, #16]
 8005122:	4649      	mov	r1, r9
 8005124:	414b      	adcs	r3, r1
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005134:	4659      	mov	r1, fp
 8005136:	00cb      	lsls	r3, r1, #3
 8005138:	4651      	mov	r1, sl
 800513a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513e:	4651      	mov	r1, sl
 8005140:	00ca      	lsls	r2, r1, #3
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	4603      	mov	r3, r0
 8005148:	4642      	mov	r2, r8
 800514a:	189b      	adds	r3, r3, r2
 800514c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005150:	464b      	mov	r3, r9
 8005152:	460a      	mov	r2, r1
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800515c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005168:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8005178:	4649      	mov	r1, r9
 800517a:	008b      	lsls	r3, r1, #2
 800517c:	4641      	mov	r1, r8
 800517e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005182:	4641      	mov	r1, r8
 8005184:	008a      	lsls	r2, r1, #2
 8005186:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800518a:	f7fb f879 	bl	8000280 <__aeabi_uldivmod>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4b3c      	ldr	r3, [pc, #240]	; (8005284 <UART_SetConfig+0x998>)
 8005194:	fba3 1302 	umull	r1, r3, r3, r2
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	2164      	movs	r1, #100	; 0x64
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	3332      	adds	r3, #50	; 0x32
 80051a6:	4a37      	ldr	r2, [pc, #220]	; (8005284 <UART_SetConfig+0x998>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b2:	441c      	add	r4, r3
 80051b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051c2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80051c6:	4642      	mov	r2, r8
 80051c8:	464b      	mov	r3, r9
 80051ca:	1891      	adds	r1, r2, r2
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	415b      	adcs	r3, r3
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d6:	4641      	mov	r1, r8
 80051d8:	1851      	adds	r1, r2, r1
 80051da:	6039      	str	r1, [r7, #0]
 80051dc:	4649      	mov	r1, r9
 80051de:	414b      	adcs	r3, r1
 80051e0:	607b      	str	r3, [r7, #4]
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051ee:	4659      	mov	r1, fp
 80051f0:	00cb      	lsls	r3, r1, #3
 80051f2:	4651      	mov	r1, sl
 80051f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f8:	4651      	mov	r1, sl
 80051fa:	00ca      	lsls	r2, r1, #3
 80051fc:	4610      	mov	r0, r2
 80051fe:	4619      	mov	r1, r3
 8005200:	4603      	mov	r3, r0
 8005202:	4642      	mov	r2, r8
 8005204:	189b      	adds	r3, r3, r2
 8005206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800520a:	464b      	mov	r3, r9
 800520c:	460a      	mov	r2, r1
 800520e:	eb42 0303 	adc.w	r3, r2, r3
 8005212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005216:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005222:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005232:	4649      	mov	r1, r9
 8005234:	008b      	lsls	r3, r1, #2
 8005236:	4641      	mov	r1, r8
 8005238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800523c:	4641      	mov	r1, r8
 800523e:	008a      	lsls	r2, r1, #2
 8005240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005244:	f7fb f81c 	bl	8000280 <__aeabi_uldivmod>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <UART_SetConfig+0x998>)
 800524e:	fba3 1302 	umull	r1, r3, r3, r2
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	2164      	movs	r1, #100	; 0x64
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	3332      	adds	r3, #50	; 0x32
 8005260:	4a08      	ldr	r2, [pc, #32]	; (8005284 <UART_SetConfig+0x998>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4422      	add	r2, r4
 8005274:	609a      	str	r2, [r3, #8]
}
 8005276:	e7ff      	b.n	8005278 <UART_SetConfig+0x98c>
 8005278:	bf00      	nop
 800527a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005284:	51eb851f 	.word	0x51eb851f

08005288 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800528c:	4904      	ldr	r1, [pc, #16]	; (80052a0 <MX_FATFS_Init+0x18>)
 800528e:	4805      	ldr	r0, [pc, #20]	; (80052a4 <MX_FATFS_Init+0x1c>)
 8005290:	f002 ff74 	bl	800817c <FATFS_LinkDriver>
 8005294:	4603      	mov	r3, r0
 8005296:	461a      	mov	r2, r3
 8005298:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <MX_FATFS_Init+0x20>)
 800529a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800529c:	bf00      	nop
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20013798 	.word	0x20013798
 80052a4:	2000000c 	.word	0x2000000c
 80052a8:	20013794 	.word	0x20013794

080052ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80052b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f9d9 	bl	8005680 <USER_SPI_initialize>
 80052ce:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fab7 	bl	8005858 <USER_SPI_status>
 80052ea:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8005304:	7bf8      	ldrb	r0, [r7, #15]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	f000 faba 	bl	8005884 <USER_SPI_read>
 8005310:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800532a:	7bf8      	ldrb	r0, [r7, #15]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	f000 fb0d 	bl	8005950 <USER_SPI_write>
 8005336:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	603a      	str	r2, [r7, #0]
 800534a:	71fb      	strb	r3, [r7, #7]
 800534c:	460b      	mov	r3, r1
 800534e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8005350:	79b9      	ldrb	r1, [r7, #6]
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fb76 	bl	8005a48 <USER_SPI_ioctl>
 800535c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005370:	f7fc f9b0 	bl	80016d4 <HAL_GetTick>
 8005374:	4603      	mov	r3, r0
 8005376:	4a04      	ldr	r2, [pc, #16]	; (8005388 <SPI_Timer_On+0x20>)
 8005378:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800537a:	4a04      	ldr	r2, [pc, #16]	; (800538c <SPI_Timer_On+0x24>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	200137a0 	.word	0x200137a0
 800538c:	200137a4 	.word	0x200137a4

08005390 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005394:	f7fc f99e 	bl	80016d4 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <SPI_Timer_Status+0x24>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <SPI_Timer_Status+0x28>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	bf34      	ite	cc
 80053a8:	2301      	movcc	r3, #1
 80053aa:	2300      	movcs	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	200137a0 	.word	0x200137a0
 80053b8:	200137a4 	.word	0x200137a4

080053bc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	4603      	mov	r3, r0
 80053c4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80053c6:	f107 020f 	add.w	r2, r7, #15
 80053ca:	1df9      	adds	r1, r7, #7
 80053cc:	2332      	movs	r3, #50	; 0x32
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	2301      	movs	r3, #1
 80053d2:	4804      	ldr	r0, [pc, #16]	; (80053e4 <xchg_spi+0x28>)
 80053d4:	f7fd fcd6 	bl	8002d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000918 	.word	0x20000918

080053e8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e00a      	b.n	800540e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	18d4      	adds	r4, r2, r3
 80053fe:	20ff      	movs	r0, #255	; 0xff
 8005400:	f7ff ffdc 	bl	80053bc <xchg_spi>
 8005404:	4603      	mov	r3, r0
 8005406:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3301      	adds	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d3f0      	bcc.n	80053f8 <rcvr_spi_multi+0x10>
	}
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	bd90      	pop	{r4, r7, pc}

08005420 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e009      	b.n	8005444 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff ffbf 	bl	80053bc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d3f1      	bcc.n	8005430 <xmit_spi_multi+0x10>
	}
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b086      	sub	sp, #24
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800545e:	f7fc f939 	bl	80016d4 <HAL_GetTick>
 8005462:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005468:	20ff      	movs	r0, #255	; 0xff
 800546a:	f7ff ffa7 	bl	80053bc <xchg_spi>
 800546e:	4603      	mov	r3, r0
 8005470:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2bff      	cmp	r3, #255	; 0xff
 8005476:	d007      	beq.n	8005488 <wait_ready+0x32>
 8005478:	f7fc f92c 	bl	80016d4 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	429a      	cmp	r2, r3
 8005486:	d8ef      	bhi.n	8005468 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2bff      	cmp	r3, #255	; 0xff
 800548c:	bf0c      	ite	eq
 800548e:	2301      	moveq	r3, #1
 8005490:	2300      	movne	r3, #0
 8005492:	b2db      	uxtb	r3, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80054a0:	2201      	movs	r2, #1
 80054a2:	2108      	movs	r1, #8
 80054a4:	4803      	ldr	r0, [pc, #12]	; (80054b4 <despiselect+0x18>)
 80054a6:	f7fc ff61 	bl	800236c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80054aa:	20ff      	movs	r0, #255	; 0xff
 80054ac:	f7ff ff86 	bl	80053bc <xchg_spi>

}
 80054b0:	bf00      	nop
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40020400 	.word	0x40020400

080054b8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80054bc:	2200      	movs	r2, #0
 80054be:	2108      	movs	r1, #8
 80054c0:	4809      	ldr	r0, [pc, #36]	; (80054e8 <spiselect+0x30>)
 80054c2:	f7fc ff53 	bl	800236c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80054c6:	20ff      	movs	r0, #255	; 0xff
 80054c8:	f7ff ff78 	bl	80053bc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80054cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80054d0:	f7ff ffc1 	bl	8005456 <wait_ready>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <spiselect+0x26>
 80054da:	2301      	movs	r3, #1
 80054dc:	e002      	b.n	80054e4 <spiselect+0x2c>

	despiselect();
 80054de:	f7ff ffdd 	bl	800549c <despiselect>
	return 0;	/* Timeout */
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40020400 	.word	0x40020400

080054ec <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80054f6:	20c8      	movs	r0, #200	; 0xc8
 80054f8:	f7ff ff36 	bl	8005368 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80054fc:	20ff      	movs	r0, #255	; 0xff
 80054fe:	f7ff ff5d 	bl	80053bc <xchg_spi>
 8005502:	4603      	mov	r3, r0
 8005504:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2bff      	cmp	r3, #255	; 0xff
 800550a:	d104      	bne.n	8005516 <rcvr_datablock+0x2a>
 800550c:	f7ff ff40 	bl	8005390 <SPI_Timer_Status>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f2      	bne.n	80054fc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2bfe      	cmp	r3, #254	; 0xfe
 800551a:	d001      	beq.n	8005520 <rcvr_datablock+0x34>
 800551c:	2300      	movs	r3, #0
 800551e:	e00a      	b.n	8005536 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff ff60 	bl	80053e8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005528:	20ff      	movs	r0, #255	; 0xff
 800552a:	f7ff ff47 	bl	80053bc <xchg_spi>
 800552e:	20ff      	movs	r0, #255	; 0xff
 8005530:	f7ff ff44 	bl	80053bc <xchg_spi>

	return 1;						/* Function succeeded */
 8005534:	2301      	movs	r3, #1
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	460b      	mov	r3, r1
 8005548:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800554a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800554e:	f7ff ff82 	bl	8005456 <wait_ready>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <xmit_datablock+0x1e>
 8005558:	2300      	movs	r3, #0
 800555a:	e01e      	b.n	800559a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff ff2c 	bl	80053bc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	2bfd      	cmp	r3, #253	; 0xfd
 8005568:	d016      	beq.n	8005598 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800556a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff ff56 	bl	8005420 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005574:	20ff      	movs	r0, #255	; 0xff
 8005576:	f7ff ff21 	bl	80053bc <xchg_spi>
 800557a:	20ff      	movs	r0, #255	; 0xff
 800557c:	f7ff ff1e 	bl	80053bc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005580:	20ff      	movs	r0, #255	; 0xff
 8005582:	f7ff ff1b 	bl	80053bc <xchg_spi>
 8005586:	4603      	mov	r3, r0
 8005588:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	2b05      	cmp	r3, #5
 8005592:	d001      	beq.n	8005598 <xmit_datablock+0x5a>
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <xmit_datablock+0x5c>
	}
	return 1;
 8005598:	2301      	movs	r3, #1
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	4603      	mov	r3, r0
 80055aa:	6039      	str	r1, [r7, #0]
 80055ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	da0e      	bge.n	80055d4 <send_cmd+0x32>
		cmd &= 0x7F;
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055bc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80055be:	2100      	movs	r1, #0
 80055c0:	2037      	movs	r0, #55	; 0x37
 80055c2:	f7ff ffee 	bl	80055a2 <send_cmd>
 80055c6:	4603      	mov	r3, r0
 80055c8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80055ca:	7bbb      	ldrb	r3, [r7, #14]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d901      	bls.n	80055d4 <send_cmd+0x32>
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	e051      	b.n	8005678 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	2b0c      	cmp	r3, #12
 80055d8:	d008      	beq.n	80055ec <send_cmd+0x4a>
		despiselect();
 80055da:	f7ff ff5f 	bl	800549c <despiselect>
		if (!spiselect()) return 0xFF;
 80055de:	f7ff ff6b 	bl	80054b8 <spiselect>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <send_cmd+0x4a>
 80055e8:	23ff      	movs	r3, #255	; 0xff
 80055ea:	e045      	b.n	8005678 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff fee1 	bl	80053bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	0e1b      	lsrs	r3, r3, #24
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fedb 	bl	80053bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	b2db      	uxtb	r3, r3
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff fed5 	bl	80053bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	0a1b      	lsrs	r3, r3, #8
 8005616:	b2db      	uxtb	r3, r3
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fecf 	bl	80053bc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff feca 	bl	80053bc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005628:	2301      	movs	r3, #1
 800562a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <send_cmd+0x94>
 8005632:	2395      	movs	r3, #149	; 0x95
 8005634:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d101      	bne.n	8005640 <send_cmd+0x9e>
 800563c:	2387      	movs	r3, #135	; 0x87
 800563e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff feba 	bl	80053bc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	2b0c      	cmp	r3, #12
 800564c:	d102      	bne.n	8005654 <send_cmd+0xb2>
 800564e:	20ff      	movs	r0, #255	; 0xff
 8005650:	f7ff feb4 	bl	80053bc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005654:	230a      	movs	r3, #10
 8005656:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005658:	20ff      	movs	r0, #255	; 0xff
 800565a:	f7ff feaf 	bl	80053bc <xchg_spi>
 800565e:	4603      	mov	r3, r0
 8005660:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005666:	2b00      	cmp	r3, #0
 8005668:	da05      	bge.n	8005676 <send_cmd+0xd4>
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	3b01      	subs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005676:	7bbb      	ldrb	r3, [r7, #14]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <USER_SPI_initialize+0x14>
 8005690:	2301      	movs	r3, #1
 8005692:	e0d6      	b.n	8005842 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005694:	4b6d      	ldr	r3, [pc, #436]	; (800584c <USER_SPI_initialize+0x1cc>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <USER_SPI_initialize+0x2a>
 80056a2:	4b6a      	ldr	r3, [pc, #424]	; (800584c <USER_SPI_initialize+0x1cc>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e0cb      	b.n	8005842 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80056aa:	4b69      	ldr	r3, [pc, #420]	; (8005850 <USER_SPI_initialize+0x1d0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80056b4:	4b66      	ldr	r3, [pc, #408]	; (8005850 <USER_SPI_initialize+0x1d0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80056bc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80056be:	230a      	movs	r3, #10
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	e005      	b.n	80056d0 <USER_SPI_initialize+0x50>
 80056c4:	20ff      	movs	r0, #255	; 0xff
 80056c6:	f7ff fe79 	bl	80053bc <xchg_spi>
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f6      	bne.n	80056c4 <USER_SPI_initialize+0x44>

	ty = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80056da:	2100      	movs	r1, #0
 80056dc:	2000      	movs	r0, #0
 80056de:	f7ff ff60 	bl	80055a2 <send_cmd>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	f040 808b 	bne.w	8005800 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80056ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056ee:	f7ff fe3b 	bl	8005368 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80056f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056f6:	2008      	movs	r0, #8
 80056f8:	f7ff ff53 	bl	80055a2 <send_cmd>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d151      	bne.n	80057a6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]
 8005706:	e00d      	b.n	8005724 <USER_SPI_initialize+0xa4>
 8005708:	7bfc      	ldrb	r4, [r7, #15]
 800570a:	20ff      	movs	r0, #255	; 0xff
 800570c:	f7ff fe56 	bl	80053bc <xchg_spi>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	f104 0310 	add.w	r3, r4, #16
 8005718:	443b      	add	r3, r7
 800571a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	3301      	adds	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b03      	cmp	r3, #3
 8005728:	d9ee      	bls.n	8005708 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800572a:	7abb      	ldrb	r3, [r7, #10]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d167      	bne.n	8005800 <USER_SPI_initialize+0x180>
 8005730:	7afb      	ldrb	r3, [r7, #11]
 8005732:	2baa      	cmp	r3, #170	; 0xaa
 8005734:	d164      	bne.n	8005800 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005736:	bf00      	nop
 8005738:	f7ff fe2a 	bl	8005390 <SPI_Timer_Status>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <USER_SPI_initialize+0xd2>
 8005742:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005746:	20a9      	movs	r0, #169	; 0xa9
 8005748:	f7ff ff2b 	bl	80055a2 <send_cmd>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f2      	bne.n	8005738 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005752:	f7ff fe1d 	bl	8005390 <SPI_Timer_Status>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d051      	beq.n	8005800 <USER_SPI_initialize+0x180>
 800575c:	2100      	movs	r1, #0
 800575e:	203a      	movs	r0, #58	; 0x3a
 8005760:	f7ff ff1f 	bl	80055a2 <send_cmd>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d14a      	bne.n	8005800 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
 800576e:	e00d      	b.n	800578c <USER_SPI_initialize+0x10c>
 8005770:	7bfc      	ldrb	r4, [r7, #15]
 8005772:	20ff      	movs	r0, #255	; 0xff
 8005774:	f7ff fe22 	bl	80053bc <xchg_spi>
 8005778:	4603      	mov	r3, r0
 800577a:	461a      	mov	r2, r3
 800577c:	f104 0310 	add.w	r3, r4, #16
 8005780:	443b      	add	r3, r7
 8005782:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	3301      	adds	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d9ee      	bls.n	8005770 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005792:	7a3b      	ldrb	r3, [r7, #8]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <USER_SPI_initialize+0x120>
 800579c:	230c      	movs	r3, #12
 800579e:	e000      	b.n	80057a2 <USER_SPI_initialize+0x122>
 80057a0:	2304      	movs	r3, #4
 80057a2:	737b      	strb	r3, [r7, #13]
 80057a4:	e02c      	b.n	8005800 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80057a6:	2100      	movs	r1, #0
 80057a8:	20a9      	movs	r0, #169	; 0xa9
 80057aa:	f7ff fefa 	bl	80055a2 <send_cmd>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d804      	bhi.n	80057be <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80057b4:	2302      	movs	r3, #2
 80057b6:	737b      	strb	r3, [r7, #13]
 80057b8:	23a9      	movs	r3, #169	; 0xa9
 80057ba:	73bb      	strb	r3, [r7, #14]
 80057bc:	e003      	b.n	80057c6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80057be:	2301      	movs	r3, #1
 80057c0:	737b      	strb	r3, [r7, #13]
 80057c2:	2301      	movs	r3, #1
 80057c4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80057c6:	bf00      	nop
 80057c8:	f7ff fde2 	bl	8005390 <SPI_Timer_Status>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <USER_SPI_initialize+0x162>
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	2100      	movs	r1, #0
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fee3 	bl	80055a2 <send_cmd>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f2      	bne.n	80057c8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80057e2:	f7ff fdd5 	bl	8005390 <SPI_Timer_Status>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <USER_SPI_initialize+0x17c>
 80057ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057f0:	2010      	movs	r0, #16
 80057f2:	f7ff fed6 	bl	80055a2 <send_cmd>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <USER_SPI_initialize+0x180>
				ty = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005800:	4a14      	ldr	r2, [pc, #80]	; (8005854 <USER_SPI_initialize+0x1d4>)
 8005802:	7b7b      	ldrb	r3, [r7, #13]
 8005804:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005806:	f7ff fe49 	bl	800549c <despiselect>

	if (ty) {			/* OK */
 800580a:	7b7b      	ldrb	r3, [r7, #13]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005810:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <USER_SPI_initialize+0x1d0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800581a:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <USER_SPI_initialize+0x1d0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0210 	orr.w	r2, r2, #16
 8005822:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005824:	4b09      	ldr	r3, [pc, #36]	; (800584c <USER_SPI_initialize+0x1cc>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	b2da      	uxtb	r2, r3
 8005830:	4b06      	ldr	r3, [pc, #24]	; (800584c <USER_SPI_initialize+0x1cc>)
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e002      	b.n	800583c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <USER_SPI_initialize+0x1cc>)
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <USER_SPI_initialize+0x1cc>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b2db      	uxtb	r3, r3
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bd90      	pop	{r4, r7, pc}
 800584a:	bf00      	nop
 800584c:	20000020 	.word	0x20000020
 8005850:	20000918 	.word	0x20000918
 8005854:	2001379c 	.word	0x2001379c

08005858 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <USER_SPI_status+0x14>
 8005868:	2301      	movs	r3, #1
 800586a:	e002      	b.n	8005872 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800586c:	4b04      	ldr	r3, [pc, #16]	; (8005880 <USER_SPI_status+0x28>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	b2db      	uxtb	r3, r3
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000020 	.word	0x20000020

08005884 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <USER_SPI_read+0x1c>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <USER_SPI_read+0x20>
 80058a0:	2304      	movs	r3, #4
 80058a2:	e04d      	b.n	8005940 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80058a4:	4b28      	ldr	r3, [pc, #160]	; (8005948 <USER_SPI_read+0xc4>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <USER_SPI_read+0x32>
 80058b2:	2303      	movs	r3, #3
 80058b4:	e044      	b.n	8005940 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80058b6:	4b25      	ldr	r3, [pc, #148]	; (800594c <USER_SPI_read+0xc8>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <USER_SPI_read+0x44>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	025b      	lsls	r3, r3, #9
 80058c6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d111      	bne.n	80058f2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	2011      	movs	r0, #17
 80058d2:	f7ff fe66 	bl	80055a2 <send_cmd>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d129      	bne.n	8005930 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80058dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058e0:	68b8      	ldr	r0, [r7, #8]
 80058e2:	f7ff fe03 	bl	80054ec <rcvr_datablock>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d021      	beq.n	8005930 <USER_SPI_read+0xac>
			count = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	e01e      	b.n	8005930 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	2012      	movs	r0, #18
 80058f6:	f7ff fe54 	bl	80055a2 <send_cmd>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d117      	bne.n	8005930 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005904:	68b8      	ldr	r0, [r7, #8]
 8005906:	f7ff fdf1 	bl	80054ec <rcvr_datablock>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <USER_SPI_read+0xa2>
				buff += 512;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005916:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	3b01      	subs	r3, #1
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1ed      	bne.n	8005900 <USER_SPI_read+0x7c>
 8005924:	e000      	b.n	8005928 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005926:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005928:	2100      	movs	r1, #0
 800592a:	200c      	movs	r0, #12
 800592c:	f7ff fe39 	bl	80055a2 <send_cmd>
		}
	}
	despiselect();
 8005930:	f7ff fdb4 	bl	800549c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	bf14      	ite	ne
 800593a:	2301      	movne	r3, #1
 800593c:	2300      	moveq	r3, #0
 800593e:	b2db      	uxtb	r3, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000020 	.word	0x20000020
 800594c:	2001379c 	.word	0x2001379c

08005950 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4603      	mov	r3, r0
 800595e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <USER_SPI_write+0x1c>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <USER_SPI_write+0x20>
 800596c:	2304      	movs	r3, #4
 800596e:	e063      	b.n	8005a38 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005970:	4b33      	ldr	r3, [pc, #204]	; (8005a40 <USER_SPI_write+0xf0>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <USER_SPI_write+0x32>
 800597e:	2303      	movs	r3, #3
 8005980:	e05a      	b.n	8005a38 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005982:	4b2f      	ldr	r3, [pc, #188]	; (8005a40 <USER_SPI_write+0xf0>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <USER_SPI_write+0x44>
 8005990:	2302      	movs	r3, #2
 8005992:	e051      	b.n	8005a38 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005994:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <USER_SPI_write+0xf4>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <USER_SPI_write+0x56>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	025b      	lsls	r3, r3, #9
 80059a4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d110      	bne.n	80059ce <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	2018      	movs	r0, #24
 80059b0:	f7ff fdf7 	bl	80055a2 <send_cmd>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d136      	bne.n	8005a28 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80059ba:	21fe      	movs	r1, #254	; 0xfe
 80059bc:	68b8      	ldr	r0, [r7, #8]
 80059be:	f7ff fdbe 	bl	800553e <xmit_datablock>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02f      	beq.n	8005a28 <USER_SPI_write+0xd8>
			count = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	e02c      	b.n	8005a28 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80059ce:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <USER_SPI_write+0xf4>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f003 0306 	and.w	r3, r3, #6
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <USER_SPI_write+0x92>
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	2097      	movs	r0, #151	; 0x97
 80059de:	f7ff fde0 	bl	80055a2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	2019      	movs	r0, #25
 80059e6:	f7ff fddc 	bl	80055a2 <send_cmd>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11b      	bne.n	8005a28 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80059f0:	21fc      	movs	r1, #252	; 0xfc
 80059f2:	68b8      	ldr	r0, [r7, #8]
 80059f4:	f7ff fda3 	bl	800553e <xmit_datablock>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <USER_SPI_write+0xc4>
				buff += 512;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005a04:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1ee      	bne.n	80059f0 <USER_SPI_write+0xa0>
 8005a12:	e000      	b.n	8005a16 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005a14:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005a16:	21fd      	movs	r1, #253	; 0xfd
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f7ff fd90 	bl	800553e <xmit_datablock>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <USER_SPI_write+0xd8>
 8005a24:	2301      	movs	r3, #1
 8005a26:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005a28:	f7ff fd38 	bl	800549c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	2300      	moveq	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000020 	.word	0x20000020
 8005a44:	2001379c 	.word	0x2001379c

08005a48 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08c      	sub	sp, #48	; 0x30
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	603a      	str	r2, [r7, #0]
 8005a52:	71fb      	strb	r3, [r7, #7]
 8005a54:	460b      	mov	r3, r1
 8005a56:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <USER_SPI_ioctl+0x1a>
 8005a5e:	2304      	movs	r3, #4
 8005a60:	e15a      	b.n	8005d18 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005a62:	4baf      	ldr	r3, [pc, #700]	; (8005d20 <USER_SPI_ioctl+0x2d8>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <USER_SPI_ioctl+0x2c>
 8005a70:	2303      	movs	r3, #3
 8005a72:	e151      	b.n	8005d18 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005a7a:	79bb      	ldrb	r3, [r7, #6]
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	f200 8136 	bhi.w	8005cee <USER_SPI_ioctl+0x2a6>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <USER_SPI_ioctl+0x40>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005a9d 	.word	0x08005a9d
 8005a8c:	08005ab1 	.word	0x08005ab1
 8005a90:	08005cef 	.word	0x08005cef
 8005a94:	08005b5d 	.word	0x08005b5d
 8005a98:	08005c53 	.word	0x08005c53
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005a9c:	f7ff fd0c 	bl	80054b8 <spiselect>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8127 	beq.w	8005cf6 <USER_SPI_ioctl+0x2ae>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005aae:	e122      	b.n	8005cf6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	2009      	movs	r0, #9
 8005ab4:	f7ff fd75 	bl	80055a2 <send_cmd>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f040 811d 	bne.w	8005cfa <USER_SPI_ioctl+0x2b2>
 8005ac0:	f107 030c 	add.w	r3, r7, #12
 8005ac4:	2110      	movs	r1, #16
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff fd10 	bl	80054ec <rcvr_datablock>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8113 	beq.w	8005cfa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005ad4:	7b3b      	ldrb	r3, [r7, #12]
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d111      	bne.n	8005b02 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005ade:	7d7b      	ldrb	r3, [r7, #21]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	7d3b      	ldrb	r3, [r7, #20]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	4413      	add	r3, r2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	7cfb      	ldrb	r3, [r7, #19]
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005af2:	4413      	add	r3, r2
 8005af4:	3301      	adds	r3, #1
 8005af6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	029a      	lsls	r2, r3, #10
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e028      	b.n	8005b54 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005b02:	7c7b      	ldrb	r3, [r7, #17]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	7dbb      	ldrb	r3, [r7, #22]
 8005b0c:	09db      	lsrs	r3, r3, #7
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	4413      	add	r3, r2
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	7d7b      	ldrb	r3, [r7, #21]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	f003 0306 	and.w	r3, r3, #6
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	4413      	add	r3, r2
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	3302      	adds	r3, #2
 8005b26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005b2a:	7d3b      	ldrb	r3, [r7, #20]
 8005b2c:	099b      	lsrs	r3, r3, #6
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	7cbb      	ldrb	r3, [r7, #18]
 8005b3a:	029b      	lsls	r3, r3, #10
 8005b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b40:	4413      	add	r3, r2
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005b46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b4a:	3b09      	subs	r3, #9
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	409a      	lsls	r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005b5a:	e0ce      	b.n	8005cfa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005b5c:	4b71      	ldr	r3, [pc, #452]	; (8005d24 <USER_SPI_ioctl+0x2dc>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d031      	beq.n	8005bcc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005b68:	2100      	movs	r1, #0
 8005b6a:	208d      	movs	r0, #141	; 0x8d
 8005b6c:	f7ff fd19 	bl	80055a2 <send_cmd>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f040 80c3 	bne.w	8005cfe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005b78:	20ff      	movs	r0, #255	; 0xff
 8005b7a:	f7ff fc1f 	bl	80053bc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005b7e:	f107 030c 	add.w	r3, r7, #12
 8005b82:	2110      	movs	r1, #16
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fcb1 	bl	80054ec <rcvr_datablock>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 80b6 	beq.w	8005cfe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005b92:	2330      	movs	r3, #48	; 0x30
 8005b94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005b98:	e007      	b.n	8005baa <USER_SPI_ioctl+0x162>
 8005b9a:	20ff      	movs	r0, #255	; 0xff
 8005b9c:	f7ff fc0e 	bl	80053bc <xchg_spi>
 8005ba0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005baa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f3      	bne.n	8005b9a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005bb2:	7dbb      	ldrb	r3, [r7, #22]
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2310      	movs	r3, #16
 8005bbc:	fa03 f202 	lsl.w	r2, r3, r2
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005bca:	e098      	b.n	8005cfe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005bcc:	2100      	movs	r1, #0
 8005bce:	2009      	movs	r0, #9
 8005bd0:	f7ff fce7 	bl	80055a2 <send_cmd>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f040 8091 	bne.w	8005cfe <USER_SPI_ioctl+0x2b6>
 8005bdc:	f107 030c 	add.w	r3, r7, #12
 8005be0:	2110      	movs	r1, #16
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fc82 	bl	80054ec <rcvr_datablock>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8087 	beq.w	8005cfe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005bf0:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <USER_SPI_ioctl+0x2dc>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d012      	beq.n	8005c22 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005bfc:	7dbb      	ldrb	r3, [r7, #22]
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005c04:	7dfa      	ldrb	r2, [r7, #23]
 8005c06:	09d2      	lsrs	r2, r2, #7
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	7e7b      	ldrb	r3, [r7, #25]
 8005c10:	099b      	lsrs	r3, r3, #6
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e013      	b.n	8005c4a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005c22:	7dbb      	ldrb	r3, [r7, #22]
 8005c24:	109b      	asrs	r3, r3, #2
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	7dfa      	ldrb	r2, [r7, #23]
 8005c30:	00d2      	lsls	r2, r2, #3
 8005c32:	f002 0218 	and.w	r2, r2, #24
 8005c36:	7df9      	ldrb	r1, [r7, #23]
 8005c38:	0949      	lsrs	r1, r1, #5
 8005c3a:	b2c9      	uxtb	r1, r1
 8005c3c:	440a      	add	r2, r1
 8005c3e:	3201      	adds	r2, #1
 8005c40:	fb02 f303 	mul.w	r3, r2, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005c50:	e055      	b.n	8005cfe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005c52:	4b34      	ldr	r3, [pc, #208]	; (8005d24 <USER_SPI_ioctl+0x2dc>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	f003 0306 	and.w	r3, r3, #6
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d051      	beq.n	8005d02 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005c5e:	f107 020c 	add.w	r2, r7, #12
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	210b      	movs	r1, #11
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff feee 	bl	8005a48 <USER_SPI_ioctl>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d149      	bne.n	8005d06 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005c72:	7b3b      	ldrb	r3, [r7, #12]
 8005c74:	099b      	lsrs	r3, r3, #6
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <USER_SPI_ioctl+0x23e>
 8005c7c:	7dbb      	ldrb	r3, [r7, #22]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d041      	beq.n	8005d0a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005c96:	4b23      	ldr	r3, [pc, #140]	; (8005d24 <USER_SPI_ioctl+0x2dc>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d105      	bne.n	8005cae <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	025b      	lsls	r3, r3, #9
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	025b      	lsls	r3, r3, #9
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005cae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb0:	2020      	movs	r0, #32
 8005cb2:	f7ff fc76 	bl	80055a2 <send_cmd>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d128      	bne.n	8005d0e <USER_SPI_ioctl+0x2c6>
 8005cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cbe:	2021      	movs	r0, #33	; 0x21
 8005cc0:	f7ff fc6f 	bl	80055a2 <send_cmd>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d121      	bne.n	8005d0e <USER_SPI_ioctl+0x2c6>
 8005cca:	2100      	movs	r1, #0
 8005ccc:	2026      	movs	r0, #38	; 0x26
 8005cce:	f7ff fc68 	bl	80055a2 <send_cmd>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11a      	bne.n	8005d0e <USER_SPI_ioctl+0x2c6>
 8005cd8:	f247 5030 	movw	r0, #30000	; 0x7530
 8005cdc:	f7ff fbbb 	bl	8005456 <wait_ready>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d013      	beq.n	8005d0e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005cec:	e00f      	b.n	8005d0e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005cee:	2304      	movs	r3, #4
 8005cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005cf4:	e00c      	b.n	8005d10 <USER_SPI_ioctl+0x2c8>
		break;
 8005cf6:	bf00      	nop
 8005cf8:	e00a      	b.n	8005d10 <USER_SPI_ioctl+0x2c8>
		break;
 8005cfa:	bf00      	nop
 8005cfc:	e008      	b.n	8005d10 <USER_SPI_ioctl+0x2c8>
		break;
 8005cfe:	bf00      	nop
 8005d00:	e006      	b.n	8005d10 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005d02:	bf00      	nop
 8005d04:	e004      	b.n	8005d10 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <USER_SPI_ioctl+0x2c8>
		break;
 8005d0e:	bf00      	nop
	}

	despiselect();
 8005d10:	f7ff fbc4 	bl	800549c <despiselect>

	return res;
 8005d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3730      	adds	r7, #48	; 0x30
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000020 	.word	0x20000020
 8005d24:	2001379c 	.word	0x2001379c

08005d28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <disk_status+0x30>)
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	79fa      	ldrb	r2, [r7, #7]
 8005d40:	4905      	ldr	r1, [pc, #20]	; (8005d58 <disk_status+0x30>)
 8005d42:	440a      	add	r2, r1
 8005d44:	7a12      	ldrb	r2, [r2, #8]
 8005d46:	4610      	mov	r0, r2
 8005d48:	4798      	blx	r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200137d0 	.word	0x200137d0

08005d5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	4a0d      	ldr	r2, [pc, #52]	; (8005da4 <disk_initialize+0x48>)
 8005d6e:	5cd3      	ldrb	r3, [r2, r3]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d111      	bne.n	8005d98 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	4a0b      	ldr	r2, [pc, #44]	; (8005da4 <disk_initialize+0x48>)
 8005d78:	2101      	movs	r1, #1
 8005d7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <disk_initialize+0x48>)
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	79fa      	ldrb	r2, [r7, #7]
 8005d8a:	4906      	ldr	r1, [pc, #24]	; (8005da4 <disk_initialize+0x48>)
 8005d8c:	440a      	add	r2, r1
 8005d8e:	7a12      	ldrb	r2, [r2, #8]
 8005d90:	4610      	mov	r0, r2
 8005d92:	4798      	blx	r3
 8005d94:	4603      	mov	r3, r0
 8005d96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	200137d0 	.word	0x200137d0

08005da8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <disk_read+0x3c>)
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	689c      	ldr	r4, [r3, #8]
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	4a07      	ldr	r2, [pc, #28]	; (8005de4 <disk_read+0x3c>)
 8005dc8:	4413      	add	r3, r2
 8005dca:	7a18      	ldrb	r0, [r3, #8]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	47a0      	blx	r4
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd90      	pop	{r4, r7, pc}
 8005de2:	bf00      	nop
 8005de4:	200137d0 	.word	0x200137d0

08005de8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005de8:	b590      	push	{r4, r7, lr}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4603      	mov	r3, r0
 8005df6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <disk_write+0x3c>)
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	68dc      	ldr	r4, [r3, #12]
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	4a07      	ldr	r2, [pc, #28]	; (8005e24 <disk_write+0x3c>)
 8005e08:	4413      	add	r3, r2
 8005e0a:	7a18      	ldrb	r0, [r3, #8]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	47a0      	blx	r4
 8005e14:	4603      	mov	r3, r0
 8005e16:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd90      	pop	{r4, r7, pc}
 8005e22:	bf00      	nop
 8005e24:	200137d0 	.word	0x200137d0

08005e28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	603a      	str	r2, [r7, #0]
 8005e32:	71fb      	strb	r3, [r7, #7]
 8005e34:	460b      	mov	r3, r1
 8005e36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <disk_ioctl+0x38>)
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	79fa      	ldrb	r2, [r7, #7]
 8005e46:	4906      	ldr	r1, [pc, #24]	; (8005e60 <disk_ioctl+0x38>)
 8005e48:	440a      	add	r2, r1
 8005e4a:	7a10      	ldrb	r0, [r2, #8]
 8005e4c:	79b9      	ldrb	r1, [r7, #6]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4798      	blx	r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	73fb      	strb	r3, [r7, #15]
  return res;
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	200137d0 	.word	0x200137d0

08005e64 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e74:	89fb      	ldrh	r3, [r7, #14]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	b21a      	sxth	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	b21b      	sxth	r3, r3
 8005e80:	4313      	orrs	r3, r2
 8005e82:	b21b      	sxth	r3, r3
 8005e84:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e86:	89fb      	ldrh	r3, [r7, #14]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3303      	adds	r3, #3
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	3202      	adds	r2, #2
 8005eac:	7812      	ldrb	r2, [r2, #0]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	3201      	adds	r2, #1
 8005eba:	7812      	ldrb	r2, [r2, #0]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	7812      	ldrb	r2, [r2, #0]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	887a      	ldrh	r2, [r7, #2]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	887b      	ldrh	r3, [r7, #2]
 8005ef4:	0a1b      	lsrs	r3, r3, #8
 8005ef6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	0a1b      	lsrs	r3, r3, #8
 8005f2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	607a      	str	r2, [r7, #4]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	0a1b      	lsrs	r3, r3, #8
 8005f4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	1c53      	adds	r3, r2, #1
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	1c59      	adds	r1, r3, #1
 8005f8c:	6179      	str	r1, [r7, #20]
 8005f8e:	7812      	ldrb	r2, [r2, #0]
 8005f90:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	607b      	str	r3, [r7, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f1      	bne.n	8005f82 <mem_cpy+0x1a>
	}
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005faa:	b480      	push	{r7}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	617a      	str	r2, [r7, #20]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f3      	bne.n	8005fba <mem_set+0x10>
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005fe0:	b480      	push	{r7}
 8005fe2:	b089      	sub	sp, #36	; 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	61fa      	str	r2, [r7, #28]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	4619      	mov	r1, r3
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	61ba      	str	r2, [r7, #24]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	1acb      	subs	r3, r1, r3
 800600c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3b01      	subs	r3, #1
 8006012:	607b      	str	r3, [r7, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <mem_cmp+0x40>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0eb      	beq.n	8005ff8 <mem_cmp+0x18>

	return r;
 8006020:	697b      	ldr	r3, [r7, #20]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3724      	adds	r7, #36	; 0x24
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006038:	e002      	b.n	8006040 <chk_chr+0x12>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3301      	adds	r3, #1
 800603e:	607b      	str	r3, [r7, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <chk_chr+0x26>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	4293      	cmp	r3, r2
 8006052:	d1f2      	bne.n	800603a <chk_chr+0xc>
	return *str;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	781b      	ldrb	r3, [r3, #0]
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800606e:	2300      	movs	r3, #0
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e029      	b.n	80060cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006078:	4a27      	ldr	r2, [pc, #156]	; (8006118 <chk_lock+0xb4>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	4413      	add	r3, r2
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d01d      	beq.n	80060c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006086:	4a24      	ldr	r2, [pc, #144]	; (8006118 <chk_lock+0xb4>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	4413      	add	r3, r2
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d116      	bne.n	80060c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006098:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <chk_lock+0xb4>)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	4413      	add	r3, r2
 80060a0:	3304      	adds	r3, #4
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d10c      	bne.n	80060c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80060ac:	4a1a      	ldr	r2, [pc, #104]	; (8006118 <chk_lock+0xb4>)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	4413      	add	r3, r2
 80060b4:	3308      	adds	r3, #8
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80060bc:	429a      	cmp	r2, r3
 80060be:	d102      	bne.n	80060c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80060c0:	e007      	b.n	80060d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3301      	adds	r3, #1
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d9d2      	bls.n	8006078 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d109      	bne.n	80060ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <chk_lock+0x80>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d101      	bne.n	80060e8 <chk_lock+0x84>
 80060e4:	2300      	movs	r3, #0
 80060e6:	e010      	b.n	800610a <chk_lock+0xa6>
 80060e8:	2312      	movs	r3, #18
 80060ea:	e00e      	b.n	800610a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d108      	bne.n	8006104 <chk_lock+0xa0>
 80060f2:	4a09      	ldr	r2, [pc, #36]	; (8006118 <chk_lock+0xb4>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	4413      	add	r3, r2
 80060fa:	330c      	adds	r3, #12
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006102:	d101      	bne.n	8006108 <chk_lock+0xa4>
 8006104:	2310      	movs	r3, #16
 8006106:	e000      	b.n	800610a <chk_lock+0xa6>
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	200137b0 	.word	0x200137b0

0800611c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	e002      	b.n	800612e <enq_lock+0x12>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3301      	adds	r3, #1
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d806      	bhi.n	8006142 <enq_lock+0x26>
 8006134:	4a09      	ldr	r2, [pc, #36]	; (800615c <enq_lock+0x40>)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4413      	add	r3, r2
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f2      	bne.n	8006128 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b02      	cmp	r3, #2
 8006146:	bf14      	ite	ne
 8006148:	2301      	movne	r3, #1
 800614a:	2300      	moveq	r3, #0
 800614c:	b2db      	uxtb	r3, r3
}
 800614e:	4618      	mov	r0, r3
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	200137b0 	.word	0x200137b0

08006160 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e01f      	b.n	80061b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006170:	4a41      	ldr	r2, [pc, #260]	; (8006278 <inc_lock+0x118>)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	4413      	add	r3, r2
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d113      	bne.n	80061aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006182:	4a3d      	ldr	r2, [pc, #244]	; (8006278 <inc_lock+0x118>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	4413      	add	r3, r2
 800618a:	3304      	adds	r3, #4
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006192:	429a      	cmp	r2, r3
 8006194:	d109      	bne.n	80061aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006196:	4a38      	ldr	r2, [pc, #224]	; (8006278 <inc_lock+0x118>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	4413      	add	r3, r2
 800619e:	3308      	adds	r3, #8
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d006      	beq.n	80061b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d9dc      	bls.n	8006170 <inc_lock+0x10>
 80061b6:	e000      	b.n	80061ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80061b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d132      	bne.n	8006226 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e002      	b.n	80061cc <inc_lock+0x6c>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d806      	bhi.n	80061e0 <inc_lock+0x80>
 80061d2:	4a29      	ldr	r2, [pc, #164]	; (8006278 <inc_lock+0x118>)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	4413      	add	r3, r2
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f2      	bne.n	80061c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d101      	bne.n	80061ea <inc_lock+0x8a>
 80061e6:	2300      	movs	r3, #0
 80061e8:	e040      	b.n	800626c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4922      	ldr	r1, [pc, #136]	; (8006278 <inc_lock+0x118>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	440b      	add	r3, r1
 80061f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	491e      	ldr	r1, [pc, #120]	; (8006278 <inc_lock+0x118>)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	440b      	add	r3, r1
 8006204:	3304      	adds	r3, #4
 8006206:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	695a      	ldr	r2, [r3, #20]
 800620c:	491a      	ldr	r1, [pc, #104]	; (8006278 <inc_lock+0x118>)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	440b      	add	r3, r1
 8006214:	3308      	adds	r3, #8
 8006216:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006218:	4a17      	ldr	r2, [pc, #92]	; (8006278 <inc_lock+0x118>)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	4413      	add	r3, r2
 8006220:	330c      	adds	r3, #12
 8006222:	2200      	movs	r2, #0
 8006224:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <inc_lock+0xe0>
 800622c:	4a12      	ldr	r2, [pc, #72]	; (8006278 <inc_lock+0x118>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	4413      	add	r3, r2
 8006234:	330c      	adds	r3, #12
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <inc_lock+0xe0>
 800623c:	2300      	movs	r3, #0
 800623e:	e015      	b.n	800626c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d108      	bne.n	8006258 <inc_lock+0xf8>
 8006246:	4a0c      	ldr	r2, [pc, #48]	; (8006278 <inc_lock+0x118>)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	4413      	add	r3, r2
 800624e:	330c      	adds	r3, #12
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	3301      	adds	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	e001      	b.n	800625c <inc_lock+0xfc>
 8006258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800625c:	4906      	ldr	r1, [pc, #24]	; (8006278 <inc_lock+0x118>)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	440b      	add	r3, r1
 8006264:	330c      	adds	r3, #12
 8006266:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	200137b0 	.word	0x200137b0

0800627c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3b01      	subs	r3, #1
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d825      	bhi.n	80062dc <dec_lock+0x60>
		n = Files[i].ctr;
 8006290:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <dec_lock+0x74>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	4413      	add	r3, r2
 8006298:	330c      	adds	r3, #12
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800629e:	89fb      	ldrh	r3, [r7, #14]
 80062a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a4:	d101      	bne.n	80062aa <dec_lock+0x2e>
 80062a6:	2300      	movs	r3, #0
 80062a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80062aa:	89fb      	ldrh	r3, [r7, #14]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <dec_lock+0x3a>
 80062b0:	89fb      	ldrh	r3, [r7, #14]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80062b6:	4a0e      	ldr	r2, [pc, #56]	; (80062f0 <dec_lock+0x74>)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	4413      	add	r3, r2
 80062be:	330c      	adds	r3, #12
 80062c0:	89fa      	ldrh	r2, [r7, #14]
 80062c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80062c4:	89fb      	ldrh	r3, [r7, #14]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d105      	bne.n	80062d6 <dec_lock+0x5a>
 80062ca:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <dec_lock+0x74>)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	4413      	add	r3, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	737b      	strb	r3, [r7, #13]
 80062da:	e001      	b.n	80062e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80062dc:	2302      	movs	r3, #2
 80062de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80062e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	200137b0 	.word	0x200137b0

080062f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	e010      	b.n	8006324 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006302:	4a0d      	ldr	r2, [pc, #52]	; (8006338 <clear_lock+0x44>)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	4413      	add	r3, r2
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	429a      	cmp	r2, r3
 8006310:	d105      	bne.n	800631e <clear_lock+0x2a>
 8006312:	4a09      	ldr	r2, [pc, #36]	; (8006338 <clear_lock+0x44>)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	4413      	add	r3, r2
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3301      	adds	r3, #1
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d9eb      	bls.n	8006302 <clear_lock+0xe>
	}
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	200137b0 	.word	0x200137b0

0800633c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	78db      	ldrb	r3, [r3, #3]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d034      	beq.n	80063ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	7858      	ldrb	r0, [r3, #1]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006360:	2301      	movs	r3, #1
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	f7ff fd40 	bl	8005de8 <disk_write>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <sync_window+0x38>
			res = FR_DISK_ERR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	e022      	b.n	80063ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	1ad2      	subs	r2, r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	429a      	cmp	r2, r3
 8006388:	d217      	bcs.n	80063ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	789b      	ldrb	r3, [r3, #2]
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	e010      	b.n	80063b4 <sync_window+0x78>
					wsect += fs->fsize;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	7858      	ldrb	r0, [r3, #1]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063a6:	2301      	movs	r3, #1
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	f7ff fd1d 	bl	8005de8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d8eb      	bhi.n	8006392 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d01b      	beq.n	8006414 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff ffad 	bl	800633c <sync_window>
 80063e2:	4603      	mov	r3, r0
 80063e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d113      	bne.n	8006414 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	7858      	ldrb	r0, [r3, #1]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063f6:	2301      	movs	r3, #1
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	f7ff fcd5 	bl	8005da8 <disk_read>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d004      	beq.n	800640e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006404:	f04f 33ff 	mov.w	r3, #4294967295
 8006408:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800640a:	2301      	movs	r3, #1
 800640c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff ff87 	bl	800633c <sync_window>
 800642e:	4603      	mov	r3, r0
 8006430:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d158      	bne.n	80064ea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b03      	cmp	r3, #3
 800643e:	d148      	bne.n	80064d2 <sync_fs+0xb2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	791b      	ldrb	r3, [r3, #4]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d144      	bne.n	80064d2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3330      	adds	r3, #48	; 0x30
 800644c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006450:	2100      	movs	r1, #0
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fda9 	bl	8005faa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3330      	adds	r3, #48	; 0x30
 800645c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006460:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fd38 	bl	8005eda <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3330      	adds	r3, #48	; 0x30
 800646e:	4921      	ldr	r1, [pc, #132]	; (80064f4 <sync_fs+0xd4>)
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fd4d 	bl	8005f10 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3330      	adds	r3, #48	; 0x30
 800647a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800647e:	491e      	ldr	r1, [pc, #120]	; (80064f8 <sync_fs+0xd8>)
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fd45 	bl	8005f10 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3330      	adds	r3, #48	; 0x30
 800648a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	4619      	mov	r1, r3
 8006494:	4610      	mov	r0, r2
 8006496:	f7ff fd3b 	bl	8005f10 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3330      	adds	r3, #48	; 0x30
 800649e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7ff fd31 	bl	8005f10 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	7858      	ldrb	r0, [r3, #1]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	2301      	movs	r3, #1
 80064c8:	f7ff fc8e 	bl	8005de8 <disk_write>
			fs->fsi_flag = 0;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2200      	movs	r2, #0
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fca4 	bl	8005e28 <disk_ioctl>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <sync_fs+0xca>
 80064e6:	2301      	movs	r3, #1
 80064e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	41615252 	.word	0x41615252
 80064f8:	61417272 	.word	0x61417272

080064fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	3b02      	subs	r3, #2
 800650a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	3b02      	subs	r3, #2
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d301      	bcc.n	800651c <clust2sect+0x20>
 8006518:	2300      	movs	r3, #0
 800651a:	e008      	b.n	800652e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	895b      	ldrh	r3, [r3, #10]
 8006520:	461a      	mov	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	fb03 f202 	mul.w	r2, r3, r2
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	4413      	add	r3, r2
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b086      	sub	sp, #24
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d904      	bls.n	800655a <get_fat+0x20>
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d302      	bcc.n	8006560 <get_fat+0x26>
		val = 1;	/* Internal error */
 800655a:	2301      	movs	r3, #1
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	e08f      	b.n	8006680 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006560:	f04f 33ff 	mov.w	r3, #4294967295
 8006564:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b03      	cmp	r3, #3
 800656c:	d062      	beq.n	8006634 <get_fat+0xfa>
 800656e:	2b03      	cmp	r3, #3
 8006570:	dc7c      	bgt.n	800666c <get_fat+0x132>
 8006572:	2b01      	cmp	r3, #1
 8006574:	d002      	beq.n	800657c <get_fat+0x42>
 8006576:	2b02      	cmp	r3, #2
 8006578:	d042      	beq.n	8006600 <get_fat+0xc6>
 800657a:	e077      	b.n	800666c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	085b      	lsrs	r3, r3, #1
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4413      	add	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	0a5b      	lsrs	r3, r3, #9
 8006592:	4413      	add	r3, r2
 8006594:	4619      	mov	r1, r3
 8006596:	6938      	ldr	r0, [r7, #16]
 8006598:	f7ff ff14 	bl	80063c4 <move_window>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d167      	bne.n	8006672 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	60fa      	str	r2, [r7, #12]
 80065a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	0a5b      	lsrs	r3, r3, #9
 80065be:	4413      	add	r3, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	6938      	ldr	r0, [r7, #16]
 80065c4:	f7ff fefe 	bl	80063c4 <move_window>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d153      	bne.n	8006676 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	4413      	add	r3, r2
 80065d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	461a      	mov	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <get_fat+0xbc>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	091b      	lsrs	r3, r3, #4
 80065f4:	e002      	b.n	80065fc <get_fat+0xc2>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fc:	617b      	str	r3, [r7, #20]
			break;
 80065fe:	e03f      	b.n	8006680 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	4413      	add	r3, r2
 800660a:	4619      	mov	r1, r3
 800660c:	6938      	ldr	r0, [r7, #16]
 800660e:	f7ff fed9 	bl	80063c4 <move_window>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d130      	bne.n	800667a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006626:	4413      	add	r3, r2
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff fc1b 	bl	8005e64 <ld_word>
 800662e:	4603      	mov	r3, r0
 8006630:	617b      	str	r3, [r7, #20]
			break;
 8006632:	e025      	b.n	8006680 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	6a1a      	ldr	r2, [r3, #32]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	09db      	lsrs	r3, r3, #7
 800663c:	4413      	add	r3, r2
 800663e:	4619      	mov	r1, r3
 8006640:	6938      	ldr	r0, [r7, #16]
 8006642:	f7ff febf 	bl	80063c4 <move_window>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d118      	bne.n	800667e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800665a:	4413      	add	r3, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff fc19 	bl	8005e94 <ld_dword>
 8006662:	4603      	mov	r3, r0
 8006664:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006668:	617b      	str	r3, [r7, #20]
			break;
 800666a:	e009      	b.n	8006680 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800666c:	2301      	movs	r3, #1
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	e006      	b.n	8006680 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006672:	bf00      	nop
 8006674:	e004      	b.n	8006680 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006676:	bf00      	nop
 8006678:	e002      	b.n	8006680 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800667e:	bf00      	nop
		}
	}

	return val;
 8006680:	697b      	ldr	r3, [r7, #20]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800668a:	b590      	push	{r4, r7, lr}
 800668c:	b089      	sub	sp, #36	; 0x24
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006696:	2302      	movs	r3, #2
 8006698:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b01      	cmp	r3, #1
 800669e:	f240 80d2 	bls.w	8006846 <put_fat+0x1bc>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	f080 80cc 	bcs.w	8006846 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	f000 8096 	beq.w	80067e4 <put_fat+0x15a>
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	f300 80cd 	bgt.w	8006858 <put_fat+0x1ce>
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d002      	beq.n	80066c8 <put_fat+0x3e>
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d06e      	beq.n	80067a4 <put_fat+0x11a>
 80066c6:	e0c7      	b.n	8006858 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	61bb      	str	r3, [r7, #24]
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	4413      	add	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a1a      	ldr	r2, [r3, #32]
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	0a5b      	lsrs	r3, r3, #9
 80066de:	4413      	add	r3, r2
 80066e0:	4619      	mov	r1, r3
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff fe6e 	bl	80063c4 <move_window>
 80066e8:	4603      	mov	r3, r0
 80066ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066ec:	7ffb      	ldrb	r3, [r7, #31]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 80ab 	bne.w	800684a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	61b9      	str	r1, [r7, #24]
 8006700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006704:	4413      	add	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00d      	beq.n	800672e <put_fat+0xa4>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	b25b      	sxtb	r3, r3
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	b25a      	sxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	b25b      	sxtb	r3, r3
 8006726:	4313      	orrs	r3, r2
 8006728:	b25b      	sxtb	r3, r3
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e001      	b.n	8006732 <put_fat+0xa8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1a      	ldr	r2, [r3, #32]
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	0a5b      	lsrs	r3, r3, #9
 8006744:	4413      	add	r3, r2
 8006746:	4619      	mov	r1, r3
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff fe3b 	bl	80063c4 <move_window>
 800674e:	4603      	mov	r3, r0
 8006750:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006752:	7ffb      	ldrb	r3, [r7, #31]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d17a      	bne.n	800684e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006764:	4413      	add	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <put_fat+0xf0>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	b2db      	uxtb	r3, r3
 8006778:	e00e      	b.n	8006798 <put_fat+0x10e>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	b25b      	sxtb	r3, r3
 8006780:	f023 030f 	bic.w	r3, r3, #15
 8006784:	b25a      	sxtb	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	b25b      	sxtb	r3, r3
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	b25b      	sxtb	r3, r3
 8006792:	4313      	orrs	r3, r2
 8006794:	b25b      	sxtb	r3, r3
 8006796:	b2db      	uxtb	r3, r3
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2201      	movs	r2, #1
 80067a0:	70da      	strb	r2, [r3, #3]
			break;
 80067a2:	e059      	b.n	8006858 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1a      	ldr	r2, [r3, #32]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	0a1b      	lsrs	r3, r3, #8
 80067ac:	4413      	add	r3, r2
 80067ae:	4619      	mov	r1, r3
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fe07 	bl	80063c4 <move_window>
 80067b6:	4603      	mov	r3, r0
 80067b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067ba:	7ffb      	ldrb	r3, [r7, #31]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d148      	bne.n	8006852 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80067ce:	4413      	add	r3, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	b292      	uxth	r2, r2
 80067d4:	4611      	mov	r1, r2
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fb7f 	bl	8005eda <st_word>
			fs->wflag = 1;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	70da      	strb	r2, [r3, #3]
			break;
 80067e2:	e039      	b.n	8006858 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1a      	ldr	r2, [r3, #32]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	09db      	lsrs	r3, r3, #7
 80067ec:	4413      	add	r3, r2
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff fde7 	bl	80063c4 <move_window>
 80067f6:	4603      	mov	r3, r0
 80067f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067fa:	7ffb      	ldrb	r3, [r7, #31]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d12a      	bne.n	8006856 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006814:	4413      	add	r3, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fb3c 	bl	8005e94 <ld_dword>
 800681c:	4603      	mov	r3, r0
 800681e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006822:	4323      	orrs	r3, r4
 8006824:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006834:	4413      	add	r3, r2
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff fb69 	bl	8005f10 <st_dword>
			fs->wflag = 1;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	70da      	strb	r2, [r3, #3]
			break;
 8006844:	e008      	b.n	8006858 <put_fat+0x1ce>
		}
	}
 8006846:	bf00      	nop
 8006848:	e006      	b.n	8006858 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800684a:	bf00      	nop
 800684c:	e004      	b.n	8006858 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800684e:	bf00      	nop
 8006850:	e002      	b.n	8006858 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006852:	bf00      	nop
 8006854:	e000      	b.n	8006858 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006856:	bf00      	nop
	return res;
 8006858:	7ffb      	ldrb	r3, [r7, #31]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3724      	adds	r7, #36	; 0x24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd90      	pop	{r4, r7, pc}

08006862 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b088      	sub	sp, #32
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d904      	bls.n	8006888 <remove_chain+0x26>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d301      	bcc.n	800688c <remove_chain+0x2a>
 8006888:	2302      	movs	r3, #2
 800688a:	e04b      	b.n	8006924 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006892:	f04f 32ff 	mov.w	r2, #4294967295
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	69b8      	ldr	r0, [r7, #24]
 800689a:	f7ff fef6 	bl	800668a <put_fat>
 800689e:	4603      	mov	r3, r0
 80068a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80068a2:	7ffb      	ldrb	r3, [r7, #31]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <remove_chain+0x4a>
 80068a8:	7ffb      	ldrb	r3, [r7, #31]
 80068aa:	e03b      	b.n	8006924 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff fe43 	bl	800653a <get_fat>
 80068b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d031      	beq.n	8006920 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d101      	bne.n	80068c6 <remove_chain+0x64>
 80068c2:	2302      	movs	r3, #2
 80068c4:	e02e      	b.n	8006924 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d101      	bne.n	80068d2 <remove_chain+0x70>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e028      	b.n	8006924 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80068d2:	2200      	movs	r2, #0
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	69b8      	ldr	r0, [r7, #24]
 80068d8:	f7ff fed7 	bl	800668a <put_fat>
 80068dc:	4603      	mov	r3, r0
 80068de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <remove_chain+0x88>
 80068e6:	7ffb      	ldrb	r3, [r7, #31]
 80068e8:	e01c      	b.n	8006924 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	3b02      	subs	r3, #2
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d20b      	bcs.n	8006910 <remove_chain+0xae>
			fs->free_clst++;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	791b      	ldrb	r3, [r3, #4]
 8006906:	f043 0301 	orr.w	r3, r3, #1
 800690a:	b2da      	uxtb	r2, r3
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	d3c6      	bcc.n	80068ac <remove_chain+0x4a>
 800691e:	e000      	b.n	8006922 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006920:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10d      	bne.n	800695e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <create_chain+0x2c>
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	429a      	cmp	r2, r3
 8006956:	d31b      	bcc.n	8006990 <create_chain+0x64>
 8006958:	2301      	movs	r3, #1
 800695a:	61bb      	str	r3, [r7, #24]
 800695c:	e018      	b.n	8006990 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fdea 	bl	800653a <get_fat>
 8006966:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d801      	bhi.n	8006972 <create_chain+0x46>
 800696e:	2301      	movs	r3, #1
 8006970:	e070      	b.n	8006a54 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d101      	bne.n	800697e <create_chain+0x52>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	e06a      	b.n	8006a54 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	429a      	cmp	r2, r3
 8006986:	d201      	bcs.n	800698c <create_chain+0x60>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	e063      	b.n	8006a54 <create_chain+0x128>
		scl = clst;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	3301      	adds	r3, #1
 8006998:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d307      	bcc.n	80069b4 <create_chain+0x88>
				ncl = 2;
 80069a4:	2302      	movs	r3, #2
 80069a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d901      	bls.n	80069b4 <create_chain+0x88>
 80069b0:	2300      	movs	r3, #0
 80069b2:	e04f      	b.n	8006a54 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80069b4:	69f9      	ldr	r1, [r7, #28]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff fdbf 	bl	800653a <get_fat>
 80069bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d003      	beq.n	80069d2 <create_chain+0xa6>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d101      	bne.n	80069d6 <create_chain+0xaa>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	e03e      	b.n	8006a54 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d1da      	bne.n	8006994 <create_chain+0x68>
 80069de:	2300      	movs	r3, #0
 80069e0:	e038      	b.n	8006a54 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80069e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295
 80069e8:	69f9      	ldr	r1, [r7, #28]
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f7ff fe4d 	bl	800668a <put_fat>
 80069f0:	4603      	mov	r3, r0
 80069f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d109      	bne.n	8006a0e <create_chain+0xe2>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d006      	beq.n	8006a0e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6938      	ldr	r0, [r7, #16]
 8006a06:	f7ff fe40 	bl	800668a <put_fat>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d116      	bne.n	8006a42 <create_chain+0x116>
		fs->last_clst = ncl;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	3b02      	subs	r3, #2
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d804      	bhi.n	8006a32 <create_chain+0x106>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	1e5a      	subs	r2, r3, #1
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	791b      	ldrb	r3, [r3, #4]
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	711a      	strb	r2, [r3, #4]
 8006a40:	e007      	b.n	8006a52 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d102      	bne.n	8006a4e <create_chain+0x122>
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4c:	e000      	b.n	8006a50 <create_chain+0x124>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006a52:	69fb      	ldr	r3, [r7, #28]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	3304      	adds	r3, #4
 8006a72:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	0a5b      	lsrs	r3, r3, #9
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	8952      	ldrh	r2, [r2, #10]
 8006a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1d1a      	adds	r2, r3, #4
 8006a86:	613a      	str	r2, [r7, #16]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <clmt_clust+0x3a>
 8006a92:	2300      	movs	r3, #0
 8006a94:	e010      	b.n	8006ab8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d307      	bcc.n	8006aae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006aac:	e7e9      	b.n	8006a82 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006aae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	4413      	add	r3, r2
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ada:	d204      	bcs.n	8006ae6 <dir_sdi+0x22>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <dir_sdi+0x26>
		return FR_INT_ERR;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e063      	b.n	8006bb2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <dir_sdi+0x46>
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d902      	bls.n	8006b0a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10c      	bne.n	8006b2a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	8912      	ldrh	r2, [r2, #8]
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d301      	bcc.n	8006b20 <dir_sdi+0x5c>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e048      	b.n	8006bb2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	61da      	str	r2, [r3, #28]
 8006b28:	e029      	b.n	8006b7e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	895b      	ldrh	r3, [r3, #10]
 8006b2e:	025b      	lsls	r3, r3, #9
 8006b30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b32:	e019      	b.n	8006b68 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6979      	ldr	r1, [r7, #20]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff fcfe 	bl	800653a <get_fat>
 8006b3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d101      	bne.n	8006b4c <dir_sdi+0x88>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e032      	b.n	8006bb2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d904      	bls.n	8006b5c <dir_sdi+0x98>
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d301      	bcc.n	8006b60 <dir_sdi+0x9c>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e028      	b.n	8006bb2 <dir_sdi+0xee>
			ofs -= csz;
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d2e1      	bcs.n	8006b34 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	6938      	ldr	r0, [r7, #16]
 8006b74:	f7ff fcc2 	bl	80064fc <clust2sect>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <dir_sdi+0xcc>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e010      	b.n	8006bb2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	0a5b      	lsrs	r3, r3, #9
 8006b98:	441a      	add	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	441a      	add	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	3320      	adds	r3, #32
 8006bd0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <dir_next+0x28>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006be0:	d301      	bcc.n	8006be6 <dir_next+0x2c>
 8006be2:	2304      	movs	r3, #4
 8006be4:	e0aa      	b.n	8006d3c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 8098 	bne.w	8006d22 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	8912      	ldrh	r2, [r2, #8]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	f0c0 8088 	bcc.w	8006d22 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	61da      	str	r2, [r3, #28]
 8006c18:	2304      	movs	r3, #4
 8006c1a:	e08f      	b.n	8006d3c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	0a5b      	lsrs	r3, r3, #9
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	8952      	ldrh	r2, [r2, #10]
 8006c24:	3a01      	subs	r2, #1
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d17a      	bne.n	8006d22 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f7ff fc80 	bl	800653a <get_fat>
 8006c3a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d801      	bhi.n	8006c46 <dir_next+0x8c>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e07a      	b.n	8006d3c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d101      	bne.n	8006c52 <dir_next+0x98>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e074      	b.n	8006d3c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d358      	bcc.n	8006d0e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d104      	bne.n	8006c6c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	61da      	str	r2, [r3, #28]
 8006c68:	2304      	movs	r3, #4
 8006c6a:	e067      	b.n	8006d3c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7ff fe59 	bl	800692c <create_chain>
 8006c7a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <dir_next+0xcc>
 8006c82:	2307      	movs	r3, #7
 8006c84:	e05a      	b.n	8006d3c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <dir_next+0xd6>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e055      	b.n	8006d3c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c96:	d101      	bne.n	8006c9c <dir_next+0xe2>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e04f      	b.n	8006d3c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f7ff fb4d 	bl	800633c <sync_window>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <dir_next+0xf2>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e047      	b.n	8006d3c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3330      	adds	r3, #48	; 0x30
 8006cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff f977 	bl	8005faa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	6979      	ldr	r1, [r7, #20]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7ff fc1a 	bl	80064fc <clust2sect>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cce:	e012      	b.n	8006cf6 <dir_next+0x13c>
						fs->wflag = 1;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f7ff fb30 	bl	800633c <sync_window>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <dir_next+0x12c>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e02a      	b.n	8006d3c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	895b      	ldrh	r3, [r3, #10]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d3e6      	bcc.n	8006cd0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad2      	subs	r2, r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006d14:	6979      	ldr	r1, [r7, #20]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff fbf0 	bl	80064fc <clust2sect>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff feb4 	bl	8006ac4 <dir_sdi>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d12b      	bne.n	8006dbe <dir_alloc+0x7a>
		n = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff fb27 	bl	80063c4 <move_window>
 8006d76:	4603      	mov	r3, r0
 8006d78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11d      	bne.n	8006dbc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2be5      	cmp	r3, #229	; 0xe5
 8006d88:	d004      	beq.n	8006d94 <dir_alloc+0x50>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d107      	bne.n	8006da4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	3301      	adds	r3, #1
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d102      	bne.n	8006da8 <dir_alloc+0x64>
 8006da2:	e00c      	b.n	8006dbe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006da8:	2101      	movs	r1, #1
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff ff05 	bl	8006bba <dir_next>
 8006db0:	4603      	mov	r3, r0
 8006db2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0d7      	beq.n	8006d6a <dir_alloc+0x26>
 8006dba:	e000      	b.n	8006dbe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006dbc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d101      	bne.n	8006dc8 <dir_alloc+0x84>
 8006dc4:	2307      	movs	r3, #7
 8006dc6:	75fb      	strb	r3, [r7, #23]
	return res;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	331a      	adds	r3, #26
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff f83f 	bl	8005e64 <ld_word>
 8006de6:	4603      	mov	r3, r0
 8006de8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d109      	bne.n	8006e06 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	3314      	adds	r3, #20
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff f834 	bl	8005e64 <ld_word>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e06:	68fb      	ldr	r3, [r7, #12]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	331a      	adds	r3, #26
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	b292      	uxth	r2, r2
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff f857 	bl	8005eda <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d109      	bne.n	8006e48 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f103 0214 	add.w	r2, r3, #20
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	f7ff f849 	bl	8005eda <st_word>
	}
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e5e:	2100      	movs	r1, #0
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff fe2f 	bl	8006ac4 <dir_sdi>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <dir_find+0x24>
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	e03e      	b.n	8006ef2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f7ff faa2 	bl	80063c4 <move_window>
 8006e80:	4603      	mov	r3, r0
 8006e82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d12f      	bne.n	8006eea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <dir_find+0x4e>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	75fb      	strb	r3, [r7, #23]
 8006e9c:	e028      	b.n	8006ef0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	330b      	adds	r3, #11
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	330b      	adds	r3, #11
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <dir_find+0x86>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a18      	ldr	r0, [r3, #32]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3324      	adds	r3, #36	; 0x24
 8006ec8:	220b      	movs	r2, #11
 8006eca:	4619      	mov	r1, r3
 8006ecc:	f7ff f888 	bl	8005fe0 <mem_cmp>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff fe6e 	bl	8006bba <dir_next>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0c5      	beq.n	8006e74 <dir_find+0x24>
 8006ee8:	e002      	b.n	8006ef0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006eea:	bf00      	nop
 8006eec:	e000      	b.n	8006ef0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006eee:	bf00      	nop

	return res;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006f08:	2101      	movs	r1, #1
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff ff1a 	bl	8006d44 <dir_alloc>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d11c      	bne.n	8006f54 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68b8      	ldr	r0, [r7, #8]
 8006f22:	f7ff fa4f 	bl	80063c4 <move_window>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d111      	bne.n	8006f54 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	2220      	movs	r2, #32
 8006f36:	2100      	movs	r1, #0
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff f836 	bl	8005faa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a18      	ldr	r0, [r3, #32]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3324      	adds	r3, #36	; 0x24
 8006f46:	220b      	movs	r2, #11
 8006f48:	4619      	mov	r1, r3
 8006f4a:	f7ff f80d 	bl	8005f68 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2201      	movs	r2, #1
 8006f52:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3324      	adds	r3, #36	; 0x24
 8006f74:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006f76:	220b      	movs	r2, #11
 8006f78:	2120      	movs	r1, #32
 8006f7a:	68b8      	ldr	r0, [r7, #8]
 8006f7c:	f7ff f815 	bl	8005faa <mem_set>
	si = i = 0; ni = 8;
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	2308      	movs	r3, #8
 8006f8a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	61fa      	str	r2, [r7, #28]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006f9a:	7efb      	ldrb	r3, [r7, #27]
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d94e      	bls.n	800703e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006fa0:	7efb      	ldrb	r3, [r7, #27]
 8006fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8006fa4:	d006      	beq.n	8006fb4 <create_name+0x54>
 8006fa6:	7efb      	ldrb	r3, [r7, #27]
 8006fa8:	2b5c      	cmp	r3, #92	; 0x5c
 8006faa:	d110      	bne.n	8006fce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006fac:	e002      	b.n	8006fb4 <create_name+0x54>
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	61fb      	str	r3, [r7, #28]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b2f      	cmp	r3, #47	; 0x2f
 8006fbe:	d0f6      	beq.n	8006fae <create_name+0x4e>
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b5c      	cmp	r3, #92	; 0x5c
 8006fca:	d0f0      	beq.n	8006fae <create_name+0x4e>
			break;
 8006fcc:	e038      	b.n	8007040 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006fce:	7efb      	ldrb	r3, [r7, #27]
 8006fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd2:	d003      	beq.n	8006fdc <create_name+0x7c>
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d30c      	bcc.n	8006ff6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b0b      	cmp	r3, #11
 8006fe0:	d002      	beq.n	8006fe8 <create_name+0x88>
 8006fe2:	7efb      	ldrb	r3, [r7, #27]
 8006fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8006fe6:	d001      	beq.n	8006fec <create_name+0x8c>
 8006fe8:	2306      	movs	r3, #6
 8006fea:	e044      	b.n	8007076 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006fec:	2308      	movs	r3, #8
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	230b      	movs	r3, #11
 8006ff2:	617b      	str	r3, [r7, #20]
			continue;
 8006ff4:	e022      	b.n	800703c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006ff6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	da04      	bge.n	8007008 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006ffe:	7efb      	ldrb	r3, [r7, #27]
 8007000:	3b80      	subs	r3, #128	; 0x80
 8007002:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <create_name+0x120>)
 8007004:	5cd3      	ldrb	r3, [r2, r3]
 8007006:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007008:	7efb      	ldrb	r3, [r7, #27]
 800700a:	4619      	mov	r1, r3
 800700c:	481d      	ldr	r0, [pc, #116]	; (8007084 <create_name+0x124>)
 800700e:	f7ff f80e 	bl	800602e <chk_chr>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <create_name+0xbc>
 8007018:	2306      	movs	r3, #6
 800701a:	e02c      	b.n	8007076 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800701c:	7efb      	ldrb	r3, [r7, #27]
 800701e:	2b60      	cmp	r3, #96	; 0x60
 8007020:	d905      	bls.n	800702e <create_name+0xce>
 8007022:	7efb      	ldrb	r3, [r7, #27]
 8007024:	2b7a      	cmp	r3, #122	; 0x7a
 8007026:	d802      	bhi.n	800702e <create_name+0xce>
 8007028:	7efb      	ldrb	r3, [r7, #27]
 800702a:	3b20      	subs	r3, #32
 800702c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	613a      	str	r2, [r7, #16]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	4413      	add	r3, r2
 8007038:	7efa      	ldrb	r2, [r7, #27]
 800703a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800703c:	e7a6      	b.n	8006f8c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800703e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	441a      	add	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <create_name+0xf4>
 8007050:	2306      	movs	r3, #6
 8007052:	e010      	b.n	8007076 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2be5      	cmp	r3, #229	; 0xe5
 800705a:	d102      	bne.n	8007062 <create_name+0x102>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2205      	movs	r2, #5
 8007060:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007062:	7efb      	ldrb	r3, [r7, #27]
 8007064:	2b20      	cmp	r3, #32
 8007066:	d801      	bhi.n	800706c <create_name+0x10c>
 8007068:	2204      	movs	r2, #4
 800706a:	e000      	b.n	800706e <create_name+0x10e>
 800706c:	2200      	movs	r2, #0
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	330b      	adds	r3, #11
 8007072:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007074:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007076:	4618      	mov	r0, r3
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	080098bc 	.word	0x080098bc
 8007084:	080097f0 	.word	0x080097f0

08007088 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800709c:	e002      	b.n	80070a4 <follow_path+0x1c>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	3301      	adds	r3, #1
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b2f      	cmp	r3, #47	; 0x2f
 80070aa:	d0f8      	beq.n	800709e <follow_path+0x16>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b5c      	cmp	r3, #92	; 0x5c
 80070b2:	d0f4      	beq.n	800709e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2200      	movs	r2, #0
 80070b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b1f      	cmp	r3, #31
 80070c0:	d80a      	bhi.n	80070d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2280      	movs	r2, #128	; 0x80
 80070c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80070ca:	2100      	movs	r1, #0
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff fcf9 	bl	8006ac4 <dir_sdi>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]
 80070d6:	e043      	b.n	8007160 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070d8:	463b      	mov	r3, r7
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ff3f 	bl	8006f60 <create_name>
 80070e2:	4603      	mov	r3, r0
 80070e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d134      	bne.n	8007156 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff feaf 	bl	8006e50 <dir_find>
 80070f2:	4603      	mov	r3, r0
 80070f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	2b04      	cmp	r3, #4
 8007108:	d127      	bne.n	800715a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800710a:	7afb      	ldrb	r3, [r7, #11]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d122      	bne.n	800715a <follow_path+0xd2>
 8007114:	2305      	movs	r3, #5
 8007116:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007118:	e01f      	b.n	800715a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800711a:	7afb      	ldrb	r3, [r7, #11]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	d11c      	bne.n	800715e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	799b      	ldrb	r3, [r3, #6]
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007130:	2305      	movs	r3, #5
 8007132:	75fb      	strb	r3, [r7, #23]
 8007134:	e014      	b.n	8007160 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007144:	4413      	add	r3, r2
 8007146:	4619      	mov	r1, r3
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff fe42 	bl	8006dd2 <ld_clust>
 800714e:	4602      	mov	r2, r0
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007154:	e7c0      	b.n	80070d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007156:	bf00      	nop
 8007158:	e002      	b.n	8007160 <follow_path+0xd8>
				break;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800715e:	bf00      	nop
			}
		}
	}

	return res;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800716a:	b480      	push	{r7}
 800716c:	b087      	sub	sp, #28
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007172:	f04f 33ff 	mov.w	r3, #4294967295
 8007176:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d031      	beq.n	80071e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	e002      	b.n	800718e <get_ldnumber+0x24>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	3301      	adds	r3, #1
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b20      	cmp	r3, #32
 8007194:	d903      	bls.n	800719e <get_ldnumber+0x34>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b3a      	cmp	r3, #58	; 0x3a
 800719c:	d1f4      	bne.n	8007188 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b3a      	cmp	r3, #58	; 0x3a
 80071a4:	d11c      	bne.n	80071e0 <get_ldnumber+0x76>
			tp = *path;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	60fa      	str	r2, [r7, #12]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	3b30      	subs	r3, #48	; 0x30
 80071b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b09      	cmp	r3, #9
 80071bc:	d80e      	bhi.n	80071dc <get_ldnumber+0x72>
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d10a      	bne.n	80071dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d107      	bne.n	80071dc <get_ldnumber+0x72>
					vol = (int)i;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	3301      	adds	r3, #1
 80071d4:	617b      	str	r3, [r7, #20]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	e002      	b.n	80071e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80071e4:	693b      	ldr	r3, [r7, #16]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
	...

080071f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	70da      	strb	r2, [r3, #3]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f04f 32ff 	mov.w	r2, #4294967295
 800720a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff f8d8 	bl	80063c4 <move_window>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <check_fs+0x2a>
 800721a:	2304      	movs	r3, #4
 800721c:	e038      	b.n	8007290 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3330      	adds	r3, #48	; 0x30
 8007222:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fe1c 	bl	8005e64 <ld_word>
 800722c:	4603      	mov	r3, r0
 800722e:	461a      	mov	r2, r3
 8007230:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007234:	429a      	cmp	r2, r3
 8007236:	d001      	beq.n	800723c <check_fs+0x48>
 8007238:	2303      	movs	r3, #3
 800723a:	e029      	b.n	8007290 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007242:	2be9      	cmp	r3, #233	; 0xe9
 8007244:	d009      	beq.n	800725a <check_fs+0x66>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800724c:	2beb      	cmp	r3, #235	; 0xeb
 800724e:	d11e      	bne.n	800728e <check_fs+0x9a>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007256:	2b90      	cmp	r3, #144	; 0x90
 8007258:	d119      	bne.n	800728e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3330      	adds	r3, #48	; 0x30
 800725e:	3336      	adds	r3, #54	; 0x36
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe fe17 	bl	8005e94 <ld_dword>
 8007266:	4603      	mov	r3, r0
 8007268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800726c:	4a0a      	ldr	r2, [pc, #40]	; (8007298 <check_fs+0xa4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d101      	bne.n	8007276 <check_fs+0x82>
 8007272:	2300      	movs	r3, #0
 8007274:	e00c      	b.n	8007290 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3330      	adds	r3, #48	; 0x30
 800727a:	3352      	adds	r3, #82	; 0x52
 800727c:	4618      	mov	r0, r3
 800727e:	f7fe fe09 	bl	8005e94 <ld_dword>
 8007282:	4603      	mov	r3, r0
 8007284:	4a05      	ldr	r2, [pc, #20]	; (800729c <check_fs+0xa8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d101      	bne.n	800728e <check_fs+0x9a>
 800728a:	2300      	movs	r3, #0
 800728c:	e000      	b.n	8007290 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800728e:	2302      	movs	r3, #2
}
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	00544146 	.word	0x00544146
 800729c:	33544146 	.word	0x33544146

080072a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b096      	sub	sp, #88	; 0x58
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff ff58 	bl	800716a <get_ldnumber>
 80072ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80072bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	da01      	bge.n	80072c6 <find_volume+0x26>
 80072c2:	230b      	movs	r3, #11
 80072c4:	e22d      	b.n	8007722 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80072c6:	4aa1      	ldr	r2, [pc, #644]	; (800754c <find_volume+0x2ac>)
 80072c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <find_volume+0x3a>
 80072d6:	230c      	movs	r3, #12
 80072d8:	e223      	b.n	8007722 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	f023 0301 	bic.w	r3, r3, #1
 80072e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01a      	beq.n	8007326 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe fd17 	bl	8005d28 <disk_status>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10c      	bne.n	8007326 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d007      	beq.n	8007322 <find_volume+0x82>
 8007312:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800731e:	230a      	movs	r3, #10
 8007320:	e1ff      	b.n	8007722 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007322:	2300      	movs	r3, #0
 8007324:	e1fd      	b.n	8007722 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800732c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732e:	b2da      	uxtb	r2, r3
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe fd0f 	bl	8005d5c <disk_initialize>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007350:	2303      	movs	r3, #3
 8007352:	e1e6      	b.n	8007722 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <find_volume+0xca>
 800735a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007366:	230a      	movs	r3, #10
 8007368:	e1db      	b.n	8007722 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800736e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007370:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007372:	f7ff ff3f 	bl	80071f4 <check_fs>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800737c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007380:	2b02      	cmp	r3, #2
 8007382:	d149      	bne.n	8007418 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007384:	2300      	movs	r3, #0
 8007386:	643b      	str	r3, [r7, #64]	; 0x40
 8007388:	e01e      	b.n	80073c8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007398:	4413      	add	r3, r2
 800739a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	3304      	adds	r3, #4
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d006      	beq.n	80073b4 <find_volume+0x114>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	3308      	adds	r3, #8
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fd72 	bl	8005e94 <ld_dword>
 80073b0:	4602      	mov	r2, r0
 80073b2:	e000      	b.n	80073b6 <find_volume+0x116>
 80073b4:	2200      	movs	r2, #0
 80073b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	3358      	adds	r3, #88	; 0x58
 80073bc:	443b      	add	r3, r7
 80073be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80073c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c4:	3301      	adds	r3, #1
 80073c6:	643b      	str	r3, [r7, #64]	; 0x40
 80073c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d9dd      	bls.n	800738a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80073ce:	2300      	movs	r3, #0
 80073d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80073d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <find_volume+0x13e>
 80073d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073da:	3b01      	subs	r3, #1
 80073dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80073de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	3358      	adds	r3, #88	; 0x58
 80073e4:	443b      	add	r3, r7
 80073e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80073ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80073ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <find_volume+0x15e>
 80073f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073f6:	f7ff fefd 	bl	80071f4 <check_fs>
 80073fa:	4603      	mov	r3, r0
 80073fc:	e000      	b.n	8007400 <find_volume+0x160>
 80073fe:	2303      	movs	r3, #3
 8007400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007408:	2b01      	cmp	r3, #1
 800740a:	d905      	bls.n	8007418 <find_volume+0x178>
 800740c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740e:	3301      	adds	r3, #1
 8007410:	643b      	str	r3, [r7, #64]	; 0x40
 8007412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007414:	2b03      	cmp	r3, #3
 8007416:	d9e2      	bls.n	80073de <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800741c:	2b04      	cmp	r3, #4
 800741e:	d101      	bne.n	8007424 <find_volume+0x184>
 8007420:	2301      	movs	r3, #1
 8007422:	e17e      	b.n	8007722 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007424:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007428:	2b01      	cmp	r3, #1
 800742a:	d901      	bls.n	8007430 <find_volume+0x190>
 800742c:	230d      	movs	r3, #13
 800742e:	e178      	b.n	8007722 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	3330      	adds	r3, #48	; 0x30
 8007434:	330b      	adds	r3, #11
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fd14 	bl	8005e64 <ld_word>
 800743c:	4603      	mov	r3, r0
 800743e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007442:	d001      	beq.n	8007448 <find_volume+0x1a8>
 8007444:	230d      	movs	r3, #13
 8007446:	e16c      	b.n	8007722 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	3330      	adds	r3, #48	; 0x30
 800744c:	3316      	adds	r3, #22
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fd08 	bl	8005e64 <ld_word>
 8007454:	4603      	mov	r3, r0
 8007456:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <find_volume+0x1cc>
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	3330      	adds	r3, #48	; 0x30
 8007462:	3324      	adds	r3, #36	; 0x24
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe fd15 	bl	8005e94 <ld_dword>
 800746a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007470:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	789b      	ldrb	r3, [r3, #2]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d005      	beq.n	8007490 <find_volume+0x1f0>
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	789b      	ldrb	r3, [r3, #2]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d001      	beq.n	8007490 <find_volume+0x1f0>
 800748c:	230d      	movs	r3, #13
 800748e:	e148      	b.n	8007722 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	789b      	ldrb	r3, [r3, #2]
 8007494:	461a      	mov	r2, r3
 8007496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007498:	fb02 f303 	mul.w	r3, r2, r3
 800749c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	895b      	ldrh	r3, [r3, #10]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <find_volume+0x224>
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	895b      	ldrh	r3, [r3, #10]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	895b      	ldrh	r3, [r3, #10]
 80074bc:	3b01      	subs	r3, #1
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <find_volume+0x228>
 80074c4:	230d      	movs	r3, #13
 80074c6:	e12c      	b.n	8007722 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	3330      	adds	r3, #48	; 0x30
 80074cc:	3311      	adds	r3, #17
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fcc8 	bl	8005e64 <ld_word>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	891b      	ldrh	r3, [r3, #8]
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <find_volume+0x24e>
 80074ea:	230d      	movs	r3, #13
 80074ec:	e119      	b.n	8007722 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	3330      	adds	r3, #48	; 0x30
 80074f2:	3313      	adds	r3, #19
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe fcb5 	bl	8005e64 <ld_word>
 80074fa:	4603      	mov	r3, r0
 80074fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80074fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <find_volume+0x272>
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	3330      	adds	r3, #48	; 0x30
 8007508:	3320      	adds	r3, #32
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fcc2 	bl	8005e94 <ld_dword>
 8007510:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	3330      	adds	r3, #48	; 0x30
 8007516:	330e      	adds	r3, #14
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe fca3 	bl	8005e64 <ld_word>
 800751e:	4603      	mov	r3, r0
 8007520:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <find_volume+0x28c>
 8007528:	230d      	movs	r3, #13
 800752a:	e0fa      	b.n	8007722 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800752c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800752e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007530:	4413      	add	r3, r2
 8007532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007534:	8912      	ldrh	r2, [r2, #8]
 8007536:	0912      	lsrs	r2, r2, #4
 8007538:	b292      	uxth	r2, r2
 800753a:	4413      	add	r3, r2
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800753e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	429a      	cmp	r2, r3
 8007544:	d204      	bcs.n	8007550 <find_volume+0x2b0>
 8007546:	230d      	movs	r3, #13
 8007548:	e0eb      	b.n	8007722 <find_volume+0x482>
 800754a:	bf00      	nop
 800754c:	200137a8 	.word	0x200137a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007558:	8952      	ldrh	r2, [r2, #10]
 800755a:	fbb3 f3f2 	udiv	r3, r3, r2
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <find_volume+0x2ca>
 8007566:	230d      	movs	r3, #13
 8007568:	e0db      	b.n	8007722 <find_volume+0x482>
		fmt = FS_FAT32;
 800756a:	2303      	movs	r3, #3
 800756c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007576:	4293      	cmp	r3, r2
 8007578:	d802      	bhi.n	8007580 <find_volume+0x2e0>
 800757a:	2302      	movs	r3, #2
 800757c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007586:	4293      	cmp	r3, r2
 8007588:	d802      	bhi.n	8007590 <find_volume+0x2f0>
 800758a:	2301      	movs	r3, #1
 800758c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	1c9a      	adds	r2, r3, #2
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800759c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800759e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80075a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a2:	441a      	add	r2, r3
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80075a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	441a      	add	r2, r3
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80075b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d11e      	bne.n	80075f8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	3330      	adds	r3, #48	; 0x30
 80075be:	332a      	adds	r3, #42	; 0x2a
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fc4f 	bl	8005e64 <ld_word>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <find_volume+0x330>
 80075cc:	230d      	movs	r3, #13
 80075ce:	e0a8      	b.n	8007722 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	891b      	ldrh	r3, [r3, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <find_volume+0x33c>
 80075d8:	230d      	movs	r3, #13
 80075da:	e0a2      	b.n	8007722 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	3330      	adds	r3, #48	; 0x30
 80075e0:	332c      	adds	r3, #44	; 0x2c
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe fc56 	bl	8005e94 <ld_dword>
 80075e8:	4602      	mov	r2, r0
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	647b      	str	r3, [r7, #68]	; 0x44
 80075f6:	e01f      	b.n	8007638 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	891b      	ldrh	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <find_volume+0x364>
 8007600:	230d      	movs	r3, #13
 8007602:	e08e      	b.n	8007722 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760a:	441a      	add	r2, r3
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007610:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007614:	2b02      	cmp	r3, #2
 8007616:	d103      	bne.n	8007620 <find_volume+0x380>
 8007618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	e00a      	b.n	8007636 <find_volume+0x396>
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	695a      	ldr	r2, [r3, #20]
 8007624:	4613      	mov	r3, r2
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	4413      	add	r3, r2
 800762a:	085a      	lsrs	r2, r3, #1
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007636:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	699a      	ldr	r2, [r3, #24]
 800763c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007642:	0a5b      	lsrs	r3, r3, #9
 8007644:	429a      	cmp	r2, r3
 8007646:	d201      	bcs.n	800764c <find_volume+0x3ac>
 8007648:	230d      	movs	r3, #13
 800764a:	e06a      	b.n	8007722 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	611a      	str	r2, [r3, #16]
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	2280      	movs	r2, #128	; 0x80
 8007660:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007666:	2b03      	cmp	r3, #3
 8007668:	d149      	bne.n	80076fe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	3330      	adds	r3, #48	; 0x30
 800766e:	3330      	adds	r3, #48	; 0x30
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fbf7 	bl	8005e64 <ld_word>
 8007676:	4603      	mov	r3, r0
 8007678:	2b01      	cmp	r3, #1
 800767a:	d140      	bne.n	80076fe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800767c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800767e:	3301      	adds	r3, #1
 8007680:	4619      	mov	r1, r3
 8007682:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007684:	f7fe fe9e 	bl	80063c4 <move_window>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d137      	bne.n	80076fe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	2200      	movs	r2, #0
 8007692:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	3330      	adds	r3, #48	; 0x30
 8007698:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800769c:	4618      	mov	r0, r3
 800769e:	f7fe fbe1 	bl	8005e64 <ld_word>
 80076a2:	4603      	mov	r3, r0
 80076a4:	461a      	mov	r2, r3
 80076a6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d127      	bne.n	80076fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	3330      	adds	r3, #48	; 0x30
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fbee 	bl	8005e94 <ld_dword>
 80076b8:	4603      	mov	r3, r0
 80076ba:	4a1c      	ldr	r2, [pc, #112]	; (800772c <find_volume+0x48c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d11e      	bne.n	80076fe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	3330      	adds	r3, #48	; 0x30
 80076c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe fbe3 	bl	8005e94 <ld_dword>
 80076ce:	4603      	mov	r3, r0
 80076d0:	4a17      	ldr	r2, [pc, #92]	; (8007730 <find_volume+0x490>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d113      	bne.n	80076fe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	3330      	adds	r3, #48	; 0x30
 80076da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fbd8 	bl	8005e94 <ld_dword>
 80076e4:	4602      	mov	r2, r0
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	3330      	adds	r3, #48	; 0x30
 80076ee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fbce 	bl	8005e94 <ld_dword>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007704:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007706:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <find_volume+0x494>)
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	3301      	adds	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	4b09      	ldr	r3, [pc, #36]	; (8007734 <find_volume+0x494>)
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	4b08      	ldr	r3, [pc, #32]	; (8007734 <find_volume+0x494>)
 8007714:	881a      	ldrh	r2, [r3, #0]
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800771a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800771c:	f7fe fdea 	bl	80062f4 <clear_lock>
#endif
	return FR_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3758      	adds	r7, #88	; 0x58
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	41615252 	.word	0x41615252
 8007730:	61417272 	.word	0x61417272
 8007734:	200137ac 	.word	0x200137ac

08007738 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007742:	2309      	movs	r3, #9
 8007744:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01c      	beq.n	8007786 <validate+0x4e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d018      	beq.n	8007786 <validate+0x4e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d013      	beq.n	8007786 <validate+0x4e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	889a      	ldrh	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	88db      	ldrh	r3, [r3, #6]
 8007768:	429a      	cmp	r2, r3
 800776a:	d10c      	bne.n	8007786 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	785b      	ldrb	r3, [r3, #1]
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fad8 	bl	8005d28 <disk_status>
 8007778:	4603      	mov	r3, r0
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <validate+0x4e>
			res = FR_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <validate+0x5a>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	e000      	b.n	8007794 <validate+0x5c>
 8007792:	2300      	movs	r3, #0
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	6013      	str	r3, [r2, #0]
	return res;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80077b6:	f107 0310 	add.w	r3, r7, #16
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff fcd5 	bl	800716a <get_ldnumber>
 80077c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	da01      	bge.n	80077cc <f_mount+0x28>
 80077c8:	230b      	movs	r3, #11
 80077ca:	e02b      	b.n	8007824 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80077cc:	4a17      	ldr	r2, [pc, #92]	; (800782c <f_mount+0x88>)
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80077dc:	69b8      	ldr	r0, [r7, #24]
 80077de:	f7fe fd89 	bl	80062f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2200      	movs	r2, #0
 80077e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	490d      	ldr	r1, [pc, #52]	; (800782c <f_mount+0x88>)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <f_mount+0x66>
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d001      	beq.n	800780e <f_mount+0x6a>
 800780a:	2300      	movs	r3, #0
 800780c:	e00a      	b.n	8007824 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800780e:	f107 010c 	add.w	r1, r7, #12
 8007812:	f107 0308 	add.w	r3, r7, #8
 8007816:	2200      	movs	r2, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f7ff fd41 	bl	80072a0 <find_volume>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007822:	7dfb      	ldrb	r3, [r7, #23]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3720      	adds	r7, #32
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	200137a8 	.word	0x200137a8

08007830 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b098      	sub	sp, #96	; 0x60
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <f_open+0x18>
 8007844:	2309      	movs	r3, #9
 8007846:	e1ad      	b.n	8007ba4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800784e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007850:	79fa      	ldrb	r2, [r7, #7]
 8007852:	f107 0110 	add.w	r1, r7, #16
 8007856:	f107 0308 	add.w	r3, r7, #8
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff fd20 	bl	80072a0 <find_volume>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800786a:	2b00      	cmp	r3, #0
 800786c:	f040 8191 	bne.w	8007b92 <f_open+0x362>
		dj.obj.fs = fs;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	f107 0314 	add.w	r3, r7, #20
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff fc03 	bl	8007088 <follow_path>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800788c:	2b00      	cmp	r3, #0
 800788e:	d11a      	bne.n	80078c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007890:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007894:	b25b      	sxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	da03      	bge.n	80078a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800789a:	2306      	movs	r3, #6
 800789c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80078a0:	e011      	b.n	80078c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	f023 0301 	bic.w	r3, r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bf14      	ite	ne
 80078ac:	2301      	movne	r3, #1
 80078ae:	2300      	moveq	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	461a      	mov	r2, r3
 80078b4:	f107 0314 	add.w	r3, r7, #20
 80078b8:	4611      	mov	r1, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fbd2 	bl	8006064 <chk_lock>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	f003 031c 	and.w	r3, r3, #28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d07f      	beq.n	80079d0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80078d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d017      	beq.n	8007908 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80078d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d10e      	bne.n	80078fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80078e0:	f7fe fc1c 	bl	800611c <enq_lock>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d006      	beq.n	80078f8 <f_open+0xc8>
 80078ea:	f107 0314 	add.w	r3, r7, #20
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff fb03 	bl	8006efa <dir_register>
 80078f4:	4603      	mov	r3, r0
 80078f6:	e000      	b.n	80078fa <f_open+0xca>
 80078f8:	2312      	movs	r3, #18
 80078fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	f043 0308 	orr.w	r3, r3, #8
 8007904:	71fb      	strb	r3, [r7, #7]
 8007906:	e010      	b.n	800792a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007908:	7ebb      	ldrb	r3, [r7, #26]
 800790a:	f003 0311 	and.w	r3, r3, #17
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <f_open+0xea>
					res = FR_DENIED;
 8007912:	2307      	movs	r3, #7
 8007914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007918:	e007      	b.n	800792a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <f_open+0xfa>
 8007924:	2308      	movs	r3, #8
 8007926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800792a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800792e:	2b00      	cmp	r3, #0
 8007930:	d168      	bne.n	8007a04 <f_open+0x1d4>
 8007932:	79fb      	ldrb	r3, [r7, #7]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d063      	beq.n	8007a04 <f_open+0x1d4>
				dw = GET_FATTIME();
 800793c:	f7fd fcb6 	bl	80052ac <get_fattime>
 8007940:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	330e      	adds	r3, #14
 8007946:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fae1 	bl	8005f10 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	3316      	adds	r3, #22
 8007952:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fadb 	bl	8005f10 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	330b      	adds	r3, #11
 800795e:	2220      	movs	r2, #32
 8007960:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fa32 	bl	8006dd2 <ld_clust>
 800796e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007974:	2200      	movs	r2, #0
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff fa4a 	bl	8006e10 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797e:	331c      	adds	r3, #28
 8007980:	2100      	movs	r1, #0
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fac4 	bl	8005f10 <st_dword>
					fs->wflag = 1;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2201      	movs	r2, #1
 800798c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800798e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d037      	beq.n	8007a04 <f_open+0x1d4>
						dw = fs->winsect;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800799a:	f107 0314 	add.w	r3, r7, #20
 800799e:	2200      	movs	r2, #0
 80079a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe ff5d 	bl	8006862 <remove_chain>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80079ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d126      	bne.n	8007a04 <f_open+0x1d4>
							res = move_window(fs, dw);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fd02 	bl	80063c4 <move_window>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079ca:	3a01      	subs	r2, #1
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	e019      	b.n	8007a04 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80079d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d115      	bne.n	8007a04 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80079d8:	7ebb      	ldrb	r3, [r7, #26]
 80079da:	f003 0310 	and.w	r3, r3, #16
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <f_open+0x1ba>
					res = FR_NO_FILE;
 80079e2:	2304      	movs	r3, #4
 80079e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80079e8:	e00c      	b.n	8007a04 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80079ea:	79fb      	ldrb	r3, [r7, #7]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d007      	beq.n	8007a04 <f_open+0x1d4>
 80079f4:	7ebb      	ldrb	r3, [r7, #26]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <f_open+0x1d4>
						res = FR_DENIED;
 80079fe:	2307      	movs	r3, #7
 8007a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d128      	bne.n	8007a5e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	f003 0308 	and.w	r3, r3, #8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a1c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	f023 0301 	bic.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bf14      	ite	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	2300      	moveq	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	f107 0314 	add.w	r3, r7, #20
 8007a42:	4611      	mov	r1, r2
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe fb8b 	bl	8006160 <inc_lock>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <f_open+0x22e>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f040 8095 	bne.w	8007b92 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff f9af 	bl	8006dd2 <ld_clust>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	331c      	adds	r3, #28
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fa08 	bl	8005e94 <ld_dword>
 8007a84:	4602      	mov	r2, r0
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	88da      	ldrh	r2, [r3, #6]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	79fa      	ldrb	r2, [r7, #7]
 8007aa2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3330      	adds	r3, #48	; 0x30
 8007aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fe fa72 	bl	8005faa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d060      	beq.n	8007b92 <f_open+0x362>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d05c      	beq.n	8007b92 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68da      	ldr	r2, [r3, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	895b      	ldrh	r3, [r3, #10]
 8007ae4:	025b      	lsls	r3, r3, #9
 8007ae6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	657b      	str	r3, [r7, #84]	; 0x54
 8007af4:	e016      	b.n	8007b24 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fd1d 	bl	800653a <get_fat>
 8007b00:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d802      	bhi.n	8007b0e <f_open+0x2de>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d102      	bne.n	8007b1c <f_open+0x2ec>
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	657b      	str	r3, [r7, #84]	; 0x54
 8007b24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <f_open+0x304>
 8007b2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d8e0      	bhi.n	8007af6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d127      	bne.n	8007b92 <f_open+0x362>
 8007b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d022      	beq.n	8007b92 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe fcd3 	bl	80064fc <clust2sect>
 8007b56:	6478      	str	r0, [r7, #68]	; 0x44
 8007b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d103      	bne.n	8007b66 <f_open+0x336>
						res = FR_INT_ERR;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007b64:	e015      	b.n	8007b92 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b68:	0a5a      	lsrs	r2, r3, #9
 8007b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b6c:	441a      	add	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	7858      	ldrb	r0, [r3, #1]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6a1a      	ldr	r2, [r3, #32]
 8007b80:	2301      	movs	r3, #1
 8007b82:	f7fe f911 	bl	8005da8 <disk_read>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <f_open+0x362>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <f_open+0x370>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3760      	adds	r7, #96	; 0x60
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08e      	sub	sp, #56	; 0x38
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f107 0214 	add.w	r2, r7, #20
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff fdb3 	bl	8007738 <validate>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007bd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d107      	bne.n	8007bf0 <f_read+0x44>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	7d5b      	ldrb	r3, [r3, #21]
 8007be4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007be8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <f_read+0x4a>
 8007bf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007bf4:	e115      	b.n	8007e22 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	7d1b      	ldrb	r3, [r3, #20]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <f_read+0x5a>
 8007c02:	2307      	movs	r3, #7
 8007c04:	e10d      	b.n	8007e22 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	f240 80fe 	bls.w	8007e18 <f_read+0x26c>
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007c20:	e0fa      	b.n	8007e18 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f040 80c6 	bne.w	8007dbc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	0a5b      	lsrs	r3, r3, #9
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	8952      	ldrh	r2, [r2, #10]
 8007c3a:	3a01      	subs	r2, #1
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d12f      	bne.n	8007ca6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d103      	bne.n	8007c56 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	633b      	str	r3, [r7, #48]	; 0x30
 8007c54:	e013      	b.n	8007c7e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	4619      	mov	r1, r3
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7fe fef9 	bl	8006a5c <clmt_clust>
 8007c6a:	6338      	str	r0, [r7, #48]	; 0x30
 8007c6c:	e007      	b.n	8007c7e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	4619      	mov	r1, r3
 8007c76:	4610      	mov	r0, r2
 8007c78:	f7fe fc5f 	bl	800653a <get_fat>
 8007c7c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d804      	bhi.n	8007c8e <f_read+0xe2>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2202      	movs	r2, #2
 8007c88:	755a      	strb	r2, [r3, #21]
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e0c9      	b.n	8007e22 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d104      	bne.n	8007ca0 <f_read+0xf4>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	755a      	strb	r2, [r3, #21]
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e0c0      	b.n	8007e22 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	4619      	mov	r1, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	f7fe fc24 	bl	80064fc <clust2sect>
 8007cb4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <f_read+0x11a>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	755a      	strb	r2, [r3, #21]
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e0ad      	b.n	8007e22 <f_read+0x276>
			sect += csect;
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	4413      	add	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	0a5b      	lsrs	r3, r3, #9
 8007cd2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d039      	beq.n	8007d4e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	4413      	add	r3, r2
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	8952      	ldrh	r2, [r2, #10]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d905      	bls.n	8007cf4 <f_read+0x148>
					cc = fs->csize - csect;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	895b      	ldrh	r3, [r3, #10]
 8007cec:	461a      	mov	r2, r3
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	7858      	ldrb	r0, [r3, #1]
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cfe:	f7fe f853 	bl	8005da8 <disk_read>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <f_read+0x166>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	755a      	strb	r2, [r3, #21]
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e087      	b.n	8007e22 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	7d1b      	ldrb	r3, [r3, #20]
 8007d16:	b25b      	sxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	da14      	bge.n	8007d46 <f_read+0x19a>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a1a      	ldr	r2, [r3, #32]
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d90d      	bls.n	8007d46 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6a1a      	ldr	r2, [r3, #32]
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	025b      	lsls	r3, r3, #9
 8007d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d36:	18d0      	adds	r0, r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3330      	adds	r3, #48	; 0x30
 8007d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d40:	4619      	mov	r1, r3
 8007d42:	f7fe f911 	bl	8005f68 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	025b      	lsls	r3, r3, #9
 8007d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007d4c:	e050      	b.n	8007df0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d02e      	beq.n	8007db6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	7d1b      	ldrb	r3, [r3, #20]
 8007d5c:	b25b      	sxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	da18      	bge.n	8007d94 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	7858      	ldrb	r0, [r3, #1]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a1a      	ldr	r2, [r3, #32]
 8007d70:	2301      	movs	r3, #1
 8007d72:	f7fe f839 	bl	8005de8 <disk_write>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <f_read+0x1da>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	755a      	strb	r2, [r3, #21]
 8007d82:	2301      	movs	r3, #1
 8007d84:	e04d      	b.n	8007e22 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	7d1b      	ldrb	r3, [r3, #20]
 8007d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	7858      	ldrb	r0, [r3, #1]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d9e:	2301      	movs	r3, #1
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	f7fe f801 	bl	8005da8 <disk_read>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <f_read+0x20a>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	755a      	strb	r2, [r3, #21]
 8007db2:	2301      	movs	r3, #1
 8007db4:	e035      	b.n	8007e22 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d901      	bls.n	8007dd6 <f_read+0x22a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de4:	4413      	add	r3, r2
 8007de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de8:	4619      	mov	r1, r3
 8007dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dec:	f7fe f8bc 	bl	8005f68 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	4413      	add	r3, r2
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	441a      	add	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	619a      	str	r2, [r3, #24]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	441a      	add	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f47f af01 	bne.w	8007c22 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3738      	adds	r7, #56	; 0x38
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f107 0208 	add.w	r2, r7, #8
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff fc7c 	bl	8007738 <validate>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d168      	bne.n	8007f1c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	7d1b      	ldrb	r3, [r3, #20]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d062      	beq.n	8007f1c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	7d1b      	ldrb	r3, [r3, #20]
 8007e5a:	b25b      	sxtb	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	da15      	bge.n	8007e8c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	7858      	ldrb	r0, [r3, #1]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1a      	ldr	r2, [r3, #32]
 8007e6e:	2301      	movs	r3, #1
 8007e70:	f7fd ffba 	bl	8005de8 <disk_write>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <f_sync+0x54>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e04f      	b.n	8007f1e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	7d1b      	ldrb	r3, [r3, #20]
 8007e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007e8c:	f7fd fa0e 	bl	80052ac <get_fattime>
 8007e90:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	f7fe fa92 	bl	80063c4 <move_window>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d138      	bne.n	8007f1c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	330b      	adds	r3, #11
 8007eb4:	781a      	ldrb	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	330b      	adds	r3, #11
 8007eba:	f042 0220 	orr.w	r2, r2, #32
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	68f9      	ldr	r1, [r7, #12]
 8007ece:	f7fe ff9f 	bl	8006e10 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f103 021c 	add.w	r2, r3, #28
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f7fe f816 	bl	8005f10 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3316      	adds	r3, #22
 8007ee8:	6939      	ldr	r1, [r7, #16]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe f810 	bl	8005f10 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3312      	adds	r3, #18
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fd ffef 	bl	8005eda <st_word>
					fs->wflag = 1;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2201      	movs	r2, #1
 8007f00:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fa8b 	bl	8006420 <sync_fs>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7d1b      	ldrb	r3, [r3, #20]
 8007f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff ff7b 	bl	8007e2a <f_sync>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d118      	bne.n	8007f70 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f107 0208 	add.w	r2, r7, #8
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fbf6 	bl	8007738 <validate>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10c      	bne.n	8007f70 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe f98e 	bl	800627c <dec_lock>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b092      	sub	sp, #72	; 0x48
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007f86:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007f8a:	f107 030c 	add.w	r3, r7, #12
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff f985 	bl	80072a0 <find_volume>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f040 8099 	bne.w	80080d8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	3b02      	subs	r3, #2
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d804      	bhi.n	8007fc4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	691a      	ldr	r2, [r3, #16]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	e089      	b.n	80080d8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d128      	bne.n	8008022 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007fd8:	f107 0314 	add.w	r3, r7, #20
 8007fdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe faab 	bl	800653a <get_fat>
 8007fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fec:	d103      	bne.n	8007ff6 <f_getfree+0x7c>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ff4:	e063      	b.n	80080be <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d103      	bne.n	8008004 <f_getfree+0x8a>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008002:	e05c      	b.n	80080be <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <f_getfree+0x96>
 800800a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800800c:	3301      	adds	r3, #1
 800800e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008012:	3301      	adds	r3, #1
 8008014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800801c:	429a      	cmp	r2, r3
 800801e:	d3db      	bcc.n	8007fd8 <f_getfree+0x5e>
 8008020:	e04d      	b.n	80080be <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
 8008032:	2300      	movs	r3, #0
 8008034:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008038:	2b00      	cmp	r3, #0
 800803a:	d113      	bne.n	8008064 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800803c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	63ba      	str	r2, [r7, #56]	; 0x38
 8008044:	4619      	mov	r1, r3
 8008046:	f7fe f9bd 	bl	80063c4 <move_window>
 800804a:	4603      	mov	r3, r0
 800804c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008050:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008054:	2b00      	cmp	r3, #0
 8008056:	d131      	bne.n	80080bc <f_getfree+0x142>
							p = fs->win;
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	3330      	adds	r3, #48	; 0x30
 800805c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800805e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008062:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d10f      	bne.n	800808c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800806c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800806e:	f7fd fef9 	bl	8005e64 <ld_word>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <f_getfree+0x104>
 8008078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807a:	3301      	adds	r3, #1
 800807c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	3302      	adds	r3, #2
 8008082:	633b      	str	r3, [r7, #48]	; 0x30
 8008084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008086:	3b02      	subs	r3, #2
 8008088:	637b      	str	r3, [r7, #52]	; 0x34
 800808a:	e010      	b.n	80080ae <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800808c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800808e:	f7fd ff01 	bl	8005e94 <ld_dword>
 8008092:	4603      	mov	r3, r0
 8008094:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <f_getfree+0x128>
 800809c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800809e:	3301      	adds	r3, #1
 80080a0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	3304      	adds	r3, #4
 80080a6:	633b      	str	r3, [r7, #48]	; 0x30
 80080a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080aa:	3b04      	subs	r3, #4
 80080ac:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80080ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b0:	3b01      	subs	r3, #1
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1bd      	bne.n	8008036 <f_getfree+0xbc>
 80080ba:	e000      	b.n	80080be <f_getfree+0x144>
							if (res != FR_OK) break;
 80080bc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080c2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080c8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	791a      	ldrb	r2, [r3, #4]
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	f042 0201 	orr.w	r2, r2, #1
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80080d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3748      	adds	r7, #72	; 0x48
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80080f2:	2301      	movs	r3, #1
 80080f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80080fa:	4b1f      	ldr	r3, [pc, #124]	; (8008178 <FATFS_LinkDriverEx+0x94>)
 80080fc:	7a5b      	ldrb	r3, [r3, #9]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d131      	bne.n	8008168 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008104:	4b1c      	ldr	r3, [pc, #112]	; (8008178 <FATFS_LinkDriverEx+0x94>)
 8008106:	7a5b      	ldrb	r3, [r3, #9]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	461a      	mov	r2, r3
 800810c:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <FATFS_LinkDriverEx+0x94>)
 800810e:	2100      	movs	r1, #0
 8008110:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008112:	4b19      	ldr	r3, [pc, #100]	; (8008178 <FATFS_LinkDriverEx+0x94>)
 8008114:	7a5b      	ldrb	r3, [r3, #9]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	4a17      	ldr	r2, [pc, #92]	; (8008178 <FATFS_LinkDriverEx+0x94>)
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <FATFS_LinkDriverEx+0x94>)
 8008124:	7a5b      	ldrb	r3, [r3, #9]
 8008126:	b2db      	uxtb	r3, r3
 8008128:	461a      	mov	r2, r3
 800812a:	4b13      	ldr	r3, [pc, #76]	; (8008178 <FATFS_LinkDriverEx+0x94>)
 800812c:	4413      	add	r3, r2
 800812e:	79fa      	ldrb	r2, [r7, #7]
 8008130:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008132:	4b11      	ldr	r3, [pc, #68]	; (8008178 <FATFS_LinkDriverEx+0x94>)
 8008134:	7a5b      	ldrb	r3, [r3, #9]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	b2d1      	uxtb	r1, r2
 800813c:	4a0e      	ldr	r2, [pc, #56]	; (8008178 <FATFS_LinkDriverEx+0x94>)
 800813e:	7251      	strb	r1, [r2, #9]
 8008140:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008142:	7dbb      	ldrb	r3, [r7, #22]
 8008144:	3330      	adds	r3, #48	; 0x30
 8008146:	b2da      	uxtb	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	3301      	adds	r3, #1
 8008150:	223a      	movs	r2, #58	; 0x3a
 8008152:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	3302      	adds	r3, #2
 8008158:	222f      	movs	r2, #47	; 0x2f
 800815a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	3303      	adds	r3, #3
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008168:	7dfb      	ldrb	r3, [r7, #23]
}
 800816a:	4618      	mov	r0, r3
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	200137d0 	.word	0x200137d0

0800817c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008186:	2200      	movs	r2, #0
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff ffaa 	bl	80080e4 <FATFS_LinkDriverEx>
 8008190:	4603      	mov	r3, r0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <atoi>:
 800819a:	220a      	movs	r2, #10
 800819c:	2100      	movs	r1, #0
 800819e:	f000 b8e7 	b.w	8008370 <strtol>
	...

080081a4 <__errno>:
 80081a4:	4b01      	ldr	r3, [pc, #4]	; (80081ac <__errno+0x8>)
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000024 	.word	0x20000024

080081b0 <__libc_init_array>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	4d0d      	ldr	r5, [pc, #52]	; (80081e8 <__libc_init_array+0x38>)
 80081b4:	4c0d      	ldr	r4, [pc, #52]	; (80081ec <__libc_init_array+0x3c>)
 80081b6:	1b64      	subs	r4, r4, r5
 80081b8:	10a4      	asrs	r4, r4, #2
 80081ba:	2600      	movs	r6, #0
 80081bc:	42a6      	cmp	r6, r4
 80081be:	d109      	bne.n	80081d4 <__libc_init_array+0x24>
 80081c0:	4d0b      	ldr	r5, [pc, #44]	; (80081f0 <__libc_init_array+0x40>)
 80081c2:	4c0c      	ldr	r4, [pc, #48]	; (80081f4 <__libc_init_array+0x44>)
 80081c4:	f001 f896 	bl	80092f4 <_init>
 80081c8:	1b64      	subs	r4, r4, r5
 80081ca:	10a4      	asrs	r4, r4, #2
 80081cc:	2600      	movs	r6, #0
 80081ce:	42a6      	cmp	r6, r4
 80081d0:	d105      	bne.n	80081de <__libc_init_array+0x2e>
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d8:	4798      	blx	r3
 80081da:	3601      	adds	r6, #1
 80081dc:	e7ee      	b.n	80081bc <__libc_init_array+0xc>
 80081de:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e2:	4798      	blx	r3
 80081e4:	3601      	adds	r6, #1
 80081e6:	e7f2      	b.n	80081ce <__libc_init_array+0x1e>
 80081e8:	08009b04 	.word	0x08009b04
 80081ec:	08009b04 	.word	0x08009b04
 80081f0:	08009b04 	.word	0x08009b04
 80081f4:	08009b08 	.word	0x08009b08

080081f8 <__itoa>:
 80081f8:	1e93      	subs	r3, r2, #2
 80081fa:	2b22      	cmp	r3, #34	; 0x22
 80081fc:	b510      	push	{r4, lr}
 80081fe:	460c      	mov	r4, r1
 8008200:	d904      	bls.n	800820c <__itoa+0x14>
 8008202:	2300      	movs	r3, #0
 8008204:	700b      	strb	r3, [r1, #0]
 8008206:	461c      	mov	r4, r3
 8008208:	4620      	mov	r0, r4
 800820a:	bd10      	pop	{r4, pc}
 800820c:	2a0a      	cmp	r2, #10
 800820e:	d109      	bne.n	8008224 <__itoa+0x2c>
 8008210:	2800      	cmp	r0, #0
 8008212:	da07      	bge.n	8008224 <__itoa+0x2c>
 8008214:	232d      	movs	r3, #45	; 0x2d
 8008216:	700b      	strb	r3, [r1, #0]
 8008218:	4240      	negs	r0, r0
 800821a:	2101      	movs	r1, #1
 800821c:	4421      	add	r1, r4
 800821e:	f000 f8b1 	bl	8008384 <__utoa>
 8008222:	e7f1      	b.n	8008208 <__itoa+0x10>
 8008224:	2100      	movs	r1, #0
 8008226:	e7f9      	b.n	800821c <__itoa+0x24>

08008228 <itoa>:
 8008228:	f7ff bfe6 	b.w	80081f8 <__itoa>

0800822c <memset>:
 800822c:	4402      	add	r2, r0
 800822e:	4603      	mov	r3, r0
 8008230:	4293      	cmp	r3, r2
 8008232:	d100      	bne.n	8008236 <memset+0xa>
 8008234:	4770      	bx	lr
 8008236:	f803 1b01 	strb.w	r1, [r3], #1
 800823a:	e7f9      	b.n	8008230 <memset+0x4>

0800823c <iprintf>:
 800823c:	b40f      	push	{r0, r1, r2, r3}
 800823e:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <iprintf+0x2c>)
 8008240:	b513      	push	{r0, r1, r4, lr}
 8008242:	681c      	ldr	r4, [r3, #0]
 8008244:	b124      	cbz	r4, 8008250 <iprintf+0x14>
 8008246:	69a3      	ldr	r3, [r4, #24]
 8008248:	b913      	cbnz	r3, 8008250 <iprintf+0x14>
 800824a:	4620      	mov	r0, r4
 800824c:	f000 f934 	bl	80084b8 <__sinit>
 8008250:	ab05      	add	r3, sp, #20
 8008252:	9a04      	ldr	r2, [sp, #16]
 8008254:	68a1      	ldr	r1, [r4, #8]
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	4620      	mov	r0, r4
 800825a:	f000 fa8b 	bl	8008774 <_vfiprintf_r>
 800825e:	b002      	add	sp, #8
 8008260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008264:	b004      	add	sp, #16
 8008266:	4770      	bx	lr
 8008268:	20000024 	.word	0x20000024

0800826c <_strtol_l.constprop.0>:
 800826c:	2b01      	cmp	r3, #1
 800826e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008272:	d001      	beq.n	8008278 <_strtol_l.constprop.0+0xc>
 8008274:	2b24      	cmp	r3, #36	; 0x24
 8008276:	d906      	bls.n	8008286 <_strtol_l.constprop.0+0x1a>
 8008278:	f7ff ff94 	bl	80081a4 <__errno>
 800827c:	2316      	movs	r3, #22
 800827e:	6003      	str	r3, [r0, #0]
 8008280:	2000      	movs	r0, #0
 8008282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008286:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800836c <_strtol_l.constprop.0+0x100>
 800828a:	460d      	mov	r5, r1
 800828c:	462e      	mov	r6, r5
 800828e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008292:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008296:	f017 0708 	ands.w	r7, r7, #8
 800829a:	d1f7      	bne.n	800828c <_strtol_l.constprop.0+0x20>
 800829c:	2c2d      	cmp	r4, #45	; 0x2d
 800829e:	d132      	bne.n	8008306 <_strtol_l.constprop.0+0x9a>
 80082a0:	782c      	ldrb	r4, [r5, #0]
 80082a2:	2701      	movs	r7, #1
 80082a4:	1cb5      	adds	r5, r6, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d05b      	beq.n	8008362 <_strtol_l.constprop.0+0xf6>
 80082aa:	2b10      	cmp	r3, #16
 80082ac:	d109      	bne.n	80082c2 <_strtol_l.constprop.0+0x56>
 80082ae:	2c30      	cmp	r4, #48	; 0x30
 80082b0:	d107      	bne.n	80082c2 <_strtol_l.constprop.0+0x56>
 80082b2:	782c      	ldrb	r4, [r5, #0]
 80082b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80082b8:	2c58      	cmp	r4, #88	; 0x58
 80082ba:	d14d      	bne.n	8008358 <_strtol_l.constprop.0+0xec>
 80082bc:	786c      	ldrb	r4, [r5, #1]
 80082be:	2310      	movs	r3, #16
 80082c0:	3502      	adds	r5, #2
 80082c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80082c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80082ca:	f04f 0c00 	mov.w	ip, #0
 80082ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80082d2:	4666      	mov	r6, ip
 80082d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80082d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80082dc:	f1be 0f09 	cmp.w	lr, #9
 80082e0:	d816      	bhi.n	8008310 <_strtol_l.constprop.0+0xa4>
 80082e2:	4674      	mov	r4, lr
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	dd24      	ble.n	8008332 <_strtol_l.constprop.0+0xc6>
 80082e8:	f1bc 0f00 	cmp.w	ip, #0
 80082ec:	db1e      	blt.n	800832c <_strtol_l.constprop.0+0xc0>
 80082ee:	45b1      	cmp	r9, r6
 80082f0:	d31c      	bcc.n	800832c <_strtol_l.constprop.0+0xc0>
 80082f2:	d101      	bne.n	80082f8 <_strtol_l.constprop.0+0x8c>
 80082f4:	45a2      	cmp	sl, r4
 80082f6:	db19      	blt.n	800832c <_strtol_l.constprop.0+0xc0>
 80082f8:	fb06 4603 	mla	r6, r6, r3, r4
 80082fc:	f04f 0c01 	mov.w	ip, #1
 8008300:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008304:	e7e8      	b.n	80082d8 <_strtol_l.constprop.0+0x6c>
 8008306:	2c2b      	cmp	r4, #43	; 0x2b
 8008308:	bf04      	itt	eq
 800830a:	782c      	ldrbeq	r4, [r5, #0]
 800830c:	1cb5      	addeq	r5, r6, #2
 800830e:	e7ca      	b.n	80082a6 <_strtol_l.constprop.0+0x3a>
 8008310:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008314:	f1be 0f19 	cmp.w	lr, #25
 8008318:	d801      	bhi.n	800831e <_strtol_l.constprop.0+0xb2>
 800831a:	3c37      	subs	r4, #55	; 0x37
 800831c:	e7e2      	b.n	80082e4 <_strtol_l.constprop.0+0x78>
 800831e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008322:	f1be 0f19 	cmp.w	lr, #25
 8008326:	d804      	bhi.n	8008332 <_strtol_l.constprop.0+0xc6>
 8008328:	3c57      	subs	r4, #87	; 0x57
 800832a:	e7db      	b.n	80082e4 <_strtol_l.constprop.0+0x78>
 800832c:	f04f 3cff 	mov.w	ip, #4294967295
 8008330:	e7e6      	b.n	8008300 <_strtol_l.constprop.0+0x94>
 8008332:	f1bc 0f00 	cmp.w	ip, #0
 8008336:	da05      	bge.n	8008344 <_strtol_l.constprop.0+0xd8>
 8008338:	2322      	movs	r3, #34	; 0x22
 800833a:	6003      	str	r3, [r0, #0]
 800833c:	4646      	mov	r6, r8
 800833e:	b942      	cbnz	r2, 8008352 <_strtol_l.constprop.0+0xe6>
 8008340:	4630      	mov	r0, r6
 8008342:	e79e      	b.n	8008282 <_strtol_l.constprop.0+0x16>
 8008344:	b107      	cbz	r7, 8008348 <_strtol_l.constprop.0+0xdc>
 8008346:	4276      	negs	r6, r6
 8008348:	2a00      	cmp	r2, #0
 800834a:	d0f9      	beq.n	8008340 <_strtol_l.constprop.0+0xd4>
 800834c:	f1bc 0f00 	cmp.w	ip, #0
 8008350:	d000      	beq.n	8008354 <_strtol_l.constprop.0+0xe8>
 8008352:	1e69      	subs	r1, r5, #1
 8008354:	6011      	str	r1, [r2, #0]
 8008356:	e7f3      	b.n	8008340 <_strtol_l.constprop.0+0xd4>
 8008358:	2430      	movs	r4, #48	; 0x30
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1b1      	bne.n	80082c2 <_strtol_l.constprop.0+0x56>
 800835e:	2308      	movs	r3, #8
 8008360:	e7af      	b.n	80082c2 <_strtol_l.constprop.0+0x56>
 8008362:	2c30      	cmp	r4, #48	; 0x30
 8008364:	d0a5      	beq.n	80082b2 <_strtol_l.constprop.0+0x46>
 8008366:	230a      	movs	r3, #10
 8008368:	e7ab      	b.n	80082c2 <_strtol_l.constprop.0+0x56>
 800836a:	bf00      	nop
 800836c:	08009966 	.word	0x08009966

08008370 <strtol>:
 8008370:	4613      	mov	r3, r2
 8008372:	460a      	mov	r2, r1
 8008374:	4601      	mov	r1, r0
 8008376:	4802      	ldr	r0, [pc, #8]	; (8008380 <strtol+0x10>)
 8008378:	6800      	ldr	r0, [r0, #0]
 800837a:	f7ff bf77 	b.w	800826c <_strtol_l.constprop.0>
 800837e:	bf00      	nop
 8008380:	20000024 	.word	0x20000024

08008384 <__utoa>:
 8008384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008386:	4c1f      	ldr	r4, [pc, #124]	; (8008404 <__utoa+0x80>)
 8008388:	b08b      	sub	sp, #44	; 0x2c
 800838a:	4605      	mov	r5, r0
 800838c:	460b      	mov	r3, r1
 800838e:	466e      	mov	r6, sp
 8008390:	f104 0c20 	add.w	ip, r4, #32
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	6861      	ldr	r1, [r4, #4]
 8008398:	4637      	mov	r7, r6
 800839a:	c703      	stmia	r7!, {r0, r1}
 800839c:	3408      	adds	r4, #8
 800839e:	4564      	cmp	r4, ip
 80083a0:	463e      	mov	r6, r7
 80083a2:	d1f7      	bne.n	8008394 <__utoa+0x10>
 80083a4:	7921      	ldrb	r1, [r4, #4]
 80083a6:	7139      	strb	r1, [r7, #4]
 80083a8:	1e91      	subs	r1, r2, #2
 80083aa:	6820      	ldr	r0, [r4, #0]
 80083ac:	6038      	str	r0, [r7, #0]
 80083ae:	2922      	cmp	r1, #34	; 0x22
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	d904      	bls.n	80083c0 <__utoa+0x3c>
 80083b6:	7019      	strb	r1, [r3, #0]
 80083b8:	460b      	mov	r3, r1
 80083ba:	4618      	mov	r0, r3
 80083bc:	b00b      	add	sp, #44	; 0x2c
 80083be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c0:	1e58      	subs	r0, r3, #1
 80083c2:	4684      	mov	ip, r0
 80083c4:	fbb5 f7f2 	udiv	r7, r5, r2
 80083c8:	fb02 5617 	mls	r6, r2, r7, r5
 80083cc:	3628      	adds	r6, #40	; 0x28
 80083ce:	446e      	add	r6, sp
 80083d0:	460c      	mov	r4, r1
 80083d2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80083d6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80083da:	462e      	mov	r6, r5
 80083dc:	42b2      	cmp	r2, r6
 80083de:	f101 0101 	add.w	r1, r1, #1
 80083e2:	463d      	mov	r5, r7
 80083e4:	d9ee      	bls.n	80083c4 <__utoa+0x40>
 80083e6:	2200      	movs	r2, #0
 80083e8:	545a      	strb	r2, [r3, r1]
 80083ea:	1919      	adds	r1, r3, r4
 80083ec:	1aa5      	subs	r5, r4, r2
 80083ee:	42aa      	cmp	r2, r5
 80083f0:	dae3      	bge.n	80083ba <__utoa+0x36>
 80083f2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80083f6:	780e      	ldrb	r6, [r1, #0]
 80083f8:	7006      	strb	r6, [r0, #0]
 80083fa:	3201      	adds	r2, #1
 80083fc:	f801 5901 	strb.w	r5, [r1], #-1
 8008400:	e7f4      	b.n	80083ec <__utoa+0x68>
 8008402:	bf00      	nop
 8008404:	08009940 	.word	0x08009940

08008408 <std>:
 8008408:	2300      	movs	r3, #0
 800840a:	b510      	push	{r4, lr}
 800840c:	4604      	mov	r4, r0
 800840e:	e9c0 3300 	strd	r3, r3, [r0]
 8008412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008416:	6083      	str	r3, [r0, #8]
 8008418:	8181      	strh	r1, [r0, #12]
 800841a:	6643      	str	r3, [r0, #100]	; 0x64
 800841c:	81c2      	strh	r2, [r0, #14]
 800841e:	6183      	str	r3, [r0, #24]
 8008420:	4619      	mov	r1, r3
 8008422:	2208      	movs	r2, #8
 8008424:	305c      	adds	r0, #92	; 0x5c
 8008426:	f7ff ff01 	bl	800822c <memset>
 800842a:	4b05      	ldr	r3, [pc, #20]	; (8008440 <std+0x38>)
 800842c:	6263      	str	r3, [r4, #36]	; 0x24
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <std+0x3c>)
 8008430:	62a3      	str	r3, [r4, #40]	; 0x28
 8008432:	4b05      	ldr	r3, [pc, #20]	; (8008448 <std+0x40>)
 8008434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008436:	4b05      	ldr	r3, [pc, #20]	; (800844c <std+0x44>)
 8008438:	6224      	str	r4, [r4, #32]
 800843a:	6323      	str	r3, [r4, #48]	; 0x30
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	08008d1d 	.word	0x08008d1d
 8008444:	08008d3f 	.word	0x08008d3f
 8008448:	08008d77 	.word	0x08008d77
 800844c:	08008d9b 	.word	0x08008d9b

08008450 <_cleanup_r>:
 8008450:	4901      	ldr	r1, [pc, #4]	; (8008458 <_cleanup_r+0x8>)
 8008452:	f000 b8af 	b.w	80085b4 <_fwalk_reent>
 8008456:	bf00      	nop
 8008458:	08009075 	.word	0x08009075

0800845c <__sfmoreglue>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	2268      	movs	r2, #104	; 0x68
 8008460:	1e4d      	subs	r5, r1, #1
 8008462:	4355      	muls	r5, r2
 8008464:	460e      	mov	r6, r1
 8008466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800846a:	f000 f8e5 	bl	8008638 <_malloc_r>
 800846e:	4604      	mov	r4, r0
 8008470:	b140      	cbz	r0, 8008484 <__sfmoreglue+0x28>
 8008472:	2100      	movs	r1, #0
 8008474:	e9c0 1600 	strd	r1, r6, [r0]
 8008478:	300c      	adds	r0, #12
 800847a:	60a0      	str	r0, [r4, #8]
 800847c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008480:	f7ff fed4 	bl	800822c <memset>
 8008484:	4620      	mov	r0, r4
 8008486:	bd70      	pop	{r4, r5, r6, pc}

08008488 <__sfp_lock_acquire>:
 8008488:	4801      	ldr	r0, [pc, #4]	; (8008490 <__sfp_lock_acquire+0x8>)
 800848a:	f000 b8b3 	b.w	80085f4 <__retarget_lock_acquire_recursive>
 800848e:	bf00      	nop
 8008490:	200137dd 	.word	0x200137dd

08008494 <__sfp_lock_release>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__sfp_lock_release+0x8>)
 8008496:	f000 b8ae 	b.w	80085f6 <__retarget_lock_release_recursive>
 800849a:	bf00      	nop
 800849c:	200137dd 	.word	0x200137dd

080084a0 <__sinit_lock_acquire>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__sinit_lock_acquire+0x8>)
 80084a2:	f000 b8a7 	b.w	80085f4 <__retarget_lock_acquire_recursive>
 80084a6:	bf00      	nop
 80084a8:	200137de 	.word	0x200137de

080084ac <__sinit_lock_release>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__sinit_lock_release+0x8>)
 80084ae:	f000 b8a2 	b.w	80085f6 <__retarget_lock_release_recursive>
 80084b2:	bf00      	nop
 80084b4:	200137de 	.word	0x200137de

080084b8 <__sinit>:
 80084b8:	b510      	push	{r4, lr}
 80084ba:	4604      	mov	r4, r0
 80084bc:	f7ff fff0 	bl	80084a0 <__sinit_lock_acquire>
 80084c0:	69a3      	ldr	r3, [r4, #24]
 80084c2:	b11b      	cbz	r3, 80084cc <__sinit+0x14>
 80084c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c8:	f7ff bff0 	b.w	80084ac <__sinit_lock_release>
 80084cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084d0:	6523      	str	r3, [r4, #80]	; 0x50
 80084d2:	4b13      	ldr	r3, [pc, #76]	; (8008520 <__sinit+0x68>)
 80084d4:	4a13      	ldr	r2, [pc, #76]	; (8008524 <__sinit+0x6c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80084da:	42a3      	cmp	r3, r4
 80084dc:	bf04      	itt	eq
 80084de:	2301      	moveq	r3, #1
 80084e0:	61a3      	streq	r3, [r4, #24]
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 f820 	bl	8008528 <__sfp>
 80084e8:	6060      	str	r0, [r4, #4]
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 f81c 	bl	8008528 <__sfp>
 80084f0:	60a0      	str	r0, [r4, #8]
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f818 	bl	8008528 <__sfp>
 80084f8:	2200      	movs	r2, #0
 80084fa:	60e0      	str	r0, [r4, #12]
 80084fc:	2104      	movs	r1, #4
 80084fe:	6860      	ldr	r0, [r4, #4]
 8008500:	f7ff ff82 	bl	8008408 <std>
 8008504:	68a0      	ldr	r0, [r4, #8]
 8008506:	2201      	movs	r2, #1
 8008508:	2109      	movs	r1, #9
 800850a:	f7ff ff7d 	bl	8008408 <std>
 800850e:	68e0      	ldr	r0, [r4, #12]
 8008510:	2202      	movs	r2, #2
 8008512:	2112      	movs	r1, #18
 8008514:	f7ff ff78 	bl	8008408 <std>
 8008518:	2301      	movs	r3, #1
 800851a:	61a3      	str	r3, [r4, #24]
 800851c:	e7d2      	b.n	80084c4 <__sinit+0xc>
 800851e:	bf00      	nop
 8008520:	0800993c 	.word	0x0800993c
 8008524:	08008451 	.word	0x08008451

08008528 <__sfp>:
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	4607      	mov	r7, r0
 800852c:	f7ff ffac 	bl	8008488 <__sfp_lock_acquire>
 8008530:	4b1e      	ldr	r3, [pc, #120]	; (80085ac <__sfp+0x84>)
 8008532:	681e      	ldr	r6, [r3, #0]
 8008534:	69b3      	ldr	r3, [r6, #24]
 8008536:	b913      	cbnz	r3, 800853e <__sfp+0x16>
 8008538:	4630      	mov	r0, r6
 800853a:	f7ff ffbd 	bl	80084b8 <__sinit>
 800853e:	3648      	adds	r6, #72	; 0x48
 8008540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008544:	3b01      	subs	r3, #1
 8008546:	d503      	bpl.n	8008550 <__sfp+0x28>
 8008548:	6833      	ldr	r3, [r6, #0]
 800854a:	b30b      	cbz	r3, 8008590 <__sfp+0x68>
 800854c:	6836      	ldr	r6, [r6, #0]
 800854e:	e7f7      	b.n	8008540 <__sfp+0x18>
 8008550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008554:	b9d5      	cbnz	r5, 800858c <__sfp+0x64>
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <__sfp+0x88>)
 8008558:	60e3      	str	r3, [r4, #12]
 800855a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800855e:	6665      	str	r5, [r4, #100]	; 0x64
 8008560:	f000 f847 	bl	80085f2 <__retarget_lock_init_recursive>
 8008564:	f7ff ff96 	bl	8008494 <__sfp_lock_release>
 8008568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800856c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008570:	6025      	str	r5, [r4, #0]
 8008572:	61a5      	str	r5, [r4, #24]
 8008574:	2208      	movs	r2, #8
 8008576:	4629      	mov	r1, r5
 8008578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800857c:	f7ff fe56 	bl	800822c <memset>
 8008580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008588:	4620      	mov	r0, r4
 800858a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858c:	3468      	adds	r4, #104	; 0x68
 800858e:	e7d9      	b.n	8008544 <__sfp+0x1c>
 8008590:	2104      	movs	r1, #4
 8008592:	4638      	mov	r0, r7
 8008594:	f7ff ff62 	bl	800845c <__sfmoreglue>
 8008598:	4604      	mov	r4, r0
 800859a:	6030      	str	r0, [r6, #0]
 800859c:	2800      	cmp	r0, #0
 800859e:	d1d5      	bne.n	800854c <__sfp+0x24>
 80085a0:	f7ff ff78 	bl	8008494 <__sfp_lock_release>
 80085a4:	230c      	movs	r3, #12
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	e7ee      	b.n	8008588 <__sfp+0x60>
 80085aa:	bf00      	nop
 80085ac:	0800993c 	.word	0x0800993c
 80085b0:	ffff0001 	.word	0xffff0001

080085b4 <_fwalk_reent>:
 80085b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	4606      	mov	r6, r0
 80085ba:	4688      	mov	r8, r1
 80085bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085c0:	2700      	movs	r7, #0
 80085c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085c6:	f1b9 0901 	subs.w	r9, r9, #1
 80085ca:	d505      	bpl.n	80085d8 <_fwalk_reent+0x24>
 80085cc:	6824      	ldr	r4, [r4, #0]
 80085ce:	2c00      	cmp	r4, #0
 80085d0:	d1f7      	bne.n	80085c2 <_fwalk_reent+0xe>
 80085d2:	4638      	mov	r0, r7
 80085d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d8:	89ab      	ldrh	r3, [r5, #12]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d907      	bls.n	80085ee <_fwalk_reent+0x3a>
 80085de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085e2:	3301      	adds	r3, #1
 80085e4:	d003      	beq.n	80085ee <_fwalk_reent+0x3a>
 80085e6:	4629      	mov	r1, r5
 80085e8:	4630      	mov	r0, r6
 80085ea:	47c0      	blx	r8
 80085ec:	4307      	orrs	r7, r0
 80085ee:	3568      	adds	r5, #104	; 0x68
 80085f0:	e7e9      	b.n	80085c6 <_fwalk_reent+0x12>

080085f2 <__retarget_lock_init_recursive>:
 80085f2:	4770      	bx	lr

080085f4 <__retarget_lock_acquire_recursive>:
 80085f4:	4770      	bx	lr

080085f6 <__retarget_lock_release_recursive>:
 80085f6:	4770      	bx	lr

080085f8 <sbrk_aligned>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	4e0e      	ldr	r6, [pc, #56]	; (8008634 <sbrk_aligned+0x3c>)
 80085fc:	460c      	mov	r4, r1
 80085fe:	6831      	ldr	r1, [r6, #0]
 8008600:	4605      	mov	r5, r0
 8008602:	b911      	cbnz	r1, 800860a <sbrk_aligned+0x12>
 8008604:	f000 fb7a 	bl	8008cfc <_sbrk_r>
 8008608:	6030      	str	r0, [r6, #0]
 800860a:	4621      	mov	r1, r4
 800860c:	4628      	mov	r0, r5
 800860e:	f000 fb75 	bl	8008cfc <_sbrk_r>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	d00a      	beq.n	800862c <sbrk_aligned+0x34>
 8008616:	1cc4      	adds	r4, r0, #3
 8008618:	f024 0403 	bic.w	r4, r4, #3
 800861c:	42a0      	cmp	r0, r4
 800861e:	d007      	beq.n	8008630 <sbrk_aligned+0x38>
 8008620:	1a21      	subs	r1, r4, r0
 8008622:	4628      	mov	r0, r5
 8008624:	f000 fb6a 	bl	8008cfc <_sbrk_r>
 8008628:	3001      	adds	r0, #1
 800862a:	d101      	bne.n	8008630 <sbrk_aligned+0x38>
 800862c:	f04f 34ff 	mov.w	r4, #4294967295
 8008630:	4620      	mov	r0, r4
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	200137e4 	.word	0x200137e4

08008638 <_malloc_r>:
 8008638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863c:	1ccd      	adds	r5, r1, #3
 800863e:	f025 0503 	bic.w	r5, r5, #3
 8008642:	3508      	adds	r5, #8
 8008644:	2d0c      	cmp	r5, #12
 8008646:	bf38      	it	cc
 8008648:	250c      	movcc	r5, #12
 800864a:	2d00      	cmp	r5, #0
 800864c:	4607      	mov	r7, r0
 800864e:	db01      	blt.n	8008654 <_malloc_r+0x1c>
 8008650:	42a9      	cmp	r1, r5
 8008652:	d905      	bls.n	8008660 <_malloc_r+0x28>
 8008654:	230c      	movs	r3, #12
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	2600      	movs	r6, #0
 800865a:	4630      	mov	r0, r6
 800865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008660:	4e2e      	ldr	r6, [pc, #184]	; (800871c <_malloc_r+0xe4>)
 8008662:	f000 fdbb 	bl	80091dc <__malloc_lock>
 8008666:	6833      	ldr	r3, [r6, #0]
 8008668:	461c      	mov	r4, r3
 800866a:	bb34      	cbnz	r4, 80086ba <_malloc_r+0x82>
 800866c:	4629      	mov	r1, r5
 800866e:	4638      	mov	r0, r7
 8008670:	f7ff ffc2 	bl	80085f8 <sbrk_aligned>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	4604      	mov	r4, r0
 8008678:	d14d      	bne.n	8008716 <_malloc_r+0xde>
 800867a:	6834      	ldr	r4, [r6, #0]
 800867c:	4626      	mov	r6, r4
 800867e:	2e00      	cmp	r6, #0
 8008680:	d140      	bne.n	8008704 <_malloc_r+0xcc>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	4631      	mov	r1, r6
 8008686:	4638      	mov	r0, r7
 8008688:	eb04 0803 	add.w	r8, r4, r3
 800868c:	f000 fb36 	bl	8008cfc <_sbrk_r>
 8008690:	4580      	cmp	r8, r0
 8008692:	d13a      	bne.n	800870a <_malloc_r+0xd2>
 8008694:	6821      	ldr	r1, [r4, #0]
 8008696:	3503      	adds	r5, #3
 8008698:	1a6d      	subs	r5, r5, r1
 800869a:	f025 0503 	bic.w	r5, r5, #3
 800869e:	3508      	adds	r5, #8
 80086a0:	2d0c      	cmp	r5, #12
 80086a2:	bf38      	it	cc
 80086a4:	250c      	movcc	r5, #12
 80086a6:	4629      	mov	r1, r5
 80086a8:	4638      	mov	r0, r7
 80086aa:	f7ff ffa5 	bl	80085f8 <sbrk_aligned>
 80086ae:	3001      	adds	r0, #1
 80086b0:	d02b      	beq.n	800870a <_malloc_r+0xd2>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	442b      	add	r3, r5
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	e00e      	b.n	80086d8 <_malloc_r+0xa0>
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	1b52      	subs	r2, r2, r5
 80086be:	d41e      	bmi.n	80086fe <_malloc_r+0xc6>
 80086c0:	2a0b      	cmp	r2, #11
 80086c2:	d916      	bls.n	80086f2 <_malloc_r+0xba>
 80086c4:	1961      	adds	r1, r4, r5
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	6025      	str	r5, [r4, #0]
 80086ca:	bf18      	it	ne
 80086cc:	6059      	strne	r1, [r3, #4]
 80086ce:	6863      	ldr	r3, [r4, #4]
 80086d0:	bf08      	it	eq
 80086d2:	6031      	streq	r1, [r6, #0]
 80086d4:	5162      	str	r2, [r4, r5]
 80086d6:	604b      	str	r3, [r1, #4]
 80086d8:	4638      	mov	r0, r7
 80086da:	f104 060b 	add.w	r6, r4, #11
 80086de:	f000 fd83 	bl	80091e8 <__malloc_unlock>
 80086e2:	f026 0607 	bic.w	r6, r6, #7
 80086e6:	1d23      	adds	r3, r4, #4
 80086e8:	1af2      	subs	r2, r6, r3
 80086ea:	d0b6      	beq.n	800865a <_malloc_r+0x22>
 80086ec:	1b9b      	subs	r3, r3, r6
 80086ee:	50a3      	str	r3, [r4, r2]
 80086f0:	e7b3      	b.n	800865a <_malloc_r+0x22>
 80086f2:	6862      	ldr	r2, [r4, #4]
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	bf0c      	ite	eq
 80086f8:	6032      	streq	r2, [r6, #0]
 80086fa:	605a      	strne	r2, [r3, #4]
 80086fc:	e7ec      	b.n	80086d8 <_malloc_r+0xa0>
 80086fe:	4623      	mov	r3, r4
 8008700:	6864      	ldr	r4, [r4, #4]
 8008702:	e7b2      	b.n	800866a <_malloc_r+0x32>
 8008704:	4634      	mov	r4, r6
 8008706:	6876      	ldr	r6, [r6, #4]
 8008708:	e7b9      	b.n	800867e <_malloc_r+0x46>
 800870a:	230c      	movs	r3, #12
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	4638      	mov	r0, r7
 8008710:	f000 fd6a 	bl	80091e8 <__malloc_unlock>
 8008714:	e7a1      	b.n	800865a <_malloc_r+0x22>
 8008716:	6025      	str	r5, [r4, #0]
 8008718:	e7de      	b.n	80086d8 <_malloc_r+0xa0>
 800871a:	bf00      	nop
 800871c:	200137e0 	.word	0x200137e0

08008720 <__sfputc_r>:
 8008720:	6893      	ldr	r3, [r2, #8]
 8008722:	3b01      	subs	r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	b410      	push	{r4}
 8008728:	6093      	str	r3, [r2, #8]
 800872a:	da08      	bge.n	800873e <__sfputc_r+0x1e>
 800872c:	6994      	ldr	r4, [r2, #24]
 800872e:	42a3      	cmp	r3, r4
 8008730:	db01      	blt.n	8008736 <__sfputc_r+0x16>
 8008732:	290a      	cmp	r1, #10
 8008734:	d103      	bne.n	800873e <__sfputc_r+0x1e>
 8008736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800873a:	f000 bb33 	b.w	8008da4 <__swbuf_r>
 800873e:	6813      	ldr	r3, [r2, #0]
 8008740:	1c58      	adds	r0, r3, #1
 8008742:	6010      	str	r0, [r2, #0]
 8008744:	7019      	strb	r1, [r3, #0]
 8008746:	4608      	mov	r0, r1
 8008748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800874c:	4770      	bx	lr

0800874e <__sfputs_r>:
 800874e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008750:	4606      	mov	r6, r0
 8008752:	460f      	mov	r7, r1
 8008754:	4614      	mov	r4, r2
 8008756:	18d5      	adds	r5, r2, r3
 8008758:	42ac      	cmp	r4, r5
 800875a:	d101      	bne.n	8008760 <__sfputs_r+0x12>
 800875c:	2000      	movs	r0, #0
 800875e:	e007      	b.n	8008770 <__sfputs_r+0x22>
 8008760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008764:	463a      	mov	r2, r7
 8008766:	4630      	mov	r0, r6
 8008768:	f7ff ffda 	bl	8008720 <__sfputc_r>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d1f3      	bne.n	8008758 <__sfputs_r+0xa>
 8008770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008774 <_vfiprintf_r>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	460d      	mov	r5, r1
 800877a:	b09d      	sub	sp, #116	; 0x74
 800877c:	4614      	mov	r4, r2
 800877e:	4698      	mov	r8, r3
 8008780:	4606      	mov	r6, r0
 8008782:	b118      	cbz	r0, 800878c <_vfiprintf_r+0x18>
 8008784:	6983      	ldr	r3, [r0, #24]
 8008786:	b90b      	cbnz	r3, 800878c <_vfiprintf_r+0x18>
 8008788:	f7ff fe96 	bl	80084b8 <__sinit>
 800878c:	4b89      	ldr	r3, [pc, #548]	; (80089b4 <_vfiprintf_r+0x240>)
 800878e:	429d      	cmp	r5, r3
 8008790:	d11b      	bne.n	80087ca <_vfiprintf_r+0x56>
 8008792:	6875      	ldr	r5, [r6, #4]
 8008794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008796:	07d9      	lsls	r1, r3, #31
 8008798:	d405      	bmi.n	80087a6 <_vfiprintf_r+0x32>
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	059a      	lsls	r2, r3, #22
 800879e:	d402      	bmi.n	80087a6 <_vfiprintf_r+0x32>
 80087a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a2:	f7ff ff27 	bl	80085f4 <__retarget_lock_acquire_recursive>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	071b      	lsls	r3, r3, #28
 80087aa:	d501      	bpl.n	80087b0 <_vfiprintf_r+0x3c>
 80087ac:	692b      	ldr	r3, [r5, #16]
 80087ae:	b9eb      	cbnz	r3, 80087ec <_vfiprintf_r+0x78>
 80087b0:	4629      	mov	r1, r5
 80087b2:	4630      	mov	r0, r6
 80087b4:	f000 fb5a 	bl	8008e6c <__swsetup_r>
 80087b8:	b1c0      	cbz	r0, 80087ec <_vfiprintf_r+0x78>
 80087ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087bc:	07dc      	lsls	r4, r3, #31
 80087be:	d50e      	bpl.n	80087de <_vfiprintf_r+0x6a>
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	b01d      	add	sp, #116	; 0x74
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	4b7b      	ldr	r3, [pc, #492]	; (80089b8 <_vfiprintf_r+0x244>)
 80087cc:	429d      	cmp	r5, r3
 80087ce:	d101      	bne.n	80087d4 <_vfiprintf_r+0x60>
 80087d0:	68b5      	ldr	r5, [r6, #8]
 80087d2:	e7df      	b.n	8008794 <_vfiprintf_r+0x20>
 80087d4:	4b79      	ldr	r3, [pc, #484]	; (80089bc <_vfiprintf_r+0x248>)
 80087d6:	429d      	cmp	r5, r3
 80087d8:	bf08      	it	eq
 80087da:	68f5      	ldreq	r5, [r6, #12]
 80087dc:	e7da      	b.n	8008794 <_vfiprintf_r+0x20>
 80087de:	89ab      	ldrh	r3, [r5, #12]
 80087e0:	0598      	lsls	r0, r3, #22
 80087e2:	d4ed      	bmi.n	80087c0 <_vfiprintf_r+0x4c>
 80087e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087e6:	f7ff ff06 	bl	80085f6 <__retarget_lock_release_recursive>
 80087ea:	e7e9      	b.n	80087c0 <_vfiprintf_r+0x4c>
 80087ec:	2300      	movs	r3, #0
 80087ee:	9309      	str	r3, [sp, #36]	; 0x24
 80087f0:	2320      	movs	r3, #32
 80087f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087fa:	2330      	movs	r3, #48	; 0x30
 80087fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089c0 <_vfiprintf_r+0x24c>
 8008800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008804:	f04f 0901 	mov.w	r9, #1
 8008808:	4623      	mov	r3, r4
 800880a:	469a      	mov	sl, r3
 800880c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008810:	b10a      	cbz	r2, 8008816 <_vfiprintf_r+0xa2>
 8008812:	2a25      	cmp	r2, #37	; 0x25
 8008814:	d1f9      	bne.n	800880a <_vfiprintf_r+0x96>
 8008816:	ebba 0b04 	subs.w	fp, sl, r4
 800881a:	d00b      	beq.n	8008834 <_vfiprintf_r+0xc0>
 800881c:	465b      	mov	r3, fp
 800881e:	4622      	mov	r2, r4
 8008820:	4629      	mov	r1, r5
 8008822:	4630      	mov	r0, r6
 8008824:	f7ff ff93 	bl	800874e <__sfputs_r>
 8008828:	3001      	adds	r0, #1
 800882a:	f000 80aa 	beq.w	8008982 <_vfiprintf_r+0x20e>
 800882e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008830:	445a      	add	r2, fp
 8008832:	9209      	str	r2, [sp, #36]	; 0x24
 8008834:	f89a 3000 	ldrb.w	r3, [sl]
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80a2 	beq.w	8008982 <_vfiprintf_r+0x20e>
 800883e:	2300      	movs	r3, #0
 8008840:	f04f 32ff 	mov.w	r2, #4294967295
 8008844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008848:	f10a 0a01 	add.w	sl, sl, #1
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008854:	931a      	str	r3, [sp, #104]	; 0x68
 8008856:	4654      	mov	r4, sl
 8008858:	2205      	movs	r2, #5
 800885a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885e:	4858      	ldr	r0, [pc, #352]	; (80089c0 <_vfiprintf_r+0x24c>)
 8008860:	f7f7 fcbe 	bl	80001e0 <memchr>
 8008864:	9a04      	ldr	r2, [sp, #16]
 8008866:	b9d8      	cbnz	r0, 80088a0 <_vfiprintf_r+0x12c>
 8008868:	06d1      	lsls	r1, r2, #27
 800886a:	bf44      	itt	mi
 800886c:	2320      	movmi	r3, #32
 800886e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008872:	0713      	lsls	r3, r2, #28
 8008874:	bf44      	itt	mi
 8008876:	232b      	movmi	r3, #43	; 0x2b
 8008878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887c:	f89a 3000 	ldrb.w	r3, [sl]
 8008880:	2b2a      	cmp	r3, #42	; 0x2a
 8008882:	d015      	beq.n	80088b0 <_vfiprintf_r+0x13c>
 8008884:	9a07      	ldr	r2, [sp, #28]
 8008886:	4654      	mov	r4, sl
 8008888:	2000      	movs	r0, #0
 800888a:	f04f 0c0a 	mov.w	ip, #10
 800888e:	4621      	mov	r1, r4
 8008890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008894:	3b30      	subs	r3, #48	; 0x30
 8008896:	2b09      	cmp	r3, #9
 8008898:	d94e      	bls.n	8008938 <_vfiprintf_r+0x1c4>
 800889a:	b1b0      	cbz	r0, 80088ca <_vfiprintf_r+0x156>
 800889c:	9207      	str	r2, [sp, #28]
 800889e:	e014      	b.n	80088ca <_vfiprintf_r+0x156>
 80088a0:	eba0 0308 	sub.w	r3, r0, r8
 80088a4:	fa09 f303 	lsl.w	r3, r9, r3
 80088a8:	4313      	orrs	r3, r2
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	46a2      	mov	sl, r4
 80088ae:	e7d2      	b.n	8008856 <_vfiprintf_r+0xe2>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	1d19      	adds	r1, r3, #4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	9103      	str	r1, [sp, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bfbb      	ittet	lt
 80088bc:	425b      	neglt	r3, r3
 80088be:	f042 0202 	orrlt.w	r2, r2, #2
 80088c2:	9307      	strge	r3, [sp, #28]
 80088c4:	9307      	strlt	r3, [sp, #28]
 80088c6:	bfb8      	it	lt
 80088c8:	9204      	strlt	r2, [sp, #16]
 80088ca:	7823      	ldrb	r3, [r4, #0]
 80088cc:	2b2e      	cmp	r3, #46	; 0x2e
 80088ce:	d10c      	bne.n	80088ea <_vfiprintf_r+0x176>
 80088d0:	7863      	ldrb	r3, [r4, #1]
 80088d2:	2b2a      	cmp	r3, #42	; 0x2a
 80088d4:	d135      	bne.n	8008942 <_vfiprintf_r+0x1ce>
 80088d6:	9b03      	ldr	r3, [sp, #12]
 80088d8:	1d1a      	adds	r2, r3, #4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	9203      	str	r2, [sp, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb8      	it	lt
 80088e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80088e6:	3402      	adds	r4, #2
 80088e8:	9305      	str	r3, [sp, #20]
 80088ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089d0 <_vfiprintf_r+0x25c>
 80088ee:	7821      	ldrb	r1, [r4, #0]
 80088f0:	2203      	movs	r2, #3
 80088f2:	4650      	mov	r0, sl
 80088f4:	f7f7 fc74 	bl	80001e0 <memchr>
 80088f8:	b140      	cbz	r0, 800890c <_vfiprintf_r+0x198>
 80088fa:	2340      	movs	r3, #64	; 0x40
 80088fc:	eba0 000a 	sub.w	r0, r0, sl
 8008900:	fa03 f000 	lsl.w	r0, r3, r0
 8008904:	9b04      	ldr	r3, [sp, #16]
 8008906:	4303      	orrs	r3, r0
 8008908:	3401      	adds	r4, #1
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008910:	482c      	ldr	r0, [pc, #176]	; (80089c4 <_vfiprintf_r+0x250>)
 8008912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008916:	2206      	movs	r2, #6
 8008918:	f7f7 fc62 	bl	80001e0 <memchr>
 800891c:	2800      	cmp	r0, #0
 800891e:	d03f      	beq.n	80089a0 <_vfiprintf_r+0x22c>
 8008920:	4b29      	ldr	r3, [pc, #164]	; (80089c8 <_vfiprintf_r+0x254>)
 8008922:	bb1b      	cbnz	r3, 800896c <_vfiprintf_r+0x1f8>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	3307      	adds	r3, #7
 8008928:	f023 0307 	bic.w	r3, r3, #7
 800892c:	3308      	adds	r3, #8
 800892e:	9303      	str	r3, [sp, #12]
 8008930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008932:	443b      	add	r3, r7
 8008934:	9309      	str	r3, [sp, #36]	; 0x24
 8008936:	e767      	b.n	8008808 <_vfiprintf_r+0x94>
 8008938:	fb0c 3202 	mla	r2, ip, r2, r3
 800893c:	460c      	mov	r4, r1
 800893e:	2001      	movs	r0, #1
 8008940:	e7a5      	b.n	800888e <_vfiprintf_r+0x11a>
 8008942:	2300      	movs	r3, #0
 8008944:	3401      	adds	r4, #1
 8008946:	9305      	str	r3, [sp, #20]
 8008948:	4619      	mov	r1, r3
 800894a:	f04f 0c0a 	mov.w	ip, #10
 800894e:	4620      	mov	r0, r4
 8008950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008954:	3a30      	subs	r2, #48	; 0x30
 8008956:	2a09      	cmp	r2, #9
 8008958:	d903      	bls.n	8008962 <_vfiprintf_r+0x1ee>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0c5      	beq.n	80088ea <_vfiprintf_r+0x176>
 800895e:	9105      	str	r1, [sp, #20]
 8008960:	e7c3      	b.n	80088ea <_vfiprintf_r+0x176>
 8008962:	fb0c 2101 	mla	r1, ip, r1, r2
 8008966:	4604      	mov	r4, r0
 8008968:	2301      	movs	r3, #1
 800896a:	e7f0      	b.n	800894e <_vfiprintf_r+0x1da>
 800896c:	ab03      	add	r3, sp, #12
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	462a      	mov	r2, r5
 8008972:	4b16      	ldr	r3, [pc, #88]	; (80089cc <_vfiprintf_r+0x258>)
 8008974:	a904      	add	r1, sp, #16
 8008976:	4630      	mov	r0, r6
 8008978:	f3af 8000 	nop.w
 800897c:	4607      	mov	r7, r0
 800897e:	1c78      	adds	r0, r7, #1
 8008980:	d1d6      	bne.n	8008930 <_vfiprintf_r+0x1bc>
 8008982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008984:	07d9      	lsls	r1, r3, #31
 8008986:	d405      	bmi.n	8008994 <_vfiprintf_r+0x220>
 8008988:	89ab      	ldrh	r3, [r5, #12]
 800898a:	059a      	lsls	r2, r3, #22
 800898c:	d402      	bmi.n	8008994 <_vfiprintf_r+0x220>
 800898e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008990:	f7ff fe31 	bl	80085f6 <__retarget_lock_release_recursive>
 8008994:	89ab      	ldrh	r3, [r5, #12]
 8008996:	065b      	lsls	r3, r3, #25
 8008998:	f53f af12 	bmi.w	80087c0 <_vfiprintf_r+0x4c>
 800899c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800899e:	e711      	b.n	80087c4 <_vfiprintf_r+0x50>
 80089a0:	ab03      	add	r3, sp, #12
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	462a      	mov	r2, r5
 80089a6:	4b09      	ldr	r3, [pc, #36]	; (80089cc <_vfiprintf_r+0x258>)
 80089a8:	a904      	add	r1, sp, #16
 80089aa:	4630      	mov	r0, r6
 80089ac:	f000 f880 	bl	8008ab0 <_printf_i>
 80089b0:	e7e4      	b.n	800897c <_vfiprintf_r+0x208>
 80089b2:	bf00      	nop
 80089b4:	08009a88 	.word	0x08009a88
 80089b8:	08009aa8 	.word	0x08009aa8
 80089bc:	08009a68 	.word	0x08009a68
 80089c0:	08009ac8 	.word	0x08009ac8
 80089c4:	08009ad2 	.word	0x08009ad2
 80089c8:	00000000 	.word	0x00000000
 80089cc:	0800874f 	.word	0x0800874f
 80089d0:	08009ace 	.word	0x08009ace

080089d4 <_printf_common>:
 80089d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	4616      	mov	r6, r2
 80089da:	4699      	mov	r9, r3
 80089dc:	688a      	ldr	r2, [r1, #8]
 80089de:	690b      	ldr	r3, [r1, #16]
 80089e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089e4:	4293      	cmp	r3, r2
 80089e6:	bfb8      	it	lt
 80089e8:	4613      	movlt	r3, r2
 80089ea:	6033      	str	r3, [r6, #0]
 80089ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089f0:	4607      	mov	r7, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b10a      	cbz	r2, 80089fa <_printf_common+0x26>
 80089f6:	3301      	adds	r3, #1
 80089f8:	6033      	str	r3, [r6, #0]
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	0699      	lsls	r1, r3, #26
 80089fe:	bf42      	ittt	mi
 8008a00:	6833      	ldrmi	r3, [r6, #0]
 8008a02:	3302      	addmi	r3, #2
 8008a04:	6033      	strmi	r3, [r6, #0]
 8008a06:	6825      	ldr	r5, [r4, #0]
 8008a08:	f015 0506 	ands.w	r5, r5, #6
 8008a0c:	d106      	bne.n	8008a1c <_printf_common+0x48>
 8008a0e:	f104 0a19 	add.w	sl, r4, #25
 8008a12:	68e3      	ldr	r3, [r4, #12]
 8008a14:	6832      	ldr	r2, [r6, #0]
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	dc26      	bgt.n	8008a6a <_printf_common+0x96>
 8008a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a20:	1e13      	subs	r3, r2, #0
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	bf18      	it	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	0692      	lsls	r2, r2, #26
 8008a2a:	d42b      	bmi.n	8008a84 <_printf_common+0xb0>
 8008a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a30:	4649      	mov	r1, r9
 8008a32:	4638      	mov	r0, r7
 8008a34:	47c0      	blx	r8
 8008a36:	3001      	adds	r0, #1
 8008a38:	d01e      	beq.n	8008a78 <_printf_common+0xa4>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	68e5      	ldr	r5, [r4, #12]
 8008a3e:	6832      	ldr	r2, [r6, #0]
 8008a40:	f003 0306 	and.w	r3, r3, #6
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	bf08      	it	eq
 8008a48:	1aad      	subeq	r5, r5, r2
 8008a4a:	68a3      	ldr	r3, [r4, #8]
 8008a4c:	6922      	ldr	r2, [r4, #16]
 8008a4e:	bf0c      	ite	eq
 8008a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a54:	2500      	movne	r5, #0
 8008a56:	4293      	cmp	r3, r2
 8008a58:	bfc4      	itt	gt
 8008a5a:	1a9b      	subgt	r3, r3, r2
 8008a5c:	18ed      	addgt	r5, r5, r3
 8008a5e:	2600      	movs	r6, #0
 8008a60:	341a      	adds	r4, #26
 8008a62:	42b5      	cmp	r5, r6
 8008a64:	d11a      	bne.n	8008a9c <_printf_common+0xc8>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e008      	b.n	8008a7c <_printf_common+0xa8>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	4649      	mov	r1, r9
 8008a70:	4638      	mov	r0, r7
 8008a72:	47c0      	blx	r8
 8008a74:	3001      	adds	r0, #1
 8008a76:	d103      	bne.n	8008a80 <_printf_common+0xac>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a80:	3501      	adds	r5, #1
 8008a82:	e7c6      	b.n	8008a12 <_printf_common+0x3e>
 8008a84:	18e1      	adds	r1, r4, r3
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	2030      	movs	r0, #48	; 0x30
 8008a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a8e:	4422      	add	r2, r4
 8008a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a98:	3302      	adds	r3, #2
 8008a9a:	e7c7      	b.n	8008a2c <_printf_common+0x58>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	47c0      	blx	r8
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d0e6      	beq.n	8008a78 <_printf_common+0xa4>
 8008aaa:	3601      	adds	r6, #1
 8008aac:	e7d9      	b.n	8008a62 <_printf_common+0x8e>
	...

08008ab0 <_printf_i>:
 8008ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab4:	7e0f      	ldrb	r7, [r1, #24]
 8008ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ab8:	2f78      	cmp	r7, #120	; 0x78
 8008aba:	4691      	mov	r9, r2
 8008abc:	4680      	mov	r8, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	469a      	mov	sl, r3
 8008ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ac6:	d807      	bhi.n	8008ad8 <_printf_i+0x28>
 8008ac8:	2f62      	cmp	r7, #98	; 0x62
 8008aca:	d80a      	bhi.n	8008ae2 <_printf_i+0x32>
 8008acc:	2f00      	cmp	r7, #0
 8008ace:	f000 80d8 	beq.w	8008c82 <_printf_i+0x1d2>
 8008ad2:	2f58      	cmp	r7, #88	; 0x58
 8008ad4:	f000 80a3 	beq.w	8008c1e <_printf_i+0x16e>
 8008ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ae0:	e03a      	b.n	8008b58 <_printf_i+0xa8>
 8008ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ae6:	2b15      	cmp	r3, #21
 8008ae8:	d8f6      	bhi.n	8008ad8 <_printf_i+0x28>
 8008aea:	a101      	add	r1, pc, #4	; (adr r1, 8008af0 <_printf_i+0x40>)
 8008aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008af0:	08008b49 	.word	0x08008b49
 8008af4:	08008b5d 	.word	0x08008b5d
 8008af8:	08008ad9 	.word	0x08008ad9
 8008afc:	08008ad9 	.word	0x08008ad9
 8008b00:	08008ad9 	.word	0x08008ad9
 8008b04:	08008ad9 	.word	0x08008ad9
 8008b08:	08008b5d 	.word	0x08008b5d
 8008b0c:	08008ad9 	.word	0x08008ad9
 8008b10:	08008ad9 	.word	0x08008ad9
 8008b14:	08008ad9 	.word	0x08008ad9
 8008b18:	08008ad9 	.word	0x08008ad9
 8008b1c:	08008c69 	.word	0x08008c69
 8008b20:	08008b8d 	.word	0x08008b8d
 8008b24:	08008c4b 	.word	0x08008c4b
 8008b28:	08008ad9 	.word	0x08008ad9
 8008b2c:	08008ad9 	.word	0x08008ad9
 8008b30:	08008c8b 	.word	0x08008c8b
 8008b34:	08008ad9 	.word	0x08008ad9
 8008b38:	08008b8d 	.word	0x08008b8d
 8008b3c:	08008ad9 	.word	0x08008ad9
 8008b40:	08008ad9 	.word	0x08008ad9
 8008b44:	08008c53 	.word	0x08008c53
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	1d1a      	adds	r2, r3, #4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	602a      	str	r2, [r5, #0]
 8008b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e0a3      	b.n	8008ca4 <_printf_i+0x1f4>
 8008b5c:	6820      	ldr	r0, [r4, #0]
 8008b5e:	6829      	ldr	r1, [r5, #0]
 8008b60:	0606      	lsls	r6, r0, #24
 8008b62:	f101 0304 	add.w	r3, r1, #4
 8008b66:	d50a      	bpl.n	8008b7e <_printf_i+0xce>
 8008b68:	680e      	ldr	r6, [r1, #0]
 8008b6a:	602b      	str	r3, [r5, #0]
 8008b6c:	2e00      	cmp	r6, #0
 8008b6e:	da03      	bge.n	8008b78 <_printf_i+0xc8>
 8008b70:	232d      	movs	r3, #45	; 0x2d
 8008b72:	4276      	negs	r6, r6
 8008b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b78:	485e      	ldr	r0, [pc, #376]	; (8008cf4 <_printf_i+0x244>)
 8008b7a:	230a      	movs	r3, #10
 8008b7c:	e019      	b.n	8008bb2 <_printf_i+0x102>
 8008b7e:	680e      	ldr	r6, [r1, #0]
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b86:	bf18      	it	ne
 8008b88:	b236      	sxthne	r6, r6
 8008b8a:	e7ef      	b.n	8008b6c <_printf_i+0xbc>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	6820      	ldr	r0, [r4, #0]
 8008b90:	1d19      	adds	r1, r3, #4
 8008b92:	6029      	str	r1, [r5, #0]
 8008b94:	0601      	lsls	r1, r0, #24
 8008b96:	d501      	bpl.n	8008b9c <_printf_i+0xec>
 8008b98:	681e      	ldr	r6, [r3, #0]
 8008b9a:	e002      	b.n	8008ba2 <_printf_i+0xf2>
 8008b9c:	0646      	lsls	r6, r0, #25
 8008b9e:	d5fb      	bpl.n	8008b98 <_printf_i+0xe8>
 8008ba0:	881e      	ldrh	r6, [r3, #0]
 8008ba2:	4854      	ldr	r0, [pc, #336]	; (8008cf4 <_printf_i+0x244>)
 8008ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ba6:	bf0c      	ite	eq
 8008ba8:	2308      	moveq	r3, #8
 8008baa:	230a      	movne	r3, #10
 8008bac:	2100      	movs	r1, #0
 8008bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bb2:	6865      	ldr	r5, [r4, #4]
 8008bb4:	60a5      	str	r5, [r4, #8]
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	bfa2      	ittt	ge
 8008bba:	6821      	ldrge	r1, [r4, #0]
 8008bbc:	f021 0104 	bicge.w	r1, r1, #4
 8008bc0:	6021      	strge	r1, [r4, #0]
 8008bc2:	b90e      	cbnz	r6, 8008bc8 <_printf_i+0x118>
 8008bc4:	2d00      	cmp	r5, #0
 8008bc6:	d04d      	beq.n	8008c64 <_printf_i+0x1b4>
 8008bc8:	4615      	mov	r5, r2
 8008bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bce:	fb03 6711 	mls	r7, r3, r1, r6
 8008bd2:	5dc7      	ldrb	r7, [r0, r7]
 8008bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bd8:	4637      	mov	r7, r6
 8008bda:	42bb      	cmp	r3, r7
 8008bdc:	460e      	mov	r6, r1
 8008bde:	d9f4      	bls.n	8008bca <_printf_i+0x11a>
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d10b      	bne.n	8008bfc <_printf_i+0x14c>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	07de      	lsls	r6, r3, #31
 8008be8:	d508      	bpl.n	8008bfc <_printf_i+0x14c>
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	6861      	ldr	r1, [r4, #4]
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	bfde      	ittt	le
 8008bf2:	2330      	movle	r3, #48	; 0x30
 8008bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bfc:	1b52      	subs	r2, r2, r5
 8008bfe:	6122      	str	r2, [r4, #16]
 8008c00:	f8cd a000 	str.w	sl, [sp]
 8008c04:	464b      	mov	r3, r9
 8008c06:	aa03      	add	r2, sp, #12
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	f7ff fee2 	bl	80089d4 <_printf_common>
 8008c10:	3001      	adds	r0, #1
 8008c12:	d14c      	bne.n	8008cae <_printf_i+0x1fe>
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	b004      	add	sp, #16
 8008c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1e:	4835      	ldr	r0, [pc, #212]	; (8008cf4 <_printf_i+0x244>)
 8008c20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c24:	6829      	ldr	r1, [r5, #0]
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c2c:	6029      	str	r1, [r5, #0]
 8008c2e:	061d      	lsls	r5, r3, #24
 8008c30:	d514      	bpl.n	8008c5c <_printf_i+0x1ac>
 8008c32:	07df      	lsls	r7, r3, #31
 8008c34:	bf44      	itt	mi
 8008c36:	f043 0320 	orrmi.w	r3, r3, #32
 8008c3a:	6023      	strmi	r3, [r4, #0]
 8008c3c:	b91e      	cbnz	r6, 8008c46 <_printf_i+0x196>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	f023 0320 	bic.w	r3, r3, #32
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	2310      	movs	r3, #16
 8008c48:	e7b0      	b.n	8008bac <_printf_i+0xfc>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	f043 0320 	orr.w	r3, r3, #32
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	2378      	movs	r3, #120	; 0x78
 8008c54:	4828      	ldr	r0, [pc, #160]	; (8008cf8 <_printf_i+0x248>)
 8008c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c5a:	e7e3      	b.n	8008c24 <_printf_i+0x174>
 8008c5c:	0659      	lsls	r1, r3, #25
 8008c5e:	bf48      	it	mi
 8008c60:	b2b6      	uxthmi	r6, r6
 8008c62:	e7e6      	b.n	8008c32 <_printf_i+0x182>
 8008c64:	4615      	mov	r5, r2
 8008c66:	e7bb      	b.n	8008be0 <_printf_i+0x130>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	6826      	ldr	r6, [r4, #0]
 8008c6c:	6961      	ldr	r1, [r4, #20]
 8008c6e:	1d18      	adds	r0, r3, #4
 8008c70:	6028      	str	r0, [r5, #0]
 8008c72:	0635      	lsls	r5, r6, #24
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	d501      	bpl.n	8008c7c <_printf_i+0x1cc>
 8008c78:	6019      	str	r1, [r3, #0]
 8008c7a:	e002      	b.n	8008c82 <_printf_i+0x1d2>
 8008c7c:	0670      	lsls	r0, r6, #25
 8008c7e:	d5fb      	bpl.n	8008c78 <_printf_i+0x1c8>
 8008c80:	8019      	strh	r1, [r3, #0]
 8008c82:	2300      	movs	r3, #0
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	4615      	mov	r5, r2
 8008c88:	e7ba      	b.n	8008c00 <_printf_i+0x150>
 8008c8a:	682b      	ldr	r3, [r5, #0]
 8008c8c:	1d1a      	adds	r2, r3, #4
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	681d      	ldr	r5, [r3, #0]
 8008c92:	6862      	ldr	r2, [r4, #4]
 8008c94:	2100      	movs	r1, #0
 8008c96:	4628      	mov	r0, r5
 8008c98:	f7f7 faa2 	bl	80001e0 <memchr>
 8008c9c:	b108      	cbz	r0, 8008ca2 <_printf_i+0x1f2>
 8008c9e:	1b40      	subs	r0, r0, r5
 8008ca0:	6060      	str	r0, [r4, #4]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cac:	e7a8      	b.n	8008c00 <_printf_i+0x150>
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	47d0      	blx	sl
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d0ab      	beq.n	8008c14 <_printf_i+0x164>
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	079b      	lsls	r3, r3, #30
 8008cc0:	d413      	bmi.n	8008cea <_printf_i+0x23a>
 8008cc2:	68e0      	ldr	r0, [r4, #12]
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	4298      	cmp	r0, r3
 8008cc8:	bfb8      	it	lt
 8008cca:	4618      	movlt	r0, r3
 8008ccc:	e7a4      	b.n	8008c18 <_printf_i+0x168>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	47d0      	blx	sl
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d09b      	beq.n	8008c14 <_printf_i+0x164>
 8008cdc:	3501      	adds	r5, #1
 8008cde:	68e3      	ldr	r3, [r4, #12]
 8008ce0:	9903      	ldr	r1, [sp, #12]
 8008ce2:	1a5b      	subs	r3, r3, r1
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	dcf2      	bgt.n	8008cce <_printf_i+0x21e>
 8008ce8:	e7eb      	b.n	8008cc2 <_printf_i+0x212>
 8008cea:	2500      	movs	r5, #0
 8008cec:	f104 0619 	add.w	r6, r4, #25
 8008cf0:	e7f5      	b.n	8008cde <_printf_i+0x22e>
 8008cf2:	bf00      	nop
 8008cf4:	08009ad9 	.word	0x08009ad9
 8008cf8:	08009aea 	.word	0x08009aea

08008cfc <_sbrk_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d06      	ldr	r5, [pc, #24]	; (8008d18 <_sbrk_r+0x1c>)
 8008d00:	2300      	movs	r3, #0
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7f8 f992 	bl	8001030 <_sbrk>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_sbrk_r+0x1a>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_sbrk_r+0x1a>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	200137e8 	.word	0x200137e8

08008d1c <__sread>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	460c      	mov	r4, r1
 8008d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d24:	f000 fab2 	bl	800928c <_read_r>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	bfab      	itete	ge
 8008d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d30:	181b      	addge	r3, r3, r0
 8008d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d36:	bfac      	ite	ge
 8008d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d3a:	81a3      	strhlt	r3, [r4, #12]
 8008d3c:	bd10      	pop	{r4, pc}

08008d3e <__swrite>:
 8008d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d42:	461f      	mov	r7, r3
 8008d44:	898b      	ldrh	r3, [r1, #12]
 8008d46:	05db      	lsls	r3, r3, #23
 8008d48:	4605      	mov	r5, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	4616      	mov	r6, r2
 8008d4e:	d505      	bpl.n	8008d5c <__swrite+0x1e>
 8008d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d54:	2302      	movs	r3, #2
 8008d56:	2200      	movs	r2, #0
 8008d58:	f000 f9c8 	bl	80090ec <_lseek_r>
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d66:	81a3      	strh	r3, [r4, #12]
 8008d68:	4632      	mov	r2, r6
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d72:	f000 b869 	b.w	8008e48 <_write_r>

08008d76 <__sseek>:
 8008d76:	b510      	push	{r4, lr}
 8008d78:	460c      	mov	r4, r1
 8008d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7e:	f000 f9b5 	bl	80090ec <_lseek_r>
 8008d82:	1c43      	adds	r3, r0, #1
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	bf15      	itete	ne
 8008d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d92:	81a3      	strheq	r3, [r4, #12]
 8008d94:	bf18      	it	ne
 8008d96:	81a3      	strhne	r3, [r4, #12]
 8008d98:	bd10      	pop	{r4, pc}

08008d9a <__sclose>:
 8008d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9e:	f000 b8d3 	b.w	8008f48 <_close_r>
	...

08008da4 <__swbuf_r>:
 8008da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da6:	460e      	mov	r6, r1
 8008da8:	4614      	mov	r4, r2
 8008daa:	4605      	mov	r5, r0
 8008dac:	b118      	cbz	r0, 8008db6 <__swbuf_r+0x12>
 8008dae:	6983      	ldr	r3, [r0, #24]
 8008db0:	b90b      	cbnz	r3, 8008db6 <__swbuf_r+0x12>
 8008db2:	f7ff fb81 	bl	80084b8 <__sinit>
 8008db6:	4b21      	ldr	r3, [pc, #132]	; (8008e3c <__swbuf_r+0x98>)
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d12b      	bne.n	8008e14 <__swbuf_r+0x70>
 8008dbc:	686c      	ldr	r4, [r5, #4]
 8008dbe:	69a3      	ldr	r3, [r4, #24]
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	071a      	lsls	r2, r3, #28
 8008dc6:	d52f      	bpl.n	8008e28 <__swbuf_r+0x84>
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	b36b      	cbz	r3, 8008e28 <__swbuf_r+0x84>
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	6820      	ldr	r0, [r4, #0]
 8008dd0:	1ac0      	subs	r0, r0, r3
 8008dd2:	6963      	ldr	r3, [r4, #20]
 8008dd4:	b2f6      	uxtb	r6, r6
 8008dd6:	4283      	cmp	r3, r0
 8008dd8:	4637      	mov	r7, r6
 8008dda:	dc04      	bgt.n	8008de6 <__swbuf_r+0x42>
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4628      	mov	r0, r5
 8008de0:	f000 f948 	bl	8009074 <_fflush_r>
 8008de4:	bb30      	cbnz	r0, 8008e34 <__swbuf_r+0x90>
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	60a3      	str	r3, [r4, #8]
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	6022      	str	r2, [r4, #0]
 8008df2:	701e      	strb	r6, [r3, #0]
 8008df4:	6963      	ldr	r3, [r4, #20]
 8008df6:	3001      	adds	r0, #1
 8008df8:	4283      	cmp	r3, r0
 8008dfa:	d004      	beq.n	8008e06 <__swbuf_r+0x62>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	07db      	lsls	r3, r3, #31
 8008e00:	d506      	bpl.n	8008e10 <__swbuf_r+0x6c>
 8008e02:	2e0a      	cmp	r6, #10
 8008e04:	d104      	bne.n	8008e10 <__swbuf_r+0x6c>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f000 f933 	bl	8009074 <_fflush_r>
 8008e0e:	b988      	cbnz	r0, 8008e34 <__swbuf_r+0x90>
 8008e10:	4638      	mov	r0, r7
 8008e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e14:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <__swbuf_r+0x9c>)
 8008e16:	429c      	cmp	r4, r3
 8008e18:	d101      	bne.n	8008e1e <__swbuf_r+0x7a>
 8008e1a:	68ac      	ldr	r4, [r5, #8]
 8008e1c:	e7cf      	b.n	8008dbe <__swbuf_r+0x1a>
 8008e1e:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <__swbuf_r+0xa0>)
 8008e20:	429c      	cmp	r4, r3
 8008e22:	bf08      	it	eq
 8008e24:	68ec      	ldreq	r4, [r5, #12]
 8008e26:	e7ca      	b.n	8008dbe <__swbuf_r+0x1a>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f81e 	bl	8008e6c <__swsetup_r>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d0cb      	beq.n	8008dcc <__swbuf_r+0x28>
 8008e34:	f04f 37ff 	mov.w	r7, #4294967295
 8008e38:	e7ea      	b.n	8008e10 <__swbuf_r+0x6c>
 8008e3a:	bf00      	nop
 8008e3c:	08009a88 	.word	0x08009a88
 8008e40:	08009aa8 	.word	0x08009aa8
 8008e44:	08009a68 	.word	0x08009a68

08008e48 <_write_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	; (8008e68 <_write_r+0x20>)
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	4608      	mov	r0, r1
 8008e50:	4611      	mov	r1, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	602a      	str	r2, [r5, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f7f8 f899 	bl	8000f8e <_write>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_write_r+0x1e>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_write_r+0x1e>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	200137e8 	.word	0x200137e8

08008e6c <__swsetup_r>:
 8008e6c:	4b32      	ldr	r3, [pc, #200]	; (8008f38 <__swsetup_r+0xcc>)
 8008e6e:	b570      	push	{r4, r5, r6, lr}
 8008e70:	681d      	ldr	r5, [r3, #0]
 8008e72:	4606      	mov	r6, r0
 8008e74:	460c      	mov	r4, r1
 8008e76:	b125      	cbz	r5, 8008e82 <__swsetup_r+0x16>
 8008e78:	69ab      	ldr	r3, [r5, #24]
 8008e7a:	b913      	cbnz	r3, 8008e82 <__swsetup_r+0x16>
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f7ff fb1b 	bl	80084b8 <__sinit>
 8008e82:	4b2e      	ldr	r3, [pc, #184]	; (8008f3c <__swsetup_r+0xd0>)
 8008e84:	429c      	cmp	r4, r3
 8008e86:	d10f      	bne.n	8008ea8 <__swsetup_r+0x3c>
 8008e88:	686c      	ldr	r4, [r5, #4]
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e90:	0719      	lsls	r1, r3, #28
 8008e92:	d42c      	bmi.n	8008eee <__swsetup_r+0x82>
 8008e94:	06dd      	lsls	r5, r3, #27
 8008e96:	d411      	bmi.n	8008ebc <__swsetup_r+0x50>
 8008e98:	2309      	movs	r3, #9
 8008e9a:	6033      	str	r3, [r6, #0]
 8008e9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	e03e      	b.n	8008f26 <__swsetup_r+0xba>
 8008ea8:	4b25      	ldr	r3, [pc, #148]	; (8008f40 <__swsetup_r+0xd4>)
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d101      	bne.n	8008eb2 <__swsetup_r+0x46>
 8008eae:	68ac      	ldr	r4, [r5, #8]
 8008eb0:	e7eb      	b.n	8008e8a <__swsetup_r+0x1e>
 8008eb2:	4b24      	ldr	r3, [pc, #144]	; (8008f44 <__swsetup_r+0xd8>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	bf08      	it	eq
 8008eb8:	68ec      	ldreq	r4, [r5, #12]
 8008eba:	e7e6      	b.n	8008e8a <__swsetup_r+0x1e>
 8008ebc:	0758      	lsls	r0, r3, #29
 8008ebe:	d512      	bpl.n	8008ee6 <__swsetup_r+0x7a>
 8008ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ec2:	b141      	cbz	r1, 8008ed6 <__swsetup_r+0x6a>
 8008ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	d002      	beq.n	8008ed2 <__swsetup_r+0x66>
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f000 f991 	bl	80091f4 <_free_r>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008edc:	81a3      	strh	r3, [r4, #12]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6063      	str	r3, [r4, #4]
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	f043 0308 	orr.w	r3, r3, #8
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	b94b      	cbnz	r3, 8008f06 <__swsetup_r+0x9a>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008efc:	d003      	beq.n	8008f06 <__swsetup_r+0x9a>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4630      	mov	r0, r6
 8008f02:	f000 f92b 	bl	800915c <__smakebuf_r>
 8008f06:	89a0      	ldrh	r0, [r4, #12]
 8008f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f0c:	f010 0301 	ands.w	r3, r0, #1
 8008f10:	d00a      	beq.n	8008f28 <__swsetup_r+0xbc>
 8008f12:	2300      	movs	r3, #0
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	6963      	ldr	r3, [r4, #20]
 8008f18:	425b      	negs	r3, r3
 8008f1a:	61a3      	str	r3, [r4, #24]
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	b943      	cbnz	r3, 8008f32 <__swsetup_r+0xc6>
 8008f20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f24:	d1ba      	bne.n	8008e9c <__swsetup_r+0x30>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	0781      	lsls	r1, r0, #30
 8008f2a:	bf58      	it	pl
 8008f2c:	6963      	ldrpl	r3, [r4, #20]
 8008f2e:	60a3      	str	r3, [r4, #8]
 8008f30:	e7f4      	b.n	8008f1c <__swsetup_r+0xb0>
 8008f32:	2000      	movs	r0, #0
 8008f34:	e7f7      	b.n	8008f26 <__swsetup_r+0xba>
 8008f36:	bf00      	nop
 8008f38:	20000024 	.word	0x20000024
 8008f3c:	08009a88 	.word	0x08009a88
 8008f40:	08009aa8 	.word	0x08009aa8
 8008f44:	08009a68 	.word	0x08009a68

08008f48 <_close_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4d06      	ldr	r5, [pc, #24]	; (8008f64 <_close_r+0x1c>)
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	f7f8 f837 	bl	8000fc6 <_close>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_close_r+0x1a>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_close_r+0x1a>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	200137e8 	.word	0x200137e8

08008f68 <__sflush_r>:
 8008f68:	898a      	ldrh	r2, [r1, #12]
 8008f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6e:	4605      	mov	r5, r0
 8008f70:	0710      	lsls	r0, r2, #28
 8008f72:	460c      	mov	r4, r1
 8008f74:	d458      	bmi.n	8009028 <__sflush_r+0xc0>
 8008f76:	684b      	ldr	r3, [r1, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	dc05      	bgt.n	8008f88 <__sflush_r+0x20>
 8008f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dc02      	bgt.n	8008f88 <__sflush_r+0x20>
 8008f82:	2000      	movs	r0, #0
 8008f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8a:	2e00      	cmp	r6, #0
 8008f8c:	d0f9      	beq.n	8008f82 <__sflush_r+0x1a>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f94:	682f      	ldr	r7, [r5, #0]
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	d032      	beq.n	8009000 <__sflush_r+0x98>
 8008f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	075a      	lsls	r2, r3, #29
 8008fa0:	d505      	bpl.n	8008fae <__sflush_r+0x46>
 8008fa2:	6863      	ldr	r3, [r4, #4]
 8008fa4:	1ac0      	subs	r0, r0, r3
 8008fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fa8:	b10b      	cbz	r3, 8008fae <__sflush_r+0x46>
 8008faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fac:	1ac0      	subs	r0, r0, r3
 8008fae:	2300      	movs	r3, #0
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fb4:	6a21      	ldr	r1, [r4, #32]
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b0      	blx	r6
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	d106      	bne.n	8008fce <__sflush_r+0x66>
 8008fc0:	6829      	ldr	r1, [r5, #0]
 8008fc2:	291d      	cmp	r1, #29
 8008fc4:	d82c      	bhi.n	8009020 <__sflush_r+0xb8>
 8008fc6:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <__sflush_r+0x108>)
 8008fc8:	40ca      	lsrs	r2, r1
 8008fca:	07d6      	lsls	r6, r2, #31
 8008fcc:	d528      	bpl.n	8009020 <__sflush_r+0xb8>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	6062      	str	r2, [r4, #4]
 8008fd2:	04d9      	lsls	r1, r3, #19
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	6022      	str	r2, [r4, #0]
 8008fd8:	d504      	bpl.n	8008fe4 <__sflush_r+0x7c>
 8008fda:	1c42      	adds	r2, r0, #1
 8008fdc:	d101      	bne.n	8008fe2 <__sflush_r+0x7a>
 8008fde:	682b      	ldr	r3, [r5, #0]
 8008fe0:	b903      	cbnz	r3, 8008fe4 <__sflush_r+0x7c>
 8008fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8008fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fe6:	602f      	str	r7, [r5, #0]
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	d0ca      	beq.n	8008f82 <__sflush_r+0x1a>
 8008fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	d002      	beq.n	8008ffa <__sflush_r+0x92>
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f000 f8fd 	bl	80091f4 <_free_r>
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8008ffe:	e7c1      	b.n	8008f84 <__sflush_r+0x1c>
 8009000:	6a21      	ldr	r1, [r4, #32]
 8009002:	2301      	movs	r3, #1
 8009004:	4628      	mov	r0, r5
 8009006:	47b0      	blx	r6
 8009008:	1c41      	adds	r1, r0, #1
 800900a:	d1c7      	bne.n	8008f9c <__sflush_r+0x34>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0c4      	beq.n	8008f9c <__sflush_r+0x34>
 8009012:	2b1d      	cmp	r3, #29
 8009014:	d001      	beq.n	800901a <__sflush_r+0xb2>
 8009016:	2b16      	cmp	r3, #22
 8009018:	d101      	bne.n	800901e <__sflush_r+0xb6>
 800901a:	602f      	str	r7, [r5, #0]
 800901c:	e7b1      	b.n	8008f82 <__sflush_r+0x1a>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009024:	81a3      	strh	r3, [r4, #12]
 8009026:	e7ad      	b.n	8008f84 <__sflush_r+0x1c>
 8009028:	690f      	ldr	r7, [r1, #16]
 800902a:	2f00      	cmp	r7, #0
 800902c:	d0a9      	beq.n	8008f82 <__sflush_r+0x1a>
 800902e:	0793      	lsls	r3, r2, #30
 8009030:	680e      	ldr	r6, [r1, #0]
 8009032:	bf08      	it	eq
 8009034:	694b      	ldreq	r3, [r1, #20]
 8009036:	600f      	str	r7, [r1, #0]
 8009038:	bf18      	it	ne
 800903a:	2300      	movne	r3, #0
 800903c:	eba6 0807 	sub.w	r8, r6, r7
 8009040:	608b      	str	r3, [r1, #8]
 8009042:	f1b8 0f00 	cmp.w	r8, #0
 8009046:	dd9c      	ble.n	8008f82 <__sflush_r+0x1a>
 8009048:	6a21      	ldr	r1, [r4, #32]
 800904a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800904c:	4643      	mov	r3, r8
 800904e:	463a      	mov	r2, r7
 8009050:	4628      	mov	r0, r5
 8009052:	47b0      	blx	r6
 8009054:	2800      	cmp	r0, #0
 8009056:	dc06      	bgt.n	8009066 <__sflush_r+0xfe>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e78e      	b.n	8008f84 <__sflush_r+0x1c>
 8009066:	4407      	add	r7, r0
 8009068:	eba8 0800 	sub.w	r8, r8, r0
 800906c:	e7e9      	b.n	8009042 <__sflush_r+0xda>
 800906e:	bf00      	nop
 8009070:	20400001 	.word	0x20400001

08009074 <_fflush_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	b913      	cbnz	r3, 8009084 <_fflush_r+0x10>
 800907e:	2500      	movs	r5, #0
 8009080:	4628      	mov	r0, r5
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	b118      	cbz	r0, 800908e <_fflush_r+0x1a>
 8009086:	6983      	ldr	r3, [r0, #24]
 8009088:	b90b      	cbnz	r3, 800908e <_fflush_r+0x1a>
 800908a:	f7ff fa15 	bl	80084b8 <__sinit>
 800908e:	4b14      	ldr	r3, [pc, #80]	; (80090e0 <_fflush_r+0x6c>)
 8009090:	429c      	cmp	r4, r3
 8009092:	d11b      	bne.n	80090cc <_fflush_r+0x58>
 8009094:	686c      	ldr	r4, [r5, #4]
 8009096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0ef      	beq.n	800907e <_fflush_r+0xa>
 800909e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090a0:	07d0      	lsls	r0, r2, #31
 80090a2:	d404      	bmi.n	80090ae <_fflush_r+0x3a>
 80090a4:	0599      	lsls	r1, r3, #22
 80090a6:	d402      	bmi.n	80090ae <_fflush_r+0x3a>
 80090a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090aa:	f7ff faa3 	bl	80085f4 <__retarget_lock_acquire_recursive>
 80090ae:	4628      	mov	r0, r5
 80090b0:	4621      	mov	r1, r4
 80090b2:	f7ff ff59 	bl	8008f68 <__sflush_r>
 80090b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b8:	07da      	lsls	r2, r3, #31
 80090ba:	4605      	mov	r5, r0
 80090bc:	d4e0      	bmi.n	8009080 <_fflush_r+0xc>
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	059b      	lsls	r3, r3, #22
 80090c2:	d4dd      	bmi.n	8009080 <_fflush_r+0xc>
 80090c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c6:	f7ff fa96 	bl	80085f6 <__retarget_lock_release_recursive>
 80090ca:	e7d9      	b.n	8009080 <_fflush_r+0xc>
 80090cc:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <_fflush_r+0x70>)
 80090ce:	429c      	cmp	r4, r3
 80090d0:	d101      	bne.n	80090d6 <_fflush_r+0x62>
 80090d2:	68ac      	ldr	r4, [r5, #8]
 80090d4:	e7df      	b.n	8009096 <_fflush_r+0x22>
 80090d6:	4b04      	ldr	r3, [pc, #16]	; (80090e8 <_fflush_r+0x74>)
 80090d8:	429c      	cmp	r4, r3
 80090da:	bf08      	it	eq
 80090dc:	68ec      	ldreq	r4, [r5, #12]
 80090de:	e7da      	b.n	8009096 <_fflush_r+0x22>
 80090e0:	08009a88 	.word	0x08009a88
 80090e4:	08009aa8 	.word	0x08009aa8
 80090e8:	08009a68 	.word	0x08009a68

080090ec <_lseek_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	; (800910c <_lseek_r+0x20>)
 80090f0:	4604      	mov	r4, r0
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	2200      	movs	r2, #0
 80090f8:	602a      	str	r2, [r5, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f7f7 ff8a 	bl	8001014 <_lseek>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_lseek_r+0x1e>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_lseek_r+0x1e>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	200137e8 	.word	0x200137e8

08009110 <__swhatbuf_r>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	460e      	mov	r6, r1
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	2900      	cmp	r1, #0
 800911a:	b096      	sub	sp, #88	; 0x58
 800911c:	4614      	mov	r4, r2
 800911e:	461d      	mov	r5, r3
 8009120:	da08      	bge.n	8009134 <__swhatbuf_r+0x24>
 8009122:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	602a      	str	r2, [r5, #0]
 800912a:	061a      	lsls	r2, r3, #24
 800912c:	d410      	bmi.n	8009150 <__swhatbuf_r+0x40>
 800912e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009132:	e00e      	b.n	8009152 <__swhatbuf_r+0x42>
 8009134:	466a      	mov	r2, sp
 8009136:	f000 f8bb 	bl	80092b0 <_fstat_r>
 800913a:	2800      	cmp	r0, #0
 800913c:	dbf1      	blt.n	8009122 <__swhatbuf_r+0x12>
 800913e:	9a01      	ldr	r2, [sp, #4]
 8009140:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009144:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009148:	425a      	negs	r2, r3
 800914a:	415a      	adcs	r2, r3
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	e7ee      	b.n	800912e <__swhatbuf_r+0x1e>
 8009150:	2340      	movs	r3, #64	; 0x40
 8009152:	2000      	movs	r0, #0
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	b016      	add	sp, #88	; 0x58
 8009158:	bd70      	pop	{r4, r5, r6, pc}
	...

0800915c <__smakebuf_r>:
 800915c:	898b      	ldrh	r3, [r1, #12]
 800915e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009160:	079d      	lsls	r5, r3, #30
 8009162:	4606      	mov	r6, r0
 8009164:	460c      	mov	r4, r1
 8009166:	d507      	bpl.n	8009178 <__smakebuf_r+0x1c>
 8009168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	2301      	movs	r3, #1
 8009172:	6163      	str	r3, [r4, #20]
 8009174:	b002      	add	sp, #8
 8009176:	bd70      	pop	{r4, r5, r6, pc}
 8009178:	ab01      	add	r3, sp, #4
 800917a:	466a      	mov	r2, sp
 800917c:	f7ff ffc8 	bl	8009110 <__swhatbuf_r>
 8009180:	9900      	ldr	r1, [sp, #0]
 8009182:	4605      	mov	r5, r0
 8009184:	4630      	mov	r0, r6
 8009186:	f7ff fa57 	bl	8008638 <_malloc_r>
 800918a:	b948      	cbnz	r0, 80091a0 <__smakebuf_r+0x44>
 800918c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009190:	059a      	lsls	r2, r3, #22
 8009192:	d4ef      	bmi.n	8009174 <__smakebuf_r+0x18>
 8009194:	f023 0303 	bic.w	r3, r3, #3
 8009198:	f043 0302 	orr.w	r3, r3, #2
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	e7e3      	b.n	8009168 <__smakebuf_r+0xc>
 80091a0:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <__smakebuf_r+0x7c>)
 80091a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	6020      	str	r0, [r4, #0]
 80091a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	9b00      	ldr	r3, [sp, #0]
 80091b0:	6163      	str	r3, [r4, #20]
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	6120      	str	r0, [r4, #16]
 80091b6:	b15b      	cbz	r3, 80091d0 <__smakebuf_r+0x74>
 80091b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 f889 	bl	80092d4 <_isatty_r>
 80091c2:	b128      	cbz	r0, 80091d0 <__smakebuf_r+0x74>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	f043 0301 	orr.w	r3, r3, #1
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	89a0      	ldrh	r0, [r4, #12]
 80091d2:	4305      	orrs	r5, r0
 80091d4:	81a5      	strh	r5, [r4, #12]
 80091d6:	e7cd      	b.n	8009174 <__smakebuf_r+0x18>
 80091d8:	08008451 	.word	0x08008451

080091dc <__malloc_lock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__malloc_lock+0x8>)
 80091de:	f7ff ba09 	b.w	80085f4 <__retarget_lock_acquire_recursive>
 80091e2:	bf00      	nop
 80091e4:	200137dc 	.word	0x200137dc

080091e8 <__malloc_unlock>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__malloc_unlock+0x8>)
 80091ea:	f7ff ba04 	b.w	80085f6 <__retarget_lock_release_recursive>
 80091ee:	bf00      	nop
 80091f0:	200137dc 	.word	0x200137dc

080091f4 <_free_r>:
 80091f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091f6:	2900      	cmp	r1, #0
 80091f8:	d044      	beq.n	8009284 <_free_r+0x90>
 80091fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091fe:	9001      	str	r0, [sp, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f1a1 0404 	sub.w	r4, r1, #4
 8009206:	bfb8      	it	lt
 8009208:	18e4      	addlt	r4, r4, r3
 800920a:	f7ff ffe7 	bl	80091dc <__malloc_lock>
 800920e:	4a1e      	ldr	r2, [pc, #120]	; (8009288 <_free_r+0x94>)
 8009210:	9801      	ldr	r0, [sp, #4]
 8009212:	6813      	ldr	r3, [r2, #0]
 8009214:	b933      	cbnz	r3, 8009224 <_free_r+0x30>
 8009216:	6063      	str	r3, [r4, #4]
 8009218:	6014      	str	r4, [r2, #0]
 800921a:	b003      	add	sp, #12
 800921c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009220:	f7ff bfe2 	b.w	80091e8 <__malloc_unlock>
 8009224:	42a3      	cmp	r3, r4
 8009226:	d908      	bls.n	800923a <_free_r+0x46>
 8009228:	6825      	ldr	r5, [r4, #0]
 800922a:	1961      	adds	r1, r4, r5
 800922c:	428b      	cmp	r3, r1
 800922e:	bf01      	itttt	eq
 8009230:	6819      	ldreq	r1, [r3, #0]
 8009232:	685b      	ldreq	r3, [r3, #4]
 8009234:	1949      	addeq	r1, r1, r5
 8009236:	6021      	streq	r1, [r4, #0]
 8009238:	e7ed      	b.n	8009216 <_free_r+0x22>
 800923a:	461a      	mov	r2, r3
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	b10b      	cbz	r3, 8009244 <_free_r+0x50>
 8009240:	42a3      	cmp	r3, r4
 8009242:	d9fa      	bls.n	800923a <_free_r+0x46>
 8009244:	6811      	ldr	r1, [r2, #0]
 8009246:	1855      	adds	r5, r2, r1
 8009248:	42a5      	cmp	r5, r4
 800924a:	d10b      	bne.n	8009264 <_free_r+0x70>
 800924c:	6824      	ldr	r4, [r4, #0]
 800924e:	4421      	add	r1, r4
 8009250:	1854      	adds	r4, r2, r1
 8009252:	42a3      	cmp	r3, r4
 8009254:	6011      	str	r1, [r2, #0]
 8009256:	d1e0      	bne.n	800921a <_free_r+0x26>
 8009258:	681c      	ldr	r4, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	6053      	str	r3, [r2, #4]
 800925e:	4421      	add	r1, r4
 8009260:	6011      	str	r1, [r2, #0]
 8009262:	e7da      	b.n	800921a <_free_r+0x26>
 8009264:	d902      	bls.n	800926c <_free_r+0x78>
 8009266:	230c      	movs	r3, #12
 8009268:	6003      	str	r3, [r0, #0]
 800926a:	e7d6      	b.n	800921a <_free_r+0x26>
 800926c:	6825      	ldr	r5, [r4, #0]
 800926e:	1961      	adds	r1, r4, r5
 8009270:	428b      	cmp	r3, r1
 8009272:	bf04      	itt	eq
 8009274:	6819      	ldreq	r1, [r3, #0]
 8009276:	685b      	ldreq	r3, [r3, #4]
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	bf04      	itt	eq
 800927c:	1949      	addeq	r1, r1, r5
 800927e:	6021      	streq	r1, [r4, #0]
 8009280:	6054      	str	r4, [r2, #4]
 8009282:	e7ca      	b.n	800921a <_free_r+0x26>
 8009284:	b003      	add	sp, #12
 8009286:	bd30      	pop	{r4, r5, pc}
 8009288:	200137e0 	.word	0x200137e0

0800928c <_read_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d07      	ldr	r5, [pc, #28]	; (80092ac <_read_r+0x20>)
 8009290:	4604      	mov	r4, r0
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	2200      	movs	r2, #0
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f7f7 fe5a 	bl	8000f54 <_read>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_read_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_read_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	200137e8 	.word	0x200137e8

080092b0 <_fstat_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d07      	ldr	r5, [pc, #28]	; (80092d0 <_fstat_r+0x20>)
 80092b4:	2300      	movs	r3, #0
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	f7f7 fe8e 	bl	8000fde <_fstat>
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	d102      	bne.n	80092cc <_fstat_r+0x1c>
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	b103      	cbz	r3, 80092cc <_fstat_r+0x1c>
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	bd38      	pop	{r3, r4, r5, pc}
 80092ce:	bf00      	nop
 80092d0:	200137e8 	.word	0x200137e8

080092d4 <_isatty_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d06      	ldr	r5, [pc, #24]	; (80092f0 <_isatty_r+0x1c>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	602b      	str	r3, [r5, #0]
 80092e0:	f7f7 fe8d 	bl	8000ffe <_isatty>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_isatty_r+0x1a>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_isatty_r+0x1a>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	200137e8 	.word	0x200137e8

080092f4 <_init>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr

08009300 <_fini>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr
